; ModuleID = '<stdin>'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%ident_t = type { i32, i32, i32, i32, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.timeval = type { i64, i64 }
%struct.timezone = type { i32, i32 }

@.gomp_critical_user_.reduction.var = common global [8 x i32] zeroinitializer
@0 = private unnamed_addr constant %ident_t { i32 0, i32 2, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.6, i32 0, i32 0) }, align 8
@.str.6 = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@main.dum = private unnamed_addr constant [3 x double] [double 1.000000e+00, double 1.000000e+00, double 1.000000e+00], align 16
@.str = private unnamed_addr constant [11 x i8] c"timer.flag\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"%15.0lf\00", align 1
@.str.3 = private unnamed_addr constant [58 x i8] c"\0A\0A NAS Parallel Benchmarks (NPB3.3-OMP-C) - EP Benchmark\0A\00", align 1
@.str.4 = private unnamed_addr constant [44 x i8] c"\0A Number of random numbers generated: %15s\0A\00", align 1
@.str.5 = private unnamed_addr constant [46 x i8] c"\0A Number of available threads:          %13d\0A\00", align 1
@1 = private unnamed_addr constant [20 x i8] c";ep.c;main;130;11;;\00"
@x = internal thread_local global [131072 x double] zeroinitializer, align 16
@2 = private unnamed_addr constant [20 x i8] c";ep.c;main;138;11;;\00"
@q = internal global [10 x double] zeroinitializer, align 16
@3 = private unnamed_addr constant [20 x i8] c";ep.c;main;177;11;;\00"
@qq = internal thread_local global [10 x double] zeroinitializer, align 16
@4 = private unnamed_addr constant [20 x i8] c";ep.c;main;183;13;;\00"
@5 = private unnamed_addr constant [20 x i8] c";ep.c;main;183;46;;\00"
@.str.9 = private unnamed_addr constant [25 x i8] c"\0AEP Benchmark Results:\0A\0A\00", align 1
@.str.10 = private unnamed_addr constant [19 x i8] c"CPU Time =%10.4lf\0A\00", align 1
@.str.11 = private unnamed_addr constant [11 x i8] c"N = 2^%5d\0A\00", align 1
@.str.12 = private unnamed_addr constant [30 x i8] c"No. Gaussian Pairs = %15.0lf\0A\00", align 1
@.str.13 = private unnamed_addr constant [26 x i8] c"Sums = %25.15lE %25.15lE\0A\00", align 1
@.str.14 = private unnamed_addr constant [10 x i8] c"Counts: \0A\00", align 1
@.str.15 = private unnamed_addr constant [12 x i8] c"%3d%15.0lf\0A\00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c"EP\00", align 1
@.str.17 = private unnamed_addr constant [25 x i8] c"Random numbers generated\00", align 1
@.str.18 = private unnamed_addr constant [6 x i8] c"3.3.1\00", align 1
@.str.19 = private unnamed_addr constant [12 x i8] c"03 May 2017\00", align 1
@.str.20 = private unnamed_addr constant [7 x i8] c"(none)\00", align 1
@.str.21 = private unnamed_addr constant [47 x i8] c"-I ../common -I /media/norouzi/90cafd61-f91...\00", align 1
@.str.22 = private unnamed_addr constant [7 x i8] c"randdp\00", align 1
@.str.23 = private unnamed_addr constant [34 x i8] c"\0ATotal time:     %9.3lf (%6.2lf)\0A\00", align 1
@.str.24 = private unnamed_addr constant [33 x i8] c"Gaussian pairs: %9.3lf (%6.2lf)\0A\00", align 1
@.str.25 = private unnamed_addr constant [33 x i8] c"Random numbers: %9.3lf (%6.2lf)\0A\00", align 1
@6 = private unnamed_addr constant %ident_t { i32 0, i32 2, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i32 0, i32 0) }, align 8
@.str.7 = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@7 = private unnamed_addr constant [38 x i8] c";print_results.c;print_results;25;9;;\00"
@8 = private unnamed_addr constant [39 x i8] c";print_results.c;print_results;27;13;;\00"
@.str.1.10 = private unnamed_addr constant [28 x i8] c"\0A\0A %s Benchmark Completed.\0A\00", align 1
@.str.2.11 = private unnamed_addr constant [37 x i8] c" Class           =             %12c\0A\00", align 1
@.str.3.12 = private unnamed_addr constant [8 x i8] c"%15.0lf\00", align 1
@.str.4.13 = private unnamed_addr constant [34 x i8] c" Size            =          %15s\0A\00", align 1
@.str.5.14 = private unnamed_addr constant [37 x i8] c" Size            =             %12d\0A\00", align 1
@.str.6.15 = private unnamed_addr constant [42 x i8] c" Size            =           %4dx%4dx%4d\0A\00", align 1
@.str.7.16 = private unnamed_addr constant [37 x i8] c" Iterations      =             %12d\0A\00", align 1
@.str.8 = private unnamed_addr constant [40 x i8] c" Time in seconds =             %12.2lf\0A\00", align 1
@.str.9.17 = private unnamed_addr constant [37 x i8] c" Total threads   =             %12d\0A\00", align 1
@.str.10.18 = private unnamed_addr constant [37 x i8] c" Avail threads   =             %12d\0A\00", align 1
@.str.11.19 = private unnamed_addr constant [54 x i8] c" Warning: Threads used differ from threads available\0A\00", align 1
@.str.12.20 = private unnamed_addr constant [37 x i8] c" Mop/s total     =          %15.2lf\0A\00", align 1
@.str.13.21 = private unnamed_addr constant [37 x i8] c" Mop/s/thread    =          %15.2lf\0A\00", align 1
@.str.14.22 = private unnamed_addr constant [25 x i8] c" Operation type  = %24s\0A\00", align 1
@.str.15.23 = private unnamed_addr constant [37 x i8] c" Verification    =             %12s\0A\00", align 1
@.str.16.24 = private unnamed_addr constant [11 x i8] c"SUCCESSFUL\00", align 1
@.str.17.25 = private unnamed_addr constant [13 x i8] c"UNSUCCESSFUL\00", align 1
@.str.18.26 = private unnamed_addr constant [37 x i8] c" Version         =             %12s\0A\00", align 1
@.str.19.27 = private unnamed_addr constant [37 x i8] c" Compile date    =             %12s\0A\00", align 1
@.str.20.28 = private unnamed_addr constant [42 x i8] c"\0A Compile options:\0A    CC           = %s\0A\00", align 1
@.str.21.29 = private unnamed_addr constant [23 x i8] c"    CLINK        = %s\0A\00", align 1
@.str.22.30 = private unnamed_addr constant [23 x i8] c"    C_LIB        = %s\0A\00", align 1
@.str.23.31 = private unnamed_addr constant [23 x i8] c"    C_INC        = %s\0A\00", align 1
@.str.24.32 = private unnamed_addr constant [23 x i8] c"    CFLAGS       = %s\0A\00", align 1
@.str.25.33 = private unnamed_addr constant [23 x i8] c"    CLINKFLAGS   = %s\0A\00", align 1
@.str.26 = private unnamed_addr constant [23 x i8] c"    RAND         = %s\0A\00", align 1
@.str.27 = private unnamed_addr constant [195 x i8] c"\0A--------------------------------------\0A Please send all errors/feedbacks to:\0A Center for Manycore Programming\0A cmp@aces.snu.ac.kr\0A http://aces.snu.ac.kr\0A--------------------------------------\0A\0A\00", align 1
@elapsed = internal thread_local global [64 x double] zeroinitializer, align 16
@count = internal thread_local global [64 x i32] zeroinitializer, align 16
@start = internal thread_local global [64 x double] zeroinitializer, align 16
@wtime_.sec = internal global i32 -1, align 4
@.str.28 = private unnamed_addr constant [10 x i8] c"argc.addr\00"
@.str.29 = private unnamed_addr constant [10 x i8] c"argv.addr\00"
@.str.30 = private unnamed_addr constant [3 x i8] c"fp\00"
@.str.31 = private unnamed_addr constant [15 x i8] c"timers_enabled\00"
@.str.32 = private unnamed_addr constant [15 x i8] c"timers_enabled\00"
@.str.33 = private unnamed_addr constant [3 x i8] c"fp\00"
@.str.34 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.35 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.36 = private unnamed_addr constant [5 x i8] c"size\00"
@.str.37 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.38 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.39 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.40 = private unnamed_addr constant [5 x i8] c"size\00"
@.str.41 = private unnamed_addr constant [9 x i8] c"verified\00"
@.str.42 = private unnamed_addr constant [3 x i8] c"np\00"
@.str.43 = private unnamed_addr constant [4 x i8] c"dum\00"
@.str.44 = private unnamed_addr constant [4 x i8] c"dum\00"
@.str.45 = private unnamed_addr constant [4 x i8] c"dum\00"
@.str.46 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.47 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.48 = private unnamed_addr constant [118 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/EP/ep.c: main :: line No: 74\00"
@.str.49 = private unnamed_addr constant [5 x i8] c"Mops\00"
@.str.50 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.51 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.52 = private unnamed_addr constant [118 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/EP/ep.c: main :: line No: 74\00"
@.str.53 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.54 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.55 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.56 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.57 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.58 = private unnamed_addr constant [3 x i8] c"t2\00"
@.str.59 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.60 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.61 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.62 = private unnamed_addr constant [3 x i8] c"an\00"
@.str.63 = private unnamed_addr constant [3 x i8] c"tt\00"
@.str.64 = private unnamed_addr constant [3 x i8] c"gc\00"
@.str.65 = private unnamed_addr constant [3 x i8] c"sx\00"
@.str.66 = private unnamed_addr constant [3 x i8] c"sy\00"
@.str.67 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.68 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.69 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.70 = private unnamed_addr constant [2 x i8] c"q\00"
@.str.71 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.72 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.73 = private unnamed_addr constant [9 x i8] c"k_offset\00"
@.str.74 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.75 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.76 = private unnamed_addr constant [118 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/EP/ep.c: main :: line No: 74\00"
@.str.77 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.78 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.79 = private unnamed_addr constant [3 x i8] c"gc\00"
@.str.80 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.81 = private unnamed_addr constant [2 x i8] c"q\00"
@.str.82 = private unnamed_addr constant [3 x i8] c"gc\00"
@.str.83 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.84 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.85 = private unnamed_addr constant [3 x i8] c"tm\00"
@.str.86 = private unnamed_addr constant [4 x i8] c"nit\00"
@.str.87 = private unnamed_addr constant [9 x i8] c"verified\00"
@.str.88 = private unnamed_addr constant [16 x i8] c"sx_verify_value\00"
@.str.89 = private unnamed_addr constant [16 x i8] c"sy_verify_value\00"
@.str.90 = private unnamed_addr constant [9 x i8] c"verified\00"
@.str.91 = private unnamed_addr constant [3 x i8] c"sx\00"
@.str.92 = private unnamed_addr constant [16 x i8] c"sx_verify_value\00"
@.str.93 = private unnamed_addr constant [16 x i8] c"sx_verify_value\00"
@.str.94 = private unnamed_addr constant [7 x i8] c"sx_err\00"
@.str.95 = private unnamed_addr constant [3 x i8] c"sy\00"
@.str.96 = private unnamed_addr constant [16 x i8] c"sy_verify_value\00"
@.str.97 = private unnamed_addr constant [16 x i8] c"sy_verify_value\00"
@.str.98 = private unnamed_addr constant [7 x i8] c"sy_err\00"
@.str.99 = private unnamed_addr constant [7 x i8] c"sx_err\00"
@.str.100 = private unnamed_addr constant [7 x i8] c"sy_err\00"
@.str.101 = private unnamed_addr constant [9 x i8] c"verified\00"
@.str.102 = private unnamed_addr constant [3 x i8] c"tm\00"
@.str.103 = private unnamed_addr constant [5 x i8] c"Mops\00"
@.str.104 = private unnamed_addr constant [3 x i8] c"tm\00"
@.str.105 = private unnamed_addr constant [3 x i8] c"gc\00"
@.str.106 = private unnamed_addr constant [3 x i8] c"sx\00"
@.str.107 = private unnamed_addr constant [3 x i8] c"sy\00"
@.str.108 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.109 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.110 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.111 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.112 = private unnamed_addr constant [2 x i8] c"q\00"
@.str.113 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.114 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.115 = private unnamed_addr constant [4 x i8] c"nit\00"
@.str.116 = private unnamed_addr constant [3 x i8] c"tm\00"
@.str.117 = private unnamed_addr constant [5 x i8] c"Mops\00"
@.str.118 = private unnamed_addr constant [9 x i8] c"verified\00"
@.str.119 = private unnamed_addr constant [15 x i8] c"timers_enabled\00"
@.str.120 = private unnamed_addr constant [3 x i8] c"tm\00"
@.str.121 = private unnamed_addr constant [3 x i8] c"tm\00"
@.str.122 = private unnamed_addr constant [3 x i8] c"tt\00"
@.str.123 = private unnamed_addr constant [3 x i8] c"tt\00"
@.str.124 = private unnamed_addr constant [3 x i8] c"tt\00"
@.str.125 = private unnamed_addr constant [3 x i8] c"tm\00"
@.str.126 = private unnamed_addr constant [3 x i8] c"tt\00"
@.str.127 = private unnamed_addr constant [3 x i8] c"tt\00"
@.str.128 = private unnamed_addr constant [3 x i8] c"tt\00"
@.str.129 = private unnamed_addr constant [3 x i8] c"tm\00"
@.str.130 = private unnamed_addr constant [3 x i8] c"tt\00"
@.str.131 = private unnamed_addr constant [3 x i8] c"tt\00"
@.str.132 = private unnamed_addr constant [3 x i8] c"tt\00"
@.str.133 = private unnamed_addr constant [3 x i8] c"tm\00"
@.str.134 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.135 = private unnamed_addr constant [129 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/EP/ep.c: .omp_outlined. :: line No: 132\00"
@.str.136 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.137 = private unnamed_addr constant [17 x i8] c".bound_tid..addr\00"
@.str.138 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.139 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.140 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.141 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.142 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.143 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.144 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.145 = private unnamed_addr constant [131 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/EP/ep.c: .omp_outlined..7 :: line No: 139\00"
@.str.146 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.147 = private unnamed_addr constant [17 x i8] c".bound_tid..addr\00"
@.str.148 = private unnamed_addr constant [20 x i8] c"timers_enabled.addr\00"
@.str.149 = private unnamed_addr constant [20 x i8] c"timers_enabled.addr\00"
@.str.150 = private unnamed_addr constant [20 x i8] c"timers_enabled.addr\00"
@.str.151 = private unnamed_addr constant [20 x i8] c"timers_enabled.addr\00"
@.str.152 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.153 = private unnamed_addr constant [131 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/EP/ep.c: .omp_outlined..8 :: line No: 178\00"
@.str.154 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.155 = private unnamed_addr constant [17 x i8] c".bound_tid..addr\00"
@.str.156 = private unnamed_addr constant [8 x i8] c"sx.addr\00"
@.str.157 = private unnamed_addr constant [8 x i8] c"sy.addr\00"
@.str.158 = private unnamed_addr constant [8 x i8] c"np.addr\00"
@.str.159 = private unnamed_addr constant [14 x i8] c"k_offset.addr\00"
@.str.160 = private unnamed_addr constant [8 x i8] c"an.addr\00"
@.str.161 = private unnamed_addr constant [20 x i8] c"timers_enabled.addr\00"
@.str.162 = private unnamed_addr constant [8 x i8] c"sx.addr\00"
@.str.163 = private unnamed_addr constant [8 x i8] c"sy.addr\00"
@.str.164 = private unnamed_addr constant [8 x i8] c"np.addr\00"
@.str.165 = private unnamed_addr constant [14 x i8] c"k_offset.addr\00"
@.str.166 = private unnamed_addr constant [8 x i8] c"an.addr\00"
@.str.167 = private unnamed_addr constant [20 x i8] c"timers_enabled.addr\00"
@.str.168 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.169 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.170 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.171 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.172 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.173 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.174 = private unnamed_addr constant [8 x i8] c"np.addr\00"
@.str.175 = private unnamed_addr constant [20 x i8] c".omp.last.iteration\00"
@.str.176 = private unnamed_addr constant [3 x i8] c"k2\00"
@.str.177 = private unnamed_addr constant [8 x i8] c"np.addr\00"
@.str.178 = private unnamed_addr constant [8 x i8] c".omp.lb\00"
@.str.179 = private unnamed_addr constant [20 x i8] c".omp.last.iteration\00"
@.str.180 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.181 = private unnamed_addr constant [12 x i8] c".omp.stride\00"
@.str.182 = private unnamed_addr constant [13 x i8] c".omp.is_last\00"
@.str.183 = private unnamed_addr constant [4 x i8] c"sx4\00"
@.str.184 = private unnamed_addr constant [4 x i8] c"sy5\00"
@.str.185 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.186 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.187 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.188 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.189 = private unnamed_addr constant [131 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/EP/ep.c: .omp_outlined..8 :: line No: 178\00"
@.str.190 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.191 = private unnamed_addr constant [20 x i8] c".omp.last.iteration\00"
@.str.192 = private unnamed_addr constant [20 x i8] c".omp.last.iteration\00"
@.str.193 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.194 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.195 = private unnamed_addr constant [8 x i8] c".omp.lb\00"
@.str.196 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.197 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.198 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.199 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.200 = private unnamed_addr constant [3 x i8] c"k6\00"
@.str.201 = private unnamed_addr constant [14 x i8] c"k_offset.addr\00"
@.str.202 = private unnamed_addr constant [3 x i8] c"k6\00"
@.str.203 = private unnamed_addr constant [3 x i8] c"kk\00"
@.str.204 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.205 = private unnamed_addr constant [8 x i8] c"an.addr\00"
@.str.206 = private unnamed_addr constant [3 x i8] c"t2\00"
@.str.207 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.208 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.209 = private unnamed_addr constant [3 x i8] c"kk\00"
@.str.210 = private unnamed_addr constant [3 x i8] c"ik\00"
@.str.211 = private unnamed_addr constant [3 x i8] c"ik\00"
@.str.212 = private unnamed_addr constant [3 x i8] c"kk\00"
@.str.213 = private unnamed_addr constant [3 x i8] c"t2\00"
@.str.214 = private unnamed_addr constant [3 x i8] c"t3\00"
@.str.215 = private unnamed_addr constant [3 x i8] c"ik\00"
@.str.216 = private unnamed_addr constant [3 x i8] c"t2\00"
@.str.217 = private unnamed_addr constant [3 x i8] c"t3\00"
@.str.218 = private unnamed_addr constant [3 x i8] c"ik\00"
@.str.219 = private unnamed_addr constant [3 x i8] c"kk\00"
@.str.220 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.221 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.222 = private unnamed_addr constant [20 x i8] c"timers_enabled.addr\00"
@.str.223 = private unnamed_addr constant [20 x i8] c"timers_enabled.addr\00"
@.str.224 = private unnamed_addr constant [20 x i8] c"timers_enabled.addr\00"
@.str.225 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.226 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.227 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.228 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.229 = private unnamed_addr constant [3 x i8] c"x1\00"
@.str.230 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.231 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.232 = private unnamed_addr constant [3 x i8] c"x2\00"
@.str.233 = private unnamed_addr constant [3 x i8] c"x1\00"
@.str.234 = private unnamed_addr constant [3 x i8] c"x1\00"
@.str.235 = private unnamed_addr constant [3 x i8] c"x2\00"
@.str.236 = private unnamed_addr constant [3 x i8] c"x2\00"
@.str.237 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.238 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.239 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.240 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.241 = private unnamed_addr constant [3 x i8] c"t2\00"
@.str.242 = private unnamed_addr constant [3 x i8] c"x1\00"
@.str.243 = private unnamed_addr constant [3 x i8] c"t2\00"
@.str.244 = private unnamed_addr constant [3 x i8] c"t3\00"
@.str.245 = private unnamed_addr constant [3 x i8] c"x2\00"
@.str.246 = private unnamed_addr constant [3 x i8] c"t2\00"
@.str.247 = private unnamed_addr constant [3 x i8] c"t4\00"
@.str.248 = private unnamed_addr constant [3 x i8] c"t3\00"
@.str.249 = private unnamed_addr constant [3 x i8] c"t4\00"
@.str.250 = private unnamed_addr constant [3 x i8] c"t3\00"
@.str.251 = private unnamed_addr constant [3 x i8] c"t4\00"
@.str.252 = private unnamed_addr constant [2 x i8] c"l\00"
@.str.253 = private unnamed_addr constant [2 x i8] c"l\00"
@.str.254 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.255 = private unnamed_addr constant [2 x i8] c"l\00"
@.str.256 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.257 = private unnamed_addr constant [4 x i8] c"sx4\00"
@.str.258 = private unnamed_addr constant [3 x i8] c"t3\00"
@.str.259 = private unnamed_addr constant [4 x i8] c"sx4\00"
@.str.260 = private unnamed_addr constant [4 x i8] c"sy5\00"
@.str.261 = private unnamed_addr constant [3 x i8] c"t4\00"
@.str.262 = private unnamed_addr constant [4 x i8] c"sy5\00"
@.str.263 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.264 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.265 = private unnamed_addr constant [20 x i8] c"timers_enabled.addr\00"
@.str.266 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.267 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.268 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.269 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.270 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.271 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.272 = private unnamed_addr constant [131 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/EP/ep.c: .omp_outlined..8 :: line No: 178\00"
@.str.273 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.274 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.275 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.276 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.277 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.278 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.279 = private unnamed_addr constant [131 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/EP/ep.c: .omp_outlined..8 :: line No: 178\00"
@.str.280 = private unnamed_addr constant [8 x i8] c"sx.addr\00"
@.str.281 = private unnamed_addr constant [4 x i8] c"sx4\00"
@.str.282 = private unnamed_addr constant [8 x i8] c"sx.addr\00"
@.str.283 = private unnamed_addr constant [8 x i8] c"sy.addr\00"
@.str.284 = private unnamed_addr constant [4 x i8] c"sy5\00"
@.str.285 = private unnamed_addr constant [8 x i8] c"sy.addr\00"
@.str.286 = private unnamed_addr constant [4 x i8] c"sx4\00"
@.str.287 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.288 = private unnamed_addr constant [4 x i8] c"tmp\00"
@.str.289 = private unnamed_addr constant [4 x i8] c"tmp\00"
@.str.290 = private unnamed_addr constant [4 x i8] c"sx4\00"
@.str.291 = private unnamed_addr constant [12 x i8] c"atomic-temp\00"
@.str.292 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.293 = private unnamed_addr constant [4 x i8] c"sy5\00"
@.str.294 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.295 = private unnamed_addr constant [6 x i8] c"tmp87\00"
@.str.296 = private unnamed_addr constant [6 x i8] c"tmp87\00"
@.str.297 = private unnamed_addr constant [4 x i8] c"sy5\00"
@.str.298 = private unnamed_addr constant [14 x i8] c"atomic-temp86\00"
@.str.299 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.300 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.301 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.302 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.303 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.304 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.305 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.306 = private unnamed_addr constant [15 x i8] c"atomic-temp100\00"
@.str.307 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.308 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.309 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.310 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.311 = private unnamed_addr constant [144 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/EP/ep.c: .omp.reduction.reduction_func :: line No: 183\00"
@.str.312 = private unnamed_addr constant [6 x i8] c".addr\00"
@.str.313 = private unnamed_addr constant [7 x i8] c".addr1\00"
@.str.314 = private unnamed_addr constant [6 x i8] c".addr\00"
@.str.315 = private unnamed_addr constant [7 x i8] c".addr1\00"
@.str.316 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.317 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.318 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.319 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.320 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.321 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.322 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.323 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.324 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.325 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.326 = private unnamed_addr constant [10 x i8] c"name.addr\00"
@.str.327 = private unnamed_addr constant [11 x i8] c"class.addr\00"
@.str.328 = private unnamed_addr constant [8 x i8] c"n1.addr\00"
@.str.329 = private unnamed_addr constant [8 x i8] c"n2.addr\00"
@.str.330 = private unnamed_addr constant [8 x i8] c"n3.addr\00"
@.str.331 = private unnamed_addr constant [11 x i8] c"niter.addr\00"
@.str.332 = private unnamed_addr constant [7 x i8] c"t.addr\00"
@.str.333 = private unnamed_addr constant [10 x i8] c"mops.addr\00"
@.str.334 = private unnamed_addr constant [12 x i8] c"optype.addr\00"
@.str.335 = private unnamed_addr constant [14 x i8] c"verified.addr\00"
@.str.336 = private unnamed_addr constant [16 x i8] c"npbversion.addr\00"
@.str.337 = private unnamed_addr constant [17 x i8] c"compiletime.addr\00"
@.str.338 = private unnamed_addr constant [9 x i8] c"cs1.addr\00"
@.str.339 = private unnamed_addr constant [9 x i8] c"cs2.addr\00"
@.str.340 = private unnamed_addr constant [9 x i8] c"cs3.addr\00"
@.str.341 = private unnamed_addr constant [9 x i8] c"cs4.addr\00"
@.str.342 = private unnamed_addr constant [9 x i8] c"cs5.addr\00"
@.str.343 = private unnamed_addr constant [9 x i8] c"cs6.addr\00"
@.str.344 = private unnamed_addr constant [9 x i8] c"cs7.addr\00"
@.str.345 = private unnamed_addr constant [12 x i8] c"max_threads\00"
@.str.346 = private unnamed_addr constant [12 x i8] c"num_threads\00"
@.str.347 = private unnamed_addr constant [12 x i8] c"max_threads\00"
@.str.348 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.349 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.350 = private unnamed_addr constant [142 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common/print_results.c: print_results :: line No: 10\00"
@.str.351 = private unnamed_addr constant [10 x i8] c"name.addr\00"
@.str.352 = private unnamed_addr constant [11 x i8] c"class.addr\00"
@.str.353 = private unnamed_addr constant [8 x i8] c"n2.addr\00"
@.str.354 = private unnamed_addr constant [8 x i8] c"n3.addr\00"
@.str.355 = private unnamed_addr constant [10 x i8] c"name.addr\00"
@.str.356 = private unnamed_addr constant [10 x i8] c"name.addr\00"
@.str.357 = private unnamed_addr constant [10 x i8] c"name.addr\00"
@.str.358 = private unnamed_addr constant [10 x i8] c"name.addr\00"
@.str.359 = private unnamed_addr constant [8 x i8] c"n1.addr\00"
@.str.360 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.361 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.362 = private unnamed_addr constant [5 x i8] c"size\00"
@.str.363 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.364 = private unnamed_addr constant [5 x i8] c"size\00"
@.str.365 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.366 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.367 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.368 = private unnamed_addr constant [5 x i8] c"size\00"
@.str.369 = private unnamed_addr constant [8 x i8] c"n1.addr\00"
@.str.370 = private unnamed_addr constant [8 x i8] c"n1.addr\00"
@.str.371 = private unnamed_addr constant [8 x i8] c"n2.addr\00"
@.str.372 = private unnamed_addr constant [8 x i8] c"n3.addr\00"
@.str.373 = private unnamed_addr constant [11 x i8] c"niter.addr\00"
@.str.374 = private unnamed_addr constant [7 x i8] c"t.addr\00"
@.str.375 = private unnamed_addr constant [12 x i8] c"num_threads\00"
@.str.376 = private unnamed_addr constant [12 x i8] c"max_threads\00"
@.str.377 = private unnamed_addr constant [12 x i8] c"num_threads\00"
@.str.378 = private unnamed_addr constant [12 x i8] c"max_threads\00"
@.str.379 = private unnamed_addr constant [10 x i8] c"mops.addr\00"
@.str.380 = private unnamed_addr constant [10 x i8] c"mops.addr\00"
@.str.381 = private unnamed_addr constant [12 x i8] c"num_threads\00"
@.str.382 = private unnamed_addr constant [12 x i8] c"optype.addr\00"
@.str.383 = private unnamed_addr constant [14 x i8] c"verified.addr\00"
@.str.384 = private unnamed_addr constant [16 x i8] c"npbversion.addr\00"
@.str.385 = private unnamed_addr constant [17 x i8] c"compiletime.addr\00"
@.str.386 = private unnamed_addr constant [9 x i8] c"cs1.addr\00"
@.str.387 = private unnamed_addr constant [9 x i8] c"cs2.addr\00"
@.str.388 = private unnamed_addr constant [9 x i8] c"cs3.addr\00"
@.str.389 = private unnamed_addr constant [9 x i8] c"cs4.addr\00"
@.str.390 = private unnamed_addr constant [9 x i8] c"cs5.addr\00"
@.str.391 = private unnamed_addr constant [9 x i8] c"cs6.addr\00"
@.str.392 = private unnamed_addr constant [9 x i8] c"cs7.addr\00"
@.str.393 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.394 = private unnamed_addr constant [145 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common/print_results.c: .omp_outlined..9 :: line No: 26\00"
@.str.395 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.396 = private unnamed_addr constant [17 x i8] c".bound_tid..addr\00"
@.str.397 = private unnamed_addr constant [17 x i8] c"num_threads.addr\00"
@.str.398 = private unnamed_addr constant [17 x i8] c"num_threads.addr\00"
@.str.399 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.400 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.401 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.402 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.403 = private unnamed_addr constant [145 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common/print_results.c: .omp_outlined..9 :: line No: 26\00"
@.str.404 = private unnamed_addr constant [17 x i8] c"num_threads.addr\00"
@.str.405 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.406 = private unnamed_addr constant [7 x i8] c"a.addr\00"
@.str.407 = private unnamed_addr constant [4 x i8] c"r23\00"
@.str.408 = private unnamed_addr constant [4 x i8] c"r46\00"
@.str.409 = private unnamed_addr constant [4 x i8] c"t23\00"
@.str.410 = private unnamed_addr constant [4 x i8] c"t46\00"
@.str.411 = private unnamed_addr constant [7 x i8] c"a.addr\00"
@.str.412 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.413 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.414 = private unnamed_addr constant [3 x i8] c"a1\00"
@.str.415 = private unnamed_addr constant [7 x i8] c"a.addr\00"
@.str.416 = private unnamed_addr constant [3 x i8] c"a1\00"
@.str.417 = private unnamed_addr constant [3 x i8] c"a2\00"
@.str.418 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.419 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.420 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.421 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.422 = private unnamed_addr constant [3 x i8] c"x1\00"
@.str.423 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.424 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.425 = private unnamed_addr constant [3 x i8] c"x1\00"
@.str.426 = private unnamed_addr constant [3 x i8] c"x2\00"
@.str.427 = private unnamed_addr constant [3 x i8] c"a1\00"
@.str.428 = private unnamed_addr constant [3 x i8] c"x2\00"
@.str.429 = private unnamed_addr constant [3 x i8] c"a2\00"
@.str.430 = private unnamed_addr constant [3 x i8] c"x1\00"
@.str.431 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.432 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.433 = private unnamed_addr constant [3 x i8] c"t2\00"
@.str.434 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.435 = private unnamed_addr constant [3 x i8] c"t2\00"
@.str.436 = private unnamed_addr constant [2 x i8] c"z\00"
@.str.437 = private unnamed_addr constant [2 x i8] c"z\00"
@.str.438 = private unnamed_addr constant [3 x i8] c"a2\00"
@.str.439 = private unnamed_addr constant [3 x i8] c"x2\00"
@.str.440 = private unnamed_addr constant [3 x i8] c"t3\00"
@.str.441 = private unnamed_addr constant [3 x i8] c"t3\00"
@.str.442 = private unnamed_addr constant [3 x i8] c"t4\00"
@.str.443 = private unnamed_addr constant [3 x i8] c"t3\00"
@.str.444 = private unnamed_addr constant [3 x i8] c"t4\00"
@.str.445 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.446 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.447 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.448 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.449 = private unnamed_addr constant [2 x i8] c"r\00"
@.str.450 = private unnamed_addr constant [2 x i8] c"r\00"
@.str.451 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.452 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.453 = private unnamed_addr constant [7 x i8] c"a.addr\00"
@.str.454 = private unnamed_addr constant [7 x i8] c"y.addr\00"
@.str.455 = private unnamed_addr constant [4 x i8] c"r23\00"
@.str.456 = private unnamed_addr constant [4 x i8] c"r46\00"
@.str.457 = private unnamed_addr constant [4 x i8] c"t23\00"
@.str.458 = private unnamed_addr constant [4 x i8] c"t46\00"
@.str.459 = private unnamed_addr constant [7 x i8] c"a.addr\00"
@.str.460 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.461 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.462 = private unnamed_addr constant [3 x i8] c"a1\00"
@.str.463 = private unnamed_addr constant [7 x i8] c"a.addr\00"
@.str.464 = private unnamed_addr constant [3 x i8] c"a1\00"
@.str.465 = private unnamed_addr constant [3 x i8] c"a2\00"
@.str.466 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.467 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.468 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.469 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.470 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.471 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.472 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.473 = private unnamed_addr constant [3 x i8] c"x1\00"
@.str.474 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.475 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.476 = private unnamed_addr constant [3 x i8] c"x1\00"
@.str.477 = private unnamed_addr constant [3 x i8] c"x2\00"
@.str.478 = private unnamed_addr constant [3 x i8] c"a1\00"
@.str.479 = private unnamed_addr constant [3 x i8] c"x2\00"
@.str.480 = private unnamed_addr constant [3 x i8] c"a2\00"
@.str.481 = private unnamed_addr constant [3 x i8] c"x1\00"
@.str.482 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.483 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.484 = private unnamed_addr constant [3 x i8] c"t2\00"
@.str.485 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.486 = private unnamed_addr constant [3 x i8] c"t2\00"
@.str.487 = private unnamed_addr constant [2 x i8] c"z\00"
@.str.488 = private unnamed_addr constant [2 x i8] c"z\00"
@.str.489 = private unnamed_addr constant [3 x i8] c"a2\00"
@.str.490 = private unnamed_addr constant [3 x i8] c"x2\00"
@.str.491 = private unnamed_addr constant [3 x i8] c"t3\00"
@.str.492 = private unnamed_addr constant [3 x i8] c"t3\00"
@.str.493 = private unnamed_addr constant [3 x i8] c"t4\00"
@.str.494 = private unnamed_addr constant [3 x i8] c"t3\00"
@.str.495 = private unnamed_addr constant [3 x i8] c"t4\00"
@.str.496 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.497 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.498 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.499 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.500 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.501 = private unnamed_addr constant [7 x i8] c"y.addr\00"
@.str.502 = private unnamed_addr constant [7 x i8] c"y.addr\00"
@.str.503 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.504 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.505 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.506 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.507 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.508 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.509 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.510 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.511 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.512 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.513 = private unnamed_addr constant [2 x i8] c"t\00"
@.str.514 = private unnamed_addr constant [2 x i8] c"t\00"
@.str.515 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.516 = private unnamed_addr constant [4 x i8] c"now\00"
@.str.517 = private unnamed_addr constant [4 x i8] c"now\00"
@.str.518 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.519 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.520 = private unnamed_addr constant [2 x i8] c"t\00"
@.str.521 = private unnamed_addr constant [2 x i8] c"t\00"
@.str.522 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.523 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.524 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.525 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.526 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.527 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.528 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.529 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.530 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.531 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.532 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.533 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.534 = private unnamed_addr constant [7 x i8] c"t.addr\00"
@.str.535 = private unnamed_addr constant [11 x i8] c"wtime_.sec\00"
@.str.536 = private unnamed_addr constant [3 x i8] c"tv\00"
@.str.537 = private unnamed_addr constant [11 x i8] c"wtime_.sec\00"
@.str.538 = private unnamed_addr constant [3 x i8] c"tv\00"
@.str.539 = private unnamed_addr constant [11 x i8] c"wtime_.sec\00"
@.str.540 = private unnamed_addr constant [3 x i8] c"tv\00"
@.str.541 = private unnamed_addr constant [7 x i8] c"t.addr\00"
@.str.542 = private unnamed_addr constant [7 x i8] c"t.addr\00"

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 !dbg !55 {
entry:
  call void @__DiscoPoPOpenMPInitialize()
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %Mops = alloca double, align 8
  %t1 = alloca double, align 8
  %t2 = alloca double, align 8
  %t3 = alloca double, align 8
  %t4 = alloca double, align 8
  %x1 = alloca double, align 8
  %x2 = alloca double, align 8
  %sx = alloca double, align 8
  %sy = alloca double, align 8
  %tm = alloca double, align 8
  %an = alloca double, align 8
  %tt = alloca double, align 8
  %gc = alloca double, align 8
  %sx_verify_value = alloca double, align 8
  %sy_verify_value = alloca double, align 8
  %sx_err = alloca double, align 8
  %sy_err = alloca double, align 8
  %np = alloca i32, align 4
  %i = alloca i32, align 4
  %ik = alloca i32, align 4
  %kk = alloca i32, align 4
  %l = alloca i32, align 4
  %k = alloca i32, align 4
  %nit = alloca i32, align 4
  %k_offset = alloca i32, align 4
  %j = alloca i32, align 4
  %verified = alloca i32, align 4
  %timers_enabled = alloca i32, align 4
  %dum = alloca [3 x double], align 16
  %size = alloca [16 x i8], align 16
  %fp = alloca %struct._IO_FILE*, align 8
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  store i32 0, i32* %retval, align 4
  %2 = ptrtoint i32* %argc.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.28, i32 0, i32 0))
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !61, metadata !62), !dbg !63
  %3 = ptrtoint i8*** %argv.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.29, i32 0, i32 0))
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !64, metadata !62), !dbg !65
  call void @llvm.dbg.declare(metadata double* %Mops, metadata !66, metadata !62), !dbg !67
  call void @llvm.dbg.declare(metadata double* %t1, metadata !68, metadata !62), !dbg !69
  call void @llvm.dbg.declare(metadata double* %t2, metadata !70, metadata !62), !dbg !71
  call void @llvm.dbg.declare(metadata double* %t3, metadata !72, metadata !62), !dbg !73
  call void @llvm.dbg.declare(metadata double* %t4, metadata !74, metadata !62), !dbg !75
  call void @llvm.dbg.declare(metadata double* %x1, metadata !76, metadata !62), !dbg !77
  call void @llvm.dbg.declare(metadata double* %x2, metadata !78, metadata !62), !dbg !79
  call void @llvm.dbg.declare(metadata double* %sx, metadata !80, metadata !62), !dbg !81
  call void @llvm.dbg.declare(metadata double* %sy, metadata !82, metadata !62), !dbg !83
  call void @llvm.dbg.declare(metadata double* %tm, metadata !84, metadata !62), !dbg !85
  call void @llvm.dbg.declare(metadata double* %an, metadata !86, metadata !62), !dbg !87
  call void @llvm.dbg.declare(metadata double* %tt, metadata !88, metadata !62), !dbg !89
  call void @llvm.dbg.declare(metadata double* %gc, metadata !90, metadata !62), !dbg !91
  call void @llvm.dbg.declare(metadata double* %sx_verify_value, metadata !92, metadata !62), !dbg !93
  call void @llvm.dbg.declare(metadata double* %sy_verify_value, metadata !94, metadata !62), !dbg !95
  call void @llvm.dbg.declare(metadata double* %sx_err, metadata !96, metadata !62), !dbg !97
  call void @llvm.dbg.declare(metadata double* %sy_err, metadata !98, metadata !62), !dbg !99
  call void @llvm.dbg.declare(metadata i32* %np, metadata !100, metadata !62), !dbg !101
  call void @llvm.dbg.declare(metadata i32* %i, metadata !102, metadata !62), !dbg !103
  call void @llvm.dbg.declare(metadata i32* %ik, metadata !104, metadata !62), !dbg !105
  call void @llvm.dbg.declare(metadata i32* %kk, metadata !106, metadata !62), !dbg !107
  call void @llvm.dbg.declare(metadata i32* %l, metadata !108, metadata !62), !dbg !109
  call void @llvm.dbg.declare(metadata i32* %k, metadata !110, metadata !62), !dbg !111
  call void @llvm.dbg.declare(metadata i32* %nit, metadata !112, metadata !62), !dbg !113
  call void @llvm.dbg.declare(metadata i32* %k_offset, metadata !114, metadata !62), !dbg !115
  call void @llvm.dbg.declare(metadata i32* %j, metadata !116, metadata !62), !dbg !117
  call void @llvm.dbg.declare(metadata i32* %verified, metadata !118, metadata !62), !dbg !120
  call void @llvm.dbg.declare(metadata i32* %timers_enabled, metadata !121, metadata !62), !dbg !122
  call void @llvm.dbg.declare(metadata [3 x double]* %dum, metadata !123, metadata !62), !dbg !127
  %4 = bitcast [3 x double]* %dum to i8*, !dbg !127
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %4, i8* bitcast ([3 x double]* @main.dum to i8*), i64 24, i32 16, i1 false), !dbg !127
  call void @llvm.dbg.declare(metadata [16 x i8]* %size, metadata !128, metadata !62), !dbg !132
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %fp, metadata !133, metadata !62), !dbg !193
  %call = call %struct._IO_FILE* @fopen(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0)), !dbg !194
  %5 = ptrtoint %struct._IO_FILE** %fp to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i32 0, i32 0))
  store %struct._IO_FILE* %call, %struct._IO_FILE** %fp, align 8, !dbg !196
  %cmp = icmp eq %struct._IO_FILE* %call, null, !dbg !197
  br i1 %cmp, label %if.then, label %if.else, !dbg !198

if.then:                                          ; preds = %entry
  %6 = ptrtoint i32* %timers_enabled to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.31, i32 0, i32 0))
  store i32 0, i32* %timers_enabled, align 4, !dbg !199
  br label %if.end, !dbg !201

if.else:                                          ; preds = %entry
  %7 = ptrtoint i32* %timers_enabled to i64
  call void @__DiscoPoPOpenMPWrite(i64 %7, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.32, i32 0, i32 0))
  store i32 1, i32* %timers_enabled, align 4, !dbg !202
  %8 = ptrtoint %struct._IO_FILE** %fp to i64
  call void @__DiscoPoPOpenMPRead(i64 %8, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i32 0, i32 0))
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !204
  %call1 = call i32 @fclose(%struct._IO_FILE* %9), !dbg !205
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %size, i32 0, i32 0, !dbg !206
  %call2 = call double @pow(double 2.000000e+00, double 2.500000e+01) #6, !dbg !207
  %call3 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i32 0, i32 0), double %call2) #6, !dbg !208
  %10 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i32 0, i32 0))
  store i32 14, i32* %j, align 4, !dbg !210
  %11 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %11, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.35, i32 0, i32 0))
  %12 = load i32, i32* %j, align 4, !dbg !211
  %idxprom = sext i32 %12 to i64, !dbg !213
  %arrayidx = getelementptr inbounds [16 x i8], [16 x i8]* %size, i64 0, i64 %idxprom, !dbg !213
  %13 = ptrtoint i8* %arrayidx to i64
  call void @__DiscoPoPOpenMPRead(i64 %13, i32 1, i32 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.36, i32 0, i32 0))
  %14 = load i8, i8* %arrayidx, align 1, !dbg !213
  %conv = sext i8 %14 to i32, !dbg !213
  %cmp4 = icmp eq i32 %conv, 46, !dbg !214
  br i1 %cmp4, label %if.then6, label %if.end7, !dbg !215

if.then6:                                         ; preds = %if.end
  %15 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %15, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.37, i32 0, i32 0))
  %16 = load i32, i32* %j, align 4, !dbg !216
  %dec = add nsw i32 %16, -1, !dbg !216
  %17 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %17, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i32 0, i32 0))
  store i32 %dec, i32* %j, align 4, !dbg !216
  br label %if.end7, !dbg !218

if.end7:                                          ; preds = %if.then6, %if.end
  %18 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %18, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.39, i32 0, i32 0))
  %19 = load i32, i32* %j, align 4, !dbg !219
  %add = add nsw i32 %19, 1, !dbg !220
  %idxprom8 = sext i32 %add to i64, !dbg !221
  %arrayidx9 = getelementptr inbounds [16 x i8], [16 x i8]* %size, i64 0, i64 %idxprom8, !dbg !221
  %20 = ptrtoint i8* %arrayidx9 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %20, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.40, i32 0, i32 0))
  store i8 0, i8* %arrayidx9, align 1, !dbg !222
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.3, i32 0, i32 0)), !dbg !223
  %arraydecay11 = getelementptr inbounds [16 x i8], [16 x i8]* %size, i32 0, i32 0, !dbg !224
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.4, i32 0, i32 0), i8* %arraydecay11), !dbg !225
  %call13 = call i32 @omp_get_max_threads(), !dbg !226
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.5, i32 0, i32 0), i32 %call13), !dbg !227
  %21 = ptrtoint i32* %verified to i64
  call void @__DiscoPoPOpenMPWrite(i64 %21, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.41, i32 0, i32 0))
  store i32 0, i32* %verified, align 4, !dbg !228
  %22 = ptrtoint i32* %np to i64
  call void @__DiscoPoPOpenMPWrite(i64 %22, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i32 0, i32 0))
  store i32 256, i32* %np, align 4, !dbg !229
  %arrayidx15 = getelementptr inbounds [3 x double], [3 x double]* %dum, i64 0, i64 0, !dbg !230
  %arrayidx16 = getelementptr inbounds [3 x double], [3 x double]* %dum, i64 0, i64 1, !dbg !231
  %23 = ptrtoint double* %arrayidx16 to i64
  call void @__DiscoPoPOpenMPRead(i64 %23, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.43, i32 0, i32 0))
  %24 = load double, double* %arrayidx16, align 8, !dbg !231
  %arrayidx17 = getelementptr inbounds [3 x double], [3 x double]* %dum, i64 0, i64 2, !dbg !232
  call void @vranlc(i32 0, double* %arrayidx15, double %24, double* %arrayidx17), !dbg !233
  %arrayidx18 = getelementptr inbounds [3 x double], [3 x double]* %dum, i64 0, i64 1, !dbg !234
  %arrayidx19 = getelementptr inbounds [3 x double], [3 x double]* %dum, i64 0, i64 2, !dbg !235
  %25 = ptrtoint double* %arrayidx19 to i64
  call void @__DiscoPoPOpenMPRead(i64 %25, i32 16, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.44, i32 0, i32 0))
  %26 = load double, double* %arrayidx19, align 16, !dbg !235
  %call20 = call double @randlc(double* %arrayidx18, double %26), !dbg !236
  %arrayidx21 = getelementptr inbounds [3 x double], [3 x double]* %dum, i64 0, i64 0, !dbg !237
  %27 = ptrtoint double* %arrayidx21 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %27, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.45, i32 0, i32 0))
  store double %call20, double* %arrayidx21, align 16, !dbg !238
  %28 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !239
  %29 = ptrtoint i8** %28 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %29, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.46, i32 0, i32 0))
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @1, i32 0, i32 0), i8** %28, align 8, !dbg !239
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([118 x i8], [118 x i8]* @.str.48, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* %.kmpc_loc.addr, i32 0, void (i32*, i32*, ...)* bitcast (void (i32*, i32*)* @.omp_outlined. to void (i32*, i32*, ...)*)), !dbg !239
  %call22 = call double @fabs(double 1.000000e+00) #2, !dbg !240
  %call23 = call double @sqrt(double %call22) #6, !dbg !241
  %call24 = call double @log(double %call23) #6, !dbg !242
  %30 = ptrtoint double* %Mops to i64
  call void @__DiscoPoPOpenMPWrite(i64 %30, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.49, i32 0, i32 0))
  store double %call24, double* %Mops, align 8, !dbg !244
  %31 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !245
  %32 = ptrtoint i8** %31 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %32, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.50, i32 0, i32 0))
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @2, i32 0, i32 0), i8** %31, align 8, !dbg !245
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([118 x i8], [118 x i8]* @.str.52, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* %.kmpc_loc.addr, i32 1, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*)* @.omp_outlined..7 to void (i32*, i32*, ...)*), i32* %timers_enabled), !dbg !245
  call void @timer_start(i32 0), !dbg !246
  %33 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %33, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.53, i32 0, i32 0))
  store double 0x41D2309CE5400000, double* %t1, align 8, !dbg !247
  %34 = call [131072 x double]* @_ZTWL1x(), !dbg !248
  %arraydecay25 = getelementptr inbounds [131072 x double], [131072 x double]* %34, i32 0, i32 0, !dbg !248
  call void @vranlc(i32 0, double* %t1, double 0x41D2309CE5400000, double* %arraydecay25), !dbg !249
  %35 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %35, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.54, i32 0, i32 0))
  store double 0x41D2309CE5400000, double* %t1, align 8, !dbg !250
  %36 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %36, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.55, i32 0, i32 0))
  store i32 0, i32* %i, align 4, !dbg !251
  br label %for.cond, !dbg !253

for.cond:                                         ; preds = %for.inc, %if.end7
  %37 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %37, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.56, i32 0, i32 0))
  %38 = load i32, i32* %i, align 4, !dbg !254
  %cmp26 = icmp slt i32 %38, 17, !dbg !257
  br i1 %cmp26, label %for.body, label %for.end, !dbg !258

for.body:                                         ; preds = %for.cond
  %39 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %39, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.57, i32 0, i32 0))
  %40 = load double, double* %t1, align 8, !dbg !259
  %call28 = call double @randlc(double* %t1, double %40), !dbg !261
  %41 = ptrtoint double* %t2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %41, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58, i32 0, i32 0))
  store double %call28, double* %t2, align 8, !dbg !262
  br label %for.inc, !dbg !263

for.inc:                                          ; preds = %for.body
  %42 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %42, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.59, i32 0, i32 0))
  %43 = load i32, i32* %i, align 4, !dbg !264
  %inc = add nsw i32 %43, 1, !dbg !264
  %44 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %44, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.60, i32 0, i32 0))
  store i32 %inc, i32* %i, align 4, !dbg !264
  br label %for.cond, !dbg !266

for.end:                                          ; preds = %for.cond
  %45 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %45, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.61, i32 0, i32 0))
  %46 = load double, double* %t1, align 8, !dbg !267
  %47 = ptrtoint double* %an to i64
  call void @__DiscoPoPOpenMPWrite(i64 %47, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.62, i32 0, i32 0))
  store double %46, double* %an, align 8, !dbg !268
  %48 = ptrtoint double* %tt to i64
  call void @__DiscoPoPOpenMPWrite(i64 %48, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.63, i32 0, i32 0))
  store double 0x41B033C4D7000000, double* %tt, align 8, !dbg !269
  %49 = ptrtoint double* %gc to i64
  call void @__DiscoPoPOpenMPWrite(i64 %49, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64, i32 0, i32 0))
  store double 0.000000e+00, double* %gc, align 8, !dbg !270
  %50 = ptrtoint double* %sx to i64
  call void @__DiscoPoPOpenMPWrite(i64 %50, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.65, i32 0, i32 0))
  store double 0.000000e+00, double* %sx, align 8, !dbg !271
  %51 = ptrtoint double* %sy to i64
  call void @__DiscoPoPOpenMPWrite(i64 %51, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i32 0, i32 0))
  store double 0.000000e+00, double* %sy, align 8, !dbg !272
  %52 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %52, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.67, i32 0, i32 0))
  store i32 0, i32* %i, align 4, !dbg !273
  br label %for.cond29, !dbg !275

for.cond29:                                       ; preds = %for.inc35, %for.end
  %53 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %53, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.68, i32 0, i32 0))
  %54 = load i32, i32* %i, align 4, !dbg !276
  %cmp30 = icmp slt i32 %54, 10, !dbg !279
  br i1 %cmp30, label %for.body32, label %for.end37, !dbg !280

for.body32:                                       ; preds = %for.cond29
  %55 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %55, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.69, i32 0, i32 0))
  %56 = load i32, i32* %i, align 4, !dbg !281
  %idxprom33 = sext i32 %56 to i64, !dbg !283
  %arrayidx34 = getelementptr inbounds [10 x double], [10 x double]* @q, i64 0, i64 %idxprom33, !dbg !283
  %57 = ptrtoint double* %arrayidx34 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %57, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.70, i32 0, i32 0))
  store double 0.000000e+00, double* %arrayidx34, align 8, !dbg !284
  br label %for.inc35, !dbg !285

for.inc35:                                        ; preds = %for.body32
  %58 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %58, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.71, i32 0, i32 0))
  %59 = load i32, i32* %i, align 4, !dbg !286
  %inc36 = add nsw i32 %59, 1, !dbg !286
  %60 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %60, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.72, i32 0, i32 0))
  store i32 %inc36, i32* %i, align 4, !dbg !286
  br label %for.cond29, !dbg !288

for.end37:                                        ; preds = %for.cond29
  %61 = ptrtoint i32* %k_offset to i64
  call void @__DiscoPoPOpenMPWrite(i64 %61, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.73, i32 0, i32 0))
  store i32 -1, i32* %k_offset, align 4, !dbg !289
  %62 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !290
  %63 = ptrtoint i8** %62 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %63, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.74, i32 0, i32 0))
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @3, i32 0, i32 0), i8** %62, align 8, !dbg !290
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([118 x i8], [118 x i8]* @.str.76, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* %.kmpc_loc.addr, i32 6, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, double*, double*, i32*, i32*, double*, i32*)* @.omp_outlined..8 to void (i32*, i32*, ...)*), double* %sx, double* %sy, i32* %np, i32* %k_offset, double* %an, i32* %timers_enabled), !dbg !290
  %64 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %64, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.77, i32 0, i32 0))
  store i32 0, i32* %i, align 4, !dbg !291
  br label %for.cond38, !dbg !293

for.cond38:                                       ; preds = %for.inc45, %for.end37
  %65 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %65, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.78, i32 0, i32 0))
  %66 = load i32, i32* %i, align 4, !dbg !294
  %cmp39 = icmp slt i32 %66, 10, !dbg !297
  br i1 %cmp39, label %for.body41, label %for.end47, !dbg !298

for.body41:                                       ; preds = %for.cond38
  %67 = ptrtoint double* %gc to i64
  call void @__DiscoPoPOpenMPRead(i64 %67, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.79, i32 0, i32 0))
  %68 = load double, double* %gc, align 8, !dbg !299
  %69 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %69, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.80, i32 0, i32 0))
  %70 = load i32, i32* %i, align 4, !dbg !301
  %idxprom42 = sext i32 %70 to i64, !dbg !302
  %arrayidx43 = getelementptr inbounds [10 x double], [10 x double]* @q, i64 0, i64 %idxprom42, !dbg !302
  %71 = ptrtoint double* %arrayidx43 to i64
  call void @__DiscoPoPOpenMPRead(i64 %71, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.81, i32 0, i32 0))
  %72 = load double, double* %arrayidx43, align 8, !dbg !302
  %add44 = fadd double %68, %72, !dbg !303
  %73 = ptrtoint double* %gc to i64
  call void @__DiscoPoPOpenMPWrite(i64 %73, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.82, i32 0, i32 0))
  store double %add44, double* %gc, align 8, !dbg !304
  br label %for.inc45, !dbg !305

for.inc45:                                        ; preds = %for.body41
  %74 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %74, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.83, i32 0, i32 0))
  %75 = load i32, i32* %i, align 4, !dbg !306
  %inc46 = add nsw i32 %75, 1, !dbg !306
  %76 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %76, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.84, i32 0, i32 0))
  store i32 %inc46, i32* %i, align 4, !dbg !306
  br label %for.cond38, !dbg !308

for.end47:                                        ; preds = %for.cond38
  call void @timer_stop(i32 0), !dbg !309
  %call48 = call double @timer_read(i32 0), !dbg !310
  %77 = ptrtoint double* %tm to i64
  call void @__DiscoPoPOpenMPWrite(i64 %77, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.85, i32 0, i32 0))
  store double %call48, double* %tm, align 8, !dbg !311
  %78 = ptrtoint i32* %nit to i64
  call void @__DiscoPoPOpenMPWrite(i64 %78, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.86, i32 0, i32 0))
  store i32 0, i32* %nit, align 4, !dbg !312
  %79 = ptrtoint i32* %verified to i64
  call void @__DiscoPoPOpenMPWrite(i64 %79, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.87, i32 0, i32 0))
  store i32 1, i32* %verified, align 4, !dbg !313
  %80 = ptrtoint double* %sx_verify_value to i64
  call void @__DiscoPoPOpenMPWrite(i64 %80, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.88, i32 0, i32 0))
  store double 0xC0A95FAB5782F17F, double* %sx_verify_value, align 8, !dbg !314
  %81 = ptrtoint double* %sy_verify_value to i64
  call void @__DiscoPoPOpenMPWrite(i64 %81, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.89, i32 0, i32 0))
  store double 0xC0BB2E683649F2E0, double* %sy_verify_value, align 8, !dbg !317
  %82 = ptrtoint i32* %verified to i64
  call void @__DiscoPoPOpenMPRead(i64 %82, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.90, i32 0, i32 0))
  %83 = load i32, i32* %verified, align 4, !dbg !318
  %tobool = icmp ne i32 %83, 0, !dbg !318
  br i1 %tobool, label %if.then49, label %if.end58, !dbg !320

if.then49:                                        ; preds = %for.end47
  %84 = ptrtoint double* %sx to i64
  call void @__DiscoPoPOpenMPRead(i64 %84, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.91, i32 0, i32 0))
  %85 = load double, double* %sx, align 8, !dbg !321
  %86 = ptrtoint double* %sx_verify_value to i64
  call void @__DiscoPoPOpenMPRead(i64 %86, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.92, i32 0, i32 0))
  %87 = load double, double* %sx_verify_value, align 8, !dbg !323
  %sub = fsub double %85, %87, !dbg !324
  %88 = ptrtoint double* %sx_verify_value to i64
  call void @__DiscoPoPOpenMPRead(i64 %88, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.93, i32 0, i32 0))
  %89 = load double, double* %sx_verify_value, align 8, !dbg !325
  %div = fdiv double %sub, %89, !dbg !326
  %call50 = call double @fabs(double %div) #2, !dbg !327
  %90 = ptrtoint double* %sx_err to i64
  call void @__DiscoPoPOpenMPWrite(i64 %90, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.94, i32 0, i32 0))
  store double %call50, double* %sx_err, align 8, !dbg !328
  %91 = ptrtoint double* %sy to i64
  call void @__DiscoPoPOpenMPRead(i64 %91, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.95, i32 0, i32 0))
  %92 = load double, double* %sy, align 8, !dbg !329
  %93 = ptrtoint double* %sy_verify_value to i64
  call void @__DiscoPoPOpenMPRead(i64 %93, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.96, i32 0, i32 0))
  %94 = load double, double* %sy_verify_value, align 8, !dbg !330
  %sub51 = fsub double %92, %94, !dbg !331
  %95 = ptrtoint double* %sy_verify_value to i64
  call void @__DiscoPoPOpenMPRead(i64 %95, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.97, i32 0, i32 0))
  %96 = load double, double* %sy_verify_value, align 8, !dbg !332
  %div52 = fdiv double %sub51, %96, !dbg !333
  %call53 = call double @fabs(double %div52) #2, !dbg !334
  %97 = ptrtoint double* %sy_err to i64
  call void @__DiscoPoPOpenMPWrite(i64 %97, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.98, i32 0, i32 0))
  store double %call53, double* %sy_err, align 8, !dbg !335
  %98 = ptrtoint double* %sx_err to i64
  call void @__DiscoPoPOpenMPRead(i64 %98, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.99, i32 0, i32 0))
  %99 = load double, double* %sx_err, align 8, !dbg !336
  %cmp54 = fcmp ole double %99, 1.000000e-08, !dbg !337
  br i1 %cmp54, label %land.rhs, label %land.end, !dbg !338

land.rhs:                                         ; preds = %if.then49
  %100 = ptrtoint double* %sy_err to i64
  call void @__DiscoPoPOpenMPRead(i64 %100, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.100, i32 0, i32 0))
  %101 = load double, double* %sy_err, align 8, !dbg !339
  %cmp56 = fcmp ole double %101, 1.000000e-08, !dbg !341
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then49
  %102 = phi i1 [ false, %if.then49 ], [ %cmp56, %land.rhs ]
  %land.ext = zext i1 %102 to i32, !dbg !342
  %103 = ptrtoint i32* %verified to i64
  call void @__DiscoPoPOpenMPWrite(i64 %103, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.101, i32 0, i32 0))
  store i32 %land.ext, i32* %verified, align 4, !dbg !344
  br label %if.end58, !dbg !345

if.end58:                                         ; preds = %land.end, %for.end47
  %call59 = call double @pow(double 2.000000e+00, double 2.500000e+01) #6, !dbg !346
  %104 = ptrtoint double* %tm to i64
  call void @__DiscoPoPOpenMPRead(i64 %104, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.102, i32 0, i32 0))
  %105 = load double, double* %tm, align 8, !dbg !347
  %div60 = fdiv double %call59, %105, !dbg !348
  %div61 = fdiv double %div60, 1.000000e+06, !dbg !349
  %106 = ptrtoint double* %Mops to i64
  call void @__DiscoPoPOpenMPWrite(i64 %106, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.103, i32 0, i32 0))
  store double %div61, double* %Mops, align 8, !dbg !350
  %call62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i32 0, i32 0)), !dbg !351
  %107 = ptrtoint double* %tm to i64
  call void @__DiscoPoPOpenMPRead(i64 %107, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.104, i32 0, i32 0))
  %108 = load double, double* %tm, align 8, !dbg !352
  %call63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.10, i32 0, i32 0), double %108), !dbg !353
  %call64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i32 0, i32 0), i32 24), !dbg !354
  %109 = ptrtoint double* %gc to i64
  call void @__DiscoPoPOpenMPRead(i64 %109, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.105, i32 0, i32 0))
  %110 = load double, double* %gc, align 8, !dbg !355
  %call65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.12, i32 0, i32 0), double %110), !dbg !356
  %111 = ptrtoint double* %sx to i64
  call void @__DiscoPoPOpenMPRead(i64 %111, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.106, i32 0, i32 0))
  %112 = load double, double* %sx, align 8, !dbg !357
  %113 = ptrtoint double* %sy to i64
  call void @__DiscoPoPOpenMPRead(i64 %113, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.107, i32 0, i32 0))
  %114 = load double, double* %sy, align 8, !dbg !358
  %call66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.13, i32 0, i32 0), double %112, double %114), !dbg !359
  %call67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i32 0, i32 0)), !dbg !360
  %115 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %115, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.108, i32 0, i32 0))
  store i32 0, i32* %i, align 4, !dbg !361
  br label %for.cond68, !dbg !363

for.cond68:                                       ; preds = %for.inc75, %if.end58
  %116 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %116, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.109, i32 0, i32 0))
  %117 = load i32, i32* %i, align 4, !dbg !364
  %cmp69 = icmp slt i32 %117, 10, !dbg !367
  br i1 %cmp69, label %for.body71, label %for.end77, !dbg !368

for.body71:                                       ; preds = %for.cond68
  %118 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %118, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.110, i32 0, i32 0))
  %119 = load i32, i32* %i, align 4, !dbg !369
  %120 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %120, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.111, i32 0, i32 0))
  %121 = load i32, i32* %i, align 4, !dbg !371
  %idxprom72 = sext i32 %121 to i64, !dbg !372
  %arrayidx73 = getelementptr inbounds [10 x double], [10 x double]* @q, i64 0, i64 %idxprom72, !dbg !372
  %122 = ptrtoint double* %arrayidx73 to i64
  call void @__DiscoPoPOpenMPRead(i64 %122, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.112, i32 0, i32 0))
  %123 = load double, double* %arrayidx73, align 8, !dbg !372
  %call74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.15, i32 0, i32 0), i32 %119, double %123), !dbg !373
  br label %for.inc75, !dbg !374

for.inc75:                                        ; preds = %for.body71
  %124 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %124, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.113, i32 0, i32 0))
  %125 = load i32, i32* %i, align 4, !dbg !375
  %inc76 = add nsw i32 %125, 1, !dbg !375
  %126 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %126, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.114, i32 0, i32 0))
  store i32 %inc76, i32* %i, align 4, !dbg !375
  br label %for.cond68, !dbg !377

for.end77:                                        ; preds = %for.cond68
  %127 = ptrtoint i32* %nit to i64
  call void @__DiscoPoPOpenMPRead(i64 %127, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.115, i32 0, i32 0))
  %128 = load i32, i32* %nit, align 4, !dbg !378
  %129 = ptrtoint double* %tm to i64
  call void @__DiscoPoPOpenMPRead(i64 %129, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.116, i32 0, i32 0))
  %130 = load double, double* %tm, align 8, !dbg !379
  %131 = ptrtoint double* %Mops to i64
  call void @__DiscoPoPOpenMPRead(i64 %131, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.117, i32 0, i32 0))
  %132 = load double, double* %Mops, align 8, !dbg !380
  %133 = ptrtoint i32* %verified to i64
  call void @__DiscoPoPOpenMPRead(i64 %133, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.118, i32 0, i32 0))
  %134 = load i32, i32* %verified, align 4, !dbg !381
  call void @print_results(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0), i8 signext 83, i32 25, i32 0, i32 0, i32 %128, double %130, double %132, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.17, i32 0, i32 0), i32 %134, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i32 0, i32 0)), !dbg !382
  %135 = ptrtoint i32* %timers_enabled to i64
  call void @__DiscoPoPOpenMPRead(i64 %135, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.119, i32 0, i32 0))
  %136 = load i32, i32* %timers_enabled, align 4, !dbg !383
  %tobool78 = icmp ne i32 %136, 0, !dbg !383
  br i1 %tobool78, label %if.then79, label %if.end95, !dbg !385

if.then79:                                        ; preds = %for.end77
  %137 = ptrtoint double* %tm to i64
  call void @__DiscoPoPOpenMPRead(i64 %137, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.120, i32 0, i32 0))
  %138 = load double, double* %tm, align 8, !dbg !386
  %cmp80 = fcmp ole double %138, 0.000000e+00, !dbg !389
  br i1 %cmp80, label %if.then82, label %if.end83, !dbg !390

if.then82:                                        ; preds = %if.then79
  %139 = ptrtoint double* %tm to i64
  call void @__DiscoPoPOpenMPWrite(i64 %139, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.121, i32 0, i32 0))
  store double 1.000000e+00, double* %tm, align 8, !dbg !391
  br label %if.end83, !dbg !393

if.end83:                                         ; preds = %if.then82, %if.then79
  %call84 = call double @timer_read(i32 0), !dbg !394
  %140 = ptrtoint double* %tt to i64
  call void @__DiscoPoPOpenMPWrite(i64 %140, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.122, i32 0, i32 0))
  store double %call84, double* %tt, align 8, !dbg !395
  %141 = ptrtoint double* %tt to i64
  call void @__DiscoPoPOpenMPRead(i64 %141, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.123, i32 0, i32 0))
  %142 = load double, double* %tt, align 8, !dbg !396
  %143 = ptrtoint double* %tt to i64
  call void @__DiscoPoPOpenMPRead(i64 %143, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.124, i32 0, i32 0))
  %144 = load double, double* %tt, align 8, !dbg !397
  %mul = fmul double %144, 1.000000e+02, !dbg !398
  %145 = ptrtoint double* %tm to i64
  call void @__DiscoPoPOpenMPRead(i64 %145, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.125, i32 0, i32 0))
  %146 = load double, double* %tm, align 8, !dbg !399
  %div85 = fdiv double %mul, %146, !dbg !400
  %call86 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.23, i32 0, i32 0), double %142, double %div85), !dbg !401
  %call87 = call double @timer_read(i32 1), !dbg !402
  %147 = ptrtoint double* %tt to i64
  call void @__DiscoPoPOpenMPWrite(i64 %147, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.126, i32 0, i32 0))
  store double %call87, double* %tt, align 8, !dbg !403
  %148 = ptrtoint double* %tt to i64
  call void @__DiscoPoPOpenMPRead(i64 %148, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.127, i32 0, i32 0))
  %149 = load double, double* %tt, align 8, !dbg !404
  %150 = ptrtoint double* %tt to i64
  call void @__DiscoPoPOpenMPRead(i64 %150, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.128, i32 0, i32 0))
  %151 = load double, double* %tt, align 8, !dbg !405
  %mul88 = fmul double %151, 1.000000e+02, !dbg !406
  %152 = ptrtoint double* %tm to i64
  call void @__DiscoPoPOpenMPRead(i64 %152, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.129, i32 0, i32 0))
  %153 = load double, double* %tm, align 8, !dbg !407
  %div89 = fdiv double %mul88, %153, !dbg !408
  %call90 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.24, i32 0, i32 0), double %149, double %div89), !dbg !409
  %call91 = call double @timer_read(i32 2), !dbg !410
  %154 = ptrtoint double* %tt to i64
  call void @__DiscoPoPOpenMPWrite(i64 %154, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.130, i32 0, i32 0))
  store double %call91, double* %tt, align 8, !dbg !411
  %155 = ptrtoint double* %tt to i64
  call void @__DiscoPoPOpenMPRead(i64 %155, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.131, i32 0, i32 0))
  %156 = load double, double* %tt, align 8, !dbg !412
  %157 = ptrtoint double* %tt to i64
  call void @__DiscoPoPOpenMPRead(i64 %157, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.132, i32 0, i32 0))
  %158 = load double, double* %tt, align 8, !dbg !413
  %mul92 = fmul double %158, 1.000000e+02, !dbg !414
  %159 = ptrtoint double* %tm to i64
  call void @__DiscoPoPOpenMPRead(i64 %159, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.133, i32 0, i32 0))
  %160 = load double, double* %tm, align 8, !dbg !415
  %div93 = fdiv double %mul92, %160, !dbg !416
  %call94 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.25, i32 0, i32 0), double %156, double %div93), !dbg !417
  br label %if.end95, !dbg !418

if.end95:                                         ; preds = %if.end83, %for.end77
  call void @__DiscoPoPOpenMPFinalize()
  ret i32 0, !dbg !419
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

declare %struct._IO_FILE* @fopen(i8*, i8*) #3

declare i32 @fclose(%struct._IO_FILE*) #3

; Function Attrs: nounwind
declare double @pow(double, double) #4

; Function Attrs: nounwind
declare i32 @sprintf(i8*, i8*, ...) #4

declare i32 @printf(i8*, ...) #3

declare i32 @omp_get_max_threads() #3

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined.(i32* noalias %.global_tid., i32* noalias %.bound_tid.) #0 !dbg !420 {
entry:
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.135, i32 0, i32 0))
  %.global_tid..addr = alloca i32*, align 8
  %.bound_tid..addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %0 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.136, i32 0, i32 0))
  store i32* %.global_tid., i32** %.global_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.global_tid..addr, metadata !426, metadata !62), !dbg !427
  %1 = ptrtoint i32** %.bound_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.137, i32 0, i32 0))
  store i32* %.bound_tid., i32** %.bound_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.bound_tid..addr, metadata !428, metadata !62), !dbg !427
  call void @llvm.dbg.declare(metadata i32* %i, metadata !429, metadata !62), !dbg !427
  %2 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.138, i32 0, i32 0))
  store i32 0, i32* %i, align 4, !dbg !430
  br label %for.cond, !dbg !433

for.cond:                                         ; preds = %for.inc, %entry
  %3 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %3, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.139, i32 0, i32 0))
  %4 = load i32, i32* %i, align 4, !dbg !434
  %cmp = icmp slt i32 %4, 131072, !dbg !437
  br i1 %cmp, label %for.body, label %for.end, !dbg !438

for.body:                                         ; preds = %for.cond
  %5 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %5, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.140, i32 0, i32 0))
  %6 = load i32, i32* %i, align 4, !dbg !439
  %idxprom = sext i32 %6 to i64, !dbg !441
  %7 = call [131072 x double]* @_ZTWL1x(), !dbg !441
  %arrayidx = getelementptr inbounds [131072 x double], [131072 x double]* %7, i64 0, i64 %idxprom, !dbg !441
  %8 = ptrtoint double* %arrayidx to i64
  call void @__DiscoPoPOpenMPWrite(i64 %8, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.141, i32 0, i32 0))
  store double -1.000000e+99, double* %arrayidx, align 8, !dbg !442
  br label %for.inc, !dbg !443

for.inc:                                          ; preds = %for.body
  %9 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %9, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.142, i32 0, i32 0))
  %10 = load i32, i32* %i, align 4, !dbg !444
  %inc = add nsw i32 %10, 1, !dbg !444
  %11 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.143, i32 0, i32 0))
  store i32 %inc, i32* %i, align 4, !dbg !444
  br label %for.cond, !dbg !446

for.end:                                          ; preds = %for.cond
  call void @__DiscoPoPOpenMPAfterCall()
  ret void, !dbg !447
}

; Function Attrs: nounwind uwtable
define internal [131072 x double]* @_ZTWL1x() #0 {
  ret [131072 x double]* @x
}

declare void @__kmpc_fork_call(%ident_t*, i32, void (i32*, i32*, ...)*, ...)

; Function Attrs: nounwind readnone
declare double @fabs(double) #5

; Function Attrs: nounwind
declare double @sqrt(double) #4

; Function Attrs: nounwind
declare double @log(double) #4

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..7(i32* noalias %.global_tid., i32* noalias %.bound_tid., i32* dereferenceable(4) %timers_enabled) #0 !dbg !448 {
entry:
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.145, i32 0, i32 0))
  %.global_tid..addr = alloca i32*, align 8
  %.bound_tid..addr = alloca i32*, align 8
  %timers_enabled.addr = alloca i32*, align 8
  %0 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.146, i32 0, i32 0))
  store i32* %.global_tid., i32** %.global_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.global_tid..addr, metadata !452, metadata !62), !dbg !453
  %1 = ptrtoint i32** %.bound_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.147, i32 0, i32 0))
  store i32* %.bound_tid., i32** %.bound_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.bound_tid..addr, metadata !454, metadata !62), !dbg !453
  %2 = ptrtoint i32** %timers_enabled.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.148, i32 0, i32 0))
  store i32* %timers_enabled, i32** %timers_enabled.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %timers_enabled.addr, metadata !455, metadata !62), !dbg !453
  %3 = ptrtoint i32** %timers_enabled.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %3, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.149, i32 0, i32 0))
  %4 = load i32*, i32** %timers_enabled.addr, align 8, !dbg !456
  call void @timer_clear(i32 0), !dbg !457
  %5 = ptrtoint i32* %4 to i64
  call void @__DiscoPoPOpenMPRead(i64 %5, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.150, i32 0, i32 0))
  %6 = load i32, i32* %4, align 4, !dbg !459
  %tobool = icmp ne i32 %6, 0, !dbg !459
  br i1 %tobool, label %if.then, label %if.end, !dbg !461

if.then:                                          ; preds = %entry
  call void @timer_clear(i32 1), !dbg !462
  br label %if.end, !dbg !462

if.end:                                           ; preds = %if.then, %entry
  %7 = ptrtoint i32* %4 to i64
  call void @__DiscoPoPOpenMPRead(i64 %7, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.151, i32 0, i32 0))
  %8 = load i32, i32* %4, align 4, !dbg !464
  %tobool1 = icmp ne i32 %8, 0, !dbg !464
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !466

if.then2:                                         ; preds = %if.end
  call void @timer_clear(i32 2), !dbg !467
  br label %if.end3, !dbg !467

if.end3:                                          ; preds = %if.then2, %if.end
  call void @__DiscoPoPOpenMPAfterCall()
  ret void, !dbg !469
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..8(i32* noalias %.global_tid., i32* noalias %.bound_tid., double* dereferenceable(8) %sx, double* dereferenceable(8) %sy, i32* dereferenceable(4) %np, i32* dereferenceable(4) %k_offset, double* dereferenceable(8) %an, i32* dereferenceable(4) %timers_enabled) #0 !dbg !470 {
entry:
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.153, i32 0, i32 0))
  %.global_tid..addr = alloca i32*, align 8
  %.bound_tid..addr = alloca i32*, align 8
  %sx.addr = alloca double*, align 8
  %sy.addr = alloca double*, align 8
  %np.addr = alloca i32*, align 8
  %k_offset.addr = alloca i32*, align 8
  %an.addr = alloca double*, align 8
  %timers_enabled.addr = alloca i32*, align 8
  %k = alloca i32, align 4
  %kk = alloca i32, align 4
  %t1 = alloca double, align 8
  %t2 = alloca double, align 8
  %t3 = alloca double, align 8
  %t4 = alloca double, align 8
  %i = alloca i32, align 4
  %ik = alloca i32, align 4
  %x1 = alloca double, align 8
  %x2 = alloca double, align 8
  %l = alloca i32, align 4
  %.omp.iv = alloca i32, align 4
  %.omp.last.iteration = alloca i32, align 4
  %k2 = alloca i32, align 4
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %sx4 = alloca double, align 8
  %sy5 = alloca double, align 8
  %k6 = alloca i32, align 4
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  %.omp.reduction.red_list = alloca [2 x i8*], align 8
  %atomic-temp = alloca double, align 8
  %tmp = alloca double, align 8
  %atomic-temp86 = alloca double, align 8
  %tmp87 = alloca double, align 8
  %atomic-temp100 = alloca double, align 8
  %2 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.154, i32 0, i32 0))
  store i32* %.global_tid., i32** %.global_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.global_tid..addr, metadata !475, metadata !62), !dbg !476
  %3 = ptrtoint i32** %.bound_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.155, i32 0, i32 0))
  store i32* %.bound_tid., i32** %.bound_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.bound_tid..addr, metadata !477, metadata !62), !dbg !476
  %4 = ptrtoint double** %sx.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.156, i32 0, i32 0))
  store double* %sx, double** %sx.addr, align 8
  call void @llvm.dbg.declare(metadata double** %sx.addr, metadata !478, metadata !62), !dbg !476
  %5 = ptrtoint double** %sy.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.157, i32 0, i32 0))
  store double* %sy, double** %sy.addr, align 8
  call void @llvm.dbg.declare(metadata double** %sy.addr, metadata !479, metadata !62), !dbg !476
  %6 = ptrtoint i32** %np.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.158, i32 0, i32 0))
  store i32* %np, i32** %np.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %np.addr, metadata !480, metadata !62), !dbg !476
  %7 = ptrtoint i32** %k_offset.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %7, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.159, i32 0, i32 0))
  store i32* %k_offset, i32** %k_offset.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %k_offset.addr, metadata !481, metadata !62), !dbg !476
  %8 = ptrtoint double** %an.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %8, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.160, i32 0, i32 0))
  store double* %an, double** %an.addr, align 8
  call void @llvm.dbg.declare(metadata double** %an.addr, metadata !482, metadata !62), !dbg !476
  %9 = ptrtoint i32** %timers_enabled.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %9, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.161, i32 0, i32 0))
  store i32* %timers_enabled, i32** %timers_enabled.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %timers_enabled.addr, metadata !483, metadata !62), !dbg !476
  %10 = ptrtoint double** %sx.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %10, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.162, i32 0, i32 0))
  %11 = load double*, double** %sx.addr, align 8, !dbg !484
  %12 = ptrtoint double** %sy.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %12, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.163, i32 0, i32 0))
  %13 = load double*, double** %sy.addr, align 8, !dbg !484
  %14 = ptrtoint i32** %np.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %14, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.164, i32 0, i32 0))
  %15 = load i32*, i32** %np.addr, align 8, !dbg !484
  %16 = ptrtoint i32** %k_offset.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %16, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.165, i32 0, i32 0))
  %17 = load i32*, i32** %k_offset.addr, align 8, !dbg !484
  %18 = ptrtoint double** %an.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %18, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.166, i32 0, i32 0))
  %19 = load double*, double** %an.addr, align 8, !dbg !484
  %20 = ptrtoint i32** %timers_enabled.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %20, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.167, i32 0, i32 0))
  %21 = load i32*, i32** %timers_enabled.addr, align 8, !dbg !484
  call void @llvm.dbg.declare(metadata i32* %k, metadata !485, metadata !62), !dbg !476
  call void @llvm.dbg.declare(metadata i32* %kk, metadata !486, metadata !62), !dbg !476
  call void @llvm.dbg.declare(metadata double* %t1, metadata !487, metadata !62), !dbg !476
  call void @llvm.dbg.declare(metadata double* %t2, metadata !488, metadata !62), !dbg !476
  call void @llvm.dbg.declare(metadata double* %t3, metadata !489, metadata !62), !dbg !476
  call void @llvm.dbg.declare(metadata double* %t4, metadata !490, metadata !62), !dbg !476
  call void @llvm.dbg.declare(metadata i32* %i, metadata !491, metadata !62), !dbg !476
  call void @llvm.dbg.declare(metadata i32* %ik, metadata !492, metadata !62), !dbg !476
  call void @llvm.dbg.declare(metadata double* %x1, metadata !493, metadata !62), !dbg !476
  call void @llvm.dbg.declare(metadata double* %x2, metadata !494, metadata !62), !dbg !476
  call void @llvm.dbg.declare(metadata i32* %l, metadata !495, metadata !62), !dbg !476
  %22 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %22, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.168, i32 0, i32 0))
  store i32 0, i32* %i, align 4, !dbg !496
  br label %for.cond, !dbg !499

for.cond:                                         ; preds = %for.inc, %entry
  %23 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %23, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.169, i32 0, i32 0))
  %24 = load i32, i32* %i, align 4, !dbg !500
  %cmp = icmp slt i32 %24, 10, !dbg !503
  br i1 %cmp, label %for.body, label %for.end, !dbg !504

for.body:                                         ; preds = %for.cond
  %25 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %25, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.170, i32 0, i32 0))
  %26 = load i32, i32* %i, align 4, !dbg !505
  %idxprom = sext i32 %26 to i64, !dbg !507
  %27 = call [10 x double]* @_ZTWL2qq(), !dbg !507
  %arrayidx = getelementptr inbounds [10 x double], [10 x double]* %27, i64 0, i64 %idxprom, !dbg !507
  %28 = ptrtoint double* %arrayidx to i64
  call void @__DiscoPoPOpenMPWrite(i64 %28, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.171, i32 0, i32 0))
  store double 0.000000e+00, double* %arrayidx, align 8, !dbg !508
  br label %for.inc, !dbg !509

for.inc:                                          ; preds = %for.body
  %29 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %29, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.172, i32 0, i32 0))
  %30 = load i32, i32* %i, align 4, !dbg !510
  %inc = add nsw i32 %30, 1, !dbg !510
  %31 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %31, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.173, i32 0, i32 0))
  store i32 %inc, i32* %i, align 4, !dbg !510
  br label %for.cond, !dbg !512

for.end:                                          ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %.omp.iv, metadata !513, metadata !62), !dbg !515
  call void @llvm.dbg.declare(metadata i32* %.omp.last.iteration, metadata !516, metadata !62), !dbg !515
  %32 = ptrtoint i32* %15 to i64
  call void @__DiscoPoPOpenMPRead(i64 %32, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.174, i32 0, i32 0))
  %33 = load i32, i32* %15, align 4, !dbg !517
  %sub = sub nsw i32 %33, 1, !dbg !518
  %add = add nsw i32 %sub, 1, !dbg !518
  %div = sdiv i32 %add, 1, !dbg !518
  %sub1 = sub nsw i32 %div, 1, !dbg !515
  %34 = ptrtoint i32* %.omp.last.iteration to i64
  call void @__DiscoPoPOpenMPWrite(i64 %34, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.175, i32 0, i32 0))
  store i32 %sub1, i32* %.omp.last.iteration, align 4, !dbg !515
  call void @llvm.dbg.declare(metadata i32* %k2, metadata !519, metadata !62), !dbg !515
  %35 = ptrtoint i32* %k2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %35, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.176, i32 0, i32 0))
  store i32 1, i32* %k2, align 4, !dbg !520
  %36 = ptrtoint i32* %15 to i64
  call void @__DiscoPoPOpenMPRead(i64 %36, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.177, i32 0, i32 0))
  %37 = load i32, i32* %15, align 4, !dbg !517
  %cmp3 = icmp sle i32 1, %37, !dbg !518
  br i1 %cmp3, label %omp.precond.then, label %omp.precond.end, !dbg !521

omp.precond.then:                                 ; preds = %for.end
  call void @llvm.dbg.declare(metadata i32* %.omp.lb, metadata !522, metadata !62), !dbg !515
  %38 = ptrtoint i32* %.omp.lb to i64
  call void @__DiscoPoPOpenMPWrite(i64 %38, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.178, i32 0, i32 0))
  store i32 0, i32* %.omp.lb, align 4, !dbg !523
  call void @llvm.dbg.declare(metadata i32* %.omp.ub, metadata !525, metadata !62), !dbg !515
  %39 = ptrtoint i32* %.omp.last.iteration to i64
  call void @__DiscoPoPOpenMPRead(i64 %39, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.179, i32 0, i32 0))
  %40 = load i32, i32* %.omp.last.iteration, align 4, !dbg !526
  %41 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPWrite(i64 %41, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.180, i32 0, i32 0))
  store i32 %40, i32* %.omp.ub, align 4, !dbg !523
  call void @llvm.dbg.declare(metadata i32* %.omp.stride, metadata !527, metadata !62), !dbg !515
  %42 = ptrtoint i32* %.omp.stride to i64
  call void @__DiscoPoPOpenMPWrite(i64 %42, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.181, i32 0, i32 0))
  store i32 1, i32* %.omp.stride, align 4, !dbg !523
  call void @llvm.dbg.declare(metadata i32* %.omp.is_last, metadata !528, metadata !62), !dbg !515
  %43 = ptrtoint i32* %.omp.is_last to i64
  call void @__DiscoPoPOpenMPWrite(i64 %43, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.182, i32 0, i32 0))
  store i32 0, i32* %.omp.is_last, align 4, !dbg !523
  call void @llvm.dbg.declare(metadata double* %sx4, metadata !529, metadata !62), !dbg !515
  %44 = ptrtoint double* %sx4 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %44, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.183, i32 0, i32 0))
  store double 0.000000e+00, double* %sx4, align 8, !dbg !530
  call void @llvm.dbg.declare(metadata double* %sy5, metadata !531, metadata !62), !dbg !515
  %45 = ptrtoint double* %sy5 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %45, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.184, i32 0, i32 0))
  store double 0.000000e+00, double* %sy5, align 8, !dbg !532
  call void @llvm.dbg.declare(metadata i32* %k6, metadata !519, metadata !62), !dbg !515
  %46 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !533
  %47 = ptrtoint i8** %46 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %47, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.185, i32 0, i32 0))
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @4, i32 0, i32 0), i8** %46, align 8, !dbg !533
  %48 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %48, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.186, i32 0, i32 0))
  %49 = load i32*, i32** %.global_tid..addr, align 8, !dbg !533
  %50 = ptrtoint i32* %49 to i64
  call void @__DiscoPoPOpenMPRead(i64 %50, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.187, i32 0, i32 0))
  %51 = load i32, i32* %49, align 4, !dbg !533
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.189, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_for_static_init_4(%ident_t* %.kmpc_loc.addr, i32 %51, i32 34, i32* %.omp.is_last, i32* %.omp.lb, i32* %.omp.ub, i32* %.omp.stride, i32 1, i32 1), !dbg !533
  %52 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %52, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.190, i32 0, i32 0))
  %53 = load i32, i32* %.omp.ub, align 4, !dbg !523
  %54 = ptrtoint i32* %.omp.last.iteration to i64
  call void @__DiscoPoPOpenMPRead(i64 %54, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.191, i32 0, i32 0))
  %55 = load i32, i32* %.omp.last.iteration, align 4, !dbg !526
  %cmp7 = icmp sgt i32 %53, %55, !dbg !523
  br i1 %cmp7, label %cond.true, label %cond.false, !dbg !523

cond.true:                                        ; preds = %omp.precond.then
  %56 = ptrtoint i32* %.omp.last.iteration to i64
  call void @__DiscoPoPOpenMPRead(i64 %56, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.192, i32 0, i32 0))
  %57 = load i32, i32* %.omp.last.iteration, align 4, !dbg !534
  br label %cond.end, !dbg !536

cond.false:                                       ; preds = %omp.precond.then
  %58 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %58, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.193, i32 0, i32 0))
  %59 = load i32, i32* %.omp.ub, align 4, !dbg !537
  br label %cond.end, !dbg !537

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %57, %cond.true ], [ %59, %cond.false ], !dbg !539
  %60 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPWrite(i64 %60, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.194, i32 0, i32 0))
  store i32 %cond, i32* %.omp.ub, align 4, !dbg !539
  %61 = ptrtoint i32* %.omp.lb to i64
  call void @__DiscoPoPOpenMPRead(i64 %61, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.195, i32 0, i32 0))
  %62 = load i32, i32* %.omp.lb, align 4, !dbg !539
  %63 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPWrite(i64 %63, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.196, i32 0, i32 0))
  store i32 %62, i32* %.omp.iv, align 4, !dbg !539
  br label %omp.inner.for.cond, !dbg !541

omp.inner.for.cond:                               ; preds = %omp.inner.for.inc, %cond.end
  %64 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %64, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.197, i32 0, i32 0))
  %65 = load i32, i32* %.omp.iv, align 4, !dbg !543
  %66 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %66, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.198, i32 0, i32 0))
  %67 = load i32, i32* %.omp.ub, align 4, !dbg !543
  %cmp8 = icmp sle i32 %65, %67, !dbg !545
  br i1 %cmp8, label %omp.inner.for.body, label %omp.inner.for.end, !dbg !546

omp.inner.for.body:                               ; preds = %omp.inner.for.cond
  %68 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %68, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.199, i32 0, i32 0))
  %69 = load i32, i32* %.omp.iv, align 4, !dbg !548
  %mul = mul nsw i32 %69, 1, !dbg !550
  %add9 = add nsw i32 1, %mul, !dbg !550
  %70 = ptrtoint i32* %k6 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %70, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.200, i32 0, i32 0))
  store i32 %add9, i32* %k6, align 4, !dbg !550
  %71 = ptrtoint i32* %17 to i64
  call void @__DiscoPoPOpenMPRead(i64 %71, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.201, i32 0, i32 0))
  %72 = load i32, i32* %17, align 4, !dbg !551
  %73 = ptrtoint i32* %k6 to i64
  call void @__DiscoPoPOpenMPRead(i64 %73, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.202, i32 0, i32 0))
  %74 = load i32, i32* %k6, align 4, !dbg !553
  %add10 = add nsw i32 %72, %74, !dbg !554
  %75 = ptrtoint i32* %kk to i64
  call void @__DiscoPoPOpenMPWrite(i64 %75, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.203, i32 0, i32 0))
  store i32 %add10, i32* %kk, align 4, !dbg !555
  %76 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %76, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.204, i32 0, i32 0))
  store double 0x41B033C4D7000000, double* %t1, align 8, !dbg !556
  %77 = ptrtoint double* %19 to i64
  call void @__DiscoPoPOpenMPRead(i64 %77, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.205, i32 0, i32 0))
  %78 = load double, double* %19, align 8, !dbg !557
  %79 = ptrtoint double* %t2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %79, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.206, i32 0, i32 0))
  store double %78, double* %t2, align 8, !dbg !558
  %80 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %80, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.207, i32 0, i32 0))
  store i32 1, i32* %i, align 4, !dbg !559
  br label %for.cond11, !dbg !561

for.cond11:                                       ; preds = %for.inc21, %omp.inner.for.body
  %81 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %81, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.208, i32 0, i32 0))
  %82 = load i32, i32* %i, align 4, !dbg !562
  %cmp12 = icmp sle i32 %82, 100, !dbg !565
  br i1 %cmp12, label %for.body13, label %for.end23, !dbg !566

for.body13:                                       ; preds = %for.cond11
  %83 = ptrtoint i32* %kk to i64
  call void @__DiscoPoPOpenMPRead(i64 %83, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.209, i32 0, i32 0))
  %84 = load i32, i32* %kk, align 4, !dbg !567
  %div14 = sdiv i32 %84, 2, !dbg !569
  %85 = ptrtoint i32* %ik to i64
  call void @__DiscoPoPOpenMPWrite(i64 %85, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.210, i32 0, i32 0))
  store i32 %div14, i32* %ik, align 4, !dbg !570
  %86 = ptrtoint i32* %ik to i64
  call void @__DiscoPoPOpenMPRead(i64 %86, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.211, i32 0, i32 0))
  %87 = load i32, i32* %ik, align 4, !dbg !571
  %mul15 = mul nsw i32 2, %87, !dbg !573
  %88 = ptrtoint i32* %kk to i64
  call void @__DiscoPoPOpenMPRead(i64 %88, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.212, i32 0, i32 0))
  %89 = load i32, i32* %kk, align 4, !dbg !574
  %cmp16 = icmp ne i32 %mul15, %89, !dbg !575
  br i1 %cmp16, label %if.then, label %if.end, !dbg !576

if.then:                                          ; preds = %for.body13
  %90 = ptrtoint double* %t2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %90, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.213, i32 0, i32 0))
  %91 = load double, double* %t2, align 8, !dbg !577
  %call = call double @randlc(double* %t1, double %91), !dbg !579
  %92 = ptrtoint double* %t3 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %92, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.214, i32 0, i32 0))
  store double %call, double* %t3, align 8, !dbg !580
  br label %if.end, !dbg !581

if.end:                                           ; preds = %if.then, %for.body13
  %93 = ptrtoint i32* %ik to i64
  call void @__DiscoPoPOpenMPRead(i64 %93, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.215, i32 0, i32 0))
  %94 = load i32, i32* %ik, align 4, !dbg !582
  %cmp17 = icmp eq i32 %94, 0, !dbg !584
  br i1 %cmp17, label %if.then18, label %if.end19, !dbg !585

if.then18:                                        ; preds = %if.end
  br label %for.end23, !dbg !586

if.end19:                                         ; preds = %if.end
  %95 = ptrtoint double* %t2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %95, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.216, i32 0, i32 0))
  %96 = load double, double* %t2, align 8, !dbg !588
  %call20 = call double @randlc(double* %t2, double %96), !dbg !589
  %97 = ptrtoint double* %t3 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %97, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.217, i32 0, i32 0))
  store double %call20, double* %t3, align 8, !dbg !590
  %98 = ptrtoint i32* %ik to i64
  call void @__DiscoPoPOpenMPRead(i64 %98, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.218, i32 0, i32 0))
  %99 = load i32, i32* %ik, align 4, !dbg !591
  %100 = ptrtoint i32* %kk to i64
  call void @__DiscoPoPOpenMPWrite(i64 %100, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.219, i32 0, i32 0))
  store i32 %99, i32* %kk, align 4, !dbg !592
  br label %for.inc21, !dbg !593

for.inc21:                                        ; preds = %if.end19
  %101 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %101, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.220, i32 0, i32 0))
  %102 = load i32, i32* %i, align 4, !dbg !594
  %inc22 = add nsw i32 %102, 1, !dbg !594
  %103 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.221, i32 0, i32 0))
  store i32 %inc22, i32* %i, align 4, !dbg !594
  br label %for.cond11, !dbg !596

for.end23:                                        ; preds = %if.then18, %for.cond11
  %104 = ptrtoint i32* %21 to i64
  call void @__DiscoPoPOpenMPRead(i64 %104, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.222, i32 0, i32 0))
  %105 = load i32, i32* %21, align 4, !dbg !597
  %tobool = icmp ne i32 %105, 0, !dbg !597
  br i1 %tobool, label %if.then24, label %if.end25, !dbg !599

if.then24:                                        ; preds = %for.end23
  call void @timer_start(i32 2), !dbg !600
  br label %if.end25, !dbg !600

if.end25:                                         ; preds = %if.then24, %for.end23
  %106 = call [131072 x double]* @_ZTWL1x(), !dbg !602
  %arraydecay = getelementptr inbounds [131072 x double], [131072 x double]* %106, i32 0, i32 0, !dbg !602
  call void @vranlc(i32 131072, double* %t1, double 0x41D2309CE5400000, double* %arraydecay), !dbg !603
  %107 = ptrtoint i32* %21 to i64
  call void @__DiscoPoPOpenMPRead(i64 %107, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.223, i32 0, i32 0))
  %108 = load i32, i32* %21, align 4, !dbg !605
  %tobool26 = icmp ne i32 %108, 0, !dbg !605
  br i1 %tobool26, label %if.then27, label %if.end28, !dbg !607

if.then27:                                        ; preds = %if.end25
  call void @timer_stop(i32 2), !dbg !608
  br label %if.end28, !dbg !608

if.end28:                                         ; preds = %if.then27, %if.end25
  %109 = ptrtoint i32* %21 to i64
  call void @__DiscoPoPOpenMPRead(i64 %109, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.224, i32 0, i32 0))
  %110 = load i32, i32* %21, align 4, !dbg !610
  %tobool29 = icmp ne i32 %110, 0, !dbg !610
  br i1 %tobool29, label %if.then30, label %if.end31, !dbg !612

if.then30:                                        ; preds = %if.end28
  call void @timer_start(i32 1), !dbg !613
  br label %if.end31, !dbg !613

if.end31:                                         ; preds = %if.then30, %if.end28
  %111 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %111, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.225, i32 0, i32 0))
  store i32 0, i32* %i, align 4, !dbg !615
  br label %for.cond32, !dbg !617

for.cond32:                                       ; preds = %for.inc74, %if.end31
  %112 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %112, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.226, i32 0, i32 0))
  %113 = load i32, i32* %i, align 4, !dbg !618
  %cmp33 = icmp slt i32 %113, 65536, !dbg !621
  br i1 %cmp33, label %for.body34, label %for.end76, !dbg !622

for.body34:                                       ; preds = %for.cond32
  %114 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %114, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.227, i32 0, i32 0))
  %115 = load i32, i32* %i, align 4, !dbg !623
  %mul35 = mul nsw i32 2, %115, !dbg !625
  %idxprom36 = sext i32 %mul35 to i64, !dbg !626
  %116 = call [131072 x double]* @_ZTWL1x(), !dbg !626
  %arrayidx37 = getelementptr inbounds [131072 x double], [131072 x double]* %116, i64 0, i64 %idxprom36, !dbg !626
  %117 = ptrtoint double* %arrayidx37 to i64
  call void @__DiscoPoPOpenMPRead(i64 %117, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.228, i32 0, i32 0))
  %118 = load double, double* %arrayidx37, align 8, !dbg !626
  %mul38 = fmul double 2.000000e+00, %118, !dbg !627
  %sub39 = fsub double %mul38, 1.000000e+00, !dbg !628
  %119 = ptrtoint double* %x1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %119, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.229, i32 0, i32 0))
  store double %sub39, double* %x1, align 8, !dbg !629
  %120 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %120, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.230, i32 0, i32 0))
  %121 = load i32, i32* %i, align 4, !dbg !630
  %mul40 = mul nsw i32 2, %121, !dbg !631
  %add41 = add nsw i32 %mul40, 1, !dbg !632
  %idxprom42 = sext i32 %add41 to i64, !dbg !633
  %122 = call [131072 x double]* @_ZTWL1x(), !dbg !633
  %arrayidx43 = getelementptr inbounds [131072 x double], [131072 x double]* %122, i64 0, i64 %idxprom42, !dbg !633
  %123 = ptrtoint double* %arrayidx43 to i64
  call void @__DiscoPoPOpenMPRead(i64 %123, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.231, i32 0, i32 0))
  %124 = load double, double* %arrayidx43, align 8, !dbg !633
  %mul44 = fmul double 2.000000e+00, %124, !dbg !634
  %sub45 = fsub double %mul44, 1.000000e+00, !dbg !635
  %125 = ptrtoint double* %x2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %125, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.232, i32 0, i32 0))
  store double %sub45, double* %x2, align 8, !dbg !636
  %126 = ptrtoint double* %x1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %126, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.233, i32 0, i32 0))
  %127 = load double, double* %x1, align 8, !dbg !637
  %128 = ptrtoint double* %x1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %128, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.234, i32 0, i32 0))
  %129 = load double, double* %x1, align 8, !dbg !638
  %mul46 = fmul double %127, %129, !dbg !639
  %130 = ptrtoint double* %x2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %130, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.235, i32 0, i32 0))
  %131 = load double, double* %x2, align 8, !dbg !640
  %132 = ptrtoint double* %x2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %132, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.236, i32 0, i32 0))
  %133 = load double, double* %x2, align 8, !dbg !641
  %mul47 = fmul double %131, %133, !dbg !642
  %add48 = fadd double %mul46, %mul47, !dbg !643
  %134 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %134, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.237, i32 0, i32 0))
  store double %add48, double* %t1, align 8, !dbg !644
  %135 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %135, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.238, i32 0, i32 0))
  %136 = load double, double* %t1, align 8, !dbg !645
  %cmp49 = fcmp ole double %136, 1.000000e+00, !dbg !647
  br i1 %cmp49, label %if.then50, label %if.end73, !dbg !648

if.then50:                                        ; preds = %for.body34
  %137 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %137, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.239, i32 0, i32 0))
  %138 = load double, double* %t1, align 8, !dbg !649
  %call51 = call double @log(double %138) #6, !dbg !651
  %mul52 = fmul double -2.000000e+00, %call51, !dbg !652
  %139 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %139, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.240, i32 0, i32 0))
  %140 = load double, double* %t1, align 8, !dbg !653
  %div53 = fdiv double %mul52, %140, !dbg !654
  %call54 = call double @sqrt(double %div53) #6, !dbg !655
  %141 = ptrtoint double* %t2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %141, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.241, i32 0, i32 0))
  store double %call54, double* %t2, align 8, !dbg !657
  %142 = ptrtoint double* %x1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %142, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.242, i32 0, i32 0))
  %143 = load double, double* %x1, align 8, !dbg !658
  %144 = ptrtoint double* %t2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %144, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.243, i32 0, i32 0))
  %145 = load double, double* %t2, align 8, !dbg !659
  %mul55 = fmul double %143, %145, !dbg !660
  %146 = ptrtoint double* %t3 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %146, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.244, i32 0, i32 0))
  store double %mul55, double* %t3, align 8, !dbg !661
  %147 = ptrtoint double* %x2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %147, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.245, i32 0, i32 0))
  %148 = load double, double* %x2, align 8, !dbg !662
  %149 = ptrtoint double* %t2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %149, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.246, i32 0, i32 0))
  %150 = load double, double* %t2, align 8, !dbg !663
  %mul56 = fmul double %148, %150, !dbg !664
  %151 = ptrtoint double* %t4 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %151, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.247, i32 0, i32 0))
  store double %mul56, double* %t4, align 8, !dbg !665
  %152 = ptrtoint double* %t3 to i64
  call void @__DiscoPoPOpenMPRead(i64 %152, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.248, i32 0, i32 0))
  %153 = load double, double* %t3, align 8, !dbg !666
  %call57 = call double @fabs(double %153) #2, !dbg !666
  %154 = ptrtoint double* %t4 to i64
  call void @__DiscoPoPOpenMPRead(i64 %154, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.249, i32 0, i32 0))
  %155 = load double, double* %t4, align 8, !dbg !666
  %call58 = call double @fabs(double %155) #2, !dbg !667
  %cmp59 = fcmp ogt double %call57, %call58, !dbg !666
  br i1 %cmp59, label %cond.true60, label %cond.false62, !dbg !666

cond.true60:                                      ; preds = %if.then50
  %156 = ptrtoint double* %t3 to i64
  call void @__DiscoPoPOpenMPRead(i64 %156, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.250, i32 0, i32 0))
  %157 = load double, double* %t3, align 8, !dbg !669
  %call61 = call double @fabs(double %157) #2, !dbg !669
  br label %cond.end64, !dbg !669

cond.false62:                                     ; preds = %if.then50
  %158 = ptrtoint double* %t4 to i64
  call void @__DiscoPoPOpenMPRead(i64 %158, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.251, i32 0, i32 0))
  %159 = load double, double* %t4, align 8, !dbg !670
  %call63 = call double @fabs(double %159) #2, !dbg !670
  br label %cond.end64, !dbg !670

cond.end64:                                       ; preds = %cond.false62, %cond.true60
  %cond65 = phi double [ %call61, %cond.true60 ], [ %call63, %cond.false62 ], !dbg !672
  %conv = fptosi double %cond65 to i32, !dbg !672
  %160 = ptrtoint i32* %l to i64
  call void @__DiscoPoPOpenMPWrite(i64 %160, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.252, i32 0, i32 0))
  store i32 %conv, i32* %l, align 4, !dbg !674
  %161 = ptrtoint i32* %l to i64
  call void @__DiscoPoPOpenMPRead(i64 %161, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.253, i32 0, i32 0))
  %162 = load i32, i32* %l, align 4, !dbg !675
  %idxprom66 = sext i32 %162 to i64, !dbg !676
  %163 = call [10 x double]* @_ZTWL2qq(), !dbg !676
  %arrayidx67 = getelementptr inbounds [10 x double], [10 x double]* %163, i64 0, i64 %idxprom66, !dbg !676
  %164 = ptrtoint double* %arrayidx67 to i64
  call void @__DiscoPoPOpenMPRead(i64 %164, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.254, i32 0, i32 0))
  %165 = load double, double* %arrayidx67, align 8, !dbg !676
  %add68 = fadd double %165, 1.000000e+00, !dbg !677
  %166 = ptrtoint i32* %l to i64
  call void @__DiscoPoPOpenMPRead(i64 %166, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.255, i32 0, i32 0))
  %167 = load i32, i32* %l, align 4, !dbg !678
  %idxprom69 = sext i32 %167 to i64, !dbg !679
  %168 = call [10 x double]* @_ZTWL2qq(), !dbg !680
  %arrayidx70 = getelementptr inbounds [10 x double], [10 x double]* %168, i64 0, i64 %idxprom69, !dbg !679
  %169 = ptrtoint double* %arrayidx70 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %169, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.256, i32 0, i32 0))
  store double %add68, double* %arrayidx70, align 8, !dbg !681
  %170 = ptrtoint double* %sx4 to i64
  call void @__DiscoPoPOpenMPRead(i64 %170, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.257, i32 0, i32 0))
  %171 = load double, double* %sx4, align 8, !dbg !682
  %172 = ptrtoint double* %t3 to i64
  call void @__DiscoPoPOpenMPRead(i64 %172, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.258, i32 0, i32 0))
  %173 = load double, double* %t3, align 8, !dbg !683
  %add71 = fadd double %171, %173, !dbg !684
  %174 = ptrtoint double* %sx4 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %174, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.259, i32 0, i32 0))
  store double %add71, double* %sx4, align 8, !dbg !685
  %175 = ptrtoint double* %sy5 to i64
  call void @__DiscoPoPOpenMPRead(i64 %175, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.260, i32 0, i32 0))
  %176 = load double, double* %sy5, align 8, !dbg !686
  %177 = ptrtoint double* %t4 to i64
  call void @__DiscoPoPOpenMPRead(i64 %177, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.261, i32 0, i32 0))
  %178 = load double, double* %t4, align 8, !dbg !687
  %add72 = fadd double %176, %178, !dbg !688
  %179 = ptrtoint double* %sy5 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %179, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.262, i32 0, i32 0))
  store double %add72, double* %sy5, align 8, !dbg !689
  br label %if.end73, !dbg !690

if.end73:                                         ; preds = %cond.end64, %for.body34
  br label %for.inc74, !dbg !691

for.inc74:                                        ; preds = %if.end73
  %180 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %180, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.263, i32 0, i32 0))
  %181 = load i32, i32* %i, align 4, !dbg !692
  %inc75 = add nsw i32 %181, 1, !dbg !692
  %182 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %182, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.264, i32 0, i32 0))
  store i32 %inc75, i32* %i, align 4, !dbg !692
  br label %for.cond32, !dbg !694

for.end76:                                        ; preds = %for.cond32
  %183 = ptrtoint i32* %21 to i64
  call void @__DiscoPoPOpenMPRead(i64 %183, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.265, i32 0, i32 0))
  %184 = load i32, i32* %21, align 4, !dbg !695
  %tobool77 = icmp ne i32 %184, 0, !dbg !695
  br i1 %tobool77, label %if.then78, label %if.end79, !dbg !697

if.then78:                                        ; preds = %for.end76
  call void @timer_stop(i32 1), !dbg !698
  br label %if.end79, !dbg !698

if.end79:                                         ; preds = %if.then78, %for.end76
  br label %omp.body.continue, !dbg !700

omp.body.continue:                                ; preds = %if.end79
  br label %omp.inner.for.inc, !dbg !701

omp.inner.for.inc:                                ; preds = %omp.body.continue
  %185 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %185, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.266, i32 0, i32 0))
  %186 = load i32, i32* %.omp.iv, align 4, !dbg !702
  %add80 = add nsw i32 %186, 1, !dbg !704
  %187 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPWrite(i64 %187, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.267, i32 0, i32 0))
  store i32 %add80, i32* %.omp.iv, align 4, !dbg !704
  br label %omp.inner.for.cond, !dbg !705

omp.inner.for.end:                                ; preds = %omp.inner.for.cond
  br label %omp.loop.exit, !dbg !706

omp.loop.exit:                                    ; preds = %omp.inner.for.end
  %188 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !707
  %189 = ptrtoint i8** %188 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %189, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.268, i32 0, i32 0))
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @4, i32 0, i32 0), i8** %188, align 8, !dbg !707
  %190 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %190, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.269, i32 0, i32 0))
  %191 = load i32*, i32** %.global_tid..addr, align 8, !dbg !707
  %192 = ptrtoint i32* %191 to i64
  call void @__DiscoPoPOpenMPRead(i64 %192, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.270, i32 0, i32 0))
  %193 = load i32, i32* %191, align 4, !dbg !707
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.272, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_for_static_fini(%ident_t* %.kmpc_loc.addr, i32 %193), !dbg !707
  %194 = getelementptr inbounds [2 x i8*], [2 x i8*]* %.omp.reduction.red_list, i64 0, i64 0, !dbg !707
  %195 = bitcast double* %sx4 to i8*, !dbg !707
  %196 = ptrtoint i8** %194 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %196, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.273, i32 0, i32 0))
  store i8* %195, i8** %194, align 8, !dbg !707
  %197 = getelementptr inbounds [2 x i8*], [2 x i8*]* %.omp.reduction.red_list, i64 0, i64 1, !dbg !707
  %198 = bitcast double* %sy5 to i8*, !dbg !707
  %199 = ptrtoint i8** %197 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %199, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.274, i32 0, i32 0))
  store i8* %198, i8** %197, align 8, !dbg !707
  %200 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !707
  %201 = ptrtoint i8** %200 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %201, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.275, i32 0, i32 0))
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @5, i32 0, i32 0), i8** %200, align 8, !dbg !707
  %202 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %202, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.276, i32 0, i32 0))
  %203 = load i32*, i32** %.global_tid..addr, align 8, !dbg !707
  %204 = ptrtoint i32* %203 to i64
  call void @__DiscoPoPOpenMPRead(i64 %204, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.277, i32 0, i32 0))
  %205 = load i32, i32* %203, align 4, !dbg !707
  %206 = bitcast [2 x i8*]* %.omp.reduction.red_list to i8*, !dbg !707
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.279, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  %207 = call i32 @__kmpc_reduce_nowait(%ident_t* %.kmpc_loc.addr, i32 %205, i32 2, i64 16, i8* %206, void (i8*, i8*)* @.omp.reduction.reduction_func, [8 x i32]* @.gomp_critical_user_.reduction.var), !dbg !708
  switch i32 %207, label %.omp.reduction.default [
    i32 1, label %.omp.reduction.case1
    i32 2, label %.omp.reduction.case2
  ], !dbg !707

.omp.reduction.case1:                             ; preds = %omp.loop.exit
  %208 = ptrtoint double* %11 to i64
  call void @__DiscoPoPOpenMPRead(i64 %208, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.280, i32 0, i32 0))
  %209 = load double, double* %11, align 8, !dbg !710
  %210 = ptrtoint double* %sx4 to i64
  call void @__DiscoPoPOpenMPRead(i64 %210, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.281, i32 0, i32 0))
  %211 = load double, double* %sx4, align 8, !dbg !710
  %add81 = fadd double %209, %211, !dbg !712
  %212 = ptrtoint double* %11 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %212, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.282, i32 0, i32 0))
  store double %add81, double* %11, align 8, !dbg !712
  %213 = ptrtoint double* %13 to i64
  call void @__DiscoPoPOpenMPRead(i64 %213, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.283, i32 0, i32 0))
  %214 = load double, double* %13, align 8, !dbg !713
  %215 = ptrtoint double* %sy5 to i64
  call void @__DiscoPoPOpenMPRead(i64 %215, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.284, i32 0, i32 0))
  %216 = load double, double* %sy5, align 8, !dbg !713
  %add82 = fadd double %214, %216, !dbg !712
  %217 = ptrtoint double* %13 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %217, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.285, i32 0, i32 0))
  store double %add82, double* %13, align 8, !dbg !712
  call void @__kmpc_end_reduce_nowait(%ident_t* %.kmpc_loc.addr, i32 %205, [8 x i32]* @.gomp_critical_user_.reduction.var), !dbg !714
  br label %.omp.reduction.default, !dbg !714

.omp.reduction.case2:                             ; preds = %omp.loop.exit
  %218 = ptrtoint double* %sx4 to i64
  call void @__DiscoPoPOpenMPRead(i64 %218, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.286, i32 0, i32 0))
  %219 = load double, double* %sx4, align 8, !dbg !715
  %220 = bitcast double* %11 to i64*, !dbg !717
  %221 = ptrtoint i64* %220 to i64
  call void @__DiscoPoPOpenMPRead(i64 %221, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.287, i32 0, i32 0))
  %atomic-load = load atomic i64, i64* %220 monotonic, align 8, !dbg !717
  br label %atomic_cont, !dbg !717

atomic_cont:                                      ; preds = %atomic_cont, %.omp.reduction.case2
  %222 = phi i64 [ %atomic-load, %.omp.reduction.case2 ], [ %235, %atomic_cont ], !dbg !718
  %223 = bitcast double* %atomic-temp to i64*, !dbg !718
  %224 = bitcast i64 %222 to double, !dbg !718
  %225 = ptrtoint double* %tmp to i64
  call void @__DiscoPoPOpenMPWrite(i64 %225, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.288, i32 0, i32 0))
  store double %224, double* %tmp, align 8, !dbg !718
  %226 = ptrtoint double* %tmp to i64
  call void @__DiscoPoPOpenMPRead(i64 %226, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.289, i32 0, i32 0))
  %227 = load double, double* %tmp, align 8, !dbg !720
  %228 = ptrtoint double* %sx4 to i64
  call void @__DiscoPoPOpenMPRead(i64 %228, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.290, i32 0, i32 0))
  %229 = load double, double* %sx4, align 8, !dbg !720
  %add83 = fadd double %227, %229, !dbg !721
  %230 = ptrtoint double* %atomic-temp to i64
  call void @__DiscoPoPOpenMPWrite(i64 %230, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.291, i32 0, i32 0))
  store double %add83, double* %atomic-temp, align 8, !dbg !718
  %231 = ptrtoint i64* %223 to i64
  call void @__DiscoPoPOpenMPRead(i64 %231, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.292, i32 0, i32 0))
  %232 = load i64, i64* %223, align 8, !dbg !718
  %233 = bitcast double* %11 to i64*, !dbg !718
  %234 = cmpxchg i64* %233, i64 %222, i64 %232 monotonic monotonic, !dbg !718
  %235 = extractvalue { i64, i1 } %234, 0, !dbg !718
  %236 = extractvalue { i64, i1 } %234, 1, !dbg !718
  br i1 %236, label %atomic_exit, label %atomic_cont, !dbg !718

atomic_exit:                                      ; preds = %atomic_cont
  %237 = ptrtoint double* %sy5 to i64
  call void @__DiscoPoPOpenMPRead(i64 %237, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.293, i32 0, i32 0))
  %238 = load double, double* %sy5, align 8, !dbg !722
  %239 = bitcast double* %13 to i64*, !dbg !724
  %240 = ptrtoint i64* %239 to i64
  call void @__DiscoPoPOpenMPRead(i64 %240, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.294, i32 0, i32 0))
  %atomic-load84 = load atomic i64, i64* %239 monotonic, align 8, !dbg !724
  br label %atomic_cont85, !dbg !724

atomic_cont85:                                    ; preds = %atomic_cont85, %atomic_exit
  %241 = phi i64 [ %atomic-load84, %atomic_exit ], [ %254, %atomic_cont85 ], !dbg !725
  %242 = bitcast double* %atomic-temp86 to i64*, !dbg !725
  %243 = bitcast i64 %241 to double, !dbg !725
  %244 = ptrtoint double* %tmp87 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %244, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.295, i32 0, i32 0))
  store double %243, double* %tmp87, align 8, !dbg !725
  %245 = ptrtoint double* %tmp87 to i64
  call void @__DiscoPoPOpenMPRead(i64 %245, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.296, i32 0, i32 0))
  %246 = load double, double* %tmp87, align 8, !dbg !727
  %247 = ptrtoint double* %sy5 to i64
  call void @__DiscoPoPOpenMPRead(i64 %247, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.297, i32 0, i32 0))
  %248 = load double, double* %sy5, align 8, !dbg !727
  %add88 = fadd double %246, %248, !dbg !728
  %249 = ptrtoint double* %atomic-temp86 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %249, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.298, i32 0, i32 0))
  store double %add88, double* %atomic-temp86, align 8, !dbg !725
  %250 = ptrtoint i64* %242 to i64
  call void @__DiscoPoPOpenMPRead(i64 %250, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.299, i32 0, i32 0))
  %251 = load i64, i64* %242, align 8, !dbg !725
  %252 = bitcast double* %13 to i64*, !dbg !725
  %253 = cmpxchg i64* %252, i64 %241, i64 %251 monotonic monotonic, !dbg !725
  %254 = extractvalue { i64, i1 } %253, 0, !dbg !725
  %255 = extractvalue { i64, i1 } %253, 1, !dbg !725
  br i1 %255, label %atomic_exit89, label %atomic_cont85, !dbg !725

atomic_exit89:                                    ; preds = %atomic_cont85
  br label %.omp.reduction.default, !dbg !729

.omp.reduction.default:                           ; preds = %atomic_exit89, %.omp.reduction.case1, %omp.loop.exit
  br label %omp.precond.end, !dbg !731

omp.precond.end:                                  ; preds = %.omp.reduction.default, %for.end
  %256 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %256, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.300, i32 0, i32 0))
  store i32 0, i32* %i, align 4, !dbg !733
  br label %for.cond90, !dbg !735

for.cond90:                                       ; preds = %for.inc103, %omp.precond.end
  %257 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %257, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.301, i32 0, i32 0))
  %258 = load i32, i32* %i, align 4, !dbg !736
  %cmp91 = icmp slt i32 %258, 10, !dbg !739
  br i1 %cmp91, label %for.body93, label %for.end105, !dbg !740

for.body93:                                       ; preds = %for.cond90
  %259 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %259, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.302, i32 0, i32 0))
  %260 = load i32, i32* %i, align 4, !dbg !741
  %idxprom94 = sext i32 %260 to i64, !dbg !744
  %arrayidx95 = getelementptr inbounds [10 x double], [10 x double]* @q, i64 0, i64 %idxprom94, !dbg !744
  %261 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %261, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.303, i32 0, i32 0))
  %262 = load i32, i32* %i, align 4, !dbg !745
  %idxprom96 = sext i32 %262 to i64, !dbg !746
  %263 = call [10 x double]* @_ZTWL2qq(), !dbg !746
  %arrayidx97 = getelementptr inbounds [10 x double], [10 x double]* %263, i64 0, i64 %idxprom96, !dbg !746
  %264 = ptrtoint double* %arrayidx97 to i64
  call void @__DiscoPoPOpenMPRead(i64 %264, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.304, i32 0, i32 0))
  %265 = load double, double* %arrayidx97, align 8, !dbg !746
  %266 = bitcast double* %arrayidx95 to i64*, !dbg !744
  %267 = ptrtoint i64* %266 to i64
  call void @__DiscoPoPOpenMPRead(i64 %267, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.305, i32 0, i32 0))
  %atomic-load98 = load atomic i64, i64* %266 monotonic, align 8, !dbg !744
  br label %atomic_cont99, !dbg !744

atomic_cont99:                                    ; preds = %atomic_cont99, %for.body93
  %268 = phi i64 [ %atomic-load98, %for.body93 ], [ %276, %atomic_cont99 ], !dbg !747
  %269 = bitcast double* %atomic-temp100 to i64*, !dbg !747
  %270 = bitcast i64 %268 to double, !dbg !747
  %add101 = fadd double %270, %265, !dbg !749
  %271 = ptrtoint double* %atomic-temp100 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %271, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.306, i32 0, i32 0))
  store double %add101, double* %atomic-temp100, align 8, !dbg !747
  %272 = ptrtoint i64* %269 to i64
  call void @__DiscoPoPOpenMPRead(i64 %272, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.307, i32 0, i32 0))
  %273 = load i64, i64* %269, align 8, !dbg !747
  %274 = bitcast double* %arrayidx95 to i64*, !dbg !747
  %275 = cmpxchg i64* %274, i64 %268, i64 %273 monotonic monotonic, !dbg !747
  %276 = extractvalue { i64, i1 } %275, 0, !dbg !747
  %277 = extractvalue { i64, i1 } %275, 1, !dbg !747
  br i1 %277, label %atomic_exit102, label %atomic_cont99, !dbg !747

atomic_exit102:                                   ; preds = %atomic_cont99
  br label %for.inc103, !dbg !750

for.inc103:                                       ; preds = %atomic_exit102
  %278 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %278, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.308, i32 0, i32 0))
  %279 = load i32, i32* %i, align 4, !dbg !751
  %inc104 = add nsw i32 %279, 1, !dbg !751
  %280 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %280, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.309, i32 0, i32 0))
  store i32 %inc104, i32* %i, align 4, !dbg !751
  br label %for.cond90, !dbg !753

for.end105:                                       ; preds = %for.cond90
  call void @__DiscoPoPOpenMPAfterCall()
  ret void, !dbg !754
}

; Function Attrs: nounwind uwtable
define internal [10 x double]* @_ZTWL2qq() #0 {
  ret [10 x double]* @qq
}

declare void @__kmpc_for_static_init_4(%ident_t*, i32, i32, i32*, i32*, i32*, i32*, i32, i32)

declare void @__kmpc_for_static_fini(%ident_t*, i32)

; Function Attrs: nounwind uwtable
define internal void @.omp.reduction.reduction_func(i8*, i8*) #0 !dbg !755 {
entry:
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.311, i32 0, i32 0))
  %.addr = alloca i8*, align 8
  %.addr1 = alloca i8*, align 8
  %2 = ptrtoint i8** %.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.312, i32 0, i32 0))
  store i8* %0, i8** %.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %.addr, metadata !757, metadata !62), !dbg !758
  %3 = ptrtoint i8** %.addr1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.313, i32 0, i32 0))
  store i8* %1, i8** %.addr1, align 8
  call void @llvm.dbg.declare(metadata i8** %.addr1, metadata !759, metadata !62), !dbg !758
  %4 = ptrtoint i8** %.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %4, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.314, i32 0, i32 0))
  %5 = load i8*, i8** %.addr, align 8
  %6 = bitcast i8* %5 to [2 x i8*]*
  %7 = ptrtoint i8** %.addr1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %7, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.315, i32 0, i32 0))
  %8 = load i8*, i8** %.addr1, align 8
  %9 = bitcast i8* %8 to [2 x i8*]*
  %10 = getelementptr inbounds [2 x i8*], [2 x i8*]* %9, i64 0, i64 0
  %11 = ptrtoint i8** %10 to i64
  call void @__DiscoPoPOpenMPRead(i64 %11, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.316, i32 0, i32 0))
  %12 = load i8*, i8** %10, align 8
  %13 = bitcast i8* %12 to double*
  %14 = getelementptr inbounds [2 x i8*], [2 x i8*]* %6, i64 0, i64 0
  %15 = ptrtoint i8** %14 to i64
  call void @__DiscoPoPOpenMPRead(i64 %15, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.317, i32 0, i32 0))
  %16 = load i8*, i8** %14, align 8
  %17 = bitcast i8* %16 to double*
  %18 = getelementptr inbounds [2 x i8*], [2 x i8*]* %9, i64 0, i64 1
  %19 = ptrtoint i8** %18 to i64
  call void @__DiscoPoPOpenMPRead(i64 %19, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.318, i32 0, i32 0))
  %20 = load i8*, i8** %18, align 8
  %21 = bitcast i8* %20 to double*
  %22 = getelementptr inbounds [2 x i8*], [2 x i8*]* %6, i64 0, i64 1
  %23 = ptrtoint i8** %22 to i64
  call void @__DiscoPoPOpenMPRead(i64 %23, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.319, i32 0, i32 0))
  %24 = load i8*, i8** %22, align 8
  %25 = bitcast i8* %24 to double*
  %26 = ptrtoint double* %17 to i64
  call void @__DiscoPoPOpenMPRead(i64 %26, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.320, i32 0, i32 0))
  %27 = load double, double* %17, align 8, !dbg !760
  %28 = ptrtoint double* %13 to i64
  call void @__DiscoPoPOpenMPRead(i64 %28, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.321, i32 0, i32 0))
  %29 = load double, double* %13, align 8, !dbg !760
  %add = fadd double %27, %29, !dbg !761
  %30 = ptrtoint double* %17 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %30, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.322, i32 0, i32 0))
  store double %add, double* %17, align 8, !dbg !761
  %31 = ptrtoint double* %25 to i64
  call void @__DiscoPoPOpenMPRead(i64 %31, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.323, i32 0, i32 0))
  %32 = load double, double* %25, align 8, !dbg !762
  %33 = ptrtoint double* %21 to i64
  call void @__DiscoPoPOpenMPRead(i64 %33, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.324, i32 0, i32 0))
  %34 = load double, double* %21, align 8, !dbg !762
  %add2 = fadd double %32, %34, !dbg !761
  %35 = ptrtoint double* %25 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %35, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.325, i32 0, i32 0))
  store double %add2, double* %25, align 8, !dbg !761
  call void @__DiscoPoPOpenMPAfterCall()
  ret void, !dbg !762
}

declare i32 @__kmpc_reduce_nowait(%ident_t*, i32, i32, i64, i8*, void (i8*, i8*)*, [8 x i32]*)

declare void @__kmpc_end_reduce_nowait(%ident_t*, i32, [8 x i32]*)

; Function Attrs: nounwind uwtable
define void @print_results(i8* %name, i8 signext %class, i32 %n1, i32 %n2, i32 %n3, i32 %niter, double %t, double %mops, i8* %optype, i32 %verified, i8* %npbversion, i8* %compiletime, i8* %cs1, i8* %cs2, i8* %cs3, i8* %cs4, i8* %cs5, i8* %cs6, i8* %cs7) #0 !dbg !763 {
entry:
  %name.addr = alloca i8*, align 8
  %class.addr = alloca i8, align 1
  %n1.addr = alloca i32, align 4
  %n2.addr = alloca i32, align 4
  %n3.addr = alloca i32, align 4
  %niter.addr = alloca i32, align 4
  %t.addr = alloca double, align 8
  %mops.addr = alloca double, align 8
  %optype.addr = alloca i8*, align 8
  %verified.addr = alloca i32, align 4
  %npbversion.addr = alloca i8*, align 8
  %compiletime.addr = alloca i8*, align 8
  %cs1.addr = alloca i8*, align 8
  %cs2.addr = alloca i8*, align 8
  %cs3.addr = alloca i8*, align 8
  %cs4.addr = alloca i8*, align 8
  %cs5.addr = alloca i8*, align 8
  %cs6.addr = alloca i8*, align 8
  %cs7.addr = alloca i8*, align 8
  %size = alloca [16 x i8], align 16
  %j = alloca i32, align 4
  %num_threads = alloca i32, align 4
  %max_threads = alloca i32, align 4
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  %2 = ptrtoint i8** %name.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.326, i32 0, i32 0))
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !768, metadata !62), !dbg !769
  %3 = ptrtoint i8* %class.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.327, i32 0, i32 0))
  store i8 %class, i8* %class.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %class.addr, metadata !770, metadata !62), !dbg !771
  %4 = ptrtoint i32* %n1.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.328, i32 0, i32 0))
  store i32 %n1, i32* %n1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n1.addr, metadata !772, metadata !62), !dbg !773
  %5 = ptrtoint i32* %n2.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.329, i32 0, i32 0))
  store i32 %n2, i32* %n2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n2.addr, metadata !774, metadata !62), !dbg !775
  %6 = ptrtoint i32* %n3.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.330, i32 0, i32 0))
  store i32 %n3, i32* %n3.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n3.addr, metadata !776, metadata !62), !dbg !777
  %7 = ptrtoint i32* %niter.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %7, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.331, i32 0, i32 0))
  store i32 %niter, i32* %niter.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %niter.addr, metadata !778, metadata !62), !dbg !779
  %8 = ptrtoint double* %t.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.332, i32 0, i32 0))
  store double %t, double* %t.addr, align 8
  call void @llvm.dbg.declare(metadata double* %t.addr, metadata !780, metadata !62), !dbg !781
  %9 = ptrtoint double* %mops.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %9, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.333, i32 0, i32 0))
  store double %mops, double* %mops.addr, align 8
  call void @llvm.dbg.declare(metadata double* %mops.addr, metadata !782, metadata !62), !dbg !783
  %10 = ptrtoint i8** %optype.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %10, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.334, i32 0, i32 0))
  store i8* %optype, i8** %optype.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optype.addr, metadata !784, metadata !62), !dbg !785
  %11 = ptrtoint i32* %verified.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %11, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.335, i32 0, i32 0))
  store i32 %verified, i32* %verified.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %verified.addr, metadata !786, metadata !62), !dbg !787
  %12 = ptrtoint i8** %npbversion.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %12, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.336, i32 0, i32 0))
  store i8* %npbversion, i8** %npbversion.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %npbversion.addr, metadata !788, metadata !62), !dbg !789
  %13 = ptrtoint i8** %compiletime.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %13, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.337, i32 0, i32 0))
  store i8* %compiletime, i8** %compiletime.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %compiletime.addr, metadata !790, metadata !62), !dbg !791
  %14 = ptrtoint i8** %cs1.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %14, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.338, i32 0, i32 0))
  store i8* %cs1, i8** %cs1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cs1.addr, metadata !792, metadata !62), !dbg !793
  %15 = ptrtoint i8** %cs2.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %15, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.339, i32 0, i32 0))
  store i8* %cs2, i8** %cs2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cs2.addr, metadata !794, metadata !62), !dbg !795
  %16 = ptrtoint i8** %cs3.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %16, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.340, i32 0, i32 0))
  store i8* %cs3, i8** %cs3.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cs3.addr, metadata !796, metadata !62), !dbg !797
  %17 = ptrtoint i8** %cs4.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.341, i32 0, i32 0))
  store i8* %cs4, i8** %cs4.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cs4.addr, metadata !798, metadata !62), !dbg !799
  %18 = ptrtoint i8** %cs5.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %18, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.342, i32 0, i32 0))
  store i8* %cs5, i8** %cs5.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cs5.addr, metadata !800, metadata !62), !dbg !801
  %19 = ptrtoint i8** %cs6.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %19, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.343, i32 0, i32 0))
  store i8* %cs6, i8** %cs6.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cs6.addr, metadata !802, metadata !62), !dbg !803
  %20 = ptrtoint i8** %cs7.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %20, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.344, i32 0, i32 0))
  store i8* %cs7, i8** %cs7.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cs7.addr, metadata !804, metadata !62), !dbg !805
  call void @llvm.dbg.declare(metadata [16 x i8]* %size, metadata !806, metadata !62), !dbg !807
  call void @llvm.dbg.declare(metadata i32* %j, metadata !808, metadata !62), !dbg !809
  call void @llvm.dbg.declare(metadata i32* %num_threads, metadata !810, metadata !62), !dbg !811
  call void @llvm.dbg.declare(metadata i32* %max_threads, metadata !812, metadata !62), !dbg !813
  %21 = ptrtoint i32* %max_threads to i64
  call void @__DiscoPoPOpenMPWrite(i64 %21, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.345, i32 0, i32 0))
  store i32 1, i32* %max_threads, align 4, !dbg !814
  %22 = ptrtoint i32* %num_threads to i64
  call void @__DiscoPoPOpenMPWrite(i64 %22, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.346, i32 0, i32 0))
  store i32 1, i32* %num_threads, align 4, !dbg !815
  %call = call i32 @omp_get_max_threads(), !dbg !816
  %23 = ptrtoint i32* %max_threads to i64
  call void @__DiscoPoPOpenMPWrite(i64 %23, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.347, i32 0, i32 0))
  store i32 %call, i32* %max_threads, align 4, !dbg !817
  %24 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !818
  %25 = ptrtoint i8** %24 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %25, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.348, i32 0, i32 0))
  store i8* getelementptr inbounds ([38 x i8], [38 x i8]* @7, i32 0, i32 0), i8** %24, align 8, !dbg !818
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.350, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* %.kmpc_loc.addr, i32 1, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*)* @.omp_outlined..9 to void (i32*, i32*, ...)*), i32* %num_threads), !dbg !818
  %26 = ptrtoint i8** %name.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %26, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.351, i32 0, i32 0))
  %27 = load i8*, i8** %name.addr, align 8, !dbg !819
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1.10, i32 0, i32 0), i8* %27), !dbg !820
  %28 = ptrtoint i8* %class.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %28, i32 1, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.352, i32 0, i32 0))
  %29 = load i8, i8* %class.addr, align 1, !dbg !821
  %conv = sext i8 %29 to i32, !dbg !821
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2.11, i32 0, i32 0), i32 %conv), !dbg !822
  %30 = ptrtoint i32* %n2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %30, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.353, i32 0, i32 0))
  %31 = load i32, i32* %n2.addr, align 4, !dbg !823
  %cmp = icmp eq i32 %31, 0, !dbg !825
  br i1 %cmp, label %land.lhs.true, label %if.else31, !dbg !826

land.lhs.true:                                    ; preds = %entry
  %32 = ptrtoint i32* %n3.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %32, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.354, i32 0, i32 0))
  %33 = load i32, i32* %n3.addr, align 4, !dbg !827
  %cmp4 = icmp eq i32 %33, 0, !dbg !829
  br i1 %cmp4, label %if.then, label %if.else31, !dbg !830

if.then:                                          ; preds = %land.lhs.true
  %34 = ptrtoint i8** %name.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %34, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.355, i32 0, i32 0))
  %35 = load i8*, i8** %name.addr, align 8, !dbg !831
  %arrayidx = getelementptr inbounds i8, i8* %35, i64 0, !dbg !831
  %36 = ptrtoint i8* %arrayidx to i64
  call void @__DiscoPoPOpenMPRead(i64 %36, i32 1, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.356, i32 0, i32 0))
  %37 = load i8, i8* %arrayidx, align 1, !dbg !831
  %conv6 = sext i8 %37 to i32, !dbg !831
  %cmp7 = icmp eq i32 %conv6, 69, !dbg !834
  br i1 %cmp7, label %land.lhs.true9, label %if.else, !dbg !835

land.lhs.true9:                                   ; preds = %if.then
  %38 = ptrtoint i8** %name.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %38, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.357, i32 0, i32 0))
  %39 = load i8*, i8** %name.addr, align 8, !dbg !836
  %arrayidx10 = getelementptr inbounds i8, i8* %39, i64 1, !dbg !836
  %40 = ptrtoint i8* %arrayidx10 to i64
  call void @__DiscoPoPOpenMPRead(i64 %40, i32 1, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.358, i32 0, i32 0))
  %41 = load i8, i8* %arrayidx10, align 1, !dbg !836
  %conv11 = sext i8 %41 to i32, !dbg !836
  %cmp12 = icmp eq i32 %conv11, 80, !dbg !838
  br i1 %cmp12, label %if.then14, label %if.else, !dbg !839

if.then14:                                        ; preds = %land.lhs.true9
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %size, i32 0, i32 0, !dbg !840
  %42 = ptrtoint i32* %n1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %42, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.359, i32 0, i32 0))
  %43 = load i32, i32* %n1.addr, align 4, !dbg !842
  %conv15 = sitofp i32 %43 to double, !dbg !842
  %call16 = call double @pow(double 2.000000e+00, double %conv15) #6, !dbg !843
  %call17 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3.12, i32 0, i32 0), double %call16) #6, !dbg !844
  %44 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %44, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.360, i32 0, i32 0))
  store i32 14, i32* %j, align 4, !dbg !846
  %45 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %45, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.361, i32 0, i32 0))
  %46 = load i32, i32* %j, align 4, !dbg !847
  %idxprom = sext i32 %46 to i64, !dbg !849
  %arrayidx18 = getelementptr inbounds [16 x i8], [16 x i8]* %size, i64 0, i64 %idxprom, !dbg !849
  %47 = ptrtoint i8* %arrayidx18 to i64
  call void @__DiscoPoPOpenMPRead(i64 %47, i32 1, i32 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.362, i32 0, i32 0))
  %48 = load i8, i8* %arrayidx18, align 1, !dbg !849
  %conv19 = sext i8 %48 to i32, !dbg !849
  %cmp20 = icmp eq i32 %conv19, 46, !dbg !850
  br i1 %cmp20, label %if.then22, label %if.end, !dbg !851

if.then22:                                        ; preds = %if.then14
  %49 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %49, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.363, i32 0, i32 0))
  %50 = load i32, i32* %j, align 4, !dbg !852
  %idxprom23 = sext i32 %50 to i64, !dbg !854
  %arrayidx24 = getelementptr inbounds [16 x i8], [16 x i8]* %size, i64 0, i64 %idxprom23, !dbg !854
  %51 = ptrtoint i8* %arrayidx24 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %51, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.364, i32 0, i32 0))
  store i8 32, i8* %arrayidx24, align 1, !dbg !855
  %52 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %52, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.365, i32 0, i32 0))
  %53 = load i32, i32* %j, align 4, !dbg !856
  %dec = add nsw i32 %53, -1, !dbg !856
  %54 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %54, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.366, i32 0, i32 0))
  store i32 %dec, i32* %j, align 4, !dbg !856
  br label %if.end, !dbg !857

if.end:                                           ; preds = %if.then22, %if.then14
  %55 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %55, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.367, i32 0, i32 0))
  %56 = load i32, i32* %j, align 4, !dbg !858
  %add = add nsw i32 %56, 1, !dbg !859
  %idxprom25 = sext i32 %add to i64, !dbg !860
  %arrayidx26 = getelementptr inbounds [16 x i8], [16 x i8]* %size, i64 0, i64 %idxprom25, !dbg !860
  %57 = ptrtoint i8* %arrayidx26 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %57, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.368, i32 0, i32 0))
  store i8 0, i8* %arrayidx26, align 1, !dbg !861
  %arraydecay27 = getelementptr inbounds [16 x i8], [16 x i8]* %size, i32 0, i32 0, !dbg !862
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.4.13, i32 0, i32 0), i8* %arraydecay27), !dbg !863
  br label %if.end30, !dbg !864

if.else:                                          ; preds = %land.lhs.true9, %if.then
  %58 = ptrtoint i32* %n1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %58, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.369, i32 0, i32 0))
  %59 = load i32, i32* %n1.addr, align 4, !dbg !865
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5.14, i32 0, i32 0), i32 %59), !dbg !867
  br label %if.end30

if.end30:                                         ; preds = %if.else, %if.end
  br label %if.end33, !dbg !868

if.else31:                                        ; preds = %land.lhs.true, %entry
  %60 = ptrtoint i32* %n1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %60, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.370, i32 0, i32 0))
  %61 = load i32, i32* %n1.addr, align 4, !dbg !869
  %62 = ptrtoint i32* %n2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %62, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.371, i32 0, i32 0))
  %63 = load i32, i32* %n2.addr, align 4, !dbg !871
  %64 = ptrtoint i32* %n3.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %64, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.372, i32 0, i32 0))
  %65 = load i32, i32* %n3.addr, align 4, !dbg !872
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.6.15, i32 0, i32 0), i32 %61, i32 %63, i32 %65), !dbg !873
  br label %if.end33

if.end33:                                         ; preds = %if.else31, %if.end30
  %66 = ptrtoint i32* %niter.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %66, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.373, i32 0, i32 0))
  %67 = load i32, i32* %niter.addr, align 4, !dbg !874
  %call34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.7.16, i32 0, i32 0), i32 %67), !dbg !875
  %68 = ptrtoint double* %t.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %68, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.374, i32 0, i32 0))
  %69 = load double, double* %t.addr, align 8, !dbg !876
  %call35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.8, i32 0, i32 0), double %69), !dbg !877
  %70 = ptrtoint i32* %num_threads to i64
  call void @__DiscoPoPOpenMPRead(i64 %70, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.375, i32 0, i32 0))
  %71 = load i32, i32* %num_threads, align 4, !dbg !878
  %call36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.9.17, i32 0, i32 0), i32 %71), !dbg !879
  %72 = ptrtoint i32* %max_threads to i64
  call void @__DiscoPoPOpenMPRead(i64 %72, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.376, i32 0, i32 0))
  %73 = load i32, i32* %max_threads, align 4, !dbg !880
  %call37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.10.18, i32 0, i32 0), i32 %73), !dbg !881
  %74 = ptrtoint i32* %num_threads to i64
  call void @__DiscoPoPOpenMPRead(i64 %74, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.377, i32 0, i32 0))
  %75 = load i32, i32* %num_threads, align 4, !dbg !882
  %76 = ptrtoint i32* %max_threads to i64
  call void @__DiscoPoPOpenMPRead(i64 %76, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.378, i32 0, i32 0))
  %77 = load i32, i32* %max_threads, align 4, !dbg !884
  %cmp38 = icmp ne i32 %75, %77, !dbg !885
  br i1 %cmp38, label %if.then40, label %if.end42, !dbg !886

if.then40:                                        ; preds = %if.end33
  %call41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.11.19, i32 0, i32 0)), !dbg !887
  br label %if.end42, !dbg !887

if.end42:                                         ; preds = %if.then40, %if.end33
  %78 = ptrtoint double* %mops.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %78, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.379, i32 0, i32 0))
  %79 = load double, double* %mops.addr, align 8, !dbg !888
  %call43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.12.20, i32 0, i32 0), double %79), !dbg !889
  %80 = ptrtoint double* %mops.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %80, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.380, i32 0, i32 0))
  %81 = load double, double* %mops.addr, align 8, !dbg !890
  %82 = ptrtoint i32* %num_threads to i64
  call void @__DiscoPoPOpenMPRead(i64 %82, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.381, i32 0, i32 0))
  %83 = load i32, i32* %num_threads, align 4, !dbg !891
  %conv44 = sitofp i32 %83 to double, !dbg !892
  %div = fdiv double %81, %conv44, !dbg !893
  %call45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.13.21, i32 0, i32 0), double %div), !dbg !894
  %84 = ptrtoint i8** %optype.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %84, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.382, i32 0, i32 0))
  %85 = load i8*, i8** %optype.addr, align 8, !dbg !895
  %call46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.14.22, i32 0, i32 0), i8* %85), !dbg !896
  %86 = ptrtoint i32* %verified.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %86, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.383, i32 0, i32 0))
  %87 = load i32, i32* %verified.addr, align 4, !dbg !897
  %tobool = icmp ne i32 %87, 0, !dbg !897
  br i1 %tobool, label %if.then47, label %if.else49, !dbg !899

if.then47:                                        ; preds = %if.end42
  %call48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.15.23, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16.24, i32 0, i32 0)), !dbg !900
  br label %if.end51, !dbg !900

if.else49:                                        ; preds = %if.end42
  %call50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.15.23, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.17.25, i32 0, i32 0)), !dbg !901
  br label %if.end51

if.end51:                                         ; preds = %if.else49, %if.then47
  %88 = ptrtoint i8** %npbversion.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %88, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.384, i32 0, i32 0))
  %89 = load i8*, i8** %npbversion.addr, align 8, !dbg !902
  %call52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.18.26, i32 0, i32 0), i8* %89), !dbg !903
  %90 = ptrtoint i8** %compiletime.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %90, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.385, i32 0, i32 0))
  %91 = load i8*, i8** %compiletime.addr, align 8, !dbg !904
  %call53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.19.27, i32 0, i32 0), i8* %91), !dbg !905
  %92 = ptrtoint i8** %cs1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %92, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.386, i32 0, i32 0))
  %93 = load i8*, i8** %cs1.addr, align 8, !dbg !906
  %call54 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.20.28, i32 0, i32 0), i8* %93), !dbg !907
  %94 = ptrtoint i8** %cs2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %94, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.387, i32 0, i32 0))
  %95 = load i8*, i8** %cs2.addr, align 8, !dbg !908
  %call55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.21.29, i32 0, i32 0), i8* %95), !dbg !909
  %96 = ptrtoint i8** %cs3.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %96, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.388, i32 0, i32 0))
  %97 = load i8*, i8** %cs3.addr, align 8, !dbg !910
  %call56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.22.30, i32 0, i32 0), i8* %97), !dbg !911
  %98 = ptrtoint i8** %cs4.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %98, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.389, i32 0, i32 0))
  %99 = load i8*, i8** %cs4.addr, align 8, !dbg !912
  %call57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.23.31, i32 0, i32 0), i8* %99), !dbg !913
  %100 = ptrtoint i8** %cs5.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %100, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.390, i32 0, i32 0))
  %101 = load i8*, i8** %cs5.addr, align 8, !dbg !914
  %call58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.24.32, i32 0, i32 0), i8* %101), !dbg !915
  %102 = ptrtoint i8** %cs6.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %102, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.391, i32 0, i32 0))
  %103 = load i8*, i8** %cs6.addr, align 8, !dbg !916
  %call59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.25.33, i32 0, i32 0), i8* %103), !dbg !917
  %104 = ptrtoint i8** %cs7.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %104, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.392, i32 0, i32 0))
  %105 = load i8*, i8** %cs7.addr, align 8, !dbg !918
  %call60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.26, i32 0, i32 0), i8* %105), !dbg !919
  %call61 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([195 x i8], [195 x i8]* @.str.27, i32 0, i32 0)), !dbg !920
  ret void, !dbg !921
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..9(i32* noalias %.global_tid., i32* noalias %.bound_tid., i32* dereferenceable(4) %num_threads) #0 !dbg !922 {
entry:
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([145 x i8], [145 x i8]* @.str.394, i32 0, i32 0))
  %.global_tid..addr = alloca i32*, align 8
  %.bound_tid..addr = alloca i32*, align 8
  %num_threads.addr = alloca i32*, align 8
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  %2 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.395, i32 0, i32 0))
  store i32* %.global_tid., i32** %.global_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.global_tid..addr, metadata !925, metadata !62), !dbg !926
  %3 = ptrtoint i32** %.bound_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.396, i32 0, i32 0))
  store i32* %.bound_tid., i32** %.bound_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.bound_tid..addr, metadata !927, metadata !62), !dbg !926
  %4 = ptrtoint i32** %num_threads.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.397, i32 0, i32 0))
  store i32* %num_threads, i32** %num_threads.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %num_threads.addr, metadata !928, metadata !62), !dbg !926
  %5 = ptrtoint i32** %num_threads.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %5, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.398, i32 0, i32 0))
  %6 = load i32*, i32** %num_threads.addr, align 8, !dbg !929
  %7 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !931
  %8 = ptrtoint i8** %7 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %8, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.399, i32 0, i32 0))
  store i8* getelementptr inbounds ([39 x i8], [39 x i8]* @8, i32 0, i32 0), i8** %7, align 8, !dbg !931
  %9 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %9, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.400, i32 0, i32 0))
  %10 = load i32*, i32** %.global_tid..addr, align 8, !dbg !931
  %11 = ptrtoint i32* %10 to i64
  call void @__DiscoPoPOpenMPRead(i64 %11, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.401, i32 0, i32 0))
  %12 = load i32, i32* %10, align 4, !dbg !931
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([145 x i8], [145 x i8]* @.str.403, i32 0, i32 0))
  %13 = call i32 @__kmpc_master(%ident_t* %.kmpc_loc.addr, i32 %12), !dbg !931
  %tobool = icmp ne i32 %13, 0, !dbg !931
  br i1 %tobool, label %omp_if.then, label %omp_if.end, !dbg !931

omp_if.then:                                      ; preds = %entry
  %call = call i32 @omp_get_num_threads(), !dbg !933
  %14 = ptrtoint i32* %6 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %14, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.404, i32 0, i32 0))
  store i32 %call, i32* %6, align 4, !dbg !935
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_end_master(%ident_t* %.kmpc_loc.addr, i32 %12), !dbg !936
  br label %omp_if.end, !dbg !938

omp_if.end:                                       ; preds = %omp_if.then, %entry
  call void @__DiscoPoPOpenMPAfterCall()
  ret void, !dbg !939
}

declare i32 @__kmpc_master(%ident_t*, i32)

declare i32 @omp_get_num_threads() #3

declare void @__kmpc_end_master(%ident_t*, i32)

; Function Attrs: nounwind uwtable
define double @randlc(double* %x, double %a) #0 !dbg !940 {
entry:
  %x.addr = alloca double*, align 8
  %a.addr = alloca double, align 8
  %r23 = alloca double, align 8
  %r46 = alloca double, align 8
  %t23 = alloca double, align 8
  %t46 = alloca double, align 8
  %t1 = alloca double, align 8
  %t2 = alloca double, align 8
  %t3 = alloca double, align 8
  %t4 = alloca double, align 8
  %a1 = alloca double, align 8
  %a2 = alloca double, align 8
  %x1 = alloca double, align 8
  %x2 = alloca double, align 8
  %z = alloca double, align 8
  %r = alloca double, align 8
  %0 = ptrtoint double** %x.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.405, i32 0, i32 0))
  store double* %x, double** %x.addr, align 8
  call void @llvm.dbg.declare(metadata double** %x.addr, metadata !944, metadata !62), !dbg !945
  %1 = ptrtoint double* %a.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.406, i32 0, i32 0))
  store double %a, double* %a.addr, align 8
  call void @llvm.dbg.declare(metadata double* %a.addr, metadata !946, metadata !62), !dbg !947
  call void @llvm.dbg.declare(metadata double* %r23, metadata !948, metadata !62), !dbg !950
  %2 = ptrtoint double* %r23 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.407, i32 0, i32 0))
  store double 0x3E80000000000000, double* %r23, align 8, !dbg !950
  call void @llvm.dbg.declare(metadata double* %r46, metadata !951, metadata !62), !dbg !952
  %3 = ptrtoint double* %r46 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.408, i32 0, i32 0))
  store double 0x3D10000000000000, double* %r46, align 8, !dbg !952
  call void @llvm.dbg.declare(metadata double* %t23, metadata !953, metadata !62), !dbg !954
  %4 = ptrtoint double* %t23 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.409, i32 0, i32 0))
  store double 8.388608e+06, double* %t23, align 8, !dbg !954
  call void @llvm.dbg.declare(metadata double* %t46, metadata !955, metadata !62), !dbg !956
  %5 = ptrtoint double* %t46 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.410, i32 0, i32 0))
  store double 0x42D0000000000000, double* %t46, align 8, !dbg !956
  call void @llvm.dbg.declare(metadata double* %t1, metadata !957, metadata !62), !dbg !958
  call void @llvm.dbg.declare(metadata double* %t2, metadata !959, metadata !62), !dbg !960
  call void @llvm.dbg.declare(metadata double* %t3, metadata !961, metadata !62), !dbg !962
  call void @llvm.dbg.declare(metadata double* %t4, metadata !963, metadata !62), !dbg !964
  call void @llvm.dbg.declare(metadata double* %a1, metadata !965, metadata !62), !dbg !966
  call void @llvm.dbg.declare(metadata double* %a2, metadata !967, metadata !62), !dbg !968
  call void @llvm.dbg.declare(metadata double* %x1, metadata !969, metadata !62), !dbg !970
  call void @llvm.dbg.declare(metadata double* %x2, metadata !971, metadata !62), !dbg !972
  call void @llvm.dbg.declare(metadata double* %z, metadata !973, metadata !62), !dbg !974
  call void @llvm.dbg.declare(metadata double* %r, metadata !975, metadata !62), !dbg !976
  %6 = ptrtoint double* %a.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %6, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.411, i32 0, i32 0))
  %7 = load double, double* %a.addr, align 8, !dbg !977
  %mul = fmul double 0x3E80000000000000, %7, !dbg !978
  %8 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.412, i32 0, i32 0))
  store double %mul, double* %t1, align 8, !dbg !979
  %9 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %9, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.413, i32 0, i32 0))
  %10 = load double, double* %t1, align 8, !dbg !980
  %conv = fptosi double %10 to i32, !dbg !981
  %conv1 = sitofp i32 %conv to double, !dbg !981
  %11 = ptrtoint double* %a1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %11, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.414, i32 0, i32 0))
  store double %conv1, double* %a1, align 8, !dbg !982
  %12 = ptrtoint double* %a.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %12, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.415, i32 0, i32 0))
  %13 = load double, double* %a.addr, align 8, !dbg !983
  %14 = ptrtoint double* %a1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %14, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.416, i32 0, i32 0))
  %15 = load double, double* %a1, align 8, !dbg !984
  %mul2 = fmul double 8.388608e+06, %15, !dbg !985
  %sub = fsub double %13, %mul2, !dbg !986
  %16 = ptrtoint double* %a2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.417, i32 0, i32 0))
  store double %sub, double* %a2, align 8, !dbg !987
  %17 = ptrtoint double** %x.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %17, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.418, i32 0, i32 0))
  %18 = load double*, double** %x.addr, align 8, !dbg !988
  %19 = ptrtoint double* %18 to i64
  call void @__DiscoPoPOpenMPRead(i64 %19, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.419, i32 0, i32 0))
  %20 = load double, double* %18, align 8, !dbg !989
  %mul3 = fmul double 0x3E80000000000000, %20, !dbg !990
  %21 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %21, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.420, i32 0, i32 0))
  store double %mul3, double* %t1, align 8, !dbg !991
  %22 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %22, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.421, i32 0, i32 0))
  %23 = load double, double* %t1, align 8, !dbg !992
  %conv4 = fptosi double %23 to i32, !dbg !993
  %conv5 = sitofp i32 %conv4 to double, !dbg !993
  %24 = ptrtoint double* %x1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %24, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.422, i32 0, i32 0))
  store double %conv5, double* %x1, align 8, !dbg !994
  %25 = ptrtoint double** %x.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %25, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.423, i32 0, i32 0))
  %26 = load double*, double** %x.addr, align 8, !dbg !995
  %27 = ptrtoint double* %26 to i64
  call void @__DiscoPoPOpenMPRead(i64 %27, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.424, i32 0, i32 0))
  %28 = load double, double* %26, align 8, !dbg !996
  %29 = ptrtoint double* %x1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %29, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.425, i32 0, i32 0))
  %30 = load double, double* %x1, align 8, !dbg !997
  %mul6 = fmul double 8.388608e+06, %30, !dbg !998
  %sub7 = fsub double %28, %mul6, !dbg !999
  %31 = ptrtoint double* %x2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %31, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.426, i32 0, i32 0))
  store double %sub7, double* %x2, align 8, !dbg !1000
  %32 = ptrtoint double* %a1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %32, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.427, i32 0, i32 0))
  %33 = load double, double* %a1, align 8, !dbg !1001
  %34 = ptrtoint double* %x2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %34, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.428, i32 0, i32 0))
  %35 = load double, double* %x2, align 8, !dbg !1002
  %mul8 = fmul double %33, %35, !dbg !1003
  %36 = ptrtoint double* %a2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %36, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.429, i32 0, i32 0))
  %37 = load double, double* %a2, align 8, !dbg !1004
  %38 = ptrtoint double* %x1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %38, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.430, i32 0, i32 0))
  %39 = load double, double* %x1, align 8, !dbg !1005
  %mul9 = fmul double %37, %39, !dbg !1006
  %add = fadd double %mul8, %mul9, !dbg !1007
  %40 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %40, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.431, i32 0, i32 0))
  store double %add, double* %t1, align 8, !dbg !1008
  %41 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %41, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.432, i32 0, i32 0))
  %42 = load double, double* %t1, align 8, !dbg !1009
  %mul10 = fmul double 0x3E80000000000000, %42, !dbg !1010
  %conv11 = fptosi double %mul10 to i32, !dbg !1011
  %conv12 = sitofp i32 %conv11 to double, !dbg !1011
  %43 = ptrtoint double* %t2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %43, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.433, i32 0, i32 0))
  store double %conv12, double* %t2, align 8, !dbg !1012
  %44 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %44, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.434, i32 0, i32 0))
  %45 = load double, double* %t1, align 8, !dbg !1013
  %46 = ptrtoint double* %t2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %46, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.435, i32 0, i32 0))
  %47 = load double, double* %t2, align 8, !dbg !1014
  %mul13 = fmul double 8.388608e+06, %47, !dbg !1015
  %sub14 = fsub double %45, %mul13, !dbg !1016
  %48 = ptrtoint double* %z to i64
  call void @__DiscoPoPOpenMPWrite(i64 %48, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.436, i32 0, i32 0))
  store double %sub14, double* %z, align 8, !dbg !1017
  %49 = ptrtoint double* %z to i64
  call void @__DiscoPoPOpenMPRead(i64 %49, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.437, i32 0, i32 0))
  %50 = load double, double* %z, align 8, !dbg !1018
  %mul15 = fmul double 8.388608e+06, %50, !dbg !1019
  %51 = ptrtoint double* %a2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %51, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.438, i32 0, i32 0))
  %52 = load double, double* %a2, align 8, !dbg !1020
  %53 = ptrtoint double* %x2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %53, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.439, i32 0, i32 0))
  %54 = load double, double* %x2, align 8, !dbg !1021
  %mul16 = fmul double %52, %54, !dbg !1022
  %add17 = fadd double %mul15, %mul16, !dbg !1023
  %55 = ptrtoint double* %t3 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %55, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.440, i32 0, i32 0))
  store double %add17, double* %t3, align 8, !dbg !1024
  %56 = ptrtoint double* %t3 to i64
  call void @__DiscoPoPOpenMPRead(i64 %56, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.441, i32 0, i32 0))
  %57 = load double, double* %t3, align 8, !dbg !1025
  %mul18 = fmul double 0x3D10000000000000, %57, !dbg !1026
  %conv19 = fptosi double %mul18 to i32, !dbg !1027
  %conv20 = sitofp i32 %conv19 to double, !dbg !1027
  %58 = ptrtoint double* %t4 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %58, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.442, i32 0, i32 0))
  store double %conv20, double* %t4, align 8, !dbg !1028
  %59 = ptrtoint double* %t3 to i64
  call void @__DiscoPoPOpenMPRead(i64 %59, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.443, i32 0, i32 0))
  %60 = load double, double* %t3, align 8, !dbg !1029
  %61 = ptrtoint double* %t4 to i64
  call void @__DiscoPoPOpenMPRead(i64 %61, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.444, i32 0, i32 0))
  %62 = load double, double* %t4, align 8, !dbg !1030
  %mul21 = fmul double 0x42D0000000000000, %62, !dbg !1031
  %sub22 = fsub double %60, %mul21, !dbg !1032
  %63 = ptrtoint double** %x.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %63, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.445, i32 0, i32 0))
  %64 = load double*, double** %x.addr, align 8, !dbg !1033
  %65 = ptrtoint double* %64 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %65, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.446, i32 0, i32 0))
  store double %sub22, double* %64, align 8, !dbg !1034
  %66 = ptrtoint double** %x.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %66, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.447, i32 0, i32 0))
  %67 = load double*, double** %x.addr, align 8, !dbg !1035
  %68 = ptrtoint double* %67 to i64
  call void @__DiscoPoPOpenMPRead(i64 %68, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.448, i32 0, i32 0))
  %69 = load double, double* %67, align 8, !dbg !1036
  %mul23 = fmul double 0x3D10000000000000, %69, !dbg !1037
  %70 = ptrtoint double* %r to i64
  call void @__DiscoPoPOpenMPWrite(i64 %70, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.449, i32 0, i32 0))
  store double %mul23, double* %r, align 8, !dbg !1038
  %71 = ptrtoint double* %r to i64
  call void @__DiscoPoPOpenMPRead(i64 %71, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.450, i32 0, i32 0))
  %72 = load double, double* %r, align 8, !dbg !1039
  ret double %72, !dbg !1040
}

; Function Attrs: nounwind uwtable
define void @vranlc(i32 %n, double* %x, double %a, double* %y) #0 !dbg !1041 {
entry:
  %n.addr = alloca i32, align 4
  %x.addr = alloca double*, align 8
  %a.addr = alloca double, align 8
  %y.addr = alloca double*, align 8
  %r23 = alloca double, align 8
  %r46 = alloca double, align 8
  %t23 = alloca double, align 8
  %t46 = alloca double, align 8
  %t1 = alloca double, align 8
  %t2 = alloca double, align 8
  %t3 = alloca double, align 8
  %t4 = alloca double, align 8
  %a1 = alloca double, align 8
  %a2 = alloca double, align 8
  %x1 = alloca double, align 8
  %x2 = alloca double, align 8
  %z = alloca double, align 8
  %i = alloca i32, align 4
  %0 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.451, i32 0, i32 0))
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !1044, metadata !62), !dbg !1045
  %1 = ptrtoint double** %x.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.452, i32 0, i32 0))
  store double* %x, double** %x.addr, align 8
  call void @llvm.dbg.declare(metadata double** %x.addr, metadata !1046, metadata !62), !dbg !1047
  %2 = ptrtoint double* %a.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.453, i32 0, i32 0))
  store double %a, double* %a.addr, align 8
  call void @llvm.dbg.declare(metadata double* %a.addr, metadata !1048, metadata !62), !dbg !1049
  %3 = ptrtoint double** %y.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.454, i32 0, i32 0))
  store double* %y, double** %y.addr, align 8
  call void @llvm.dbg.declare(metadata double** %y.addr, metadata !1050, metadata !62), !dbg !1051
  call void @llvm.dbg.declare(metadata double* %r23, metadata !1052, metadata !62), !dbg !1053
  %4 = ptrtoint double* %r23 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.455, i32 0, i32 0))
  store double 0x3E80000000000000, double* %r23, align 8, !dbg !1053
  call void @llvm.dbg.declare(metadata double* %r46, metadata !1054, metadata !62), !dbg !1055
  %5 = ptrtoint double* %r46 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.456, i32 0, i32 0))
  store double 0x3D10000000000000, double* %r46, align 8, !dbg !1055
  call void @llvm.dbg.declare(metadata double* %t23, metadata !1056, metadata !62), !dbg !1057
  %6 = ptrtoint double* %t23 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.457, i32 0, i32 0))
  store double 8.388608e+06, double* %t23, align 8, !dbg !1057
  call void @llvm.dbg.declare(metadata double* %t46, metadata !1058, metadata !62), !dbg !1059
  %7 = ptrtoint double* %t46 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %7, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.458, i32 0, i32 0))
  store double 0x42D0000000000000, double* %t46, align 8, !dbg !1059
  call void @llvm.dbg.declare(metadata double* %t1, metadata !1060, metadata !62), !dbg !1061
  call void @llvm.dbg.declare(metadata double* %t2, metadata !1062, metadata !62), !dbg !1063
  call void @llvm.dbg.declare(metadata double* %t3, metadata !1064, metadata !62), !dbg !1065
  call void @llvm.dbg.declare(metadata double* %t4, metadata !1066, metadata !62), !dbg !1067
  call void @llvm.dbg.declare(metadata double* %a1, metadata !1068, metadata !62), !dbg !1069
  call void @llvm.dbg.declare(metadata double* %a2, metadata !1070, metadata !62), !dbg !1071
  call void @llvm.dbg.declare(metadata double* %x1, metadata !1072, metadata !62), !dbg !1073
  call void @llvm.dbg.declare(metadata double* %x2, metadata !1074, metadata !62), !dbg !1075
  call void @llvm.dbg.declare(metadata double* %z, metadata !1076, metadata !62), !dbg !1077
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1078, metadata !62), !dbg !1079
  %8 = ptrtoint double* %a.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %8, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.459, i32 0, i32 0))
  %9 = load double, double* %a.addr, align 8, !dbg !1080
  %mul = fmul double 0x3E80000000000000, %9, !dbg !1081
  %10 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %10, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.460, i32 0, i32 0))
  store double %mul, double* %t1, align 8, !dbg !1082
  %11 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %11, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.461, i32 0, i32 0))
  %12 = load double, double* %t1, align 8, !dbg !1083
  %conv = fptosi double %12 to i32, !dbg !1084
  %conv1 = sitofp i32 %conv to double, !dbg !1084
  %13 = ptrtoint double* %a1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %13, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.462, i32 0, i32 0))
  store double %conv1, double* %a1, align 8, !dbg !1085
  %14 = ptrtoint double* %a.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %14, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.463, i32 0, i32 0))
  %15 = load double, double* %a.addr, align 8, !dbg !1086
  %16 = ptrtoint double* %a1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %16, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.464, i32 0, i32 0))
  %17 = load double, double* %a1, align 8, !dbg !1087
  %mul2 = fmul double 8.388608e+06, %17, !dbg !1088
  %sub = fsub double %15, %mul2, !dbg !1089
  %18 = ptrtoint double* %a2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %18, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.465, i32 0, i32 0))
  store double %sub, double* %a2, align 8, !dbg !1090
  %19 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %19, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.466, i32 0, i32 0))
  store i32 0, i32* %i, align 4, !dbg !1091
  br label %for.cond, !dbg !1093

for.cond:                                         ; preds = %for.inc, %entry
  %20 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %20, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.467, i32 0, i32 0))
  %21 = load i32, i32* %i, align 4, !dbg !1094
  %22 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %22, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.468, i32 0, i32 0))
  %23 = load i32, i32* %n.addr, align 4, !dbg !1097
  %cmp = icmp slt i32 %21, %23, !dbg !1098
  br i1 %cmp, label %for.body, label %for.end, !dbg !1099

for.body:                                         ; preds = %for.cond
  %24 = ptrtoint double** %x.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %24, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.469, i32 0, i32 0))
  %25 = load double*, double** %x.addr, align 8, !dbg !1100
  %26 = ptrtoint double* %25 to i64
  call void @__DiscoPoPOpenMPRead(i64 %26, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.470, i32 0, i32 0))
  %27 = load double, double* %25, align 8, !dbg !1102
  %mul4 = fmul double 0x3E80000000000000, %27, !dbg !1103
  %28 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %28, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.471, i32 0, i32 0))
  store double %mul4, double* %t1, align 8, !dbg !1104
  %29 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %29, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.472, i32 0, i32 0))
  %30 = load double, double* %t1, align 8, !dbg !1105
  %conv5 = fptosi double %30 to i32, !dbg !1106
  %conv6 = sitofp i32 %conv5 to double, !dbg !1106
  %31 = ptrtoint double* %x1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %31, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.473, i32 0, i32 0))
  store double %conv6, double* %x1, align 8, !dbg !1107
  %32 = ptrtoint double** %x.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %32, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.474, i32 0, i32 0))
  %33 = load double*, double** %x.addr, align 8, !dbg !1108
  %34 = ptrtoint double* %33 to i64
  call void @__DiscoPoPOpenMPRead(i64 %34, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.475, i32 0, i32 0))
  %35 = load double, double* %33, align 8, !dbg !1109
  %36 = ptrtoint double* %x1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %36, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.476, i32 0, i32 0))
  %37 = load double, double* %x1, align 8, !dbg !1110
  %mul7 = fmul double 8.388608e+06, %37, !dbg !1111
  %sub8 = fsub double %35, %mul7, !dbg !1112
  %38 = ptrtoint double* %x2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %38, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.477, i32 0, i32 0))
  store double %sub8, double* %x2, align 8, !dbg !1113
  %39 = ptrtoint double* %a1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %39, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.478, i32 0, i32 0))
  %40 = load double, double* %a1, align 8, !dbg !1114
  %41 = ptrtoint double* %x2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %41, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.479, i32 0, i32 0))
  %42 = load double, double* %x2, align 8, !dbg !1115
  %mul9 = fmul double %40, %42, !dbg !1116
  %43 = ptrtoint double* %a2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %43, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.480, i32 0, i32 0))
  %44 = load double, double* %a2, align 8, !dbg !1117
  %45 = ptrtoint double* %x1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %45, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.481, i32 0, i32 0))
  %46 = load double, double* %x1, align 8, !dbg !1118
  %mul10 = fmul double %44, %46, !dbg !1119
  %add = fadd double %mul9, %mul10, !dbg !1120
  %47 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %47, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.482, i32 0, i32 0))
  store double %add, double* %t1, align 8, !dbg !1121
  %48 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %48, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.483, i32 0, i32 0))
  %49 = load double, double* %t1, align 8, !dbg !1122
  %mul11 = fmul double 0x3E80000000000000, %49, !dbg !1123
  %conv12 = fptosi double %mul11 to i32, !dbg !1124
  %conv13 = sitofp i32 %conv12 to double, !dbg !1124
  %50 = ptrtoint double* %t2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %50, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.484, i32 0, i32 0))
  store double %conv13, double* %t2, align 8, !dbg !1125
  %51 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %51, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.485, i32 0, i32 0))
  %52 = load double, double* %t1, align 8, !dbg !1126
  %53 = ptrtoint double* %t2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %53, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.486, i32 0, i32 0))
  %54 = load double, double* %t2, align 8, !dbg !1127
  %mul14 = fmul double 8.388608e+06, %54, !dbg !1128
  %sub15 = fsub double %52, %mul14, !dbg !1129
  %55 = ptrtoint double* %z to i64
  call void @__DiscoPoPOpenMPWrite(i64 %55, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.487, i32 0, i32 0))
  store double %sub15, double* %z, align 8, !dbg !1130
  %56 = ptrtoint double* %z to i64
  call void @__DiscoPoPOpenMPRead(i64 %56, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.488, i32 0, i32 0))
  %57 = load double, double* %z, align 8, !dbg !1131
  %mul16 = fmul double 8.388608e+06, %57, !dbg !1132
  %58 = ptrtoint double* %a2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %58, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.489, i32 0, i32 0))
  %59 = load double, double* %a2, align 8, !dbg !1133
  %60 = ptrtoint double* %x2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %60, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.490, i32 0, i32 0))
  %61 = load double, double* %x2, align 8, !dbg !1134
  %mul17 = fmul double %59, %61, !dbg !1135
  %add18 = fadd double %mul16, %mul17, !dbg !1136
  %62 = ptrtoint double* %t3 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %62, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.491, i32 0, i32 0))
  store double %add18, double* %t3, align 8, !dbg !1137
  %63 = ptrtoint double* %t3 to i64
  call void @__DiscoPoPOpenMPRead(i64 %63, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.492, i32 0, i32 0))
  %64 = load double, double* %t3, align 8, !dbg !1138
  %mul19 = fmul double 0x3D10000000000000, %64, !dbg !1139
  %conv20 = fptosi double %mul19 to i32, !dbg !1140
  %conv21 = sitofp i32 %conv20 to double, !dbg !1140
  %65 = ptrtoint double* %t4 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %65, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.493, i32 0, i32 0))
  store double %conv21, double* %t4, align 8, !dbg !1141
  %66 = ptrtoint double* %t3 to i64
  call void @__DiscoPoPOpenMPRead(i64 %66, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.494, i32 0, i32 0))
  %67 = load double, double* %t3, align 8, !dbg !1142
  %68 = ptrtoint double* %t4 to i64
  call void @__DiscoPoPOpenMPRead(i64 %68, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.495, i32 0, i32 0))
  %69 = load double, double* %t4, align 8, !dbg !1143
  %mul22 = fmul double 0x42D0000000000000, %69, !dbg !1144
  %sub23 = fsub double %67, %mul22, !dbg !1145
  %70 = ptrtoint double** %x.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %70, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.496, i32 0, i32 0))
  %71 = load double*, double** %x.addr, align 8, !dbg !1146
  %72 = ptrtoint double* %71 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %72, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.497, i32 0, i32 0))
  store double %sub23, double* %71, align 8, !dbg !1147
  %73 = ptrtoint double** %x.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %73, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.498, i32 0, i32 0))
  %74 = load double*, double** %x.addr, align 8, !dbg !1148
  %75 = ptrtoint double* %74 to i64
  call void @__DiscoPoPOpenMPRead(i64 %75, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.499, i32 0, i32 0))
  %76 = load double, double* %74, align 8, !dbg !1149
  %mul24 = fmul double 0x3D10000000000000, %76, !dbg !1150
  %77 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %77, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.500, i32 0, i32 0))
  %78 = load i32, i32* %i, align 4, !dbg !1151
  %idxprom = sext i32 %78 to i64, !dbg !1152
  %79 = ptrtoint double** %y.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %79, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.501, i32 0, i32 0))
  %80 = load double*, double** %y.addr, align 8, !dbg !1152
  %arrayidx = getelementptr inbounds double, double* %80, i64 %idxprom, !dbg !1152
  %81 = ptrtoint double* %arrayidx to i64
  call void @__DiscoPoPOpenMPWrite(i64 %81, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.502, i32 0, i32 0))
  store double %mul24, double* %arrayidx, align 8, !dbg !1153
  br label %for.inc, !dbg !1154

for.inc:                                          ; preds = %for.body
  %82 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %82, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.503, i32 0, i32 0))
  %83 = load i32, i32* %i, align 4, !dbg !1155
  %inc = add nsw i32 %83, 1, !dbg !1155
  %84 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %84, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.504, i32 0, i32 0))
  store i32 %inc, i32* %i, align 4, !dbg !1155
  br label %for.cond, !dbg !1157

for.end:                                          ; preds = %for.cond
  ret void, !dbg !1158
}

; Function Attrs: nounwind uwtable
define void @timer_clear(i32 %n) #0 !dbg !1159 {
entry:
  %n.addr = alloca i32, align 4
  %0 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.505, i32 0, i32 0))
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !1162, metadata !62), !dbg !1163
  %1 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %1, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.506, i32 0, i32 0))
  %2 = load i32, i32* %n.addr, align 4, !dbg !1164
  %idxprom = sext i32 %2 to i64, !dbg !1165
  %3 = call [64 x double]* @_ZTWL7elapsed(), !dbg !1165
  %arrayidx = getelementptr inbounds [64 x double], [64 x double]* %3, i64 0, i64 %idxprom, !dbg !1165
  %4 = ptrtoint double* %arrayidx to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.507, i32 0, i32 0))
  store double 0.000000e+00, double* %arrayidx, align 8, !dbg !1166
  %5 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %5, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.508, i32 0, i32 0))
  %6 = load i32, i32* %n.addr, align 4, !dbg !1167
  %idxprom1 = sext i32 %6 to i64, !dbg !1168
  %7 = call [64 x i32]* @_ZTWL5count(), !dbg !1168
  %arrayidx2 = getelementptr inbounds [64 x i32], [64 x i32]* %7, i64 0, i64 %idxprom1, !dbg !1168
  %8 = ptrtoint i32* %arrayidx2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %8, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.509, i32 0, i32 0))
  store i32 0, i32* %arrayidx2, align 4, !dbg !1169
  ret void, !dbg !1170
}

; Function Attrs: nounwind uwtable
define internal [64 x double]* @_ZTWL7elapsed() #0 {
  ret [64 x double]* @elapsed
}

; Function Attrs: nounwind uwtable
define internal [64 x i32]* @_ZTWL5count() #0 {
  ret [64 x i32]* @count
}

; Function Attrs: nounwind uwtable
define void @timer_start(i32 %n) #0 !dbg !1171 {
entry:
  %n.addr = alloca i32, align 4
  %0 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.510, i32 0, i32 0))
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !1172, metadata !62), !dbg !1173
  %call = call double @elapsed_time(), !dbg !1174
  %1 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %1, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.511, i32 0, i32 0))
  %2 = load i32, i32* %n.addr, align 4, !dbg !1175
  %idxprom = sext i32 %2 to i64, !dbg !1176
  %3 = call [64 x double]* @_ZTWL5start(), !dbg !1177
  %arrayidx = getelementptr inbounds [64 x double], [64 x double]* %3, i64 0, i64 %idxprom, !dbg !1176
  %4 = ptrtoint double* %arrayidx to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.512, i32 0, i32 0))
  store double %call, double* %arrayidx, align 8, !dbg !1179
  ret void, !dbg !1180
}

; Function Attrs: nounwind uwtable
define internal double @elapsed_time() #0 !dbg !1181 {
entry:
  %t = alloca double, align 8
  call void @llvm.dbg.declare(metadata double* %t, metadata !1183, metadata !62), !dbg !1184
  %call = call double @omp_get_wtime(), !dbg !1185
  %0 = ptrtoint double* %t to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.513, i32 0, i32 0))
  store double %call, double* %t, align 8, !dbg !1186
  %1 = ptrtoint double* %t to i64
  call void @__DiscoPoPOpenMPRead(i64 %1, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.514, i32 0, i32 0))
  %2 = load double, double* %t, align 8, !dbg !1187
  ret double %2, !dbg !1188
}

declare double @omp_get_wtime() #3

; Function Attrs: nounwind uwtable
define internal [64 x double]* @_ZTWL5start() #0 {
  ret [64 x double]* @start
}

; Function Attrs: nounwind uwtable
define void @timer_stop(i32 %n) #0 !dbg !1189 {
entry:
  %n.addr = alloca i32, align 4
  %t = alloca double, align 8
  %now = alloca double, align 8
  %0 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.515, i32 0, i32 0))
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !1190, metadata !62), !dbg !1191
  call void @llvm.dbg.declare(metadata double* %t, metadata !1192, metadata !62), !dbg !1193
  call void @llvm.dbg.declare(metadata double* %now, metadata !1194, metadata !62), !dbg !1195
  %call = call double @elapsed_time(), !dbg !1196
  %1 = ptrtoint double* %now to i64
  call void @__DiscoPoPOpenMPWrite(i64 %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.516, i32 0, i32 0))
  store double %call, double* %now, align 8, !dbg !1197
  %2 = ptrtoint double* %now to i64
  call void @__DiscoPoPOpenMPRead(i64 %2, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.517, i32 0, i32 0))
  %3 = load double, double* %now, align 8, !dbg !1198
  %4 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %4, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.518, i32 0, i32 0))
  %5 = load i32, i32* %n.addr, align 4, !dbg !1199
  %idxprom = sext i32 %5 to i64, !dbg !1200
  %6 = call [64 x double]* @_ZTWL5start(), !dbg !1200
  %arrayidx = getelementptr inbounds [64 x double], [64 x double]* %6, i64 0, i64 %idxprom, !dbg !1200
  %7 = ptrtoint double* %arrayidx to i64
  call void @__DiscoPoPOpenMPRead(i64 %7, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.519, i32 0, i32 0))
  %8 = load double, double* %arrayidx, align 8, !dbg !1200
  %sub = fsub double %3, %8, !dbg !1201
  %9 = ptrtoint double* %t to i64
  call void @__DiscoPoPOpenMPWrite(i64 %9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.520, i32 0, i32 0))
  store double %sub, double* %t, align 8, !dbg !1202
  %10 = ptrtoint double* %t to i64
  call void @__DiscoPoPOpenMPRead(i64 %10, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.521, i32 0, i32 0))
  %11 = load double, double* %t, align 8, !dbg !1203
  %12 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %12, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.522, i32 0, i32 0))
  %13 = load i32, i32* %n.addr, align 4, !dbg !1204
  %idxprom1 = sext i32 %13 to i64, !dbg !1205
  %14 = call [64 x double]* @_ZTWL7elapsed(), !dbg !1205
  %arrayidx2 = getelementptr inbounds [64 x double], [64 x double]* %14, i64 0, i64 %idxprom1, !dbg !1205
  %15 = ptrtoint double* %arrayidx2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %15, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.523, i32 0, i32 0))
  %16 = load double, double* %arrayidx2, align 8, !dbg !1206
  %add = fadd double %16, %11, !dbg !1206
  %17 = ptrtoint double* %arrayidx2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %17, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.524, i32 0, i32 0))
  store double %add, double* %arrayidx2, align 8, !dbg !1206
  %18 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %18, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.525, i32 0, i32 0))
  %19 = load i32, i32* %n.addr, align 4, !dbg !1207
  %idxprom3 = sext i32 %19 to i64, !dbg !1208
  %20 = call [64 x i32]* @_ZTWL5count(), !dbg !1208
  %arrayidx4 = getelementptr inbounds [64 x i32], [64 x i32]* %20, i64 0, i64 %idxprom3, !dbg !1208
  %21 = ptrtoint i32* %arrayidx4 to i64
  call void @__DiscoPoPOpenMPRead(i64 %21, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.526, i32 0, i32 0))
  %22 = load i32, i32* %arrayidx4, align 4, !dbg !1209
  %inc = add i32 %22, 1, !dbg !1209
  %23 = ptrtoint i32* %arrayidx4 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %23, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.527, i32 0, i32 0))
  store i32 %inc, i32* %arrayidx4, align 4, !dbg !1209
  ret void, !dbg !1210
}

; Function Attrs: nounwind uwtable
define double @timer_read(i32 %n) #0 !dbg !1211 {
entry:
  %n.addr = alloca i32, align 4
  %0 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.528, i32 0, i32 0))
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !1214, metadata !62), !dbg !1215
  %1 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %1, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.529, i32 0, i32 0))
  %2 = load i32, i32* %n.addr, align 4, !dbg !1216
  %idxprom = sext i32 %2 to i64, !dbg !1217
  %3 = call [64 x double]* @_ZTWL7elapsed(), !dbg !1217
  %arrayidx = getelementptr inbounds [64 x double], [64 x double]* %3, i64 0, i64 %idxprom, !dbg !1217
  %4 = ptrtoint double* %arrayidx to i64
  call void @__DiscoPoPOpenMPRead(i64 %4, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.530, i32 0, i32 0))
  %5 = load double, double* %arrayidx, align 8, !dbg !1217
  ret double %5, !dbg !1218
}

; Function Attrs: nounwind uwtable
define i32 @timer_count(i32 %n) #0 !dbg !1219 {
entry:
  %n.addr = alloca i32, align 4
  %0 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.531, i32 0, i32 0))
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !1222, metadata !62), !dbg !1223
  %1 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %1, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.532, i32 0, i32 0))
  %2 = load i32, i32* %n.addr, align 4, !dbg !1224
  %idxprom = sext i32 %2 to i64, !dbg !1225
  %3 = call [64 x i32]* @_ZTWL5count(), !dbg !1225
  %arrayidx = getelementptr inbounds [64 x i32], [64 x i32]* %3, i64 0, i64 %idxprom, !dbg !1225
  %4 = ptrtoint i32* %arrayidx to i64
  call void @__DiscoPoPOpenMPRead(i64 %4, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.533, i32 0, i32 0))
  %5 = load i32, i32* %arrayidx, align 4, !dbg !1225
  ret i32 %5, !dbg !1226
}

; Function Attrs: nounwind uwtable
define void @wtime_(double* %t) #0 !dbg !48 {
entry:
  %t.addr = alloca double*, align 8
  %tv = alloca %struct.timeval, align 8
  %0 = ptrtoint double** %t.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.534, i32 0, i32 0))
  store double* %t, double** %t.addr, align 8
  call void @llvm.dbg.declare(metadata double** %t.addr, metadata !1227, metadata !62), !dbg !1228
  call void @llvm.dbg.declare(metadata %struct.timeval* %tv, metadata !1229, metadata !62), !dbg !1238
  %call = call i32 @gettimeofday(%struct.timeval* %tv, %struct.timezone* null) #6, !dbg !1239
  %1 = ptrtoint i32* @wtime_.sec to i64
  call void @__DiscoPoPOpenMPRead(i64 %1, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.535, i32 0, i32 0))
  %2 = load i32, i32* @wtime_.sec, align 4, !dbg !1240
  %cmp = icmp slt i32 %2, 0, !dbg !1242
  br i1 %cmp, label %if.then, label %if.end, !dbg !1243

if.then:                                          ; preds = %entry
  %tv_sec = getelementptr inbounds %struct.timeval, %struct.timeval* %tv, i32 0, i32 0, !dbg !1244
  %3 = ptrtoint i64* %tv_sec to i64
  call void @__DiscoPoPOpenMPRead(i64 %3, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.536, i32 0, i32 0))
  %4 = load i64, i64* %tv_sec, align 8, !dbg !1244
  %conv = trunc i64 %4 to i32, !dbg !1246
  %5 = ptrtoint i32* @wtime_.sec to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.537, i32 0, i32 0))
  store i32 %conv, i32* @wtime_.sec, align 4, !dbg !1247
  br label %if.end, !dbg !1248

if.end:                                           ; preds = %if.then, %entry
  %tv_sec1 = getelementptr inbounds %struct.timeval, %struct.timeval* %tv, i32 0, i32 0, !dbg !1249
  %6 = ptrtoint i64* %tv_sec1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %6, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.538, i32 0, i32 0))
  %7 = load i64, i64* %tv_sec1, align 8, !dbg !1249
  %8 = ptrtoint i32* @wtime_.sec to i64
  call void @__DiscoPoPOpenMPRead(i64 %8, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.539, i32 0, i32 0))
  %9 = load i32, i32* @wtime_.sec, align 4, !dbg !1250
  %conv2 = sext i32 %9 to i64, !dbg !1250
  %sub = sub nsw i64 %7, %conv2, !dbg !1251
  %conv3 = sitofp i64 %sub to double, !dbg !1252
  %tv_usec = getelementptr inbounds %struct.timeval, %struct.timeval* %tv, i32 0, i32 1, !dbg !1253
  %10 = ptrtoint i64* %tv_usec to i64
  call void @__DiscoPoPOpenMPRead(i64 %10, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.540, i32 0, i32 0))
  %11 = load i64, i64* %tv_usec, align 8, !dbg !1253
  %conv4 = sitofp i64 %11 to double, !dbg !1254
  %mul = fmul double 1.000000e-06, %conv4, !dbg !1255
  %add = fadd double %conv3, %mul, !dbg !1256
  %12 = ptrtoint double** %t.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %12, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.541, i32 0, i32 0))
  %13 = load double*, double** %t.addr, align 8, !dbg !1257
  %14 = ptrtoint double* %13 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %14, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.542, i32 0, i32 0))
  store double %add, double* %13, align 8, !dbg !1258
  ret void, !dbg !1259
}

; Function Attrs: nounwind
declare i32 @gettimeofday(%struct.timeval*, %struct.timezone*) #4

declare void @__DiscoPoPOpenMPInitialize()

declare void @__CollectThreadInfo()

declare void @__DiscoPoPOpenMPFinalize()

declare void @__DiscoPoPOpenMPRead(i64, i32, i32, i32, i8*)

declare void @__DiscoPoPOpenMPWrite(i64, i8*)

declare void @__DiscoPoPOpenMPBeforeCall(i8*)

declare void @__DiscoPoPOpenMPAfterCall()

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0, !21, !27, !32, !44}
!llvm.ident = !{!52, !52, !52, !52, !52}
!llvm.module.flags = !{!53, !54}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.9.0 (trunk)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !8, globals: !10)
!1 = !DIFile(filename: "ep.c", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/EP")
!2 = !{!3}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !4, line: 4, size: 32, align: 32, elements: !5)
!4 = !DIFile(filename: "../common/type.h", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/EP")
!5 = !{!6, !7}
!6 = !DIEnumerator(name: "false", value: 0)
!7 = !DIEnumerator(name: "true", value: 1)
!8 = !{!9}
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64, align: 64)
!10 = !{!11, !16, !20}
!11 = !DIGlobalVariable(name: "x", scope: !0, file: !1, line: 68, type: !12, isLocal: true, isDefinition: true, variable: [131072 x double]* @x)
!12 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 8388608, align: 64, elements: !14)
!13 = !DIBasicType(name: "double", size: 64, align: 64, encoding: DW_ATE_float)
!14 = !{!15}
!15 = !DISubrange(count: 131072)
!16 = !DIGlobalVariable(name: "qq", scope: !0, file: !1, line: 69, type: !17, isLocal: true, isDefinition: true, variable: [10 x double]* @qq)
!17 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 640, align: 64, elements: !18)
!18 = !{!19}
!19 = !DISubrange(count: 10)
!20 = !DIGlobalVariable(name: "q", scope: !0, file: !1, line: 71, type: !17, isLocal: true, isDefinition: true, variable: [10 x double]* @q)
!21 = distinct !DICompileUnit(language: DW_LANG_C99, file: !22, producer: "clang version 3.9.0 (trunk)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !23, retainedTypes: !26)
!22 = !DIFile(filename: "../common/print_results.c", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common")
!23 = !{!24}
!24 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !25, line: 4, size: 32, align: 32, elements: !5)
!25 = !DIFile(filename: "../common/type.h", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common")
!26 = !{!13}
!27 = distinct !DICompileUnit(language: DW_LANG_C99, file: !28, producer: "clang version 3.9.0 (trunk)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !29, retainedTypes: !30)
!28 = !DIFile(filename: "../common/randdp.c", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common")
!29 = !{}
!30 = !{!31}
!31 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!32 = distinct !DICompileUnit(language: DW_LANG_C99, file: !33, producer: "clang version 3.9.0 (trunk)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !29, globals: !34)
!33 = !DIFile(filename: "../common/c_timers.c", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common")
!34 = !{!35, !40, !41}
!35 = !DIGlobalVariable(name: "start", scope: !32, file: !36, line: 28, type: !37, isLocal: true, isDefinition: true, variable: [64 x double]* @start)
!36 = !DIFile(filename: "c_timers.c", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common")
!37 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 4096, align: 64, elements: !38)
!38 = !{!39}
!39 = !DISubrange(count: 64)
!40 = !DIGlobalVariable(name: "elapsed", scope: !32, file: !36, line: 28, type: !37, isLocal: true, isDefinition: true, variable: [64 x double]* @elapsed)
!41 = !DIGlobalVariable(name: "count", scope: !32, file: !36, line: 29, type: !42, isLocal: true, isDefinition: true, variable: [64 x i32]* @count)
!42 = !DICompositeType(tag: DW_TAG_array_type, baseType: !43, size: 2048, align: 32, elements: !38)
!43 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!44 = distinct !DICompileUnit(language: DW_LANG_C99, file: !45, producer: "clang version 3.9.0 (trunk)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !29, globals: !46)
!45 = !DIFile(filename: "../common/wtime.c", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common")
!46 = !{!47}
!47 = !DIGlobalVariable(name: "sec", scope: !48, file: !45, line: 10, type: !31, isLocal: true, isDefinition: true, variable: i32* @wtime_.sec)
!48 = distinct !DISubprogram(name: "wtime_", scope: !45, file: !45, line: 7, type: !49, isLocal: false, isDefinition: true, scopeLine: 8, flags: DIFlagPrototyped, isOptimized: false, unit: !44, variables: !29)
!49 = !DISubroutineType(types: !50)
!50 = !{null, !51}
!51 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !13, size: 64, align: 64)
!52 = !{!"clang version 3.9.0 (trunk)"}
!53 = !{i32 2, !"Dwarf Version", i32 4}
!54 = !{i32 2, !"Debug Info Version", i32 3}
!55 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 74, type: !56, isLocal: false, isDefinition: true, scopeLine: 75, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !29)
!56 = !DISubroutineType(types: !57)
!57 = !{!31, !31, !58}
!58 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !59, size: 64, align: 64)
!59 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !60, size: 64, align: 64)
!60 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!61 = !DILocalVariable(name: "argc", arg: 1, scope: !55, file: !1, line: 74, type: !31)
!62 = !DIExpression()
!63 = !DILocation(line: 74, column: 14, scope: !55)
!64 = !DILocalVariable(name: "argv", arg: 2, scope: !55, file: !1, line: 74, type: !58)
!65 = !DILocation(line: 74, column: 26, scope: !55)
!66 = !DILocalVariable(name: "Mops", scope: !55, file: !1, line: 76, type: !13)
!67 = !DILocation(line: 76, column: 10, scope: !55)
!68 = !DILocalVariable(name: "t1", scope: !55, file: !1, line: 76, type: !13)
!69 = !DILocation(line: 76, column: 16, scope: !55)
!70 = !DILocalVariable(name: "t2", scope: !55, file: !1, line: 76, type: !13)
!71 = !DILocation(line: 76, column: 20, scope: !55)
!72 = !DILocalVariable(name: "t3", scope: !55, file: !1, line: 76, type: !13)
!73 = !DILocation(line: 76, column: 24, scope: !55)
!74 = !DILocalVariable(name: "t4", scope: !55, file: !1, line: 76, type: !13)
!75 = !DILocation(line: 76, column: 28, scope: !55)
!76 = !DILocalVariable(name: "x1", scope: !55, file: !1, line: 76, type: !13)
!77 = !DILocation(line: 76, column: 32, scope: !55)
!78 = !DILocalVariable(name: "x2", scope: !55, file: !1, line: 76, type: !13)
!79 = !DILocation(line: 76, column: 36, scope: !55)
!80 = !DILocalVariable(name: "sx", scope: !55, file: !1, line: 77, type: !13)
!81 = !DILocation(line: 77, column: 10, scope: !55)
!82 = !DILocalVariable(name: "sy", scope: !55, file: !1, line: 77, type: !13)
!83 = !DILocation(line: 77, column: 14, scope: !55)
!84 = !DILocalVariable(name: "tm", scope: !55, file: !1, line: 77, type: !13)
!85 = !DILocation(line: 77, column: 18, scope: !55)
!86 = !DILocalVariable(name: "an", scope: !55, file: !1, line: 77, type: !13)
!87 = !DILocation(line: 77, column: 22, scope: !55)
!88 = !DILocalVariable(name: "tt", scope: !55, file: !1, line: 77, type: !13)
!89 = !DILocation(line: 77, column: 26, scope: !55)
!90 = !DILocalVariable(name: "gc", scope: !55, file: !1, line: 77, type: !13)
!91 = !DILocation(line: 77, column: 30, scope: !55)
!92 = !DILocalVariable(name: "sx_verify_value", scope: !55, file: !1, line: 78, type: !13)
!93 = !DILocation(line: 78, column: 10, scope: !55)
!94 = !DILocalVariable(name: "sy_verify_value", scope: !55, file: !1, line: 78, type: !13)
!95 = !DILocation(line: 78, column: 27, scope: !55)
!96 = !DILocalVariable(name: "sx_err", scope: !55, file: !1, line: 78, type: !13)
!97 = !DILocation(line: 78, column: 44, scope: !55)
!98 = !DILocalVariable(name: "sy_err", scope: !55, file: !1, line: 78, type: !13)
!99 = !DILocation(line: 78, column: 52, scope: !55)
!100 = !DILocalVariable(name: "np", scope: !55, file: !1, line: 79, type: !31)
!101 = !DILocation(line: 79, column: 10, scope: !55)
!102 = !DILocalVariable(name: "i", scope: !55, file: !1, line: 80, type: !31)
!103 = !DILocation(line: 80, column: 10, scope: !55)
!104 = !DILocalVariable(name: "ik", scope: !55, file: !1, line: 80, type: !31)
!105 = !DILocation(line: 80, column: 13, scope: !55)
!106 = !DILocalVariable(name: "kk", scope: !55, file: !1, line: 80, type: !31)
!107 = !DILocation(line: 80, column: 17, scope: !55)
!108 = !DILocalVariable(name: "l", scope: !55, file: !1, line: 80, type: !31)
!109 = !DILocation(line: 80, column: 21, scope: !55)
!110 = !DILocalVariable(name: "k", scope: !55, file: !1, line: 80, type: !31)
!111 = !DILocation(line: 80, column: 24, scope: !55)
!112 = !DILocalVariable(name: "nit", scope: !55, file: !1, line: 80, type: !31)
!113 = !DILocation(line: 80, column: 27, scope: !55)
!114 = !DILocalVariable(name: "k_offset", scope: !55, file: !1, line: 81, type: !31)
!115 = !DILocation(line: 81, column: 10, scope: !55)
!116 = !DILocalVariable(name: "j", scope: !55, file: !1, line: 81, type: !31)
!117 = !DILocation(line: 81, column: 20, scope: !55)
!118 = !DILocalVariable(name: "verified", scope: !55, file: !1, line: 82, type: !119)
!119 = !DIDerivedType(tag: DW_TAG_typedef, name: "logical", file: !4, line: 4, baseType: !3)
!120 = !DILocation(line: 82, column: 11, scope: !55)
!121 = !DILocalVariable(name: "timers_enabled", scope: !55, file: !1, line: 82, type: !119)
!122 = !DILocation(line: 82, column: 21, scope: !55)
!123 = !DILocalVariable(name: "dum", scope: !55, file: !1, line: 84, type: !124)
!124 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 192, align: 64, elements: !125)
!125 = !{!126}
!126 = !DISubrange(count: 3)
!127 = !DILocation(line: 84, column: 10, scope: !55)
!128 = !DILocalVariable(name: "size", scope: !55, file: !1, line: 85, type: !129)
!129 = !DICompositeType(tag: DW_TAG_array_type, baseType: !60, size: 128, align: 8, elements: !130)
!130 = !{!131}
!131 = !DISubrange(count: 16)
!132 = !DILocation(line: 85, column: 10, scope: !55)
!133 = !DILocalVariable(name: "fp", scope: !55, file: !1, line: 87, type: !134)
!134 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !135, size: 64, align: 64)
!135 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !136, line: 48, baseType: !137)
!136 = !DIFile(filename: "/usr/include/stdio.h", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/EP")
!137 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !138, line: 245, size: 1728, align: 64, elements: !139)
!138 = !DIFile(filename: "/usr/include/libio.h", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/EP")
!139 = !{!140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !160, !161, !162, !163, !167, !169, !171, !175, !178, !180, !181, !182, !183, !184, !188, !189}
!140 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !137, file: !138, line: 246, baseType: !31, size: 32, align: 32)
!141 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !137, file: !138, line: 251, baseType: !59, size: 64, align: 64, offset: 64)
!142 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !137, file: !138, line: 252, baseType: !59, size: 64, align: 64, offset: 128)
!143 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !137, file: !138, line: 253, baseType: !59, size: 64, align: 64, offset: 192)
!144 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !137, file: !138, line: 254, baseType: !59, size: 64, align: 64, offset: 256)
!145 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !137, file: !138, line: 255, baseType: !59, size: 64, align: 64, offset: 320)
!146 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !137, file: !138, line: 256, baseType: !59, size: 64, align: 64, offset: 384)
!147 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !137, file: !138, line: 257, baseType: !59, size: 64, align: 64, offset: 448)
!148 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !137, file: !138, line: 258, baseType: !59, size: 64, align: 64, offset: 512)
!149 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !137, file: !138, line: 260, baseType: !59, size: 64, align: 64, offset: 576)
!150 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !137, file: !138, line: 261, baseType: !59, size: 64, align: 64, offset: 640)
!151 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !137, file: !138, line: 262, baseType: !59, size: 64, align: 64, offset: 704)
!152 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !137, file: !138, line: 264, baseType: !153, size: 64, align: 64, offset: 768)
!153 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !154, size: 64, align: 64)
!154 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !138, line: 160, size: 192, align: 64, elements: !155)
!155 = !{!156, !157, !159}
!156 = !DIDerivedType(tag: DW_TAG_member, name: "_next", scope: !154, file: !138, line: 161, baseType: !153, size: 64, align: 64)
!157 = !DIDerivedType(tag: DW_TAG_member, name: "_sbuf", scope: !154, file: !138, line: 162, baseType: !158, size: 64, align: 64, offset: 64)
!158 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !137, size: 64, align: 64)
!159 = !DIDerivedType(tag: DW_TAG_member, name: "_pos", scope: !154, file: !138, line: 166, baseType: !31, size: 32, align: 32, offset: 128)
!160 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !137, file: !138, line: 266, baseType: !158, size: 64, align: 64, offset: 832)
!161 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !137, file: !138, line: 268, baseType: !31, size: 32, align: 32, offset: 896)
!162 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !137, file: !138, line: 272, baseType: !31, size: 32, align: 32, offset: 928)
!163 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !137, file: !138, line: 274, baseType: !164, size: 64, align: 64, offset: 960)
!164 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !165, line: 131, baseType: !166)
!165 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/EP")
!166 = !DIBasicType(name: "long int", size: 64, align: 64, encoding: DW_ATE_signed)
!167 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !137, file: !138, line: 278, baseType: !168, size: 16, align: 16, offset: 1024)
!168 = !DIBasicType(name: "unsigned short", size: 16, align: 16, encoding: DW_ATE_unsigned)
!169 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !137, file: !138, line: 279, baseType: !170, size: 8, align: 8, offset: 1040)
!170 = !DIBasicType(name: "signed char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!171 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !137, file: !138, line: 280, baseType: !172, size: 8, align: 8, offset: 1048)
!172 = !DICompositeType(tag: DW_TAG_array_type, baseType: !60, size: 8, align: 8, elements: !173)
!173 = !{!174}
!174 = !DISubrange(count: 1)
!175 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !137, file: !138, line: 284, baseType: !176, size: 64, align: 64, offset: 1088)
!176 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !177, size: 64, align: 64)
!177 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !138, line: 154, baseType: null)
!178 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !137, file: !138, line: 293, baseType: !179, size: 64, align: 64, offset: 1152)
!179 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !165, line: 132, baseType: !166)
!180 = !DIDerivedType(tag: DW_TAG_member, name: "__pad1", scope: !137, file: !138, line: 302, baseType: !9, size: 64, align: 64, offset: 1216)
!181 = !DIDerivedType(tag: DW_TAG_member, name: "__pad2", scope: !137, file: !138, line: 303, baseType: !9, size: 64, align: 64, offset: 1280)
!182 = !DIDerivedType(tag: DW_TAG_member, name: "__pad3", scope: !137, file: !138, line: 304, baseType: !9, size: 64, align: 64, offset: 1344)
!183 = !DIDerivedType(tag: DW_TAG_member, name: "__pad4", scope: !137, file: !138, line: 305, baseType: !9, size: 64, align: 64, offset: 1408)
!184 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !137, file: !138, line: 306, baseType: !185, size: 64, align: 64, offset: 1472)
!185 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !186, line: 62, baseType: !187)
!186 = !DIFile(filename: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/llvm-3.8/build/bin/../lib/clang/3.9.0/include/stddef.h", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/EP")
!187 = !DIBasicType(name: "long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!188 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !137, file: !138, line: 308, baseType: !31, size: 32, align: 32, offset: 1536)
!189 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !137, file: !138, line: 310, baseType: !190, size: 160, align: 8, offset: 1568)
!190 = !DICompositeType(tag: DW_TAG_array_type, baseType: !60, size: 160, align: 8, elements: !191)
!191 = !{!192}
!192 = !DISubrange(count: 20)
!193 = !DILocation(line: 87, column: 9, scope: !55)
!194 = !DILocation(line: 89, column: 13, scope: !195)
!195 = distinct !DILexicalBlock(scope: !55, file: !1, line: 89, column: 7)
!196 = !DILocation(line: 89, column: 11, scope: !195)
!197 = !DILocation(line: 89, column: 39, scope: !195)
!198 = !DILocation(line: 89, column: 7, scope: !55)
!199 = !DILocation(line: 90, column: 20, scope: !200)
!200 = distinct !DILexicalBlock(scope: !195, file: !1, line: 89, column: 48)
!201 = !DILocation(line: 91, column: 3, scope: !200)
!202 = !DILocation(line: 92, column: 20, scope: !203)
!203 = distinct !DILexicalBlock(scope: !195, file: !1, line: 91, column: 10)
!204 = !DILocation(line: 93, column: 12, scope: !203)
!205 = !DILocation(line: 93, column: 5, scope: !203)
!206 = !DILocation(line: 103, column: 11, scope: !55)
!207 = !DILocation(line: 103, column: 28, scope: !55)
!208 = !DILocation(line: 103, column: 3, scope: !209)
!209 = !DILexicalBlockFile(scope: !55, file: !1, discriminator: 1)
!210 = !DILocation(line: 104, column: 5, scope: !55)
!211 = !DILocation(line: 105, column: 12, scope: !212)
!212 = distinct !DILexicalBlock(scope: !55, file: !1, line: 105, column: 7)
!213 = !DILocation(line: 105, column: 7, scope: !212)
!214 = !DILocation(line: 105, column: 15, scope: !212)
!215 = !DILocation(line: 105, column: 7, scope: !55)
!216 = !DILocation(line: 105, column: 24, scope: !217)
!217 = !DILexicalBlockFile(scope: !212, file: !1, discriminator: 1)
!218 = !DILocation(line: 105, column: 23, scope: !217)
!219 = !DILocation(line: 106, column: 8, scope: !55)
!220 = !DILocation(line: 106, column: 9, scope: !55)
!221 = !DILocation(line: 106, column: 3, scope: !55)
!222 = !DILocation(line: 106, column: 13, scope: !55)
!223 = !DILocation(line: 107, column: 3, scope: !55)
!224 = !DILocation(line: 108, column: 59, scope: !55)
!225 = !DILocation(line: 108, column: 3, scope: !55)
!226 = !DILocation(line: 109, column: 61, scope: !55)
!227 = !DILocation(line: 109, column: 3, scope: !209)
!228 = !DILocation(line: 111, column: 12, scope: !55)
!229 = !DILocation(line: 119, column: 6, scope: !55)
!230 = !DILocation(line: 128, column: 14, scope: !55)
!231 = !DILocation(line: 128, column: 22, scope: !55)
!232 = !DILocation(line: 128, column: 31, scope: !55)
!233 = !DILocation(line: 128, column: 3, scope: !55)
!234 = !DILocation(line: 129, column: 20, scope: !55)
!235 = !DILocation(line: 129, column: 28, scope: !55)
!236 = !DILocation(line: 129, column: 12, scope: !55)
!237 = !DILocation(line: 129, column: 3, scope: !55)
!238 = !DILocation(line: 129, column: 10, scope: !55)
!239 = !DILocation(line: 130, column: 11, scope: !55)
!240 = !DILocation(line: 136, column: 19, scope: !55)
!241 = !DILocation(line: 136, column: 14, scope: !209)
!242 = !DILocation(line: 136, column: 10, scope: !243)
!243 = !DILexicalBlockFile(scope: !55, file: !1, discriminator: 2)
!244 = !DILocation(line: 136, column: 8, scope: !55)
!245 = !DILocation(line: 138, column: 11, scope: !55)
!246 = !DILocation(line: 144, column: 3, scope: !55)
!247 = !DILocation(line: 146, column: 6, scope: !55)
!248 = !DILocation(line: 147, column: 21, scope: !55)
!249 = !DILocation(line: 147, column: 3, scope: !209)
!250 = !DILocation(line: 153, column: 6, scope: !55)
!251 = !DILocation(line: 155, column: 10, scope: !252)
!252 = distinct !DILexicalBlock(scope: !55, file: !1, line: 155, column: 3)
!253 = !DILocation(line: 155, column: 8, scope: !252)
!254 = !DILocation(line: 155, column: 15, scope: !255)
!255 = !DILexicalBlockFile(scope: !256, file: !1, discriminator: 1)
!256 = distinct !DILexicalBlock(scope: !252, file: !1, line: 155, column: 3)
!257 = !DILocation(line: 155, column: 17, scope: !255)
!258 = !DILocation(line: 155, column: 3, scope: !255)
!259 = !DILocation(line: 156, column: 22, scope: !260)
!260 = distinct !DILexicalBlock(scope: !256, file: !1, line: 155, column: 32)
!261 = !DILocation(line: 156, column: 10, scope: !260)
!262 = !DILocation(line: 156, column: 8, scope: !260)
!263 = !DILocation(line: 157, column: 3, scope: !260)
!264 = !DILocation(line: 155, column: 28, scope: !265)
!265 = !DILexicalBlockFile(scope: !256, file: !1, discriminator: 2)
!266 = !DILocation(line: 155, column: 3, scope: !265)
!267 = !DILocation(line: 159, column: 8, scope: !55)
!268 = !DILocation(line: 159, column: 6, scope: !55)
!269 = !DILocation(line: 160, column: 6, scope: !55)
!270 = !DILocation(line: 161, column: 6, scope: !55)
!271 = !DILocation(line: 162, column: 6, scope: !55)
!272 = !DILocation(line: 163, column: 6, scope: !55)
!273 = !DILocation(line: 165, column: 10, scope: !274)
!274 = distinct !DILexicalBlock(scope: !55, file: !1, line: 165, column: 3)
!275 = !DILocation(line: 165, column: 8, scope: !274)
!276 = !DILocation(line: 165, column: 15, scope: !277)
!277 = !DILexicalBlockFile(scope: !278, file: !1, discriminator: 1)
!278 = distinct !DILexicalBlock(scope: !274, file: !1, line: 165, column: 3)
!279 = !DILocation(line: 165, column: 17, scope: !277)
!280 = !DILocation(line: 165, column: 3, scope: !277)
!281 = !DILocation(line: 166, column: 7, scope: !282)
!282 = distinct !DILexicalBlock(scope: !278, file: !1, line: 165, column: 28)
!283 = !DILocation(line: 166, column: 5, scope: !282)
!284 = !DILocation(line: 166, column: 10, scope: !282)
!285 = !DILocation(line: 167, column: 3, scope: !282)
!286 = !DILocation(line: 165, column: 24, scope: !287)
!287 = !DILexicalBlockFile(scope: !278, file: !1, discriminator: 2)
!288 = !DILocation(line: 165, column: 3, scope: !287)
!289 = !DILocation(line: 175, column: 12, scope: !55)
!290 = !DILocation(line: 177, column: 11, scope: !55)
!291 = !DILocation(line: 237, column: 10, scope: !292)
!292 = distinct !DILexicalBlock(scope: !55, file: !1, line: 237, column: 3)
!293 = !DILocation(line: 237, column: 8, scope: !292)
!294 = !DILocation(line: 237, column: 15, scope: !295)
!295 = !DILexicalBlockFile(scope: !296, file: !1, discriminator: 1)
!296 = distinct !DILexicalBlock(scope: !292, file: !1, line: 237, column: 3)
!297 = !DILocation(line: 237, column: 17, scope: !295)
!298 = !DILocation(line: 237, column: 3, scope: !295)
!299 = !DILocation(line: 238, column: 10, scope: !300)
!300 = distinct !DILexicalBlock(scope: !296, file: !1, line: 237, column: 28)
!301 = !DILocation(line: 238, column: 17, scope: !300)
!302 = !DILocation(line: 238, column: 15, scope: !300)
!303 = !DILocation(line: 238, column: 13, scope: !300)
!304 = !DILocation(line: 238, column: 8, scope: !300)
!305 = !DILocation(line: 239, column: 3, scope: !300)
!306 = !DILocation(line: 237, column: 24, scope: !307)
!307 = !DILexicalBlockFile(scope: !296, file: !1, discriminator: 2)
!308 = !DILocation(line: 237, column: 3, scope: !307)
!309 = !DILocation(line: 241, column: 3, scope: !55)
!310 = !DILocation(line: 242, column: 8, scope: !55)
!311 = !DILocation(line: 242, column: 6, scope: !55)
!312 = !DILocation(line: 244, column: 7, scope: !55)
!313 = !DILocation(line: 245, column: 12, scope: !55)
!314 = !DILocation(line: 247, column: 21, scope: !315)
!315 = distinct !DILexicalBlock(scope: !316, file: !1, line: 246, column: 16)
!316 = distinct !DILexicalBlock(scope: !55, file: !1, line: 246, column: 7)
!317 = !DILocation(line: 248, column: 21, scope: !315)
!318 = !DILocation(line: 271, column: 7, scope: !319)
!319 = distinct !DILexicalBlock(scope: !55, file: !1, line: 271, column: 7)
!320 = !DILocation(line: 271, column: 7, scope: !55)
!321 = !DILocation(line: 272, column: 20, scope: !322)
!322 = distinct !DILexicalBlock(scope: !319, file: !1, line: 271, column: 17)
!323 = !DILocation(line: 272, column: 25, scope: !322)
!324 = !DILocation(line: 272, column: 23, scope: !322)
!325 = !DILocation(line: 272, column: 44, scope: !322)
!326 = !DILocation(line: 272, column: 42, scope: !322)
!327 = !DILocation(line: 272, column: 14, scope: !322)
!328 = !DILocation(line: 272, column: 12, scope: !322)
!329 = !DILocation(line: 273, column: 20, scope: !322)
!330 = !DILocation(line: 273, column: 25, scope: !322)
!331 = !DILocation(line: 273, column: 23, scope: !322)
!332 = !DILocation(line: 273, column: 44, scope: !322)
!333 = !DILocation(line: 273, column: 42, scope: !322)
!334 = !DILocation(line: 273, column: 14, scope: !322)
!335 = !DILocation(line: 273, column: 12, scope: !322)
!336 = !DILocation(line: 274, column: 18, scope: !322)
!337 = !DILocation(line: 274, column: 25, scope: !322)
!338 = !DILocation(line: 274, column: 37, scope: !322)
!339 = !DILocation(line: 274, column: 41, scope: !340)
!340 = !DILexicalBlockFile(scope: !322, file: !1, discriminator: 1)
!341 = !DILocation(line: 274, column: 48, scope: !340)
!342 = !DILocation(line: 274, column: 37, scope: !343)
!343 = !DILexicalBlockFile(scope: !322, file: !1, discriminator: 2)
!344 = !DILocation(line: 274, column: 14, scope: !343)
!345 = !DILocation(line: 275, column: 3, scope: !322)
!346 = !DILocation(line: 277, column: 10, scope: !55)
!347 = !DILocation(line: 277, column: 26, scope: !55)
!348 = !DILocation(line: 277, column: 24, scope: !55)
!349 = !DILocation(line: 277, column: 29, scope: !55)
!350 = !DILocation(line: 277, column: 8, scope: !55)
!351 = !DILocation(line: 279, column: 3, scope: !55)
!352 = !DILocation(line: 280, column: 33, scope: !55)
!353 = !DILocation(line: 280, column: 3, scope: !55)
!354 = !DILocation(line: 281, column: 3, scope: !55)
!355 = !DILocation(line: 282, column: 44, scope: !55)
!356 = !DILocation(line: 282, column: 3, scope: !55)
!357 = !DILocation(line: 283, column: 40, scope: !55)
!358 = !DILocation(line: 283, column: 44, scope: !55)
!359 = !DILocation(line: 283, column: 3, scope: !55)
!360 = !DILocation(line: 284, column: 3, scope: !55)
!361 = !DILocation(line: 285, column: 10, scope: !362)
!362 = distinct !DILexicalBlock(scope: !55, file: !1, line: 285, column: 3)
!363 = !DILocation(line: 285, column: 8, scope: !362)
!364 = !DILocation(line: 285, column: 15, scope: !365)
!365 = !DILexicalBlockFile(scope: !366, file: !1, discriminator: 1)
!366 = distinct !DILexicalBlock(scope: !362, file: !1, line: 285, column: 3)
!367 = !DILocation(line: 285, column: 17, scope: !365)
!368 = !DILocation(line: 285, column: 3, scope: !365)
!369 = !DILocation(line: 286, column: 28, scope: !370)
!370 = distinct !DILexicalBlock(scope: !366, file: !1, line: 285, column: 28)
!371 = !DILocation(line: 286, column: 33, scope: !370)
!372 = !DILocation(line: 286, column: 31, scope: !370)
!373 = !DILocation(line: 286, column: 5, scope: !370)
!374 = !DILocation(line: 287, column: 3, scope: !370)
!375 = !DILocation(line: 285, column: 24, scope: !376)
!376 = !DILexicalBlockFile(scope: !366, file: !1, discriminator: 2)
!377 = !DILocation(line: 285, column: 3, scope: !376)
!378 = !DILocation(line: 289, column: 41, scope: !55)
!379 = !DILocation(line: 290, column: 7, scope: !55)
!380 = !DILocation(line: 290, column: 11, scope: !55)
!381 = !DILocation(line: 292, column: 7, scope: !55)
!382 = !DILocation(line: 289, column: 3, scope: !55)
!383 = !DILocation(line: 295, column: 7, scope: !384)
!384 = distinct !DILexicalBlock(scope: !55, file: !1, line: 295, column: 7)
!385 = !DILocation(line: 295, column: 7, scope: !55)
!386 = !DILocation(line: 296, column: 9, scope: !387)
!387 = distinct !DILexicalBlock(scope: !388, file: !1, line: 296, column: 9)
!388 = distinct !DILexicalBlock(scope: !384, file: !1, line: 295, column: 23)
!389 = !DILocation(line: 296, column: 12, scope: !387)
!390 = !DILocation(line: 296, column: 9, scope: !388)
!391 = !DILocation(line: 296, column: 23, scope: !392)
!392 = !DILexicalBlockFile(scope: !387, file: !1, discriminator: 1)
!393 = !DILocation(line: 296, column: 20, scope: !392)
!394 = !DILocation(line: 297, column: 10, scope: !388)
!395 = !DILocation(line: 297, column: 8, scope: !388)
!396 = !DILocation(line: 298, column: 51, scope: !388)
!397 = !DILocation(line: 298, column: 55, scope: !388)
!398 = !DILocation(line: 298, column: 57, scope: !388)
!399 = !DILocation(line: 298, column: 64, scope: !388)
!400 = !DILocation(line: 298, column: 63, scope: !388)
!401 = !DILocation(line: 298, column: 5, scope: !388)
!402 = !DILocation(line: 299, column: 10, scope: !388)
!403 = !DILocation(line: 299, column: 8, scope: !388)
!404 = !DILocation(line: 300, column: 49, scope: !388)
!405 = !DILocation(line: 300, column: 53, scope: !388)
!406 = !DILocation(line: 300, column: 55, scope: !388)
!407 = !DILocation(line: 300, column: 62, scope: !388)
!408 = !DILocation(line: 300, column: 61, scope: !388)
!409 = !DILocation(line: 300, column: 5, scope: !388)
!410 = !DILocation(line: 301, column: 10, scope: !388)
!411 = !DILocation(line: 301, column: 8, scope: !388)
!412 = !DILocation(line: 302, column: 49, scope: !388)
!413 = !DILocation(line: 302, column: 53, scope: !388)
!414 = !DILocation(line: 302, column: 55, scope: !388)
!415 = !DILocation(line: 302, column: 62, scope: !388)
!416 = !DILocation(line: 302, column: 61, scope: !388)
!417 = !DILocation(line: 302, column: 5, scope: !388)
!418 = !DILocation(line: 303, column: 3, scope: !388)
!419 = !DILocation(line: 305, column: 3, scope: !55)
!420 = distinct !DISubprogram(name: ".omp_outlined.", scope: !1, file: !1, line: 130, type: !421, isLocal: true, isDefinition: true, scopeLine: 131, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !29)
!421 = !DISubroutineType(types: !422)
!422 = !{null, !423, !423}
!423 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !424)
!424 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !425)
!425 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !31, size: 64, align: 64)
!426 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !420, type: !423, flags: DIFlagArtificial | DIFlagObjectPointer)
!427 = !DILocation(line: 0, scope: !420)
!428 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !420, type: !423, flags: DIFlagArtificial)
!429 = !DILocalVariable(name: "i", scope: !420, type: !31, flags: DIFlagArtificial)
!430 = !DILocation(line: 132, column: 12, scope: !431)
!431 = distinct !DILexicalBlock(scope: !432, file: !1, line: 132, column: 5)
!432 = distinct !DILexicalBlock(scope: !420, file: !1, line: 131, column: 3)
!433 = !DILocation(line: 132, column: 10, scope: !431)
!434 = !DILocation(line: 132, column: 17, scope: !435)
!435 = !DILexicalBlockFile(scope: !436, file: !1, discriminator: 1)
!436 = distinct !DILexicalBlock(scope: !431, file: !1, line: 132, column: 5)
!437 = !DILocation(line: 132, column: 19, scope: !435)
!438 = !DILocation(line: 132, column: 5, scope: !435)
!439 = !DILocation(line: 133, column: 9, scope: !440)
!440 = distinct !DILexicalBlock(scope: !436, file: !1, line: 132, column: 34)
!441 = !DILocation(line: 133, column: 7, scope: !440)
!442 = !DILocation(line: 133, column: 12, scope: !440)
!443 = !DILocation(line: 134, column: 5, scope: !440)
!444 = !DILocation(line: 132, column: 30, scope: !445)
!445 = !DILexicalBlockFile(scope: !436, file: !1, discriminator: 2)
!446 = !DILocation(line: 132, column: 5, scope: !445)
!447 = !DILocation(line: 135, column: 3, scope: !420)
!448 = distinct !DISubprogram(name: ".omp_outlined..7", scope: !1, file: !1, line: 141, type: !449, isLocal: true, isDefinition: true, scopeLine: 139, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !29)
!449 = !DISubroutineType(types: !450)
!450 = !{null, !423, !423, !451}
!451 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !119, size: 64, align: 64)
!452 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !448, type: !423, flags: DIFlagArtificial | DIFlagObjectPointer)
!453 = !DILocation(line: 0, scope: !448)
!454 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !448, type: !423, flags: DIFlagArtificial)
!455 = !DILocalVariable(name: "timers_enabled", arg: 3, scope: !448, type: !451, flags: DIFlagArtificial)
!456 = !DILocation(line: 139, column: 3, scope: !448)
!457 = !DILocation(line: 140, column: 5, scope: !458)
!458 = distinct !DILexicalBlock(scope: !448, file: !1, line: 139, column: 3)
!459 = !DILocation(line: 141, column: 9, scope: !460)
!460 = distinct !DILexicalBlock(scope: !458, file: !1, line: 141, column: 9)
!461 = !DILocation(line: 141, column: 9, scope: !458)
!462 = !DILocation(line: 141, column: 25, scope: !463)
!463 = !DILexicalBlockFile(scope: !460, file: !1, discriminator: 1)
!464 = !DILocation(line: 142, column: 9, scope: !465)
!465 = distinct !DILexicalBlock(scope: !458, file: !1, line: 142, column: 9)
!466 = !DILocation(line: 142, column: 9, scope: !458)
!467 = !DILocation(line: 142, column: 25, scope: !468)
!468 = !DILexicalBlockFile(scope: !465, file: !1, discriminator: 1)
!469 = !DILocation(line: 143, column: 3, scope: !448)
!470 = distinct !DISubprogram(name: ".omp_outlined..8", scope: !1, file: !1, line: 202, type: !471, isLocal: true, isDefinition: true, scopeLine: 178, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !29)
!471 = !DISubroutineType(types: !472)
!472 = !{null, !423, !423, !473, !473, !474, !474, !473, !451}
!473 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !13, size: 64, align: 64)
!474 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !31, size: 64, align: 64)
!475 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !470, type: !423, flags: DIFlagArtificial | DIFlagObjectPointer)
!476 = !DILocation(line: 0, scope: !470)
!477 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !470, type: !423, flags: DIFlagArtificial)
!478 = !DILocalVariable(name: "sx", arg: 3, scope: !470, type: !473, flags: DIFlagArtificial)
!479 = !DILocalVariable(name: "sy", arg: 4, scope: !470, type: !473, flags: DIFlagArtificial)
!480 = !DILocalVariable(name: "np", arg: 5, scope: !470, type: !474, flags: DIFlagArtificial)
!481 = !DILocalVariable(name: "k_offset", arg: 6, scope: !470, type: !474, flags: DIFlagArtificial)
!482 = !DILocalVariable(name: "an", arg: 7, scope: !470, type: !473, flags: DIFlagArtificial)
!483 = !DILocalVariable(name: "timers_enabled", arg: 8, scope: !470, type: !451, flags: DIFlagArtificial)
!484 = !DILocation(line: 178, column: 3, scope: !470)
!485 = !DILocalVariable(name: "k", scope: !470, type: !31, flags: DIFlagArtificial)
!486 = !DILocalVariable(name: "kk", scope: !470, type: !31, flags: DIFlagArtificial)
!487 = !DILocalVariable(name: "t1", scope: !470, type: !13, flags: DIFlagArtificial)
!488 = !DILocalVariable(name: "t2", scope: !470, type: !13, flags: DIFlagArtificial)
!489 = !DILocalVariable(name: "t3", scope: !470, type: !13, flags: DIFlagArtificial)
!490 = !DILocalVariable(name: "t4", scope: !470, type: !13, flags: DIFlagArtificial)
!491 = !DILocalVariable(name: "i", scope: !470, type: !31, flags: DIFlagArtificial)
!492 = !DILocalVariable(name: "ik", scope: !470, type: !31, flags: DIFlagArtificial)
!493 = !DILocalVariable(name: "x1", scope: !470, type: !13, flags: DIFlagArtificial)
!494 = !DILocalVariable(name: "x2", scope: !470, type: !13, flags: DIFlagArtificial)
!495 = !DILocalVariable(name: "l", scope: !470, type: !31, flags: DIFlagArtificial)
!496 = !DILocation(line: 179, column: 12, scope: !497)
!497 = distinct !DILexicalBlock(scope: !498, file: !1, line: 179, column: 5)
!498 = distinct !DILexicalBlock(scope: !470, file: !1, line: 178, column: 3)
!499 = !DILocation(line: 179, column: 10, scope: !497)
!500 = !DILocation(line: 179, column: 17, scope: !501)
!501 = !DILexicalBlockFile(scope: !502, file: !1, discriminator: 1)
!502 = distinct !DILexicalBlock(scope: !497, file: !1, line: 179, column: 5)
!503 = !DILocation(line: 179, column: 19, scope: !501)
!504 = !DILocation(line: 179, column: 5, scope: !501)
!505 = !DILocation(line: 180, column: 10, scope: !506)
!506 = distinct !DILexicalBlock(scope: !502, file: !1, line: 179, column: 30)
!507 = !DILocation(line: 180, column: 7, scope: !506)
!508 = !DILocation(line: 180, column: 13, scope: !506)
!509 = !DILocation(line: 181, column: 5, scope: !506)
!510 = !DILocation(line: 179, column: 26, scope: !511)
!511 = !DILexicalBlockFile(scope: !502, file: !1, discriminator: 2)
!512 = !DILocation(line: 179, column: 5, scope: !511)
!513 = !DILocalVariable(name: ".omp.iv", scope: !514, type: !31, flags: DIFlagArtificial)
!514 = distinct !DILexicalBlock(scope: !498, file: !1, line: 183, column: 13)
!515 = !DILocation(line: 0, scope: !514)
!516 = !DILocalVariable(name: ".omp.last.iteration", scope: !514, type: !31, flags: DIFlagArtificial)
!517 = !DILocation(line: 184, column: 22, scope: !514)
!518 = !DILocation(line: 184, column: 5, scope: !514)
!519 = !DILocalVariable(name: "k", scope: !514, type: !31, flags: DIFlagArtificial)
!520 = !DILocation(line: 184, column: 26, scope: !514)
!521 = !DILocation(line: 183, column: 13, scope: !498)
!522 = !DILocalVariable(name: ".omp.lb", scope: !514, type: !31, flags: DIFlagArtificial)
!523 = !DILocation(line: 184, column: 10, scope: !524)
!524 = !DILexicalBlockFile(scope: !514, file: !1, discriminator: 1)
!525 = !DILocalVariable(name: ".omp.ub", scope: !514, type: !31, flags: DIFlagArtificial)
!526 = !DILocation(line: 0, scope: !524)
!527 = !DILocalVariable(name: ".omp.stride", scope: !514, type: !31, flags: DIFlagArtificial)
!528 = !DILocalVariable(name: ".omp.is_last", scope: !514, type: !31, flags: DIFlagArtificial)
!529 = !DILocalVariable(name: "sx", scope: !514, type: !13, flags: DIFlagArtificial)
!530 = !DILocation(line: 183, column: 33, scope: !524)
!531 = !DILocalVariable(name: "sy", scope: !514, type: !13, flags: DIFlagArtificial)
!532 = !DILocation(line: 183, column: 36, scope: !524)
!533 = !DILocation(line: 183, column: 13, scope: !524)
!534 = !DILocation(line: 0, scope: !535)
!535 = !DILexicalBlockFile(scope: !514, file: !1, discriminator: 2)
!536 = !DILocation(line: 184, column: 10, scope: !535)
!537 = !DILocation(line: 184, column: 10, scope: !538)
!538 = !DILexicalBlockFile(scope: !514, file: !1, discriminator: 3)
!539 = !DILocation(line: 184, column: 10, scope: !540)
!540 = !DILexicalBlockFile(scope: !514, file: !1, discriminator: 4)
!541 = !DILocation(line: 183, column: 13, scope: !542)
!542 = !DILexicalBlockFile(scope: !498, file: !1, discriminator: 2)
!543 = !DILocation(line: 184, column: 10, scope: !544)
!544 = !DILexicalBlockFile(scope: !514, file: !1, discriminator: 5)
!545 = !DILocation(line: 0, scope: !538)
!546 = !DILocation(line: 183, column: 13, scope: !547)
!547 = !DILexicalBlockFile(scope: !498, file: !1, discriminator: 3)
!548 = !DILocation(line: 184, column: 10, scope: !549)
!549 = !DILexicalBlockFile(scope: !514, file: !1, discriminator: 6)
!550 = !DILocation(line: 184, column: 26, scope: !549)
!551 = !DILocation(line: 185, column: 12, scope: !552)
!552 = distinct !DILexicalBlock(scope: !514, file: !1, line: 184, column: 31)
!553 = !DILocation(line: 185, column: 23, scope: !552)
!554 = !DILocation(line: 185, column: 21, scope: !552)
!555 = !DILocation(line: 185, column: 10, scope: !552)
!556 = !DILocation(line: 186, column: 10, scope: !552)
!557 = !DILocation(line: 187, column: 12, scope: !552)
!558 = !DILocation(line: 187, column: 10, scope: !552)
!559 = !DILocation(line: 191, column: 14, scope: !560)
!560 = distinct !DILexicalBlock(scope: !552, file: !1, line: 191, column: 7)
!561 = !DILocation(line: 191, column: 12, scope: !560)
!562 = !DILocation(line: 191, column: 19, scope: !563)
!563 = !DILexicalBlockFile(scope: !564, file: !1, discriminator: 1)
!564 = distinct !DILexicalBlock(scope: !560, file: !1, line: 191, column: 7)
!565 = !DILocation(line: 191, column: 21, scope: !563)
!566 = !DILocation(line: 191, column: 7, scope: !563)
!567 = !DILocation(line: 192, column: 14, scope: !568)
!568 = distinct !DILexicalBlock(scope: !564, file: !1, line: 191, column: 34)
!569 = !DILocation(line: 192, column: 17, scope: !568)
!570 = !DILocation(line: 192, column: 12, scope: !568)
!571 = !DILocation(line: 193, column: 18, scope: !572)
!572 = distinct !DILexicalBlock(scope: !568, file: !1, line: 193, column: 13)
!573 = !DILocation(line: 193, column: 16, scope: !572)
!574 = !DILocation(line: 193, column: 25, scope: !572)
!575 = !DILocation(line: 193, column: 22, scope: !572)
!576 = !DILocation(line: 193, column: 13, scope: !568)
!577 = !DILocation(line: 193, column: 46, scope: !578)
!578 = !DILexicalBlockFile(scope: !572, file: !1, discriminator: 1)
!579 = !DILocation(line: 193, column: 34, scope: !578)
!580 = !DILocation(line: 193, column: 32, scope: !578)
!581 = !DILocation(line: 193, column: 29, scope: !578)
!582 = !DILocation(line: 194, column: 13, scope: !583)
!583 = distinct !DILexicalBlock(scope: !568, file: !1, line: 194, column: 13)
!584 = !DILocation(line: 194, column: 16, scope: !583)
!585 = !DILocation(line: 194, column: 13, scope: !568)
!586 = !DILocation(line: 194, column: 22, scope: !587)
!587 = !DILexicalBlockFile(scope: !583, file: !1, discriminator: 1)
!588 = !DILocation(line: 195, column: 26, scope: !568)
!589 = !DILocation(line: 195, column: 14, scope: !568)
!590 = !DILocation(line: 195, column: 12, scope: !568)
!591 = !DILocation(line: 196, column: 14, scope: !568)
!592 = !DILocation(line: 196, column: 12, scope: !568)
!593 = !DILocation(line: 197, column: 7, scope: !568)
!594 = !DILocation(line: 191, column: 30, scope: !595)
!595 = !DILexicalBlockFile(scope: !564, file: !1, discriminator: 2)
!596 = !DILocation(line: 191, column: 7, scope: !595)
!597 = !DILocation(line: 202, column: 11, scope: !598)
!598 = distinct !DILexicalBlock(scope: !552, file: !1, line: 202, column: 11)
!599 = !DILocation(line: 202, column: 11, scope: !552)
!600 = !DILocation(line: 202, column: 27, scope: !601)
!601 = !DILexicalBlockFile(scope: !598, file: !1, discriminator: 1)
!602 = !DILocation(line: 203, column: 30, scope: !552)
!603 = !DILocation(line: 203, column: 7, scope: !604)
!604 = !DILexicalBlockFile(scope: !552, file: !1, discriminator: 1)
!605 = !DILocation(line: 204, column: 11, scope: !606)
!606 = distinct !DILexicalBlock(scope: !552, file: !1, line: 204, column: 11)
!607 = !DILocation(line: 204, column: 11, scope: !552)
!608 = !DILocation(line: 204, column: 27, scope: !609)
!609 = !DILexicalBlockFile(scope: !606, file: !1, discriminator: 1)
!610 = !DILocation(line: 211, column: 11, scope: !611)
!611 = distinct !DILexicalBlock(scope: !552, file: !1, line: 211, column: 11)
!612 = !DILocation(line: 211, column: 11, scope: !552)
!613 = !DILocation(line: 211, column: 27, scope: !614)
!614 = !DILexicalBlockFile(scope: !611, file: !1, discriminator: 1)
!615 = !DILocation(line: 213, column: 14, scope: !616)
!616 = distinct !DILexicalBlock(scope: !552, file: !1, line: 213, column: 7)
!617 = !DILocation(line: 213, column: 12, scope: !616)
!618 = !DILocation(line: 213, column: 19, scope: !619)
!619 = !DILexicalBlockFile(scope: !620, file: !1, discriminator: 1)
!620 = distinct !DILexicalBlock(scope: !616, file: !1, line: 213, column: 7)
!621 = !DILocation(line: 213, column: 21, scope: !619)
!622 = !DILocation(line: 213, column: 7, scope: !619)
!623 = !DILocation(line: 214, column: 24, scope: !624)
!624 = distinct !DILexicalBlock(scope: !620, file: !1, line: 213, column: 32)
!625 = !DILocation(line: 214, column: 23, scope: !624)
!626 = !DILocation(line: 214, column: 20, scope: !624)
!627 = !DILocation(line: 214, column: 18, scope: !624)
!628 = !DILocation(line: 214, column: 27, scope: !624)
!629 = !DILocation(line: 214, column: 12, scope: !624)
!630 = !DILocation(line: 215, column: 24, scope: !624)
!631 = !DILocation(line: 215, column: 23, scope: !624)
!632 = !DILocation(line: 215, column: 25, scope: !624)
!633 = !DILocation(line: 215, column: 20, scope: !624)
!634 = !DILocation(line: 215, column: 18, scope: !624)
!635 = !DILocation(line: 215, column: 29, scope: !624)
!636 = !DILocation(line: 215, column: 12, scope: !624)
!637 = !DILocation(line: 216, column: 14, scope: !624)
!638 = !DILocation(line: 216, column: 19, scope: !624)
!639 = !DILocation(line: 216, column: 17, scope: !624)
!640 = !DILocation(line: 216, column: 24, scope: !624)
!641 = !DILocation(line: 216, column: 29, scope: !624)
!642 = !DILocation(line: 216, column: 27, scope: !624)
!643 = !DILocation(line: 216, column: 22, scope: !624)
!644 = !DILocation(line: 216, column: 12, scope: !624)
!645 = !DILocation(line: 217, column: 13, scope: !646)
!646 = distinct !DILexicalBlock(scope: !624, file: !1, line: 217, column: 13)
!647 = !DILocation(line: 217, column: 16, scope: !646)
!648 = !DILocation(line: 217, column: 13, scope: !624)
!649 = !DILocation(line: 218, column: 35, scope: !650)
!650 = distinct !DILexicalBlock(scope: !646, file: !1, line: 217, column: 24)
!651 = !DILocation(line: 218, column: 31, scope: !650)
!652 = !DILocation(line: 218, column: 29, scope: !650)
!653 = !DILocation(line: 218, column: 41, scope: !650)
!654 = !DILocation(line: 218, column: 39, scope: !650)
!655 = !DILocation(line: 218, column: 19, scope: !656)
!656 = !DILexicalBlockFile(scope: !650, file: !1, discriminator: 1)
!657 = !DILocation(line: 218, column: 17, scope: !650)
!658 = !DILocation(line: 219, column: 20, scope: !650)
!659 = !DILocation(line: 219, column: 25, scope: !650)
!660 = !DILocation(line: 219, column: 23, scope: !650)
!661 = !DILocation(line: 219, column: 17, scope: !650)
!662 = !DILocation(line: 220, column: 20, scope: !650)
!663 = !DILocation(line: 220, column: 25, scope: !650)
!664 = !DILocation(line: 220, column: 23, scope: !650)
!665 = !DILocation(line: 220, column: 17, scope: !650)
!666 = !DILocation(line: 221, column: 19, scope: !650)
!667 = !DILocation(line: 221, column: 19, scope: !668)
!668 = !DILexicalBlockFile(scope: !650, file: !1, discriminator: 4)
!669 = !DILocation(line: 221, column: 19, scope: !656)
!670 = !DILocation(line: 221, column: 19, scope: !671)
!671 = !DILexicalBlockFile(scope: !650, file: !1, discriminator: 2)
!672 = !DILocation(line: 221, column: 19, scope: !673)
!673 = !DILexicalBlockFile(scope: !650, file: !1, discriminator: 3)
!674 = !DILocation(line: 221, column: 17, scope: !673)
!675 = !DILocation(line: 222, column: 22, scope: !650)
!676 = !DILocation(line: 222, column: 19, scope: !650)
!677 = !DILocation(line: 222, column: 25, scope: !650)
!678 = !DILocation(line: 222, column: 14, scope: !650)
!679 = !DILocation(line: 222, column: 11, scope: !650)
!680 = !DILocation(line: 222, column: 11, scope: !656)
!681 = !DILocation(line: 222, column: 17, scope: !650)
!682 = !DILocation(line: 223, column: 19, scope: !650)
!683 = !DILocation(line: 223, column: 24, scope: !650)
!684 = !DILocation(line: 223, column: 22, scope: !650)
!685 = !DILocation(line: 223, column: 17, scope: !650)
!686 = !DILocation(line: 224, column: 19, scope: !650)
!687 = !DILocation(line: 224, column: 24, scope: !650)
!688 = !DILocation(line: 224, column: 22, scope: !650)
!689 = !DILocation(line: 224, column: 17, scope: !650)
!690 = !DILocation(line: 225, column: 9, scope: !650)
!691 = !DILocation(line: 226, column: 7, scope: !624)
!692 = !DILocation(line: 213, column: 28, scope: !693)
!693 = !DILexicalBlockFile(scope: !620, file: !1, discriminator: 2)
!694 = !DILocation(line: 213, column: 7, scope: !693)
!695 = !DILocation(line: 228, column: 11, scope: !696)
!696 = distinct !DILexicalBlock(scope: !552, file: !1, line: 228, column: 11)
!697 = !DILocation(line: 228, column: 11, scope: !552)
!698 = !DILocation(line: 228, column: 27, scope: !699)
!699 = !DILexicalBlockFile(scope: !696, file: !1, discriminator: 1)
!700 = !DILocation(line: 229, column: 5, scope: !552)
!701 = !DILocation(line: 183, column: 13, scope: !540)
!702 = !DILocation(line: 184, column: 10, scope: !703)
!703 = !DILexicalBlockFile(scope: !514, file: !1, discriminator: 7)
!704 = !DILocation(line: 0, scope: !540)
!705 = !DILocation(line: 183, column: 13, scope: !544)
!706 = !DILocation(line: 183, column: 13, scope: !549)
!707 = !DILocation(line: 183, column: 13, scope: !703)
!708 = !DILocation(line: 183, column: 13, scope: !709)
!709 = !DILexicalBlockFile(scope: !703, file: !1, discriminator: 15)
!710 = !DILocation(line: 183, column: 33, scope: !711)
!711 = !DILexicalBlockFile(scope: !514, file: !1, discriminator: 8)
!712 = !DILocation(line: 183, column: 31, scope: !711)
!713 = !DILocation(line: 183, column: 36, scope: !711)
!714 = !DILocation(line: 183, column: 13, scope: !711)
!715 = !DILocation(line: 183, column: 33, scope: !716)
!716 = !DILexicalBlockFile(scope: !514, file: !1, discriminator: 9)
!717 = !DILocation(line: 183, column: 13, scope: !716)
!718 = !DILocation(line: 183, column: 13, scope: !719)
!719 = !DILexicalBlockFile(scope: !514, file: !1, discriminator: 10)
!720 = !DILocation(line: 183, column: 33, scope: !719)
!721 = !DILocation(line: 183, column: 31, scope: !719)
!722 = !DILocation(line: 183, column: 36, scope: !723)
!723 = !DILexicalBlockFile(scope: !514, file: !1, discriminator: 11)
!724 = !DILocation(line: 183, column: 13, scope: !723)
!725 = !DILocation(line: 183, column: 13, scope: !726)
!726 = !DILexicalBlockFile(scope: !514, file: !1, discriminator: 12)
!727 = !DILocation(line: 183, column: 36, scope: !726)
!728 = !DILocation(line: 183, column: 31, scope: !726)
!729 = !DILocation(line: 183, column: 13, scope: !730)
!730 = !DILexicalBlockFile(scope: !514, file: !1, discriminator: 13)
!731 = !DILocation(line: 183, column: 13, scope: !732)
!732 = !DILexicalBlockFile(scope: !514, file: !1, discriminator: 14)
!733 = !DILocation(line: 231, column: 12, scope: !734)
!734 = distinct !DILexicalBlock(scope: !498, file: !1, line: 231, column: 5)
!735 = !DILocation(line: 231, column: 10, scope: !734)
!736 = !DILocation(line: 231, column: 17, scope: !737)
!737 = !DILexicalBlockFile(scope: !738, file: !1, discriminator: 1)
!738 = distinct !DILexicalBlock(scope: !734, file: !1, line: 231, column: 5)
!739 = !DILocation(line: 231, column: 19, scope: !737)
!740 = !DILocation(line: 231, column: 5, scope: !737)
!741 = !DILocation(line: 233, column: 9, scope: !742)
!742 = distinct !DILexicalBlock(scope: !743, file: !1, line: 232, column: 15)
!743 = distinct !DILexicalBlock(scope: !738, file: !1, line: 231, column: 30)
!744 = !DILocation(line: 233, column: 7, scope: !742)
!745 = !DILocation(line: 233, column: 18, scope: !742)
!746 = !DILocation(line: 233, column: 15, scope: !742)
!747 = !DILocation(line: 233, column: 7, scope: !748)
!748 = !DILexicalBlockFile(scope: !742, file: !1, discriminator: 1)
!749 = !DILocation(line: 233, column: 12, scope: !748)
!750 = !DILocation(line: 234, column: 5, scope: !743)
!751 = !DILocation(line: 231, column: 26, scope: !752)
!752 = !DILexicalBlockFile(scope: !738, file: !1, discriminator: 2)
!753 = !DILocation(line: 231, column: 5, scope: !752)
!754 = !DILocation(line: 235, column: 3, scope: !470)
!755 = distinct !DISubprogram(linkageName: ".omp.reduction.reduction_func", scope: !1, file: !1, type: !756, isLocal: true, isDefinition: true, flags: DIFlagArtificial, isOptimized: false, unit: !0, variables: !29)
!756 = !DISubroutineType(types: !29)
!757 = !DILocalVariable(arg: 1, scope: !755, type: !9, flags: DIFlagArtificial | DIFlagObjectPointer)
!758 = !DILocation(line: 0, scope: !755)
!759 = !DILocalVariable(arg: 2, scope: !755, type: !9, flags: DIFlagArtificial)
!760 = !DILocation(line: 183, column: 33, scope: !755)
!761 = !DILocation(line: 183, column: 31, scope: !755)
!762 = !DILocation(line: 183, column: 36, scope: !755)
!763 = distinct !DISubprogram(name: "print_results", scope: !764, file: !764, line: 10, type: !765, isLocal: false, isDefinition: true, scopeLine: 14, flags: DIFlagPrototyped, isOptimized: false, unit: !21, variables: !29)
!764 = !DIFile(filename: "print_results.c", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common")
!765 = !DISubroutineType(types: !766)
!766 = !{null, !59, !60, !31, !31, !31, !31, !13, !13, !59, !767, !59, !59, !59, !59, !59, !59, !59, !59, !59}
!767 = !DIDerivedType(tag: DW_TAG_typedef, name: "logical", file: !25, line: 4, baseType: !24)
!768 = !DILocalVariable(name: "name", arg: 1, scope: !763, file: !764, line: 10, type: !59)
!769 = !DILocation(line: 10, column: 26, scope: !763)
!770 = !DILocalVariable(name: "class", arg: 2, scope: !763, file: !764, line: 10, type: !60)
!771 = !DILocation(line: 10, column: 37, scope: !763)
!772 = !DILocalVariable(name: "n1", arg: 3, scope: !763, file: !764, line: 10, type: !31)
!773 = !DILocation(line: 10, column: 48, scope: !763)
!774 = !DILocalVariable(name: "n2", arg: 4, scope: !763, file: !764, line: 10, type: !31)
!775 = !DILocation(line: 10, column: 56, scope: !763)
!776 = !DILocalVariable(name: "n3", arg: 5, scope: !763, file: !764, line: 10, type: !31)
!777 = !DILocation(line: 10, column: 64, scope: !763)
!778 = !DILocalVariable(name: "niter", arg: 6, scope: !763, file: !764, line: 10, type: !31)
!779 = !DILocation(line: 10, column: 72, scope: !763)
!780 = !DILocalVariable(name: "t", arg: 7, scope: !763, file: !764, line: 11, type: !13)
!781 = !DILocation(line: 11, column: 12, scope: !763)
!782 = !DILocalVariable(name: "mops", arg: 8, scope: !763, file: !764, line: 11, type: !13)
!783 = !DILocation(line: 11, column: 22, scope: !763)
!784 = !DILocalVariable(name: "optype", arg: 9, scope: !763, file: !764, line: 11, type: !59)
!785 = !DILocation(line: 11, column: 34, scope: !763)
!786 = !DILocalVariable(name: "verified", arg: 10, scope: !763, file: !764, line: 11, type: !767)
!787 = !DILocation(line: 11, column: 50, scope: !763)
!788 = !DILocalVariable(name: "npbversion", arg: 11, scope: !763, file: !764, line: 11, type: !59)
!789 = !DILocation(line: 11, column: 66, scope: !763)
!790 = !DILocalVariable(name: "compiletime", arg: 12, scope: !763, file: !764, line: 12, type: !59)
!791 = !DILocation(line: 12, column: 11, scope: !763)
!792 = !DILocalVariable(name: "cs1", arg: 13, scope: !763, file: !764, line: 12, type: !59)
!793 = !DILocation(line: 12, column: 30, scope: !763)
!794 = !DILocalVariable(name: "cs2", arg: 14, scope: !763, file: !764, line: 12, type: !59)
!795 = !DILocation(line: 12, column: 41, scope: !763)
!796 = !DILocalVariable(name: "cs3", arg: 15, scope: !763, file: !764, line: 12, type: !59)
!797 = !DILocation(line: 12, column: 52, scope: !763)
!798 = !DILocalVariable(name: "cs4", arg: 16, scope: !763, file: !764, line: 12, type: !59)
!799 = !DILocation(line: 12, column: 63, scope: !763)
!800 = !DILocalVariable(name: "cs5", arg: 17, scope: !763, file: !764, line: 12, type: !59)
!801 = !DILocation(line: 12, column: 74, scope: !763)
!802 = !DILocalVariable(name: "cs6", arg: 18, scope: !763, file: !764, line: 13, type: !59)
!803 = !DILocation(line: 13, column: 11, scope: !763)
!804 = !DILocalVariable(name: "cs7", arg: 19, scope: !763, file: !764, line: 13, type: !59)
!805 = !DILocation(line: 13, column: 22, scope: !763)
!806 = !DILocalVariable(name: "size", scope: !763, file: !764, line: 15, type: !129)
!807 = !DILocation(line: 15, column: 8, scope: !763)
!808 = !DILocalVariable(name: "j", scope: !763, file: !764, line: 16, type: !31)
!809 = !DILocation(line: 16, column: 7, scope: !763)
!810 = !DILocalVariable(name: "num_threads", scope: !763, file: !764, line: 17, type: !31)
!811 = !DILocation(line: 17, column: 7, scope: !763)
!812 = !DILocalVariable(name: "max_threads", scope: !763, file: !764, line: 17, type: !31)
!813 = !DILocation(line: 17, column: 20, scope: !763)
!814 = !DILocation(line: 19, column: 15, scope: !763)
!815 = !DILocation(line: 20, column: 15, scope: !763)
!816 = !DILocation(line: 24, column: 17, scope: !763)
!817 = !DILocation(line: 24, column: 15, scope: !763)
!818 = !DILocation(line: 25, column: 9, scope: !763)
!819 = !DILocation(line: 33, column: 45, scope: !763)
!820 = !DILocation(line: 33, column: 3, scope: !763)
!821 = !DILocation(line: 34, column: 52, scope: !763)
!822 = !DILocation(line: 34, column: 3, scope: !763)
!823 = !DILocation(line: 41, column: 10, scope: !824)
!824 = distinct !DILexicalBlock(scope: !763, file: !764, line: 41, column: 8)
!825 = !DILocation(line: 41, column: 13, scope: !824)
!826 = !DILocation(line: 41, column: 20, scope: !824)
!827 = !DILocation(line: 41, column: 25, scope: !828)
!828 = !DILexicalBlockFile(scope: !824, file: !764, discriminator: 1)
!829 = !DILocation(line: 41, column: 28, scope: !828)
!830 = !DILocation(line: 41, column: 8, scope: !828)
!831 = !DILocation(line: 42, column: 12, scope: !832)
!832 = distinct !DILexicalBlock(scope: !833, file: !764, line: 42, column: 10)
!833 = distinct !DILexicalBlock(scope: !824, file: !764, line: 41, column: 37)
!834 = !DILocation(line: 42, column: 20, scope: !832)
!835 = !DILocation(line: 42, column: 29, scope: !832)
!836 = !DILocation(line: 42, column: 34, scope: !837)
!837 = !DILexicalBlockFile(scope: !832, file: !764, discriminator: 1)
!838 = !DILocation(line: 42, column: 42, scope: !837)
!839 = !DILocation(line: 42, column: 10, scope: !837)
!840 = !DILocation(line: 43, column: 16, scope: !841)
!841 = distinct !DILexicalBlock(scope: !832, file: !764, line: 42, column: 53)
!842 = !DILocation(line: 43, column: 42, scope: !841)
!843 = !DILocation(line: 43, column: 33, scope: !841)
!844 = !DILocation(line: 43, column: 7, scope: !845)
!845 = !DILexicalBlockFile(scope: !841, file: !764, discriminator: 1)
!846 = !DILocation(line: 44, column: 9, scope: !841)
!847 = !DILocation(line: 45, column: 17, scope: !848)
!848 = distinct !DILexicalBlock(scope: !841, file: !764, line: 45, column: 12)
!849 = !DILocation(line: 45, column: 12, scope: !848)
!850 = !DILocation(line: 45, column: 20, scope: !848)
!851 = !DILocation(line: 45, column: 12, scope: !841)
!852 = !DILocation(line: 46, column: 14, scope: !853)
!853 = distinct !DILexicalBlock(scope: !848, file: !764, line: 45, column: 29)
!854 = !DILocation(line: 46, column: 9, scope: !853)
!855 = !DILocation(line: 46, column: 17, scope: !853)
!856 = !DILocation(line: 47, column: 10, scope: !853)
!857 = !DILocation(line: 48, column: 7, scope: !853)
!858 = !DILocation(line: 49, column: 12, scope: !841)
!859 = !DILocation(line: 49, column: 13, scope: !841)
!860 = !DILocation(line: 49, column: 7, scope: !841)
!861 = !DILocation(line: 49, column: 17, scope: !841)
!862 = !DILocation(line: 50, column: 53, scope: !841)
!863 = !DILocation(line: 50, column: 7, scope: !841)
!864 = !DILocation(line: 51, column: 5, scope: !841)
!865 = !DILocation(line: 52, column: 56, scope: !866)
!866 = distinct !DILexicalBlock(scope: !832, file: !764, line: 51, column: 12)
!867 = !DILocation(line: 52, column: 7, scope: !866)
!868 = !DILocation(line: 54, column: 3, scope: !833)
!869 = !DILocation(line: 55, column: 59, scope: !870)
!870 = distinct !DILexicalBlock(scope: !824, file: !764, line: 54, column: 10)
!871 = !DILocation(line: 55, column: 63, scope: !870)
!872 = !DILocation(line: 55, column: 67, scope: !870)
!873 = !DILocation(line: 55, column: 5, scope: !870)
!874 = !DILocation(line: 58, column: 52, scope: !763)
!875 = !DILocation(line: 58, column: 3, scope: !763)
!876 = !DILocation(line: 59, column: 55, scope: !763)
!877 = !DILocation(line: 59, column: 3, scope: !763)
!878 = !DILocation(line: 61, column: 52, scope: !763)
!879 = !DILocation(line: 61, column: 3, scope: !763)
!880 = !DILocation(line: 62, column: 52, scope: !763)
!881 = !DILocation(line: 62, column: 3, scope: !763)
!882 = !DILocation(line: 63, column: 8, scope: !883)
!883 = distinct !DILexicalBlock(scope: !763, file: !764, line: 63, column: 8)
!884 = !DILocation(line: 63, column: 23, scope: !883)
!885 = !DILocation(line: 63, column: 20, scope: !883)
!886 = !DILocation(line: 63, column: 8, scope: !763)
!887 = !DILocation(line: 64, column: 5, scope: !883)
!888 = !DILocation(line: 66, column: 52, scope: !763)
!889 = !DILocation(line: 66, column: 3, scope: !763)
!890 = !DILocation(line: 67, column: 52, scope: !763)
!891 = !DILocation(line: 67, column: 65, scope: !763)
!892 = !DILocation(line: 67, column: 57, scope: !763)
!893 = !DILocation(line: 67, column: 56, scope: !763)
!894 = !DILocation(line: 67, column: 3, scope: !763)
!895 = !DILocation(line: 69, column: 40, scope: !763)
!896 = !DILocation(line: 69, column: 3, scope: !763)
!897 = !DILocation(line: 70, column: 8, scope: !898)
!898 = distinct !DILexicalBlock(scope: !763, file: !764, line: 70, column: 8)
!899 = !DILocation(line: 70, column: 8, scope: !763)
!900 = !DILocation(line: 71, column: 5, scope: !898)
!901 = !DILocation(line: 73, column: 5, scope: !898)
!902 = !DILocation(line: 74, column: 52, scope: !763)
!903 = !DILocation(line: 74, column: 3, scope: !763)
!904 = !DILocation(line: 75, column: 52, scope: !763)
!905 = !DILocation(line: 75, column: 3, scope: !763)
!906 = !DILocation(line: 78, column: 38, scope: !763)
!907 = !DILocation(line: 77, column: 3, scope: !763)
!908 = !DILocation(line: 79, column: 38, scope: !763)
!909 = !DILocation(line: 79, column: 3, scope: !763)
!910 = !DILocation(line: 80, column: 38, scope: !763)
!911 = !DILocation(line: 80, column: 3, scope: !763)
!912 = !DILocation(line: 81, column: 38, scope: !763)
!913 = !DILocation(line: 81, column: 3, scope: !763)
!914 = !DILocation(line: 82, column: 38, scope: !763)
!915 = !DILocation(line: 82, column: 3, scope: !763)
!916 = !DILocation(line: 83, column: 38, scope: !763)
!917 = !DILocation(line: 83, column: 3, scope: !763)
!918 = !DILocation(line: 84, column: 38, scope: !763)
!919 = !DILocation(line: 84, column: 3, scope: !763)
!920 = !DILocation(line: 86, column: 3, scope: !763)
!921 = !DILocation(line: 92, column: 1, scope: !763)
!922 = distinct !DISubprogram(name: ".omp_outlined.", scope: !22, file: !22, line: 28, type: !923, isLocal: true, isDefinition: true, scopeLine: 26, flags: DIFlagPrototyped, isOptimized: false, unit: !21, variables: !29)
!923 = !DISubroutineType(types: !924)
!924 = !{null, !423, !423, !474}
!925 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !922, type: !423, flags: DIFlagArtificial | DIFlagObjectPointer)
!926 = !DILocation(line: 0, scope: !922)
!927 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !922, type: !423, flags: DIFlagArtificial)
!928 = !DILocalVariable(name: "num_threads", arg: 3, scope: !922, type: !474, flags: DIFlagArtificial)
!929 = !DILocation(line: 26, column: 3, scope: !930)
!930 = !DILexicalBlockFile(scope: !922, file: !764, discriminator: 0)
!931 = !DILocation(line: 27, column: 13, scope: !932)
!932 = distinct !DILexicalBlock(scope: !930, file: !764, line: 26, column: 3)
!933 = !DILocation(line: 28, column: 19, scope: !934)
!934 = distinct !DILexicalBlock(scope: !932, file: !764, line: 27, column: 13)
!935 = !DILocation(line: 28, column: 17, scope: !934)
!936 = !DILocation(line: 28, column: 5, scope: !937)
!937 = !DILexicalBlockFile(scope: !934, file: !764, discriminator: 1)
!938 = !DILocation(line: 28, column: 5, scope: !934)
!939 = !DILocation(line: 29, column: 3, scope: !930)
!940 = distinct !DISubprogram(name: "randlc", scope: !941, file: !941, line: 4, type: !942, isLocal: false, isDefinition: true, scopeLine: 5, flags: DIFlagPrototyped, isOptimized: false, unit: !27, variables: !29)
!941 = !DIFile(filename: "randdp.c", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common")
!942 = !DISubroutineType(types: !943)
!943 = !{!13, !51, !13}
!944 = !DILocalVariable(name: "x", arg: 1, scope: !940, file: !941, line: 4, type: !51)
!945 = !DILocation(line: 4, column: 24, scope: !940)
!946 = !DILocalVariable(name: "a", arg: 2, scope: !940, file: !941, line: 4, type: !13)
!947 = !DILocation(line: 4, column: 34, scope: !940)
!948 = !DILocalVariable(name: "r23", scope: !940, file: !941, line: 36, type: !949)
!949 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !13)
!950 = !DILocation(line: 36, column: 16, scope: !940)
!951 = !DILocalVariable(name: "r46", scope: !940, file: !941, line: 37, type: !949)
!952 = !DILocation(line: 37, column: 16, scope: !940)
!953 = !DILocalVariable(name: "t23", scope: !940, file: !941, line: 38, type: !949)
!954 = !DILocation(line: 38, column: 16, scope: !940)
!955 = !DILocalVariable(name: "t46", scope: !940, file: !941, line: 39, type: !949)
!956 = !DILocation(line: 39, column: 16, scope: !940)
!957 = !DILocalVariable(name: "t1", scope: !940, file: !941, line: 41, type: !13)
!958 = !DILocation(line: 41, column: 10, scope: !940)
!959 = !DILocalVariable(name: "t2", scope: !940, file: !941, line: 41, type: !13)
!960 = !DILocation(line: 41, column: 14, scope: !940)
!961 = !DILocalVariable(name: "t3", scope: !940, file: !941, line: 41, type: !13)
!962 = !DILocation(line: 41, column: 18, scope: !940)
!963 = !DILocalVariable(name: "t4", scope: !940, file: !941, line: 41, type: !13)
!964 = !DILocation(line: 41, column: 22, scope: !940)
!965 = !DILocalVariable(name: "a1", scope: !940, file: !941, line: 41, type: !13)
!966 = !DILocation(line: 41, column: 26, scope: !940)
!967 = !DILocalVariable(name: "a2", scope: !940, file: !941, line: 41, type: !13)
!968 = !DILocation(line: 41, column: 30, scope: !940)
!969 = !DILocalVariable(name: "x1", scope: !940, file: !941, line: 41, type: !13)
!970 = !DILocation(line: 41, column: 34, scope: !940)
!971 = !DILocalVariable(name: "x2", scope: !940, file: !941, line: 41, type: !13)
!972 = !DILocation(line: 41, column: 38, scope: !940)
!973 = !DILocalVariable(name: "z", scope: !940, file: !941, line: 41, type: !13)
!974 = !DILocation(line: 41, column: 42, scope: !940)
!975 = !DILocalVariable(name: "r", scope: !940, file: !941, line: 42, type: !13)
!976 = !DILocation(line: 42, column: 10, scope: !940)
!977 = !DILocation(line: 47, column: 14, scope: !940)
!978 = !DILocation(line: 47, column: 12, scope: !940)
!979 = !DILocation(line: 47, column: 6, scope: !940)
!980 = !DILocation(line: 48, column: 14, scope: !940)
!981 = !DILocation(line: 48, column: 8, scope: !940)
!982 = !DILocation(line: 48, column: 6, scope: !940)
!983 = !DILocation(line: 49, column: 8, scope: !940)
!984 = !DILocation(line: 49, column: 18, scope: !940)
!985 = !DILocation(line: 49, column: 16, scope: !940)
!986 = !DILocation(line: 49, column: 10, scope: !940)
!987 = !DILocation(line: 49, column: 6, scope: !940)
!988 = !DILocation(line: 56, column: 16, scope: !940)
!989 = !DILocation(line: 56, column: 15, scope: !940)
!990 = !DILocation(line: 56, column: 12, scope: !940)
!991 = !DILocation(line: 56, column: 6, scope: !940)
!992 = !DILocation(line: 57, column: 14, scope: !940)
!993 = !DILocation(line: 57, column: 8, scope: !940)
!994 = !DILocation(line: 57, column: 6, scope: !940)
!995 = !DILocation(line: 58, column: 9, scope: !940)
!996 = !DILocation(line: 58, column: 8, scope: !940)
!997 = !DILocation(line: 58, column: 19, scope: !940)
!998 = !DILocation(line: 58, column: 17, scope: !940)
!999 = !DILocation(line: 58, column: 11, scope: !940)
!1000 = !DILocation(line: 58, column: 6, scope: !940)
!1001 = !DILocation(line: 59, column: 8, scope: !940)
!1002 = !DILocation(line: 59, column: 13, scope: !940)
!1003 = !DILocation(line: 59, column: 11, scope: !940)
!1004 = !DILocation(line: 59, column: 18, scope: !940)
!1005 = !DILocation(line: 59, column: 23, scope: !940)
!1006 = !DILocation(line: 59, column: 21, scope: !940)
!1007 = !DILocation(line: 59, column: 16, scope: !940)
!1008 = !DILocation(line: 59, column: 6, scope: !940)
!1009 = !DILocation(line: 60, column: 21, scope: !940)
!1010 = !DILocation(line: 60, column: 19, scope: !940)
!1011 = !DILocation(line: 60, column: 8, scope: !940)
!1012 = !DILocation(line: 60, column: 6, scope: !940)
!1013 = !DILocation(line: 61, column: 7, scope: !940)
!1014 = !DILocation(line: 61, column: 18, scope: !940)
!1015 = !DILocation(line: 61, column: 16, scope: !940)
!1016 = !DILocation(line: 61, column: 10, scope: !940)
!1017 = !DILocation(line: 61, column: 5, scope: !940)
!1018 = !DILocation(line: 62, column: 14, scope: !940)
!1019 = !DILocation(line: 62, column: 12, scope: !940)
!1020 = !DILocation(line: 62, column: 18, scope: !940)
!1021 = !DILocation(line: 62, column: 23, scope: !940)
!1022 = !DILocation(line: 62, column: 21, scope: !940)
!1023 = !DILocation(line: 62, column: 16, scope: !940)
!1024 = !DILocation(line: 62, column: 6, scope: !940)
!1025 = !DILocation(line: 63, column: 21, scope: !940)
!1026 = !DILocation(line: 63, column: 19, scope: !940)
!1027 = !DILocation(line: 63, column: 8, scope: !940)
!1028 = !DILocation(line: 63, column: 6, scope: !940)
!1029 = !DILocation(line: 64, column: 8, scope: !940)
!1030 = !DILocation(line: 64, column: 19, scope: !940)
!1031 = !DILocation(line: 64, column: 17, scope: !940)
!1032 = !DILocation(line: 64, column: 11, scope: !940)
!1033 = !DILocation(line: 64, column: 4, scope: !940)
!1034 = !DILocation(line: 64, column: 6, scope: !940)
!1035 = !DILocation(line: 65, column: 15, scope: !940)
!1036 = !DILocation(line: 65, column: 14, scope: !940)
!1037 = !DILocation(line: 65, column: 11, scope: !940)
!1038 = !DILocation(line: 65, column: 5, scope: !940)
!1039 = !DILocation(line: 67, column: 10, scope: !940)
!1040 = !DILocation(line: 67, column: 3, scope: !940)
!1041 = distinct !DISubprogram(name: "vranlc", scope: !941, file: !941, line: 71, type: !1042, isLocal: false, isDefinition: true, scopeLine: 72, flags: DIFlagPrototyped, isOptimized: false, unit: !27, variables: !29)
!1042 = !DISubroutineType(types: !1043)
!1043 = !{null, !31, !51, !13, !51}
!1044 = !DILocalVariable(name: "n", arg: 1, scope: !1041, file: !941, line: 71, type: !31)
!1045 = !DILocation(line: 71, column: 18, scope: !1041)
!1046 = !DILocalVariable(name: "x", arg: 2, scope: !1041, file: !941, line: 71, type: !51)
!1047 = !DILocation(line: 71, column: 29, scope: !1041)
!1048 = !DILocalVariable(name: "a", arg: 3, scope: !1041, file: !941, line: 71, type: !13)
!1049 = !DILocation(line: 71, column: 39, scope: !1041)
!1050 = !DILocalVariable(name: "y", arg: 4, scope: !1041, file: !941, line: 71, type: !51)
!1051 = !DILocation(line: 71, column: 49, scope: !1041)
!1052 = !DILocalVariable(name: "r23", scope: !1041, file: !941, line: 103, type: !949)
!1053 = !DILocation(line: 103, column: 16, scope: !1041)
!1054 = !DILocalVariable(name: "r46", scope: !1041, file: !941, line: 104, type: !949)
!1055 = !DILocation(line: 104, column: 16, scope: !1041)
!1056 = !DILocalVariable(name: "t23", scope: !1041, file: !941, line: 105, type: !949)
!1057 = !DILocation(line: 105, column: 16, scope: !1041)
!1058 = !DILocalVariable(name: "t46", scope: !1041, file: !941, line: 106, type: !949)
!1059 = !DILocation(line: 106, column: 16, scope: !1041)
!1060 = !DILocalVariable(name: "t1", scope: !1041, file: !941, line: 108, type: !13)
!1061 = !DILocation(line: 108, column: 10, scope: !1041)
!1062 = !DILocalVariable(name: "t2", scope: !1041, file: !941, line: 108, type: !13)
!1063 = !DILocation(line: 108, column: 14, scope: !1041)
!1064 = !DILocalVariable(name: "t3", scope: !1041, file: !941, line: 108, type: !13)
!1065 = !DILocation(line: 108, column: 18, scope: !1041)
!1066 = !DILocalVariable(name: "t4", scope: !1041, file: !941, line: 108, type: !13)
!1067 = !DILocation(line: 108, column: 22, scope: !1041)
!1068 = !DILocalVariable(name: "a1", scope: !1041, file: !941, line: 108, type: !13)
!1069 = !DILocation(line: 108, column: 26, scope: !1041)
!1070 = !DILocalVariable(name: "a2", scope: !1041, file: !941, line: 108, type: !13)
!1071 = !DILocation(line: 108, column: 30, scope: !1041)
!1072 = !DILocalVariable(name: "x1", scope: !1041, file: !941, line: 108, type: !13)
!1073 = !DILocation(line: 108, column: 34, scope: !1041)
!1074 = !DILocalVariable(name: "x2", scope: !1041, file: !941, line: 108, type: !13)
!1075 = !DILocation(line: 108, column: 38, scope: !1041)
!1076 = !DILocalVariable(name: "z", scope: !1041, file: !941, line: 108, type: !13)
!1077 = !DILocation(line: 108, column: 42, scope: !1041)
!1078 = !DILocalVariable(name: "i", scope: !1041, file: !941, line: 110, type: !31)
!1079 = !DILocation(line: 110, column: 7, scope: !1041)
!1080 = !DILocation(line: 115, column: 14, scope: !1041)
!1081 = !DILocation(line: 115, column: 12, scope: !1041)
!1082 = !DILocation(line: 115, column: 6, scope: !1041)
!1083 = !DILocation(line: 116, column: 14, scope: !1041)
!1084 = !DILocation(line: 116, column: 8, scope: !1041)
!1085 = !DILocation(line: 116, column: 6, scope: !1041)
!1086 = !DILocation(line: 117, column: 8, scope: !1041)
!1087 = !DILocation(line: 117, column: 18, scope: !1041)
!1088 = !DILocation(line: 117, column: 16, scope: !1041)
!1089 = !DILocation(line: 117, column: 10, scope: !1041)
!1090 = !DILocation(line: 117, column: 6, scope: !1041)
!1091 = !DILocation(line: 122, column: 11, scope: !1092)
!1092 = distinct !DILexicalBlock(scope: !1041, file: !941, line: 122, column: 3)
!1093 = !DILocation(line: 122, column: 9, scope: !1092)
!1094 = !DILocation(line: 122, column: 16, scope: !1095)
!1095 = !DILexicalBlockFile(scope: !1096, file: !941, discriminator: 1)
!1096 = distinct !DILexicalBlock(scope: !1092, file: !941, line: 122, column: 3)
!1097 = !DILocation(line: 122, column: 20, scope: !1095)
!1098 = !DILocation(line: 122, column: 18, scope: !1095)
!1099 = !DILocation(line: 122, column: 3, scope: !1095)
!1100 = !DILocation(line: 128, column: 18, scope: !1101)
!1101 = distinct !DILexicalBlock(scope: !1096, file: !941, line: 122, column: 29)
!1102 = !DILocation(line: 128, column: 17, scope: !1101)
!1103 = !DILocation(line: 128, column: 14, scope: !1101)
!1104 = !DILocation(line: 128, column: 8, scope: !1101)
!1105 = !DILocation(line: 129, column: 16, scope: !1101)
!1106 = !DILocation(line: 129, column: 10, scope: !1101)
!1107 = !DILocation(line: 129, column: 8, scope: !1101)
!1108 = !DILocation(line: 130, column: 11, scope: !1101)
!1109 = !DILocation(line: 130, column: 10, scope: !1101)
!1110 = !DILocation(line: 130, column: 21, scope: !1101)
!1111 = !DILocation(line: 130, column: 19, scope: !1101)
!1112 = !DILocation(line: 130, column: 13, scope: !1101)
!1113 = !DILocation(line: 130, column: 8, scope: !1101)
!1114 = !DILocation(line: 131, column: 10, scope: !1101)
!1115 = !DILocation(line: 131, column: 15, scope: !1101)
!1116 = !DILocation(line: 131, column: 13, scope: !1101)
!1117 = !DILocation(line: 131, column: 20, scope: !1101)
!1118 = !DILocation(line: 131, column: 25, scope: !1101)
!1119 = !DILocation(line: 131, column: 23, scope: !1101)
!1120 = !DILocation(line: 131, column: 18, scope: !1101)
!1121 = !DILocation(line: 131, column: 8, scope: !1101)
!1122 = !DILocation(line: 132, column: 23, scope: !1101)
!1123 = !DILocation(line: 132, column: 21, scope: !1101)
!1124 = !DILocation(line: 132, column: 10, scope: !1101)
!1125 = !DILocation(line: 132, column: 8, scope: !1101)
!1126 = !DILocation(line: 133, column: 9, scope: !1101)
!1127 = !DILocation(line: 133, column: 20, scope: !1101)
!1128 = !DILocation(line: 133, column: 18, scope: !1101)
!1129 = !DILocation(line: 133, column: 12, scope: !1101)
!1130 = !DILocation(line: 133, column: 7, scope: !1101)
!1131 = !DILocation(line: 134, column: 16, scope: !1101)
!1132 = !DILocation(line: 134, column: 14, scope: !1101)
!1133 = !DILocation(line: 134, column: 20, scope: !1101)
!1134 = !DILocation(line: 134, column: 25, scope: !1101)
!1135 = !DILocation(line: 134, column: 23, scope: !1101)
!1136 = !DILocation(line: 134, column: 18, scope: !1101)
!1137 = !DILocation(line: 134, column: 8, scope: !1101)
!1138 = !DILocation(line: 135, column: 23, scope: !1101)
!1139 = !DILocation(line: 135, column: 21, scope: !1101)
!1140 = !DILocation(line: 135, column: 10, scope: !1101)
!1141 = !DILocation(line: 135, column: 8, scope: !1101)
!1142 = !DILocation(line: 136, column: 10, scope: !1101)
!1143 = !DILocation(line: 136, column: 21, scope: !1101)
!1144 = !DILocation(line: 136, column: 19, scope: !1101)
!1145 = !DILocation(line: 136, column: 13, scope: !1101)
!1146 = !DILocation(line: 136, column: 6, scope: !1101)
!1147 = !DILocation(line: 136, column: 8, scope: !1101)
!1148 = !DILocation(line: 137, column: 20, scope: !1101)
!1149 = !DILocation(line: 137, column: 19, scope: !1101)
!1150 = !DILocation(line: 137, column: 16, scope: !1101)
!1151 = !DILocation(line: 137, column: 7, scope: !1101)
!1152 = !DILocation(line: 137, column: 5, scope: !1101)
!1153 = !DILocation(line: 137, column: 10, scope: !1101)
!1154 = !DILocation(line: 138, column: 3, scope: !1101)
!1155 = !DILocation(line: 122, column: 24, scope: !1156)
!1156 = !DILexicalBlockFile(scope: !1096, file: !941, discriminator: 2)
!1157 = !DILocation(line: 122, column: 3, scope: !1156)
!1158 = !DILocation(line: 140, column: 3, scope: !1041)
!1159 = distinct !DISubprogram(name: "timer_clear", scope: !36, file: !36, line: 37, type: !1160, isLocal: false, isDefinition: true, scopeLine: 38, flags: DIFlagPrototyped, isOptimized: false, unit: !32, variables: !29)
!1160 = !DISubroutineType(types: !1161)
!1161 = !{null, !31}
!1162 = !DILocalVariable(name: "n", arg: 1, scope: !1159, file: !36, line: 37, type: !31)
!1163 = !DILocation(line: 37, column: 23, scope: !1159)
!1164 = !DILocation(line: 39, column: 13, scope: !1159)
!1165 = !DILocation(line: 39, column: 5, scope: !1159)
!1166 = !DILocation(line: 39, column: 16, scope: !1159)
!1167 = !DILocation(line: 40, column: 11, scope: !1159)
!1168 = !DILocation(line: 40, column: 5, scope: !1159)
!1169 = !DILocation(line: 40, column: 14, scope: !1159)
!1170 = !DILocation(line: 41, column: 1, scope: !1159)
!1171 = distinct !DISubprogram(name: "timer_start", scope: !36, file: !36, line: 47, type: !1160, isLocal: false, isDefinition: true, scopeLine: 48, flags: DIFlagPrototyped, isOptimized: false, unit: !32, variables: !29)
!1172 = !DILocalVariable(name: "n", arg: 1, scope: !1171, file: !36, line: 47, type: !31)
!1173 = !DILocation(line: 47, column: 23, scope: !1171)
!1174 = !DILocation(line: 49, column: 16, scope: !1171)
!1175 = !DILocation(line: 49, column: 11, scope: !1171)
!1176 = !DILocation(line: 49, column: 5, scope: !1171)
!1177 = !DILocation(line: 49, column: 5, scope: !1178)
!1178 = !DILexicalBlockFile(scope: !1171, file: !36, discriminator: 1)
!1179 = !DILocation(line: 49, column: 14, scope: !1171)
!1180 = !DILocation(line: 50, column: 1, scope: !1171)
!1181 = distinct !DISubprogram(name: "elapsed_time", scope: !36, file: !36, line: 14, type: !1182, isLocal: true, isDefinition: true, scopeLine: 15, flags: DIFlagPrototyped, isOptimized: false, unit: !32, variables: !29)
!1182 = !DISubroutineType(types: !26)
!1183 = !DILocalVariable(name: "t", scope: !1181, file: !36, line: 16, type: !13)
!1184 = !DILocation(line: 16, column: 12, scope: !1181)
!1185 = !DILocation(line: 20, column: 9, scope: !1181)
!1186 = !DILocation(line: 20, column: 7, scope: !1181)
!1187 = !DILocation(line: 24, column: 13, scope: !1181)
!1188 = !DILocation(line: 24, column: 5, scope: !1181)
!1189 = distinct !DISubprogram(name: "timer_stop", scope: !36, file: !36, line: 56, type: !1160, isLocal: false, isDefinition: true, scopeLine: 57, flags: DIFlagPrototyped, isOptimized: false, unit: !32, variables: !29)
!1190 = !DILocalVariable(name: "n", arg: 1, scope: !1189, file: !36, line: 56, type: !31)
!1191 = !DILocation(line: 56, column: 22, scope: !1189)
!1192 = !DILocalVariable(name: "t", scope: !1189, file: !36, line: 58, type: !13)
!1193 = !DILocation(line: 58, column: 12, scope: !1189)
!1194 = !DILocalVariable(name: "now", scope: !1189, file: !36, line: 58, type: !13)
!1195 = !DILocation(line: 58, column: 15, scope: !1189)
!1196 = !DILocation(line: 60, column: 11, scope: !1189)
!1197 = !DILocation(line: 60, column: 9, scope: !1189)
!1198 = !DILocation(line: 61, column: 9, scope: !1189)
!1199 = !DILocation(line: 61, column: 21, scope: !1189)
!1200 = !DILocation(line: 61, column: 15, scope: !1189)
!1201 = !DILocation(line: 61, column: 13, scope: !1189)
!1202 = !DILocation(line: 61, column: 7, scope: !1189)
!1203 = !DILocation(line: 62, column: 19, scope: !1189)
!1204 = !DILocation(line: 62, column: 13, scope: !1189)
!1205 = !DILocation(line: 62, column: 5, scope: !1189)
!1206 = !DILocation(line: 62, column: 16, scope: !1189)
!1207 = !DILocation(line: 63, column: 11, scope: !1189)
!1208 = !DILocation(line: 63, column: 5, scope: !1189)
!1209 = !DILocation(line: 63, column: 13, scope: !1189)
!1210 = !DILocation(line: 65, column: 1, scope: !1189)
!1211 = distinct !DISubprogram(name: "timer_read", scope: !36, file: !36, line: 71, type: !1212, isLocal: false, isDefinition: true, scopeLine: 72, flags: DIFlagPrototyped, isOptimized: false, unit: !32, variables: !29)
!1212 = !DISubroutineType(types: !1213)
!1213 = !{!13, !31}
!1214 = !DILocalVariable(name: "n", arg: 1, scope: !1211, file: !36, line: 71, type: !31)
!1215 = !DILocation(line: 71, column: 24, scope: !1211)
!1216 = !DILocation(line: 73, column: 21, scope: !1211)
!1217 = !DILocation(line: 73, column: 13, scope: !1211)
!1218 = !DILocation(line: 73, column: 5, scope: !1211)
!1219 = distinct !DISubprogram(name: "timer_count", scope: !36, file: !36, line: 76, type: !1220, isLocal: false, isDefinition: true, scopeLine: 77, flags: DIFlagPrototyped, isOptimized: false, unit: !32, variables: !29)
!1220 = !DISubroutineType(types: !1221)
!1221 = !{!43, !31}
!1222 = !DILocalVariable(name: "n", arg: 1, scope: !1219, file: !36, line: 76, type: !31)
!1223 = !DILocation(line: 76, column: 27, scope: !1219)
!1224 = !DILocation(line: 78, column: 18, scope: !1219)
!1225 = !DILocation(line: 78, column: 12, scope: !1219)
!1226 = !DILocation(line: 78, column: 5, scope: !1219)
!1227 = !DILocalVariable(name: "t", arg: 1, scope: !48, file: !45, line: 7, type: !51)
!1228 = !DILocation(line: 7, column: 20, scope: !48)
!1229 = !DILocalVariable(name: "tv", scope: !48, file: !45, line: 11, type: !1230)
!1230 = !DICompositeType(tag: DW_TAG_structure_type, name: "timeval", file: !1231, line: 30, size: 128, align: 64, elements: !1232)
!1231 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/time.h", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common")
!1232 = !{!1233, !1236}
!1233 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !1230, file: !1231, line: 32, baseType: !1234, size: 64, align: 64)
!1234 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !1235, line: 139, baseType: !166)
!1235 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common")
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !1230, file: !1231, line: 33, baseType: !1237, size: 64, align: 64, offset: 64)
!1237 = !DIDerivedType(tag: DW_TAG_typedef, name: "__suseconds_t", file: !1235, line: 141, baseType: !166)
!1238 = !DILocation(line: 11, column: 19, scope: !48)
!1239 = !DILocation(line: 12, column: 4, scope: !48)
!1240 = !DILocation(line: 13, column: 8, scope: !1241)
!1241 = distinct !DILexicalBlock(scope: !48, file: !45, line: 13, column: 8)
!1242 = !DILocation(line: 13, column: 12, scope: !1241)
!1243 = !DILocation(line: 13, column: 8, scope: !48)
!1244 = !DILocation(line: 13, column: 26, scope: !1245)
!1245 = !DILexicalBlockFile(scope: !1241, file: !45, discriminator: 1)
!1246 = !DILocation(line: 13, column: 23, scope: !1245)
!1247 = !DILocation(line: 13, column: 21, scope: !1245)
!1248 = !DILocation(line: 13, column: 17, scope: !1245)
!1249 = !DILocation(line: 14, column: 13, scope: !48)
!1250 = !DILocation(line: 14, column: 22, scope: !48)
!1251 = !DILocation(line: 14, column: 20, scope: !48)
!1252 = !DILocation(line: 14, column: 9, scope: !48)
!1253 = !DILocation(line: 14, column: 39, scope: !48)
!1254 = !DILocation(line: 14, column: 36, scope: !48)
!1255 = !DILocation(line: 14, column: 35, scope: !48)
!1256 = !DILocation(line: 14, column: 27, scope: !48)
!1257 = !DILocation(line: 14, column: 5, scope: !48)
!1258 = !DILocation(line: 14, column: 7, scope: !48)
!1259 = !DILocation(line: 15, column: 1, scope: !48)
