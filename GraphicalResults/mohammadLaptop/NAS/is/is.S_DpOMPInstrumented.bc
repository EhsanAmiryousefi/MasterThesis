; ModuleID = '<stdin>'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%ident_t = type { i32, i32, i32, i32, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.timeval = type { i64, i64 }
%struct.timezone = type { i32, i32 }

@bucket_ptrs = thread_local global [512 x i32] zeroinitializer, align 16
@key_array = common global [65536 x i32] zeroinitializer, align 16
@bucket_size = common global i32** null, align 8
@key_buff2 = common global [65536 x i32] zeroinitializer, align 16
@key_buff_ptr_global = common global i32* null, align 8
@.gomp_critical_user_.reduction.var = common global [8 x i32] zeroinitializer
@passed_verification = common global i32 0, align 4
@test_index_array = common global [5 x i32] zeroinitializer, align 16
@partial_verify_vals = common global [5 x i32] zeroinitializer, align 16
@key_buff1 = common global [2048 x i32] zeroinitializer, align 16
@test_rank_array = common global [5 x i32] zeroinitializer, align 16
@S_test_index_array = global [5 x i32] [i32 48427, i32 17148, i32 23627, i32 62548, i32 4431], align 16
@S_test_rank_array = global [5 x i32] [i32 0, i32 18, i32 346, i32 64917, i32 65463], align 16
@key_buff1_aptr = global i32** null, align 8
@W_test_index_array = global [5 x i32] [i32 357773, i32 934767, i32 875723, i32 898999, i32 404505], align 16
@W_test_rank_array = global [5 x i32] [i32 1249, i32 11698, i32 1039987, i32 1043896, i32 1048018], align 16
@A_test_index_array = global [5 x i32] [i32 2112377, i32 662041, i32 5336171, i32 3642833, i32 4250760], align 16
@A_test_rank_array = global [5 x i32] [i32 104, i32 17523, i32 123928, i32 8288932, i32 8388264], align 16
@B_test_index_array = global [5 x i32] [i32 41869, i32 812306, i32 5102857, i32 18232239, i32 26860214], align 16
@B_test_rank_array = global [5 x i32] [i32 33422937, i32 10244, i32 59149, i32 33135281, i32 99], align 16
@C_test_index_array = global [5 x i32] [i32 44172927, i32 72999161, i32 74326391, i32 129606274, i32 21736814], align 16
@C_test_rank_array = global [5 x i32] [i32 61147, i32 882988, i32 266290, i32 133997595, i32 133525895], align 16
@D_test_index_array = global [5 x i32] [i32 1317351170, i32 995930646, i32 1157283250, i32 1503301535, i32 1453734525], align 16
@D_test_rank_array = global [5 x i32] [i32 1, i32 36538729, i32 1978098519, i32 2145192618, i32 2147425337], align 16
@KS = internal thread_local global i32 0, align 4
@R23 = internal thread_local global double 0.000000e+00, align 8
@R46 = internal thread_local global double 0.000000e+00, align 8
@T23 = internal thread_local global double 0.000000e+00, align 8
@T46 = internal thread_local global double 0.000000e+00, align 8
@0 = private unnamed_addr constant %ident_t { i32 0, i32 2, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i32 0, i32 0) }, align 8
@.str = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@1 = private unnamed_addr constant [25 x i8] c";is.c;create_seq;420;9;;\00"
@.str.1 = private unnamed_addr constant [24 x i8] c"Memory allocation error\00", align 1
@2 = private unnamed_addr constant [30 x i8] c";is.c;alloc_key_buff;494;13;;\00"
@3 = private unnamed_addr constant [27 x i8] c";is.c;full_verify;533;13;;\00"
@4 = private unnamed_addr constant [27 x i8] c";is.c;full_verify;574;13;;\00"
@5 = private unnamed_addr constant [27 x i8] c";is.c;full_verify;574;44;;\00"
@.str.5 = private unnamed_addr constant [46 x i8] c"Full_verify: number of keys out of sort: %ld\0A\00", align 1
@6 = private unnamed_addr constant [19 x i8] c";is.c;rank;625;9;;\00"
@7 = private unnamed_addr constant [20 x i8] c";is.c;rank;648;13;;\00"
@8 = private unnamed_addr constant [20 x i8] c";is.c;rank;668;13;;\00"
@9 = private unnamed_addr constant [20 x i8] c";is.c;rank;691;13;;\00"
@.str.7 = private unnamed_addr constant [56 x i8] c"Failed partial verification: iteration %d, test key %d\0A\00", align 1
@.str.8 = private unnamed_addr constant [11 x i8] c"timer.flag\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.10 = private unnamed_addr constant [57 x i8] c"\0A\0A NAS Parallel Benchmarks (NPB3.3-OMP) - IS Benchmark\0A\0A\00", align 1
@.str.11 = private unnamed_addr constant [25 x i8] c" Size:  %ld  (class %c)\0A\00", align 1
@.str.12 = private unnamed_addr constant [18 x i8] c" Iterations:  %d\0A\00", align 1
@.str.13 = private unnamed_addr constant [35 x i8] c" Number of available threads:  %d\0A\00", align 1
@.str.14 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c"IS\00", align 1
@.str.16 = private unnamed_addr constant [12 x i8] c"keys ranked\00", align 1
@.str.17 = private unnamed_addr constant [6 x i8] c"3.3.1\00", align 1
@.str.18 = private unnamed_addr constant [12 x i8] c"03 May 2017\00", align 1
@.str.19 = private unnamed_addr constant [7 x i8] c"(none)\00", align 1
@.str.20 = private unnamed_addr constant [47 x i8] c"-I ../common -I /media/norouzi/90cafd61-f91...\00", align 1
@.str.21 = private unnamed_addr constant [22 x i8] c"\0AAdditional timers -\0A\00", align 1
@.str.22 = private unnamed_addr constant [25 x i8] c" Total execution: %8.3f\0A\00", align 1
@.str.23 = private unnamed_addr constant [35 x i8] c" Initialization : %8.3f (%5.2f%%)\0A\00", align 1
@.str.24 = private unnamed_addr constant [35 x i8] c" Benchmarking   : %8.3f (%5.2f%%)\0A\00", align 1
@.str.25 = private unnamed_addr constant [35 x i8] c" Sorting        : %8.3f (%5.2f%%)\0A\00", align 1
@10 = private unnamed_addr constant %ident_t { i32 0, i32 2, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i32 0, i32 0) }, align 8
@.str.3 = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@11 = private unnamed_addr constant [42 x i8] c";c_print_results.c;c_print_results;38;9;;\00"
@12 = private unnamed_addr constant [43 x i8] c";c_print_results.c;c_print_results;40;13;;\00"
@.str.1.6 = private unnamed_addr constant [27 x i8] c"\0A\0A %s Benchmark Completed\0A\00", align 1
@.str.2 = private unnamed_addr constant [46 x i8] c" Class           =                        %c\0A\00", align 1
@.str.3.7 = private unnamed_addr constant [38 x i8] c" Size            =             %12ld\0A\00", align 1
@.str.4 = private unnamed_addr constant [44 x i8] c" Size            =             %4dx%4dx%4d\0A\00", align 1
@.str.5.8 = private unnamed_addr constant [37 x i8] c" Iterations      =             %12d\0A\00", align 1
@.str.6 = private unnamed_addr constant [39 x i8] c" Time in seconds =             %12.2f\0A\00", align 1
@.str.7.9 = private unnamed_addr constant [37 x i8] c" Total threads   =             %12d\0A\00", align 1
@.str.8.10 = private unnamed_addr constant [37 x i8] c" Avail threads   =             %12d\0A\00", align 1
@.str.9.11 = private unnamed_addr constant [54 x i8] c" Warning: Threads used differ from threads available\0A\00", align 1
@.str.10.12 = private unnamed_addr constant [39 x i8] c" Mop/s total     =             %12.2f\0A\00", align 1
@.str.11.13 = private unnamed_addr constant [39 x i8] c" Mop/s/thread    =             %12.2f\0A\00", align 1
@.str.12.14 = private unnamed_addr constant [25 x i8] c" Operation type  = %24s\0A\00", align 1
@.str.13.15 = private unnamed_addr constant [45 x i8] c" Verification    =            NOT PERFORMED\0A\00", align 1
@.str.14.16 = private unnamed_addr constant [45 x i8] c" Verification    =               SUCCESSFUL\0A\00", align 1
@.str.15.17 = private unnamed_addr constant [45 x i8] c" Verification    =             UNSUCCESSFUL\0A\00", align 1
@.str.16.18 = private unnamed_addr constant [37 x i8] c" Version         =             %12s\0A\00", align 1
@.str.17.19 = private unnamed_addr constant [37 x i8] c" Compile date    =             %12s\0A\00", align 1
@.str.18.20 = private unnamed_addr constant [20 x i8] c"\0A Compile options:\0A\00", align 1
@.str.19.21 = private unnamed_addr constant [23 x i8] c"    CC           = %s\0A\00", align 1
@.str.20.22 = private unnamed_addr constant [23 x i8] c"    CLINK        = %s\0A\00", align 1
@.str.21.23 = private unnamed_addr constant [23 x i8] c"    C_LIB        = %s\0A\00", align 1
@.str.22.24 = private unnamed_addr constant [23 x i8] c"    C_INC        = %s\0A\00", align 1
@.str.23.25 = private unnamed_addr constant [23 x i8] c"    CFLAGS       = %s\0A\00", align 1
@.str.24.26 = private unnamed_addr constant [23 x i8] c"    CLINKFLAGS   = %s\0A\00", align 1
@.str.25.27 = private unnamed_addr constant [41 x i8] c"\0A--------------------------------------\0A\00", align 1
@.str.26 = private unnamed_addr constant [39 x i8] c" Please send all errors/feedbacks to:\0A\00", align 1
@.str.27 = private unnamed_addr constant [34 x i8] c" Center for Manycore Programming\0A\00", align 1
@.str.28 = private unnamed_addr constant [21 x i8] c" cmp@aces.snu.ac.kr\0A\00", align 1
@.str.29 = private unnamed_addr constant [24 x i8] c" http://aces.snu.ac.kr\0A\00", align 1
@.str.30 = private unnamed_addr constant [40 x i8] c"--------------------------------------\0A\00", align 1
@elapsed = internal thread_local global [64 x double] zeroinitializer, align 16
@count = internal thread_local global [64 x i32] zeroinitializer, align 16
@start = internal thread_local global [64 x double] zeroinitializer, align 16
@wtime_.sec = internal global i32 -1, align 4
@.str.31 = private unnamed_addr constant [7 x i8] c"X.addr\00"
@.str.32 = private unnamed_addr constant [7 x i8] c"A.addr\00"
@.str.33 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.34 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.35 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.36 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.37 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.38 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.39 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.40 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.41 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.42 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.43 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.44 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.45 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.46 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.47 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.48 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.49 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.50 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.51 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.52 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.53 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.54 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.55 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.56 = private unnamed_addr constant [7 x i8] c"A.addr\00"
@.str.57 = private unnamed_addr constant [7 x i8] c"A.addr\00"
@.str.58 = private unnamed_addr constant [3 x i8] c"T1\00"
@.str.59 = private unnamed_addr constant [3 x i8] c"T1\00"
@.str.60 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.61 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.62 = private unnamed_addr constant [3 x i8] c"A1\00"
@.str.63 = private unnamed_addr constant [7 x i8] c"A.addr\00"
@.str.64 = private unnamed_addr constant [7 x i8] c"A.addr\00"
@.str.65 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.66 = private unnamed_addr constant [3 x i8] c"A1\00"
@.str.67 = private unnamed_addr constant [3 x i8] c"A2\00"
@.str.68 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.69 = private unnamed_addr constant [7 x i8] c"X.addr\00"
@.str.70 = private unnamed_addr constant [7 x i8] c"X.addr\00"
@.str.71 = private unnamed_addr constant [3 x i8] c"T1\00"
@.str.72 = private unnamed_addr constant [3 x i8] c"T1\00"
@.str.73 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.74 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.75 = private unnamed_addr constant [3 x i8] c"X1\00"
@.str.76 = private unnamed_addr constant [7 x i8] c"X.addr\00"
@.str.77 = private unnamed_addr constant [7 x i8] c"X.addr\00"
@.str.78 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.79 = private unnamed_addr constant [3 x i8] c"X1\00"
@.str.80 = private unnamed_addr constant [3 x i8] c"X2\00"
@.str.81 = private unnamed_addr constant [3 x i8] c"A1\00"
@.str.82 = private unnamed_addr constant [3 x i8] c"X2\00"
@.str.83 = private unnamed_addr constant [3 x i8] c"A2\00"
@.str.84 = private unnamed_addr constant [3 x i8] c"X1\00"
@.str.85 = private unnamed_addr constant [3 x i8] c"T1\00"
@.str.86 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.87 = private unnamed_addr constant [3 x i8] c"T1\00"
@.str.88 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.89 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.90 = private unnamed_addr constant [3 x i8] c"T2\00"
@.str.91 = private unnamed_addr constant [3 x i8] c"T1\00"
@.str.92 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.93 = private unnamed_addr constant [3 x i8] c"T2\00"
@.str.94 = private unnamed_addr constant [2 x i8] c"Z\00"
@.str.95 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.96 = private unnamed_addr constant [2 x i8] c"Z\00"
@.str.97 = private unnamed_addr constant [3 x i8] c"A2\00"
@.str.98 = private unnamed_addr constant [3 x i8] c"X2\00"
@.str.99 = private unnamed_addr constant [3 x i8] c"T3\00"
@.str.100 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.101 = private unnamed_addr constant [3 x i8] c"T3\00"
@.str.102 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.103 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.104 = private unnamed_addr constant [3 x i8] c"T4\00"
@.str.105 = private unnamed_addr constant [3 x i8] c"T3\00"
@.str.106 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.107 = private unnamed_addr constant [3 x i8] c"T4\00"
@.str.108 = private unnamed_addr constant [7 x i8] c"X.addr\00"
@.str.109 = private unnamed_addr constant [7 x i8] c"X.addr\00"
@.str.110 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.111 = private unnamed_addr constant [7 x i8] c"X.addr\00"
@.str.112 = private unnamed_addr constant [7 x i8] c"X.addr\00"
@.str.113 = private unnamed_addr constant [8 x i8] c"kn.addr\00"
@.str.114 = private unnamed_addr constant [8 x i8] c"np.addr\00"
@.str.115 = private unnamed_addr constant [8 x i8] c"nn.addr\00"
@.str.116 = private unnamed_addr constant [7 x i8] c"s.addr\00"
@.str.117 = private unnamed_addr constant [7 x i8] c"a.addr\00"
@.str.118 = private unnamed_addr constant [8 x i8] c"kn.addr\00"
@.str.119 = private unnamed_addr constant [7 x i8] c"s.addr\00"
@.str.120 = private unnamed_addr constant [8 x i8] c"nn.addr\00"
@.str.121 = private unnamed_addr constant [8 x i8] c"np.addr\00"
@.str.122 = private unnamed_addr constant [8 x i8] c"np.addr\00"
@.str.123 = private unnamed_addr constant [3 x i8] c"mq\00"
@.str.124 = private unnamed_addr constant [3 x i8] c"mq\00"
@.str.125 = private unnamed_addr constant [8 x i8] c"kn.addr\00"
@.str.126 = private unnamed_addr constant [3 x i8] c"nq\00"
@.str.127 = private unnamed_addr constant [7 x i8] c"s.addr\00"
@.str.128 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.129 = private unnamed_addr constant [7 x i8] c"a.addr\00"
@.str.130 = private unnamed_addr constant [3 x i8] c"t2\00"
@.str.131 = private unnamed_addr constant [3 x i8] c"nq\00"
@.str.132 = private unnamed_addr constant [3 x i8] c"kk\00"
@.str.133 = private unnamed_addr constant [3 x i8] c"kk\00"
@.str.134 = private unnamed_addr constant [3 x i8] c"kk\00"
@.str.135 = private unnamed_addr constant [3 x i8] c"ik\00"
@.str.136 = private unnamed_addr constant [3 x i8] c"ik\00"
@.str.137 = private unnamed_addr constant [3 x i8] c"kk\00"
@.str.138 = private unnamed_addr constant [3 x i8] c"ik\00"
@.str.139 = private unnamed_addr constant [3 x i8] c"kk\00"
@.str.140 = private unnamed_addr constant [3 x i8] c"kk\00"
@.str.141 = private unnamed_addr constant [3 x i8] c"kk\00"
@.str.142 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.143 = private unnamed_addr constant [7 x i8] c"retval\00"
@.str.144 = private unnamed_addr constant [10 x i8] c"seed.addr\00"
@.str.145 = private unnamed_addr constant [7 x i8] c"a.addr\00"
@.str.146 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.147 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.148 = private unnamed_addr constant [125 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/IS/is.c: create_seq :: line No: 415\00"
@.str.149 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.150 = private unnamed_addr constant [129 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/IS/is.c: .omp_outlined. :: line No: 421\00"
@.str.151 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.152 = private unnamed_addr constant [17 x i8] c".bound_tid..addr\00"
@.str.153 = private unnamed_addr constant [7 x i8] c"a.addr\00"
@.str.154 = private unnamed_addr constant [10 x i8] c"seed.addr\00"
@.str.155 = private unnamed_addr constant [7 x i8] c"a.addr\00"
@.str.156 = private unnamed_addr constant [10 x i8] c"seed.addr\00"
@.str.157 = private unnamed_addr constant [7 x i8] c"a.addr\00"
@.str.158 = private unnamed_addr constant [3 x i8] c"an\00"
@.str.159 = private unnamed_addr constant [5 x i8] c"myid\00"
@.str.160 = private unnamed_addr constant [10 x i8] c"num_procs\00"
@.str.161 = private unnamed_addr constant [10 x i8] c"num_procs\00"
@.str.162 = private unnamed_addr constant [10 x i8] c"num_procs\00"
@.str.163 = private unnamed_addr constant [3 x i8] c"mq\00"
@.str.164 = private unnamed_addr constant [3 x i8] c"mq\00"
@.str.165 = private unnamed_addr constant [5 x i8] c"myid\00"
@.str.166 = private unnamed_addr constant [3 x i8] c"k1\00"
@.str.167 = private unnamed_addr constant [3 x i8] c"k1\00"
@.str.168 = private unnamed_addr constant [3 x i8] c"mq\00"
@.str.169 = private unnamed_addr constant [3 x i8] c"k2\00"
@.str.170 = private unnamed_addr constant [3 x i8] c"k2\00"
@.str.171 = private unnamed_addr constant [3 x i8] c"k2\00"
@.str.172 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.173 = private unnamed_addr constant [5 x i8] c"myid\00"
@.str.174 = private unnamed_addr constant [10 x i8] c"num_procs\00"
@.str.175 = private unnamed_addr constant [10 x i8] c"seed.addr\00"
@.str.176 = private unnamed_addr constant [3 x i8] c"an\00"
@.str.177 = private unnamed_addr constant [2 x i8] c"s\00"
@.str.178 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.179 = private unnamed_addr constant [3 x i8] c"k1\00"
@.str.180 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.181 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.182 = private unnamed_addr constant [3 x i8] c"k2\00"
@.str.183 = private unnamed_addr constant [2 x i8] c"x\00"
@.str.184 = private unnamed_addr constant [2 x i8] c"x\00"
@.str.185 = private unnamed_addr constant [2 x i8] c"x\00"
@.str.186 = private unnamed_addr constant [2 x i8] c"x\00"
@.str.187 = private unnamed_addr constant [2 x i8] c"x\00"
@.str.188 = private unnamed_addr constant [2 x i8] c"x\00"
@.str.189 = private unnamed_addr constant [2 x i8] c"x\00"
@.str.190 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.191 = private unnamed_addr constant [2 x i8] c"x\00"
@.str.192 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.193 = private unnamed_addr constant [10 x i8] c"key_array\00"
@.str.194 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.195 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.196 = private unnamed_addr constant [10 x i8] c"size.addr\00"
@.str.197 = private unnamed_addr constant [10 x i8] c"size.addr\00"
@.str.198 = private unnamed_addr constant [2 x i8] c"p\00"
@.str.199 = private unnamed_addr constant [2 x i8] c"p\00"
@.str.200 = private unnamed_addr constant [2 x i8] c"p\00"
@.str.201 = private unnamed_addr constant [10 x i8] c"num_procs\00"
@.str.202 = private unnamed_addr constant [10 x i8] c"num_procs\00"
@.str.203 = private unnamed_addr constant [12 x i8] c"bucket_size\00"
@.str.204 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.205 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.206 = private unnamed_addr constant [10 x i8] c"num_procs\00"
@.str.207 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.208 = private unnamed_addr constant [12 x i8] c"bucket_size\00"
@.str.209 = private unnamed_addr constant [12 x i8] c"bucket_size\00"
@.str.210 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.211 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.212 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.213 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.214 = private unnamed_addr constant [129 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/IS/is.c: alloc_key_buff :: line No: 477\00"
@.str.215 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.216 = private unnamed_addr constant [131 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/IS/is.c: .omp_outlined..2 :: line No: 495\00"
@.str.217 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.218 = private unnamed_addr constant [17 x i8] c".bound_tid..addr\00"
@.str.219 = private unnamed_addr constant [7 x i8] c"i.addr\00"
@.str.220 = private unnamed_addr constant [7 x i8] c"i.addr\00"
@.str.221 = private unnamed_addr constant [8 x i8] c".omp.lb\00"
@.str.222 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.223 = private unnamed_addr constant [12 x i8] c".omp.stride\00"
@.str.224 = private unnamed_addr constant [13 x i8] c".omp.is_last\00"
@.str.225 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.226 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.227 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.228 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.229 = private unnamed_addr constant [131 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/IS/is.c: .omp_outlined..2 :: line No: 495\00"
@.str.230 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.231 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.232 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.233 = private unnamed_addr constant [8 x i8] c".omp.lb\00"
@.str.234 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.235 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.236 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.237 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.238 = private unnamed_addr constant [3 x i8] c"i1\00"
@.str.239 = private unnamed_addr constant [3 x i8] c"i1\00"
@.str.240 = private unnamed_addr constant [10 x i8] c"key_buff2\00"
@.str.241 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.242 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.243 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.244 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.245 = private unnamed_addr constant [131 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/IS/is.c: .omp_outlined..2 :: line No: 495\00"
@.str.246 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.247 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.248 = private unnamed_addr constant [126 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/IS/is.c: full_verify :: line No: 519\00"
@.str.249 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.250 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.251 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.252 = private unnamed_addr constant [126 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/IS/is.c: full_verify :: line No: 519\00"
@.str.253 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.254 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.255 = private unnamed_addr constant [20 x i8] c"passed_verification\00"
@.str.256 = private unnamed_addr constant [20 x i8] c"passed_verification\00"
@.str.257 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.258 = private unnamed_addr constant [131 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/IS/is.c: .omp_outlined..3 :: line No: 535\00"
@.str.259 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.260 = private unnamed_addr constant [17 x i8] c".bound_tid..addr\00"
@.str.261 = private unnamed_addr constant [8 x i8] c".omp.lb\00"
@.str.262 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.263 = private unnamed_addr constant [12 x i8] c".omp.stride\00"
@.str.264 = private unnamed_addr constant [13 x i8] c".omp.is_last\00"
@.str.265 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.266 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.267 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.268 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.269 = private unnamed_addr constant [131 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/IS/is.c: .omp_outlined..3 :: line No: 535\00"
@.str.270 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.271 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.272 = private unnamed_addr constant [131 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/IS/is.c: .omp_outlined..3 :: line No: 535\00"
@.str.273 = private unnamed_addr constant [8 x i8] c".omp.lb\00"
@.str.274 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.275 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.276 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.277 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.278 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.279 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.280 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.281 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.282 = private unnamed_addr constant [3 x i8] c"k1\00"
@.str.283 = private unnamed_addr constant [3 x i8] c"k1\00"
@.str.284 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.285 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.286 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.287 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.288 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.289 = private unnamed_addr constant [10 x i8] c"key_buff2\00"
@.str.290 = private unnamed_addr constant [20 x i8] c"key_buff_ptr_global\00"
@.str.291 = private unnamed_addr constant [20 x i8] c"key_buff_ptr_global\00"
@.str.292 = private unnamed_addr constant [20 x i8] c"key_buff_ptr_global\00"
@.str.293 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.294 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.295 = private unnamed_addr constant [10 x i8] c"key_buff2\00"
@.str.296 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.297 = private unnamed_addr constant [10 x i8] c"key_array\00"
@.str.298 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.299 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.300 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.301 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.302 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.303 = private unnamed_addr constant [131 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/IS/is.c: .omp_outlined..4 :: line No: 575\00"
@.str.304 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.305 = private unnamed_addr constant [17 x i8] c".bound_tid..addr\00"
@.str.306 = private unnamed_addr constant [7 x i8] c"i.addr\00"
@.str.307 = private unnamed_addr constant [7 x i8] c"j.addr\00"
@.str.308 = private unnamed_addr constant [7 x i8] c"i.addr\00"
@.str.309 = private unnamed_addr constant [7 x i8] c"j.addr\00"
@.str.310 = private unnamed_addr constant [8 x i8] c".omp.lb\00"
@.str.311 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.312 = private unnamed_addr constant [12 x i8] c".omp.stride\00"
@.str.313 = private unnamed_addr constant [13 x i8] c".omp.is_last\00"
@.str.314 = private unnamed_addr constant [3 x i8] c"j1\00"
@.str.315 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.316 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.317 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.318 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.319 = private unnamed_addr constant [131 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/IS/is.c: .omp_outlined..4 :: line No: 575\00"
@.str.320 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.321 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.322 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.323 = private unnamed_addr constant [8 x i8] c".omp.lb\00"
@.str.324 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.325 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.326 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.327 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.328 = private unnamed_addr constant [3 x i8] c"i2\00"
@.str.329 = private unnamed_addr constant [3 x i8] c"i2\00"
@.str.330 = private unnamed_addr constant [10 x i8] c"key_array\00"
@.str.331 = private unnamed_addr constant [3 x i8] c"i2\00"
@.str.332 = private unnamed_addr constant [10 x i8] c"key_array\00"
@.str.333 = private unnamed_addr constant [3 x i8] c"j1\00"
@.str.334 = private unnamed_addr constant [3 x i8] c"j1\00"
@.str.335 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.336 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.337 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.338 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.339 = private unnamed_addr constant [131 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/IS/is.c: .omp_outlined..4 :: line No: 575\00"
@.str.340 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.341 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.342 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.343 = private unnamed_addr constant [131 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/IS/is.c: .omp_outlined..4 :: line No: 575\00"
@.str.344 = private unnamed_addr constant [7 x i8] c"j.addr\00"
@.str.345 = private unnamed_addr constant [3 x i8] c"j1\00"
@.str.346 = private unnamed_addr constant [7 x i8] c"j.addr\00"
@.str.347 = private unnamed_addr constant [3 x i8] c"j1\00"
@.str.348 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.349 = private unnamed_addr constant [144 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/IS/is.c: .omp.reduction.reduction_func :: line No: 574\00"
@.str.350 = private unnamed_addr constant [6 x i8] c".addr\00"
@.str.351 = private unnamed_addr constant [7 x i8] c".addr1\00"
@.str.352 = private unnamed_addr constant [6 x i8] c".addr\00"
@.str.353 = private unnamed_addr constant [7 x i8] c".addr1\00"
@.str.354 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.355 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.356 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.357 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.358 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.359 = private unnamed_addr constant [15 x i8] c"iteration.addr\00"
@.str.360 = private unnamed_addr constant [6 x i8] c"shift\00"
@.str.361 = private unnamed_addr constant [6 x i8] c"shift\00"
@.str.362 = private unnamed_addr constant [16 x i8] c"num_bucket_keys\00"
@.str.363 = private unnamed_addr constant [15 x i8] c"iteration.addr\00"
@.str.364 = private unnamed_addr constant [15 x i8] c"iteration.addr\00"
@.str.365 = private unnamed_addr constant [10 x i8] c"key_array\00"
@.str.366 = private unnamed_addr constant [15 x i8] c"iteration.addr\00"
@.str.367 = private unnamed_addr constant [15 x i8] c"iteration.addr\00"
@.str.368 = private unnamed_addr constant [10 x i8] c"key_array\00"
@.str.369 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.370 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.371 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.372 = private unnamed_addr constant [17 x i8] c"test_index_array\00"
@.str.373 = private unnamed_addr constant [10 x i8] c"key_array\00"
@.str.374 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.375 = private unnamed_addr constant [20 x i8] c"partial_verify_vals\00"
@.str.376 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.377 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.378 = private unnamed_addr constant [14 x i8] c"key_buff_ptr2\00"
@.str.379 = private unnamed_addr constant [13 x i8] c"key_buff_ptr\00"
@.str.380 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.381 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.382 = private unnamed_addr constant [119 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/IS/is.c: rank :: line No: 594\00"
@.str.383 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.384 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.385 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.386 = private unnamed_addr constant [20 x i8] c"partial_verify_vals\00"
@.str.387 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.388 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.389 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.390 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.391 = private unnamed_addr constant [13 x i8] c"key_buff_ptr\00"
@.str.392 = private unnamed_addr constant [13 x i8] c"key_buff_ptr\00"
@.str.393 = private unnamed_addr constant [9 x i8] c"key_rank\00"
@.str.394 = private unnamed_addr constant [7 x i8] c"failed\00"
@.str.395 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.396 = private unnamed_addr constant [9 x i8] c"key_rank\00"
@.str.397 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.398 = private unnamed_addr constant [16 x i8] c"test_rank_array\00"
@.str.399 = private unnamed_addr constant [15 x i8] c"iteration.addr\00"
@.str.400 = private unnamed_addr constant [7 x i8] c"failed\00"
@.str.401 = private unnamed_addr constant [20 x i8] c"passed_verification\00"
@.str.402 = private unnamed_addr constant [20 x i8] c"passed_verification\00"
@.str.403 = private unnamed_addr constant [9 x i8] c"key_rank\00"
@.str.404 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.405 = private unnamed_addr constant [16 x i8] c"test_rank_array\00"
@.str.406 = private unnamed_addr constant [15 x i8] c"iteration.addr\00"
@.str.407 = private unnamed_addr constant [7 x i8] c"failed\00"
@.str.408 = private unnamed_addr constant [20 x i8] c"passed_verification\00"
@.str.409 = private unnamed_addr constant [20 x i8] c"passed_verification\00"
@.str.410 = private unnamed_addr constant [7 x i8] c"failed\00"
@.str.411 = private unnamed_addr constant [15 x i8] c"iteration.addr\00"
@.str.412 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.413 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.414 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.415 = private unnamed_addr constant [15 x i8] c"iteration.addr\00"
@.str.416 = private unnamed_addr constant [13 x i8] c"key_buff_ptr\00"
@.str.417 = private unnamed_addr constant [20 x i8] c"key_buff_ptr_global\00"
@.str.418 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.419 = private unnamed_addr constant [131 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/IS/is.c: .omp_outlined..6 :: line No: 626\00"
@.str.420 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.421 = private unnamed_addr constant [17 x i8] c".bound_tid..addr\00"
@.str.422 = private unnamed_addr constant [11 x i8] c"shift.addr\00"
@.str.423 = private unnamed_addr constant [21 x i8] c"num_bucket_keys.addr\00"
@.str.424 = private unnamed_addr constant [18 x i8] c"key_buff_ptr.addr\00"
@.str.425 = private unnamed_addr constant [19 x i8] c"key_buff_ptr2.addr\00"
@.str.426 = private unnamed_addr constant [11 x i8] c"shift.addr\00"
@.str.427 = private unnamed_addr constant [21 x i8] c"num_bucket_keys.addr\00"
@.str.428 = private unnamed_addr constant [18 x i8] c"key_buff_ptr.addr\00"
@.str.429 = private unnamed_addr constant [19 x i8] c"key_buff_ptr2.addr\00"
@.str.430 = private unnamed_addr constant [5 x i8] c"myid\00"
@.str.431 = private unnamed_addr constant [10 x i8] c"num_procs\00"
@.str.432 = private unnamed_addr constant [5 x i8] c"myid\00"
@.str.433 = private unnamed_addr constant [10 x i8] c"num_procs\00"
@.str.434 = private unnamed_addr constant [5 x i8] c"myid\00"
@.str.435 = private unnamed_addr constant [12 x i8] c"bucket_size\00"
@.str.436 = private unnamed_addr constant [12 x i8] c"bucket_size\00"
@.str.437 = private unnamed_addr constant [10 x i8] c"work_buff\00"
@.str.438 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.439 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.440 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.441 = private unnamed_addr constant [10 x i8] c"work_buff\00"
@.str.442 = private unnamed_addr constant [10 x i8] c"work_buff\00"
@.str.443 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.444 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.445 = private unnamed_addr constant [8 x i8] c".omp.lb\00"
@.str.446 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.447 = private unnamed_addr constant [12 x i8] c".omp.stride\00"
@.str.448 = private unnamed_addr constant [13 x i8] c".omp.is_last\00"
@.str.449 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.450 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.451 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.452 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.453 = private unnamed_addr constant [131 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/IS/is.c: .omp_outlined..6 :: line No: 626\00"
@.str.454 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.455 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.456 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.457 = private unnamed_addr constant [8 x i8] c".omp.lb\00"
@.str.458 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.459 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.460 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.461 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.462 = private unnamed_addr constant [3 x i8] c"i4\00"
@.str.463 = private unnamed_addr constant [3 x i8] c"i4\00"
@.str.464 = private unnamed_addr constant [10 x i8] c"key_array\00"
@.str.465 = private unnamed_addr constant [11 x i8] c"shift.addr\00"
@.str.466 = private unnamed_addr constant [10 x i8] c"work_buff\00"
@.str.467 = private unnamed_addr constant [10 x i8] c"work_buff\00"
@.str.468 = private unnamed_addr constant [10 x i8] c"work_buff\00"
@.str.469 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.470 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.471 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.472 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.473 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.474 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.475 = private unnamed_addr constant [131 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/IS/is.c: .omp_outlined..6 :: line No: 626\00"
@.str.476 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.477 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.478 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.479 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.480 = private unnamed_addr constant [131 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/IS/is.c: .omp_outlined..6 :: line No: 626\00"
@.str.481 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.482 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.483 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.484 = private unnamed_addr constant [5 x i8] c"myid\00"
@.str.485 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.486 = private unnamed_addr constant [12 x i8] c"bucket_size\00"
@.str.487 = private unnamed_addr constant [12 x i8] c"bucket_size\00"
@.str.488 = private unnamed_addr constant [12 x i8] c"bucket_size\00"
@.str.489 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.490 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.491 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.492 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.493 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.494 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.495 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.496 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.497 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.498 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.499 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.500 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.501 = private unnamed_addr constant [5 x i8] c"myid\00"
@.str.502 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.503 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.504 = private unnamed_addr constant [12 x i8] c"bucket_size\00"
@.str.505 = private unnamed_addr constant [12 x i8] c"bucket_size\00"
@.str.506 = private unnamed_addr constant [12 x i8] c"bucket_size\00"
@.str.507 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.508 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.509 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.510 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.511 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.512 = private unnamed_addr constant [5 x i8] c"myid\00"
@.str.513 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.514 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.515 = private unnamed_addr constant [10 x i8] c"num_procs\00"
@.str.516 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.517 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.518 = private unnamed_addr constant [12 x i8] c"bucket_size\00"
@.str.519 = private unnamed_addr constant [12 x i8] c"bucket_size\00"
@.str.520 = private unnamed_addr constant [12 x i8] c"bucket_size\00"
@.str.521 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.522 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.523 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.524 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.525 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.526 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.527 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.528 = private unnamed_addr constant [10 x i8] c".omp.lb63\00"
@.str.529 = private unnamed_addr constant [10 x i8] c".omp.ub64\00"
@.str.530 = private unnamed_addr constant [14 x i8] c".omp.stride65\00"
@.str.531 = private unnamed_addr constant [15 x i8] c".omp.is_last66\00"
@.str.532 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.533 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.534 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.535 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.536 = private unnamed_addr constant [131 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/IS/is.c: .omp_outlined..6 :: line No: 626\00"
@.str.537 = private unnamed_addr constant [10 x i8] c".omp.ub64\00"
@.str.538 = private unnamed_addr constant [10 x i8] c".omp.ub64\00"
@.str.539 = private unnamed_addr constant [10 x i8] c".omp.ub64\00"
@.str.540 = private unnamed_addr constant [10 x i8] c".omp.lb63\00"
@.str.541 = private unnamed_addr constant [10 x i8] c".omp.iv62\00"
@.str.542 = private unnamed_addr constant [10 x i8] c".omp.iv62\00"
@.str.543 = private unnamed_addr constant [10 x i8] c".omp.ub64\00"
@.str.544 = private unnamed_addr constant [10 x i8] c".omp.iv62\00"
@.str.545 = private unnamed_addr constant [4 x i8] c"i67\00"
@.str.546 = private unnamed_addr constant [4 x i8] c"i67\00"
@.str.547 = private unnamed_addr constant [10 x i8] c"key_array\00"
@.str.548 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.549 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.550 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.551 = private unnamed_addr constant [11 x i8] c"shift.addr\00"
@.str.552 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.553 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.554 = private unnamed_addr constant [10 x i8] c"key_buff2\00"
@.str.555 = private unnamed_addr constant [10 x i8] c".omp.iv62\00"
@.str.556 = private unnamed_addr constant [10 x i8] c".omp.iv62\00"
@.str.557 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.558 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.559 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.560 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.561 = private unnamed_addr constant [131 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/IS/is.c: .omp_outlined..6 :: line No: 626\00"
@.str.562 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.563 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.564 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.565 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.566 = private unnamed_addr constant [131 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/IS/is.c: .omp_outlined..6 :: line No: 626\00"
@.str.567 = private unnamed_addr constant [5 x i8] c"myid\00"
@.str.568 = private unnamed_addr constant [10 x i8] c"num_procs\00"
@.str.569 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.570 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.571 = private unnamed_addr constant [5 x i8] c"myid\00"
@.str.572 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.573 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.574 = private unnamed_addr constant [10 x i8] c"num_procs\00"
@.str.575 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.576 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.577 = private unnamed_addr constant [12 x i8] c"bucket_size\00"
@.str.578 = private unnamed_addr constant [12 x i8] c"bucket_size\00"
@.str.579 = private unnamed_addr constant [12 x i8] c"bucket_size\00"
@.str.580 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.581 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.582 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.583 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.584 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.585 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.586 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.587 = private unnamed_addr constant [11 x i8] c".omp.lb114\00"
@.str.588 = private unnamed_addr constant [11 x i8] c".omp.ub115\00"
@.str.589 = private unnamed_addr constant [15 x i8] c".omp.stride116\00"
@.str.590 = private unnamed_addr constant [16 x i8] c".omp.is_last117\00"
@.str.591 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.592 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.593 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.594 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.595 = private unnamed_addr constant [131 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/IS/is.c: .omp_outlined..6 :: line No: 626\00"
@.str.596 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.597 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.598 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.599 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.600 = private unnamed_addr constant [131 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/IS/is.c: .omp_outlined..6 :: line No: 626\00"
@.str.601 = private unnamed_addr constant [11 x i8] c".omp.lb114\00"
@.str.602 = private unnamed_addr constant [11 x i8] c".omp.iv113\00"
@.str.603 = private unnamed_addr constant [11 x i8] c".omp.iv113\00"
@.str.604 = private unnamed_addr constant [11 x i8] c".omp.ub115\00"
@.str.605 = private unnamed_addr constant [11 x i8] c".omp.iv113\00"
@.str.606 = private unnamed_addr constant [5 x i8] c"i118\00"
@.str.607 = private unnamed_addr constant [5 x i8] c"i118\00"
@.str.608 = private unnamed_addr constant [21 x i8] c"num_bucket_keys.addr\00"
@.str.609 = private unnamed_addr constant [3 x i8] c"k1\00"
@.str.610 = private unnamed_addr constant [3 x i8] c"k1\00"
@.str.611 = private unnamed_addr constant [21 x i8] c"num_bucket_keys.addr\00"
@.str.612 = private unnamed_addr constant [3 x i8] c"k2\00"
@.str.613 = private unnamed_addr constant [3 x i8] c"k1\00"
@.str.614 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.615 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.616 = private unnamed_addr constant [3 x i8] c"k2\00"
@.str.617 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.618 = private unnamed_addr constant [18 x i8] c"key_buff_ptr.addr\00"
@.str.619 = private unnamed_addr constant [18 x i8] c"key_buff_ptr.addr\00"
@.str.620 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.621 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.622 = private unnamed_addr constant [5 x i8] c"i118\00"
@.str.623 = private unnamed_addr constant [5 x i8] c"i118\00"
@.str.624 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.625 = private unnamed_addr constant [2 x i8] c"m\00"
@.str.626 = private unnamed_addr constant [2 x i8] c"m\00"
@.str.627 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.628 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.629 = private unnamed_addr constant [5 x i8] c"i118\00"
@.str.630 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.631 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.632 = private unnamed_addr constant [19 x i8] c"key_buff_ptr2.addr\00"
@.str.633 = private unnamed_addr constant [19 x i8] c"key_buff_ptr2.addr\00"
@.str.634 = private unnamed_addr constant [18 x i8] c"key_buff_ptr.addr\00"
@.str.635 = private unnamed_addr constant [18 x i8] c"key_buff_ptr.addr\00"
@.str.636 = private unnamed_addr constant [18 x i8] c"key_buff_ptr.addr\00"
@.str.637 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.638 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.639 = private unnamed_addr constant [2 x i8] c"m\00"
@.str.640 = private unnamed_addr constant [3 x i8] c"k1\00"
@.str.641 = private unnamed_addr constant [18 x i8] c"key_buff_ptr.addr\00"
@.str.642 = private unnamed_addr constant [18 x i8] c"key_buff_ptr.addr\00"
@.str.643 = private unnamed_addr constant [18 x i8] c"key_buff_ptr.addr\00"
@.str.644 = private unnamed_addr constant [3 x i8] c"k1\00"
@.str.645 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.646 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.647 = private unnamed_addr constant [3 x i8] c"k2\00"
@.str.648 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.649 = private unnamed_addr constant [18 x i8] c"key_buff_ptr.addr\00"
@.str.650 = private unnamed_addr constant [18 x i8] c"key_buff_ptr.addr\00"
@.str.651 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.652 = private unnamed_addr constant [18 x i8] c"key_buff_ptr.addr\00"
@.str.653 = private unnamed_addr constant [18 x i8] c"key_buff_ptr.addr\00"
@.str.654 = private unnamed_addr constant [18 x i8] c"key_buff_ptr.addr\00"
@.str.655 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.656 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.657 = private unnamed_addr constant [11 x i8] c".omp.iv113\00"
@.str.658 = private unnamed_addr constant [11 x i8] c".omp.iv113\00"
@.str.659 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.660 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.661 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.662 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.663 = private unnamed_addr constant [131 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/IS/is.c: .omp_outlined..6 :: line No: 626\00"
@.str.664 = private unnamed_addr constant [10 x i8] c"argc.addr\00"
@.str.665 = private unnamed_addr constant [10 x i8] c"argv.addr\00"
@.str.666 = private unnamed_addr constant [9 x i8] c"timer_on\00"
@.str.667 = private unnamed_addr constant [3 x i8] c"fp\00"
@.str.668 = private unnamed_addr constant [3 x i8] c"fp\00"
@.str.669 = private unnamed_addr constant [9 x i8] c"timer_on\00"
@.str.670 = private unnamed_addr constant [9 x i8] c"timer_on\00"
@.str.671 = private unnamed_addr constant [9 x i8] c"timer_on\00"
@.str.672 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.673 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.674 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.675 = private unnamed_addr constant [19 x i8] c"S_test_index_array\00"
@.str.676 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.677 = private unnamed_addr constant [17 x i8] c"test_index_array\00"
@.str.678 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.679 = private unnamed_addr constant [18 x i8] c"S_test_rank_array\00"
@.str.680 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.681 = private unnamed_addr constant [16 x i8] c"test_rank_array\00"
@.str.682 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.683 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.684 = private unnamed_addr constant [9 x i8] c"timer_on\00"
@.str.685 = private unnamed_addr constant [9 x i8] c"timer_on\00"
@.str.686 = private unnamed_addr constant [20 x i8] c"passed_verification\00"
@.str.687 = private unnamed_addr constant [10 x i8] c"iteration\00"
@.str.688 = private unnamed_addr constant [10 x i8] c"iteration\00"
@.str.689 = private unnamed_addr constant [10 x i8] c"iteration\00"
@.str.690 = private unnamed_addr constant [10 x i8] c"iteration\00"
@.str.691 = private unnamed_addr constant [10 x i8] c"iteration\00"
@.str.692 = private unnamed_addr constant [12 x i8] c"timecounter\00"
@.str.693 = private unnamed_addr constant [9 x i8] c"timer_on\00"
@.str.694 = private unnamed_addr constant [9 x i8] c"timer_on\00"
@.str.695 = private unnamed_addr constant [9 x i8] c"timer_on\00"
@.str.696 = private unnamed_addr constant [20 x i8] c"passed_verification\00"
@.str.697 = private unnamed_addr constant [20 x i8] c"passed_verification\00"
@.str.698 = private unnamed_addr constant [12 x i8] c"timecounter\00"
@.str.699 = private unnamed_addr constant [12 x i8] c"timecounter\00"
@.str.700 = private unnamed_addr constant [20 x i8] c"passed_verification\00"
@.str.701 = private unnamed_addr constant [9 x i8] c"timer_on\00"
@.str.702 = private unnamed_addr constant [8 x i8] c"t_total\00"
@.str.703 = private unnamed_addr constant [8 x i8] c"t_total\00"
@.str.704 = private unnamed_addr constant [8 x i8] c"t_total\00"
@.str.705 = private unnamed_addr constant [8 x i8] c"t_total\00"
@.str.706 = private unnamed_addr constant [12 x i8] c"timecounter\00"
@.str.707 = private unnamed_addr constant [12 x i8] c"timecounter\00"
@.str.708 = private unnamed_addr constant [8 x i8] c"t_total\00"
@.str.709 = private unnamed_addr constant [10 x i8] c"t_percent\00"
@.str.710 = private unnamed_addr constant [12 x i8] c"timecounter\00"
@.str.711 = private unnamed_addr constant [10 x i8] c"t_percent\00"
@.str.712 = private unnamed_addr constant [12 x i8] c"timecounter\00"
@.str.713 = private unnamed_addr constant [12 x i8] c"timecounter\00"
@.str.714 = private unnamed_addr constant [8 x i8] c"t_total\00"
@.str.715 = private unnamed_addr constant [10 x i8] c"t_percent\00"
@.str.716 = private unnamed_addr constant [12 x i8] c"timecounter\00"
@.str.717 = private unnamed_addr constant [10 x i8] c"t_percent\00"
@.str.718 = private unnamed_addr constant [12 x i8] c"timecounter\00"
@.str.719 = private unnamed_addr constant [12 x i8] c"timecounter\00"
@.str.720 = private unnamed_addr constant [8 x i8] c"t_total\00"
@.str.721 = private unnamed_addr constant [10 x i8] c"t_percent\00"
@.str.722 = private unnamed_addr constant [12 x i8] c"timecounter\00"
@.str.723 = private unnamed_addr constant [10 x i8] c"t_percent\00"
@.str.724 = private unnamed_addr constant [10 x i8] c"name.addr\00"
@.str.725 = private unnamed_addr constant [11 x i8] c"class.addr\00"
@.str.726 = private unnamed_addr constant [8 x i8] c"n1.addr\00"
@.str.727 = private unnamed_addr constant [8 x i8] c"n2.addr\00"
@.str.728 = private unnamed_addr constant [8 x i8] c"n3.addr\00"
@.str.729 = private unnamed_addr constant [11 x i8] c"niter.addr\00"
@.str.730 = private unnamed_addr constant [7 x i8] c"t.addr\00"
@.str.731 = private unnamed_addr constant [10 x i8] c"mops.addr\00"
@.str.732 = private unnamed_addr constant [12 x i8] c"optype.addr\00"
@.str.733 = private unnamed_addr constant [25 x i8] c"passed_verification.addr\00"
@.str.734 = private unnamed_addr constant [16 x i8] c"npbversion.addr\00"
@.str.735 = private unnamed_addr constant [17 x i8] c"compiletime.addr\00"
@.str.736 = private unnamed_addr constant [8 x i8] c"cc.addr\00"
@.str.737 = private unnamed_addr constant [11 x i8] c"clink.addr\00"
@.str.738 = private unnamed_addr constant [11 x i8] c"c_lib.addr\00"
@.str.739 = private unnamed_addr constant [11 x i8] c"c_inc.addr\00"
@.str.740 = private unnamed_addr constant [12 x i8] c"cflags.addr\00"
@.str.741 = private unnamed_addr constant [16 x i8] c"clinkflags.addr\00"
@.str.742 = private unnamed_addr constant [12 x i8] c"max_threads\00"
@.str.743 = private unnamed_addr constant [12 x i8] c"num_threads\00"
@.str.744 = private unnamed_addr constant [12 x i8] c"max_threads\00"
@.str.745 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.746 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.747 = private unnamed_addr constant [146 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common/c_print_results.c: c_print_results :: line No: 10\00"
@.str.748 = private unnamed_addr constant [10 x i8] c"name.addr\00"
@.str.749 = private unnamed_addr constant [11 x i8] c"class.addr\00"
@.str.750 = private unnamed_addr constant [8 x i8] c"n3.addr\00"
@.str.751 = private unnamed_addr constant [8 x i8] c"n1.addr\00"
@.str.752 = private unnamed_addr constant [3 x i8] c"nn\00"
@.str.753 = private unnamed_addr constant [8 x i8] c"n2.addr\00"
@.str.754 = private unnamed_addr constant [8 x i8] c"n2.addr\00"
@.str.755 = private unnamed_addr constant [3 x i8] c"nn\00"
@.str.756 = private unnamed_addr constant [3 x i8] c"nn\00"
@.str.757 = private unnamed_addr constant [3 x i8] c"nn\00"
@.str.758 = private unnamed_addr constant [8 x i8] c"n1.addr\00"
@.str.759 = private unnamed_addr constant [8 x i8] c"n2.addr\00"
@.str.760 = private unnamed_addr constant [8 x i8] c"n3.addr\00"
@.str.761 = private unnamed_addr constant [11 x i8] c"niter.addr\00"
@.str.762 = private unnamed_addr constant [7 x i8] c"t.addr\00"
@.str.763 = private unnamed_addr constant [12 x i8] c"num_threads\00"
@.str.764 = private unnamed_addr constant [12 x i8] c"max_threads\00"
@.str.765 = private unnamed_addr constant [12 x i8] c"num_threads\00"
@.str.766 = private unnamed_addr constant [12 x i8] c"max_threads\00"
@.str.767 = private unnamed_addr constant [10 x i8] c"mops.addr\00"
@.str.768 = private unnamed_addr constant [10 x i8] c"mops.addr\00"
@.str.769 = private unnamed_addr constant [12 x i8] c"num_threads\00"
@.str.770 = private unnamed_addr constant [12 x i8] c"optype.addr\00"
@.str.771 = private unnamed_addr constant [25 x i8] c"passed_verification.addr\00"
@.str.772 = private unnamed_addr constant [25 x i8] c"passed_verification.addr\00"
@.str.773 = private unnamed_addr constant [16 x i8] c"npbversion.addr\00"
@.str.774 = private unnamed_addr constant [17 x i8] c"compiletime.addr\00"
@.str.775 = private unnamed_addr constant [8 x i8] c"cc.addr\00"
@.str.776 = private unnamed_addr constant [11 x i8] c"clink.addr\00"
@.str.777 = private unnamed_addr constant [11 x i8] c"c_lib.addr\00"
@.str.778 = private unnamed_addr constant [11 x i8] c"c_inc.addr\00"
@.str.779 = private unnamed_addr constant [12 x i8] c"cflags.addr\00"
@.str.780 = private unnamed_addr constant [16 x i8] c"clinkflags.addr\00"
@.str.781 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.782 = private unnamed_addr constant [147 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common/c_print_results.c: .omp_outlined..5 :: line No: 39\00"
@.str.783 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.784 = private unnamed_addr constant [17 x i8] c".bound_tid..addr\00"
@.str.785 = private unnamed_addr constant [17 x i8] c"num_threads.addr\00"
@.str.786 = private unnamed_addr constant [17 x i8] c"num_threads.addr\00"
@.str.787 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.788 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.789 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.790 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.791 = private unnamed_addr constant [147 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common/c_print_results.c: .omp_outlined..5 :: line No: 39\00"
@.str.792 = private unnamed_addr constant [17 x i8] c"num_threads.addr\00"
@.str.793 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.794 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.795 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.796 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.797 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.798 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.799 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.800 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.801 = private unnamed_addr constant [2 x i8] c"t\00"
@.str.802 = private unnamed_addr constant [2 x i8] c"t\00"
@.str.803 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.804 = private unnamed_addr constant [4 x i8] c"now\00"
@.str.805 = private unnamed_addr constant [4 x i8] c"now\00"
@.str.806 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.807 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.808 = private unnamed_addr constant [2 x i8] c"t\00"
@.str.809 = private unnamed_addr constant [2 x i8] c"t\00"
@.str.810 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.811 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.812 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.813 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.814 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.815 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.816 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.817 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.818 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.819 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.820 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.821 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.822 = private unnamed_addr constant [7 x i8] c"t.addr\00"
@.str.823 = private unnamed_addr constant [11 x i8] c"wtime_.sec\00"
@.str.824 = private unnamed_addr constant [3 x i8] c"tv\00"
@.str.825 = private unnamed_addr constant [11 x i8] c"wtime_.sec\00"
@.str.826 = private unnamed_addr constant [3 x i8] c"tv\00"
@.str.827 = private unnamed_addr constant [11 x i8] c"wtime_.sec\00"
@.str.828 = private unnamed_addr constant [3 x i8] c"tv\00"
@.str.829 = private unnamed_addr constant [7 x i8] c"t.addr\00"
@.str.830 = private unnamed_addr constant [7 x i8] c"t.addr\00"

; Function Attrs: nounwind uwtable
define double @randlc(double* %X, double* %A) #0 !dbg !78 {
entry:
  %X.addr = alloca double*, align 8
  %A.addr = alloca double*, align 8
  %T1 = alloca double, align 8
  %T2 = alloca double, align 8
  %T3 = alloca double, align 8
  %T4 = alloca double, align 8
  %A1 = alloca double, align 8
  %A2 = alloca double, align 8
  %X1 = alloca double, align 8
  %X2 = alloca double, align 8
  %Z = alloca double, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %0 = ptrtoint double** %X.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i32 0))
  store double* %X, double** %X.addr, align 8
  call void @llvm.dbg.declare(metadata double** %X.addr, metadata !81, metadata !82), !dbg !83
  %1 = ptrtoint double** %A.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.32, i32 0, i32 0))
  store double* %A, double** %A.addr, align 8
  call void @llvm.dbg.declare(metadata double** %A.addr, metadata !84, metadata !82), !dbg !85
  call void @llvm.dbg.declare(metadata double* %T1, metadata !86, metadata !82), !dbg !87
  call void @llvm.dbg.declare(metadata double* %T2, metadata !88, metadata !82), !dbg !89
  call void @llvm.dbg.declare(metadata double* %T3, metadata !90, metadata !82), !dbg !91
  call void @llvm.dbg.declare(metadata double* %T4, metadata !92, metadata !82), !dbg !93
  call void @llvm.dbg.declare(metadata double* %A1, metadata !94, metadata !82), !dbg !95
  call void @llvm.dbg.declare(metadata double* %A2, metadata !96, metadata !82), !dbg !97
  call void @llvm.dbg.declare(metadata double* %X1, metadata !98, metadata !82), !dbg !99
  call void @llvm.dbg.declare(metadata double* %X2, metadata !100, metadata !82), !dbg !101
  call void @llvm.dbg.declare(metadata double* %Z, metadata !102, metadata !82), !dbg !103
  call void @llvm.dbg.declare(metadata i32* %i, metadata !104, metadata !82), !dbg !105
  call void @llvm.dbg.declare(metadata i32* %j, metadata !106, metadata !82), !dbg !107
  %2 = call i32* @_ZTWL2KS(), !dbg !108
  %3 = ptrtoint i32* %2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %3, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.33, i32 0, i32 0))
  %4 = load i32, i32* %2, align 4, !dbg !108
  %cmp = icmp eq i32 %4, 0, !dbg !110
  br i1 %cmp, label %if.then, label %if.end, !dbg !111

if.then:                                          ; preds = %entry
  %5 = call double* @_ZTWL3R23(), !dbg !112
  %6 = ptrtoint double* %5 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.34, i32 0, i32 0))
  store double 1.000000e+00, double* %5, align 8, !dbg !114
  %7 = call double* @_ZTWL3R46(), !dbg !115
  %8 = ptrtoint double* %7 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %8, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.35, i32 0, i32 0))
  store double 1.000000e+00, double* %7, align 8, !dbg !116
  %9 = call double* @_ZTWL3T23(), !dbg !117
  %10 = ptrtoint double* %9 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %10, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.36, i32 0, i32 0))
  store double 1.000000e+00, double* %9, align 8, !dbg !118
  %11 = call double* @_ZTWL3T46(), !dbg !119
  %12 = ptrtoint double* %11 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %12, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.37, i32 0, i32 0))
  store double 1.000000e+00, double* %11, align 8, !dbg !120
  %13 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %13, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i32 0, i32 0))
  store i32 1, i32* %i, align 4, !dbg !121
  br label %for.cond, !dbg !123

for.cond:                                         ; preds = %for.inc, %if.then
  %14 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %14, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.39, i32 0, i32 0))
  %15 = load i32, i32* %i, align 4, !dbg !124
  %cmp1 = icmp sle i32 %15, 23, !dbg !127
  br i1 %cmp1, label %for.body, label %for.end, !dbg !128

for.body:                                         ; preds = %for.cond
  %16 = call double* @_ZTWL3R23(), !dbg !129
  %17 = ptrtoint double* %16 to i64
  call void @__DiscoPoPOpenMPRead(i64 %17, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.40, i32 0, i32 0))
  %18 = load double, double* %16, align 8, !dbg !129
  %mul = fmul double 5.000000e-01, %18, !dbg !131
  %19 = call double* @_ZTWL3R23(), !dbg !132
  %20 = ptrtoint double* %19 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %20, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.41, i32 0, i32 0))
  store double %mul, double* %19, align 8, !dbg !134
  %21 = call double* @_ZTWL3T23(), !dbg !135
  %22 = ptrtoint double* %21 to i64
  call void @__DiscoPoPOpenMPRead(i64 %22, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.42, i32 0, i32 0))
  %23 = load double, double* %21, align 8, !dbg !135
  %mul2 = fmul double 2.000000e+00, %23, !dbg !136
  %24 = call double* @_ZTWL3T23(), !dbg !137
  %25 = ptrtoint double* %24 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %25, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.43, i32 0, i32 0))
  store double %mul2, double* %24, align 8, !dbg !138
  br label %for.inc, !dbg !139

for.inc:                                          ; preds = %for.body
  %26 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %26, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.44, i32 0, i32 0))
  %27 = load i32, i32* %i, align 4, !dbg !140
  %inc = add nsw i32 %27, 1, !dbg !140
  %28 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %28, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.45, i32 0, i32 0))
  store i32 %inc, i32* %i, align 4, !dbg !140
  br label %for.cond, !dbg !142

for.end:                                          ; preds = %for.cond
  %29 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %29, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.46, i32 0, i32 0))
  store i32 1, i32* %i, align 4, !dbg !143
  br label %for.cond3, !dbg !145

for.cond3:                                        ; preds = %for.inc8, %for.end
  %30 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %30, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.47, i32 0, i32 0))
  %31 = load i32, i32* %i, align 4, !dbg !146
  %cmp4 = icmp sle i32 %31, 46, !dbg !149
  br i1 %cmp4, label %for.body5, label %for.end10, !dbg !150

for.body5:                                        ; preds = %for.cond3
  %32 = call double* @_ZTWL3R46(), !dbg !151
  %33 = ptrtoint double* %32 to i64
  call void @__DiscoPoPOpenMPRead(i64 %33, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.48, i32 0, i32 0))
  %34 = load double, double* %32, align 8, !dbg !151
  %mul6 = fmul double 5.000000e-01, %34, !dbg !153
  %35 = call double* @_ZTWL3R46(), !dbg !154
  %36 = ptrtoint double* %35 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %36, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.49, i32 0, i32 0))
  store double %mul6, double* %35, align 8, !dbg !156
  %37 = call double* @_ZTWL3T46(), !dbg !157
  %38 = ptrtoint double* %37 to i64
  call void @__DiscoPoPOpenMPRead(i64 %38, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.50, i32 0, i32 0))
  %39 = load double, double* %37, align 8, !dbg !157
  %mul7 = fmul double 2.000000e+00, %39, !dbg !158
  %40 = call double* @_ZTWL3T46(), !dbg !159
  %41 = ptrtoint double* %40 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %41, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.51, i32 0, i32 0))
  store double %mul7, double* %40, align 8, !dbg !160
  br label %for.inc8, !dbg !161

for.inc8:                                         ; preds = %for.body5
  %42 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %42, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.52, i32 0, i32 0))
  %43 = load i32, i32* %i, align 4, !dbg !162
  %inc9 = add nsw i32 %43, 1, !dbg !162
  %44 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %44, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.53, i32 0, i32 0))
  store i32 %inc9, i32* %i, align 4, !dbg !162
  br label %for.cond3, !dbg !164

for.end10:                                        ; preds = %for.cond3
  %45 = call i32* @_ZTWL2KS(), !dbg !165
  %46 = ptrtoint i32* %45 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %46, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.54, i32 0, i32 0))
  store i32 1, i32* %45, align 4, !dbg !166
  br label %if.end, !dbg !167

if.end:                                           ; preds = %for.end10, %entry
  %47 = call double* @_ZTWL3R23(), !dbg !168
  %48 = ptrtoint double* %47 to i64
  call void @__DiscoPoPOpenMPRead(i64 %48, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.55, i32 0, i32 0))
  %49 = load double, double* %47, align 8, !dbg !168
  %50 = ptrtoint double** %A.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %50, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.56, i32 0, i32 0))
  %51 = load double*, double** %A.addr, align 8, !dbg !169
  %52 = ptrtoint double* %51 to i64
  call void @__DiscoPoPOpenMPRead(i64 %52, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.57, i32 0, i32 0))
  %53 = load double, double* %51, align 8, !dbg !170
  %mul11 = fmul double %49, %53, !dbg !171
  %54 = ptrtoint double* %T1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %54, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58, i32 0, i32 0))
  store double %mul11, double* %T1, align 8, !dbg !172
  %55 = ptrtoint double* %T1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %55, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.59, i32 0, i32 0))
  %56 = load double, double* %T1, align 8, !dbg !173
  %conv = fptosi double %56 to i32, !dbg !173
  %57 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %57, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.60, i32 0, i32 0))
  store i32 %conv, i32* %j, align 4, !dbg !174
  %58 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %58, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.61, i32 0, i32 0))
  %59 = load i32, i32* %j, align 4, !dbg !175
  %conv12 = sitofp i32 %59 to double, !dbg !175
  %60 = ptrtoint double* %A1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %60, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.62, i32 0, i32 0))
  store double %conv12, double* %A1, align 8, !dbg !176
  %61 = ptrtoint double** %A.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %61, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.63, i32 0, i32 0))
  %62 = load double*, double** %A.addr, align 8, !dbg !177
  %63 = ptrtoint double* %62 to i64
  call void @__DiscoPoPOpenMPRead(i64 %63, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.64, i32 0, i32 0))
  %64 = load double, double* %62, align 8, !dbg !178
  %65 = call double* @_ZTWL3T23(), !dbg !179
  %66 = ptrtoint double* %65 to i64
  call void @__DiscoPoPOpenMPRead(i64 %66, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.65, i32 0, i32 0))
  %67 = load double, double* %65, align 8, !dbg !179
  %68 = ptrtoint double* %A1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %68, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i32 0, i32 0))
  %69 = load double, double* %A1, align 8, !dbg !180
  %mul13 = fmul double %67, %69, !dbg !181
  %sub = fsub double %64, %mul13, !dbg !182
  %70 = ptrtoint double* %A2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %70, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.67, i32 0, i32 0))
  store double %sub, double* %A2, align 8, !dbg !183
  %71 = call double* @_ZTWL3R23(), !dbg !184
  %72 = ptrtoint double* %71 to i64
  call void @__DiscoPoPOpenMPRead(i64 %72, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.68, i32 0, i32 0))
  %73 = load double, double* %71, align 8, !dbg !184
  %74 = ptrtoint double** %X.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %74, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.69, i32 0, i32 0))
  %75 = load double*, double** %X.addr, align 8, !dbg !185
  %76 = ptrtoint double* %75 to i64
  call void @__DiscoPoPOpenMPRead(i64 %76, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.70, i32 0, i32 0))
  %77 = load double, double* %75, align 8, !dbg !186
  %mul14 = fmul double %73, %77, !dbg !187
  %78 = ptrtoint double* %T1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %78, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.71, i32 0, i32 0))
  store double %mul14, double* %T1, align 8, !dbg !188
  %79 = ptrtoint double* %T1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %79, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.72, i32 0, i32 0))
  %80 = load double, double* %T1, align 8, !dbg !189
  %conv15 = fptosi double %80 to i32, !dbg !189
  %81 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %81, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.73, i32 0, i32 0))
  store i32 %conv15, i32* %j, align 4, !dbg !190
  %82 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %82, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.74, i32 0, i32 0))
  %83 = load i32, i32* %j, align 4, !dbg !191
  %conv16 = sitofp i32 %83 to double, !dbg !191
  %84 = ptrtoint double* %X1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %84, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.75, i32 0, i32 0))
  store double %conv16, double* %X1, align 8, !dbg !192
  %85 = ptrtoint double** %X.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %85, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0))
  %86 = load double*, double** %X.addr, align 8, !dbg !193
  %87 = ptrtoint double* %86 to i64
  call void @__DiscoPoPOpenMPRead(i64 %87, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.77, i32 0, i32 0))
  %88 = load double, double* %86, align 8, !dbg !194
  %89 = call double* @_ZTWL3T23(), !dbg !195
  %90 = ptrtoint double* %89 to i64
  call void @__DiscoPoPOpenMPRead(i64 %90, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.78, i32 0, i32 0))
  %91 = load double, double* %89, align 8, !dbg !195
  %92 = ptrtoint double* %X1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %92, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.79, i32 0, i32 0))
  %93 = load double, double* %X1, align 8, !dbg !196
  %mul17 = fmul double %91, %93, !dbg !197
  %sub18 = fsub double %88, %mul17, !dbg !198
  %94 = ptrtoint double* %X2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %94, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.80, i32 0, i32 0))
  store double %sub18, double* %X2, align 8, !dbg !199
  %95 = ptrtoint double* %A1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %95, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.81, i32 0, i32 0))
  %96 = load double, double* %A1, align 8, !dbg !200
  %97 = ptrtoint double* %X2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %97, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.82, i32 0, i32 0))
  %98 = load double, double* %X2, align 8, !dbg !201
  %mul19 = fmul double %96, %98, !dbg !202
  %99 = ptrtoint double* %A2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %99, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.83, i32 0, i32 0))
  %100 = load double, double* %A2, align 8, !dbg !203
  %101 = ptrtoint double* %X1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %101, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.84, i32 0, i32 0))
  %102 = load double, double* %X1, align 8, !dbg !204
  %mul20 = fmul double %100, %102, !dbg !205
  %add = fadd double %mul19, %mul20, !dbg !206
  %103 = ptrtoint double* %T1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %103, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.85, i32 0, i32 0))
  store double %add, double* %T1, align 8, !dbg !207
  %104 = call double* @_ZTWL3R23(), !dbg !208
  %105 = ptrtoint double* %104 to i64
  call void @__DiscoPoPOpenMPRead(i64 %105, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.86, i32 0, i32 0))
  %106 = load double, double* %104, align 8, !dbg !208
  %107 = ptrtoint double* %T1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %107, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.87, i32 0, i32 0))
  %108 = load double, double* %T1, align 8, !dbg !209
  %mul21 = fmul double %106, %108, !dbg !210
  %conv22 = fptosi double %mul21 to i32, !dbg !208
  %109 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %109, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.88, i32 0, i32 0))
  store i32 %conv22, i32* %j, align 4, !dbg !211
  %110 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %110, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.89, i32 0, i32 0))
  %111 = load i32, i32* %j, align 4, !dbg !212
  %conv23 = sitofp i32 %111 to double, !dbg !212
  %112 = ptrtoint double* %T2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %112, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.90, i32 0, i32 0))
  store double %conv23, double* %T2, align 8, !dbg !213
  %113 = ptrtoint double* %T1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %113, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.91, i32 0, i32 0))
  %114 = load double, double* %T1, align 8, !dbg !214
  %115 = call double* @_ZTWL3T23(), !dbg !215
  %116 = ptrtoint double* %115 to i64
  call void @__DiscoPoPOpenMPRead(i64 %116, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.92, i32 0, i32 0))
  %117 = load double, double* %115, align 8, !dbg !215
  %118 = ptrtoint double* %T2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %118, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.93, i32 0, i32 0))
  %119 = load double, double* %T2, align 8, !dbg !216
  %mul24 = fmul double %117, %119, !dbg !217
  %sub25 = fsub double %114, %mul24, !dbg !218
  %120 = ptrtoint double* %Z to i64
  call void @__DiscoPoPOpenMPWrite(i64 %120, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.94, i32 0, i32 0))
  store double %sub25, double* %Z, align 8, !dbg !219
  %121 = call double* @_ZTWL3T23(), !dbg !220
  %122 = ptrtoint double* %121 to i64
  call void @__DiscoPoPOpenMPRead(i64 %122, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.95, i32 0, i32 0))
  %123 = load double, double* %121, align 8, !dbg !220
  %124 = ptrtoint double* %Z to i64
  call void @__DiscoPoPOpenMPRead(i64 %124, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.96, i32 0, i32 0))
  %125 = load double, double* %Z, align 8, !dbg !221
  %mul26 = fmul double %123, %125, !dbg !222
  %126 = ptrtoint double* %A2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %126, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.97, i32 0, i32 0))
  %127 = load double, double* %A2, align 8, !dbg !223
  %128 = ptrtoint double* %X2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %128, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.98, i32 0, i32 0))
  %129 = load double, double* %X2, align 8, !dbg !224
  %mul27 = fmul double %127, %129, !dbg !225
  %add28 = fadd double %mul26, %mul27, !dbg !226
  %130 = ptrtoint double* %T3 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %130, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.99, i32 0, i32 0))
  store double %add28, double* %T3, align 8, !dbg !227
  %131 = call double* @_ZTWL3R46(), !dbg !228
  %132 = ptrtoint double* %131 to i64
  call void @__DiscoPoPOpenMPRead(i64 %132, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.100, i32 0, i32 0))
  %133 = load double, double* %131, align 8, !dbg !228
  %134 = ptrtoint double* %T3 to i64
  call void @__DiscoPoPOpenMPRead(i64 %134, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.101, i32 0, i32 0))
  %135 = load double, double* %T3, align 8, !dbg !229
  %mul29 = fmul double %133, %135, !dbg !230
  %conv30 = fptosi double %mul29 to i32, !dbg !228
  %136 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %136, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.102, i32 0, i32 0))
  store i32 %conv30, i32* %j, align 4, !dbg !231
  %137 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %137, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.103, i32 0, i32 0))
  %138 = load i32, i32* %j, align 4, !dbg !232
  %conv31 = sitofp i32 %138 to double, !dbg !232
  %139 = ptrtoint double* %T4 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %139, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.104, i32 0, i32 0))
  store double %conv31, double* %T4, align 8, !dbg !233
  %140 = ptrtoint double* %T3 to i64
  call void @__DiscoPoPOpenMPRead(i64 %140, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.105, i32 0, i32 0))
  %141 = load double, double* %T3, align 8, !dbg !234
  %142 = call double* @_ZTWL3T46(), !dbg !235
  %143 = ptrtoint double* %142 to i64
  call void @__DiscoPoPOpenMPRead(i64 %143, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.106, i32 0, i32 0))
  %144 = load double, double* %142, align 8, !dbg !235
  %145 = ptrtoint double* %T4 to i64
  call void @__DiscoPoPOpenMPRead(i64 %145, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.107, i32 0, i32 0))
  %146 = load double, double* %T4, align 8, !dbg !236
  %mul32 = fmul double %144, %146, !dbg !237
  %sub33 = fsub double %141, %mul32, !dbg !238
  %147 = ptrtoint double** %X.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %147, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.108, i32 0, i32 0))
  %148 = load double*, double** %X.addr, align 8, !dbg !239
  %149 = ptrtoint double* %148 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %149, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.109, i32 0, i32 0))
  store double %sub33, double* %148, align 8, !dbg !240
  %150 = call double* @_ZTWL3R46(), !dbg !241
  %151 = ptrtoint double* %150 to i64
  call void @__DiscoPoPOpenMPRead(i64 %151, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.110, i32 0, i32 0))
  %152 = load double, double* %150, align 8, !dbg !241
  %153 = ptrtoint double** %X.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %153, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.111, i32 0, i32 0))
  %154 = load double*, double** %X.addr, align 8, !dbg !242
  %155 = ptrtoint double* %154 to i64
  call void @__DiscoPoPOpenMPRead(i64 %155, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.112, i32 0, i32 0))
  %156 = load double, double* %154, align 8, !dbg !243
  %mul34 = fmul double %152, %156, !dbg !244
  ret double %mul34, !dbg !245
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind uwtable
define internal i32* @_ZTWL2KS() #0 {
  ret i32* @KS
}

; Function Attrs: nounwind uwtable
define internal double* @_ZTWL3R23() #0 {
  ret double* @R23
}

; Function Attrs: nounwind uwtable
define internal double* @_ZTWL3R46() #0 {
  ret double* @R46
}

; Function Attrs: nounwind uwtable
define internal double* @_ZTWL3T23() #0 {
  ret double* @T23
}

; Function Attrs: nounwind uwtable
define internal double* @_ZTWL3T46() #0 {
  ret double* @T46
}

; Function Attrs: nounwind uwtable
define double @find_my_seed(i32 %kn, i32 %np, i64 %nn, double %s, double %a) #0 !dbg !246 {
entry:
  %retval = alloca double, align 8
  %kn.addr = alloca i32, align 4
  %np.addr = alloca i32, align 4
  %nn.addr = alloca i64, align 8
  %s.addr = alloca double, align 8
  %a.addr = alloca double, align 8
  %t1 = alloca double, align 8
  %t2 = alloca double, align 8
  %mq = alloca i64, align 8
  %nq = alloca i64, align 8
  %kk = alloca i64, align 8
  %ik = alloca i64, align 8
  %0 = ptrtoint i32* %kn.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.113, i32 0, i32 0))
  store i32 %kn, i32* %kn.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %kn.addr, metadata !249, metadata !82), !dbg !250
  %1 = ptrtoint i32* %np.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.114, i32 0, i32 0))
  store i32 %np, i32* %np.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %np.addr, metadata !251, metadata !82), !dbg !252
  %2 = ptrtoint i64* %nn.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.115, i32 0, i32 0))
  store i64 %nn, i64* %nn.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %nn.addr, metadata !253, metadata !82), !dbg !254
  %3 = ptrtoint double* %s.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.116, i32 0, i32 0))
  store double %s, double* %s.addr, align 8
  call void @llvm.dbg.declare(metadata double* %s.addr, metadata !255, metadata !82), !dbg !256
  %4 = ptrtoint double* %a.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.117, i32 0, i32 0))
  store double %a, double* %a.addr, align 8
  call void @llvm.dbg.declare(metadata double* %a.addr, metadata !257, metadata !82), !dbg !258
  call void @llvm.dbg.declare(metadata double* %t1, metadata !259, metadata !82), !dbg !260
  call void @llvm.dbg.declare(metadata double* %t2, metadata !261, metadata !82), !dbg !262
  call void @llvm.dbg.declare(metadata i64* %mq, metadata !263, metadata !82), !dbg !264
  call void @llvm.dbg.declare(metadata i64* %nq, metadata !265, metadata !82), !dbg !266
  call void @llvm.dbg.declare(metadata i64* %kk, metadata !267, metadata !82), !dbg !268
  call void @llvm.dbg.declare(metadata i64* %ik, metadata !269, metadata !82), !dbg !270
  %5 = ptrtoint i32* %kn.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %5, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.118, i32 0, i32 0))
  %6 = load i32, i32* %kn.addr, align 4, !dbg !271
  %cmp = icmp eq i32 %6, 0, !dbg !273
  br i1 %cmp, label %if.then, label %if.end, !dbg !274

if.then:                                          ; preds = %entry
  %7 = ptrtoint double* %s.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %7, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.119, i32 0, i32 0))
  %8 = load double, double* %s.addr, align 8, !dbg !275
  store double %8, double* %retval, align 8, !dbg !277
  br label %return, !dbg !277

if.end:                                           ; preds = %entry
  %9 = ptrtoint i64* %nn.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %9, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.120, i32 0, i32 0))
  %10 = load i64, i64* %nn.addr, align 8, !dbg !278
  %div = sdiv i64 %10, 4, !dbg !279
  %11 = ptrtoint i32* %np.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %11, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.121, i32 0, i32 0))
  %12 = load i32, i32* %np.addr, align 4, !dbg !280
  %conv = sext i32 %12 to i64, !dbg !280
  %add = add nsw i64 %div, %conv, !dbg !281
  %sub = sub nsw i64 %add, 1, !dbg !282
  %13 = ptrtoint i32* %np.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %13, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.122, i32 0, i32 0))
  %14 = load i32, i32* %np.addr, align 4, !dbg !283
  %conv1 = sext i32 %14 to i64, !dbg !283
  %div2 = sdiv i64 %sub, %conv1, !dbg !284
  %15 = ptrtoint i64* %mq to i64
  call void @__DiscoPoPOpenMPWrite(i64 %15, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.123, i32 0, i32 0))
  store i64 %div2, i64* %mq, align 8, !dbg !285
  %16 = ptrtoint i64* %mq to i64
  call void @__DiscoPoPOpenMPRead(i64 %16, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.124, i32 0, i32 0))
  %17 = load i64, i64* %mq, align 8, !dbg !286
  %mul = mul nsw i64 %17, 4, !dbg !287
  %18 = ptrtoint i32* %kn.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %18, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.125, i32 0, i32 0))
  %19 = load i32, i32* %kn.addr, align 4, !dbg !288
  %conv3 = sext i32 %19 to i64, !dbg !288
  %mul4 = mul nsw i64 %mul, %conv3, !dbg !289
  %20 = ptrtoint i64* %nq to i64
  call void @__DiscoPoPOpenMPWrite(i64 %20, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.126, i32 0, i32 0))
  store i64 %mul4, i64* %nq, align 8, !dbg !290
  %21 = ptrtoint double* %s.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %21, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.127, i32 0, i32 0))
  %22 = load double, double* %s.addr, align 8, !dbg !291
  %23 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %23, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.128, i32 0, i32 0))
  store double %22, double* %t1, align 8, !dbg !292
  %24 = ptrtoint double* %a.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %24, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.129, i32 0, i32 0))
  %25 = load double, double* %a.addr, align 8, !dbg !293
  %26 = ptrtoint double* %t2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %26, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.130, i32 0, i32 0))
  store double %25, double* %t2, align 8, !dbg !294
  %27 = ptrtoint i64* %nq to i64
  call void @__DiscoPoPOpenMPRead(i64 %27, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.131, i32 0, i32 0))
  %28 = load i64, i64* %nq, align 8, !dbg !295
  %29 = ptrtoint i64* %kk to i64
  call void @__DiscoPoPOpenMPWrite(i64 %29, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.132, i32 0, i32 0))
  store i64 %28, i64* %kk, align 8, !dbg !296
  br label %while.cond, !dbg !297

while.cond:                                       ; preds = %if.end14, %if.end
  %30 = ptrtoint i64* %kk to i64
  call void @__DiscoPoPOpenMPRead(i64 %30, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.133, i32 0, i32 0))
  %31 = load i64, i64* %kk, align 8, !dbg !298
  %cmp5 = icmp sgt i64 %31, 1, !dbg !300
  br i1 %cmp5, label %while.body, label %while.end, !dbg !301

while.body:                                       ; preds = %while.cond
  %32 = ptrtoint i64* %kk to i64
  call void @__DiscoPoPOpenMPRead(i64 %32, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.134, i32 0, i32 0))
  %33 = load i64, i64* %kk, align 8, !dbg !302
  %div7 = sdiv i64 %33, 2, !dbg !304
  %34 = ptrtoint i64* %ik to i64
  call void @__DiscoPoPOpenMPWrite(i64 %34, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.135, i32 0, i32 0))
  store i64 %div7, i64* %ik, align 8, !dbg !305
  %35 = ptrtoint i64* %ik to i64
  call void @__DiscoPoPOpenMPRead(i64 %35, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.136, i32 0, i32 0))
  %36 = load i64, i64* %ik, align 8, !dbg !306
  %mul8 = mul nsw i64 2, %36, !dbg !308
  %37 = ptrtoint i64* %kk to i64
  call void @__DiscoPoPOpenMPRead(i64 %37, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.137, i32 0, i32 0))
  %38 = load i64, i64* %kk, align 8, !dbg !309
  %cmp9 = icmp eq i64 %mul8, %38, !dbg !310
  br i1 %cmp9, label %if.then11, label %if.else, !dbg !311

if.then11:                                        ; preds = %while.body
  %call = call double @randlc(double* %t2, double* %t2), !dbg !312
  %39 = ptrtoint i64* %ik to i64
  call void @__DiscoPoPOpenMPRead(i64 %39, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.138, i32 0, i32 0))
  %40 = load i64, i64* %ik, align 8, !dbg !314
  %41 = ptrtoint i64* %kk to i64
  call void @__DiscoPoPOpenMPWrite(i64 %41, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.139, i32 0, i32 0))
  store i64 %40, i64* %kk, align 8, !dbg !315
  br label %if.end14, !dbg !316

if.else:                                          ; preds = %while.body
  %call12 = call double @randlc(double* %t1, double* %t2), !dbg !317
  %42 = ptrtoint i64* %kk to i64
  call void @__DiscoPoPOpenMPRead(i64 %42, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.140, i32 0, i32 0))
  %43 = load i64, i64* %kk, align 8, !dbg !319
  %sub13 = sub nsw i64 %43, 1, !dbg !320
  %44 = ptrtoint i64* %kk to i64
  call void @__DiscoPoPOpenMPWrite(i64 %44, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.141, i32 0, i32 0))
  store i64 %sub13, i64* %kk, align 8, !dbg !321
  br label %if.end14

if.end14:                                         ; preds = %if.else, %if.then11
  br label %while.cond, !dbg !322

while.end:                                        ; preds = %while.cond
  %call15 = call double @randlc(double* %t1, double* %t2), !dbg !324
  %45 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %45, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.142, i32 0, i32 0))
  %46 = load double, double* %t1, align 8, !dbg !325
  store double %46, double* %retval, align 8, !dbg !326
  br label %return, !dbg !326

return:                                           ; preds = %while.end, %if.then
  %47 = ptrtoint double* %retval to i64
  call void @__DiscoPoPOpenMPRead(i64 %47, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.143, i32 0, i32 0))
  %48 = load double, double* %retval, align 8, !dbg !327
  ret double %48, !dbg !327
}

; Function Attrs: nounwind uwtable
define void @create_seq(double %seed, double %a) #0 !dbg !328 {
entry:
  %seed.addr = alloca double, align 8
  %a.addr = alloca double, align 8
  %x = alloca double, align 8
  %s = alloca double, align 8
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  %2 = ptrtoint double* %seed.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.144, i32 0, i32 0))
  store double %seed, double* %seed.addr, align 8
  call void @llvm.dbg.declare(metadata double* %seed.addr, metadata !331, metadata !82), !dbg !332
  %3 = ptrtoint double* %a.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.145, i32 0, i32 0))
  store double %a, double* %a.addr, align 8
  call void @llvm.dbg.declare(metadata double* %a.addr, metadata !333, metadata !82), !dbg !334
  call void @llvm.dbg.declare(metadata double* %x, metadata !335, metadata !82), !dbg !336
  call void @llvm.dbg.declare(metadata double* %s, metadata !337, metadata !82), !dbg !338
  call void @llvm.dbg.declare(metadata i32* %i, metadata !339, metadata !82), !dbg !340
  call void @llvm.dbg.declare(metadata i32* %k, metadata !341, metadata !82), !dbg !342
  %4 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !343
  %5 = ptrtoint i8** %4 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.146, i32 0, i32 0))
  store i8* getelementptr inbounds ([25 x i8], [25 x i8]* @1, i32 0, i32 0), i8** %4, align 8, !dbg !343
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([125 x i8], [125 x i8]* @.str.148, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* %.kmpc_loc.addr, i32 2, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, double*, double*)* @.omp_outlined. to void (i32*, i32*, ...)*), double* %a.addr, double* %seed.addr), !dbg !343
  ret void, !dbg !344
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #2

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined.(i32* noalias %.global_tid., i32* noalias %.bound_tid., double* dereferenceable(8) %a, double* dereferenceable(8) %seed) #0 !dbg !345 {
entry:
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.150, i32 0, i32 0))
  %.global_tid..addr = alloca i32*, align 8
  %.bound_tid..addr = alloca i32*, align 8
  %a.addr = alloca double*, align 8
  %seed.addr = alloca double*, align 8
  %x = alloca double, align 8
  %s = alloca double, align 8
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %k1 = alloca i32, align 4
  %k2 = alloca i32, align 4
  %an = alloca double, align 8
  %myid = alloca i32, align 4
  %num_procs = alloca i32, align 4
  %mq = alloca i32, align 4
  %0 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.151, i32 0, i32 0))
  store i32* %.global_tid., i32** %.global_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.global_tid..addr, metadata !352, metadata !82), !dbg !353
  %1 = ptrtoint i32** %.bound_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.152, i32 0, i32 0))
  store i32* %.bound_tid., i32** %.bound_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.bound_tid..addr, metadata !354, metadata !82), !dbg !353
  %2 = ptrtoint double** %a.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.153, i32 0, i32 0))
  store double* %a, double** %a.addr, align 8
  call void @llvm.dbg.declare(metadata double** %a.addr, metadata !355, metadata !82), !dbg !353
  %3 = ptrtoint double** %seed.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.154, i32 0, i32 0))
  store double* %seed, double** %seed.addr, align 8
  call void @llvm.dbg.declare(metadata double** %seed.addr, metadata !356, metadata !82), !dbg !353
  %4 = ptrtoint double** %a.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %4, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.155, i32 0, i32 0))
  %5 = load double*, double** %a.addr, align 8, !dbg !357
  %6 = ptrtoint double** %seed.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %6, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.156, i32 0, i32 0))
  %7 = load double*, double** %seed.addr, align 8, !dbg !357
  call void @llvm.dbg.declare(metadata double* %x, metadata !358, metadata !82), !dbg !353
  call void @llvm.dbg.declare(metadata double* %s, metadata !359, metadata !82), !dbg !353
  call void @llvm.dbg.declare(metadata i32* %i, metadata !360, metadata !82), !dbg !353
  call void @llvm.dbg.declare(metadata i32* %k, metadata !361, metadata !82), !dbg !353
  call void @llvm.dbg.declare(metadata i32* %k1, metadata !362, metadata !82), !dbg !364
  call void @llvm.dbg.declare(metadata i32* %k2, metadata !365, metadata !82), !dbg !366
  call void @llvm.dbg.declare(metadata double* %an, metadata !367, metadata !82), !dbg !368
  %8 = ptrtoint double* %5 to i64
  call void @__DiscoPoPOpenMPRead(i64 %8, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.157, i32 0, i32 0))
  %9 = load double, double* %5, align 8, !dbg !369
  %10 = ptrtoint double* %an to i64
  call void @__DiscoPoPOpenMPWrite(i64 %10, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.158, i32 0, i32 0))
  store double %9, double* %an, align 8, !dbg !368
  call void @llvm.dbg.declare(metadata i32* %myid, metadata !370, metadata !82), !dbg !371
  call void @llvm.dbg.declare(metadata i32* %num_procs, metadata !372, metadata !82), !dbg !373
  call void @llvm.dbg.declare(metadata i32* %mq, metadata !374, metadata !82), !dbg !375
  %call = call i32 @omp_get_thread_num(), !dbg !376
  %11 = ptrtoint i32* %myid to i64
  call void @__DiscoPoPOpenMPWrite(i64 %11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.159, i32 0, i32 0))
  store i32 %call, i32* %myid, align 4, !dbg !377
  %call1 = call i32 @omp_get_num_threads(), !dbg !378
  %12 = ptrtoint i32* %num_procs to i64
  call void @__DiscoPoPOpenMPWrite(i64 %12, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.160, i32 0, i32 0))
  store i32 %call1, i32* %num_procs, align 4, !dbg !379
  %13 = ptrtoint i32* %num_procs to i64
  call void @__DiscoPoPOpenMPRead(i64 %13, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.161, i32 0, i32 0))
  %14 = load i32, i32* %num_procs, align 4, !dbg !380
  %add = add nsw i32 65536, %14, !dbg !381
  %sub = sub nsw i32 %add, 1, !dbg !382
  %15 = ptrtoint i32* %num_procs to i64
  call void @__DiscoPoPOpenMPRead(i64 %15, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.162, i32 0, i32 0))
  %16 = load i32, i32* %num_procs, align 4, !dbg !383
  %div = sdiv i32 %sub, %16, !dbg !384
  %17 = ptrtoint i32* %mq to i64
  call void @__DiscoPoPOpenMPWrite(i64 %17, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.163, i32 0, i32 0))
  store i32 %div, i32* %mq, align 4, !dbg !385
  %18 = ptrtoint i32* %mq to i64
  call void @__DiscoPoPOpenMPRead(i64 %18, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.164, i32 0, i32 0))
  %19 = load i32, i32* %mq, align 4, !dbg !386
  %20 = ptrtoint i32* %myid to i64
  call void @__DiscoPoPOpenMPRead(i64 %20, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.165, i32 0, i32 0))
  %21 = load i32, i32* %myid, align 4, !dbg !387
  %mul = mul nsw i32 %19, %21, !dbg !388
  %22 = ptrtoint i32* %k1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %22, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.166, i32 0, i32 0))
  store i32 %mul, i32* %k1, align 4, !dbg !389
  %23 = ptrtoint i32* %k1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %23, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.167, i32 0, i32 0))
  %24 = load i32, i32* %k1, align 4, !dbg !390
  %25 = ptrtoint i32* %mq to i64
  call void @__DiscoPoPOpenMPRead(i64 %25, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.168, i32 0, i32 0))
  %26 = load i32, i32* %mq, align 4, !dbg !391
  %add2 = add nsw i32 %24, %26, !dbg !392
  %27 = ptrtoint i32* %k2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %27, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.169, i32 0, i32 0))
  store i32 %add2, i32* %k2, align 4, !dbg !393
  %28 = ptrtoint i32* %k2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %28, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.170, i32 0, i32 0))
  %29 = load i32, i32* %k2, align 4, !dbg !394
  %cmp = icmp sgt i32 %29, 65536, !dbg !396
  br i1 %cmp, label %if.then, label %if.end, !dbg !397

if.then:                                          ; preds = %entry
  %30 = ptrtoint i32* %k2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %30, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.171, i32 0, i32 0))
  store i32 65536, i32* %k2, align 4, !dbg !398
  br label %if.end, !dbg !400

if.end:                                           ; preds = %if.then, %entry
  %31 = call i32* @_ZTWL2KS(), !dbg !401
  %32 = ptrtoint i32* %31 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %32, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.172, i32 0, i32 0))
  store i32 0, i32* %31, align 4, !dbg !402
  %33 = ptrtoint i32* %myid to i64
  call void @__DiscoPoPOpenMPRead(i64 %33, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.173, i32 0, i32 0))
  %34 = load i32, i32* %myid, align 4, !dbg !403
  %35 = ptrtoint i32* %num_procs to i64
  call void @__DiscoPoPOpenMPRead(i64 %35, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.174, i32 0, i32 0))
  %36 = load i32, i32* %num_procs, align 4, !dbg !404
  %37 = ptrtoint double* %7 to i64
  call void @__DiscoPoPOpenMPRead(i64 %37, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.175, i32 0, i32 0))
  %38 = load double, double* %7, align 8, !dbg !405
  %39 = ptrtoint double* %an to i64
  call void @__DiscoPoPOpenMPRead(i64 %39, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.176, i32 0, i32 0))
  %40 = load double, double* %an, align 8, !dbg !406
  %call3 = call double @find_my_seed(i32 %34, i32 %36, i64 262144, double %38, double %40), !dbg !407
  %41 = ptrtoint double* %s to i64
  call void @__DiscoPoPOpenMPWrite(i64 %41, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.177, i32 0, i32 0))
  store double %call3, double* %s, align 8, !dbg !408
  %42 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPWrite(i64 %42, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.178, i32 0, i32 0))
  store i32 512, i32* %k, align 4, !dbg !409
  %43 = ptrtoint i32* %k1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %43, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.179, i32 0, i32 0))
  %44 = load i32, i32* %k1, align 4, !dbg !410
  %45 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %45, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.180, i32 0, i32 0))
  store i32 %44, i32* %i, align 4, !dbg !412
  br label %for.cond, !dbg !413

for.cond:                                         ; preds = %for.inc, %if.end
  %46 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %46, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.181, i32 0, i32 0))
  %47 = load i32, i32* %i, align 4, !dbg !414
  %48 = ptrtoint i32* %k2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %48, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.182, i32 0, i32 0))
  %49 = load i32, i32* %k2, align 4, !dbg !417
  %cmp4 = icmp slt i32 %47, %49, !dbg !418
  br i1 %cmp4, label %for.body, label %for.end, !dbg !419

for.body:                                         ; preds = %for.cond
  %call5 = call double @randlc(double* %s, double* %an), !dbg !420
  %50 = ptrtoint double* %x to i64
  call void @__DiscoPoPOpenMPWrite(i64 %50, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.183, i32 0, i32 0))
  store double %call5, double* %x, align 8, !dbg !422
  %call6 = call double @randlc(double* %s, double* %an), !dbg !423
  %51 = ptrtoint double* %x to i64
  call void @__DiscoPoPOpenMPRead(i64 %51, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.184, i32 0, i32 0))
  %52 = load double, double* %x, align 8, !dbg !424
  %add7 = fadd double %52, %call6, !dbg !424
  %53 = ptrtoint double* %x to i64
  call void @__DiscoPoPOpenMPWrite(i64 %53, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.185, i32 0, i32 0))
  store double %add7, double* %x, align 8, !dbg !424
  %call8 = call double @randlc(double* %s, double* %an), !dbg !425
  %54 = ptrtoint double* %x to i64
  call void @__DiscoPoPOpenMPRead(i64 %54, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.186, i32 0, i32 0))
  %55 = load double, double* %x, align 8, !dbg !426
  %add9 = fadd double %55, %call8, !dbg !426
  %56 = ptrtoint double* %x to i64
  call void @__DiscoPoPOpenMPWrite(i64 %56, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.187, i32 0, i32 0))
  store double %add9, double* %x, align 8, !dbg !426
  %call10 = call double @randlc(double* %s, double* %an), !dbg !427
  %57 = ptrtoint double* %x to i64
  call void @__DiscoPoPOpenMPRead(i64 %57, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.188, i32 0, i32 0))
  %58 = load double, double* %x, align 8, !dbg !428
  %add11 = fadd double %58, %call10, !dbg !428
  %59 = ptrtoint double* %x to i64
  call void @__DiscoPoPOpenMPWrite(i64 %59, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.189, i32 0, i32 0))
  store double %add11, double* %x, align 8, !dbg !428
  %60 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %60, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.190, i32 0, i32 0))
  %61 = load i32, i32* %k, align 4, !dbg !429
  %conv = sitofp i32 %61 to double, !dbg !429
  %62 = ptrtoint double* %x to i64
  call void @__DiscoPoPOpenMPRead(i64 %62, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.191, i32 0, i32 0))
  %63 = load double, double* %x, align 8, !dbg !430
  %mul12 = fmul double %conv, %63, !dbg !431
  %conv13 = fptosi double %mul12 to i32, !dbg !429
  %64 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %64, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.192, i32 0, i32 0))
  %65 = load i32, i32* %i, align 4, !dbg !432
  %idxprom = sext i32 %65 to i64, !dbg !433
  %arrayidx = getelementptr inbounds [65536 x i32], [65536 x i32]* @key_array, i64 0, i64 %idxprom, !dbg !433
  %66 = ptrtoint i32* %arrayidx to i64
  call void @__DiscoPoPOpenMPWrite(i64 %66, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.193, i32 0, i32 0))
  store i32 %conv13, i32* %arrayidx, align 4, !dbg !434
  br label %for.inc, !dbg !435

for.inc:                                          ; preds = %for.body
  %67 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %67, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.194, i32 0, i32 0))
  %68 = load i32, i32* %i, align 4, !dbg !436
  %inc = add nsw i32 %68, 1, !dbg !436
  %69 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %69, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.195, i32 0, i32 0))
  store i32 %inc, i32* %i, align 4, !dbg !436
  br label %for.cond, !dbg !438

for.end:                                          ; preds = %for.cond
  call void @__DiscoPoPOpenMPAfterCall()
  ret void, !dbg !439
}

declare i32 @omp_get_thread_num() #3

declare i32 @omp_get_num_threads() #3

declare void @__kmpc_fork_call(%ident_t*, i32, void (i32*, i32*, ...)*, ...)

; Function Attrs: nounwind uwtable
define i8* @alloc_mem(i64 %size) #0 !dbg !440 {
entry:
  %size.addr = alloca i64, align 8
  %p = alloca i8*, align 8
  %0 = ptrtoint i64* %size.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.196, i32 0, i32 0))
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !446, metadata !82), !dbg !447
  call void @llvm.dbg.declare(metadata i8** %p, metadata !448, metadata !82), !dbg !449
  %1 = ptrtoint i64* %size.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %1, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.197, i32 0, i32 0))
  %2 = load i64, i64* %size.addr, align 8, !dbg !450
  %call = call noalias i8* @malloc(i64 %2) #6, !dbg !451
  %3 = ptrtoint i8** %p to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.198, i32 0, i32 0))
  store i8* %call, i8** %p, align 8, !dbg !452
  %4 = ptrtoint i8** %p to i64
  call void @__DiscoPoPOpenMPRead(i64 %4, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.199, i32 0, i32 0))
  %5 = load i8*, i8** %p, align 8, !dbg !453
  %tobool = icmp ne i8* %5, null, !dbg !453
  br i1 %tobool, label %if.end, label %if.then, !dbg !455

if.then:                                          ; preds = %entry
  call void @perror(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i32 0, i32 0)), !dbg !456
  call void @exit(i32 1) #7, !dbg !458
  unreachable, !dbg !458

if.end:                                           ; preds = %entry
  %6 = ptrtoint i8** %p to i64
  call void @__DiscoPoPOpenMPRead(i64 %6, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.200, i32 0, i32 0))
  %7 = load i8*, i8** %p, align 8, !dbg !459
  ret i8* %7, !dbg !460
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #4

declare void @perror(i8*) #3

; Function Attrs: noreturn nounwind
declare void @exit(i32) #5

; Function Attrs: nounwind uwtable
define void @alloc_key_buff() #0 !dbg !461 {
entry:
  %i = alloca i32, align 4
  %num_procs = alloca i32, align 4
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  call void @llvm.dbg.declare(metadata i32* %i, metadata !464, metadata !82), !dbg !465
  call void @llvm.dbg.declare(metadata i32* %num_procs, metadata !466, metadata !82), !dbg !467
  %call = call i32 @omp_get_max_threads(), !dbg !468
  %2 = ptrtoint i32* %num_procs to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.201, i32 0, i32 0))
  store i32 %call, i32* %num_procs, align 4, !dbg !469
  %3 = ptrtoint i32* %num_procs to i64
  call void @__DiscoPoPOpenMPRead(i64 %3, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.202, i32 0, i32 0))
  %4 = load i32, i32* %num_procs, align 4, !dbg !470
  %conv = sext i32 %4 to i64, !dbg !470
  %mul = mul i64 8, %conv, !dbg !471
  %call1 = call i8* @alloc_mem(i64 %mul), !dbg !472
  %5 = bitcast i8* %call1 to i32**, !dbg !473
  %6 = ptrtoint i32*** @bucket_size to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.203, i32 0, i32 0))
  store i32** %5, i32*** @bucket_size, align 8, !dbg !474
  %7 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.204, i32 0, i32 0))
  store i32 0, i32* %i, align 4, !dbg !475
  br label %for.cond, !dbg !477

for.cond:                                         ; preds = %for.inc, %entry
  %8 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %8, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.205, i32 0, i32 0))
  %9 = load i32, i32* %i, align 4, !dbg !478
  %10 = ptrtoint i32* %num_procs to i64
  call void @__DiscoPoPOpenMPRead(i64 %10, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.206, i32 0, i32 0))
  %11 = load i32, i32* %num_procs, align 4, !dbg !481
  %cmp = icmp slt i32 %9, %11, !dbg !482
  br i1 %cmp, label %for.body, label %for.end, !dbg !483

for.body:                                         ; preds = %for.cond
  %call3 = call i8* @alloc_mem(i64 2048), !dbg !484
  %12 = bitcast i8* %call3 to i32*, !dbg !486
  %13 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %13, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.207, i32 0, i32 0))
  %14 = load i32, i32* %i, align 4, !dbg !487
  %idxprom = sext i32 %14 to i64, !dbg !488
  %15 = ptrtoint i32*** @bucket_size to i64
  call void @__DiscoPoPOpenMPRead(i64 %15, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.208, i32 0, i32 0))
  %16 = load i32**, i32*** @bucket_size, align 8, !dbg !488
  %arrayidx = getelementptr inbounds i32*, i32** %16, i64 %idxprom, !dbg !488
  %17 = ptrtoint i32** %arrayidx to i64
  call void @__DiscoPoPOpenMPWrite(i64 %17, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.209, i32 0, i32 0))
  store i32* %12, i32** %arrayidx, align 8, !dbg !489
  br label %for.inc, !dbg !490

for.inc:                                          ; preds = %for.body
  %18 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %18, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.210, i32 0, i32 0))
  %19 = load i32, i32* %i, align 4, !dbg !491
  %inc = add nsw i32 %19, 1, !dbg !491
  %20 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %20, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.211, i32 0, i32 0))
  store i32 %inc, i32* %i, align 4, !dbg !491
  br label %for.cond, !dbg !493

for.end:                                          ; preds = %for.cond
  %21 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !494
  %22 = ptrtoint i8** %21 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %22, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.212, i32 0, i32 0))
  store i8* getelementptr inbounds ([30 x i8], [30 x i8]* @2, i32 0, i32 0), i8** %21, align 8, !dbg !494
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.214, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* %.kmpc_loc.addr, i32 1, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*)* @.omp_outlined..2 to void (i32*, i32*, ...)*), i32* %i), !dbg !494
  ret void, !dbg !495
}

declare i32 @omp_get_max_threads() #3

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..2(i32* noalias %.global_tid., i32* noalias %.bound_tid., i32* dereferenceable(4) %i) #0 !dbg !496 {
entry:
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.216, i32 0, i32 0))
  %.global_tid..addr = alloca i32*, align 8
  %.bound_tid..addr = alloca i32*, align 8
  %i.addr = alloca i32*, align 8
  %.omp.iv = alloca i32, align 4
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %i1 = alloca i32, align 4
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  %2 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.217, i32 0, i32 0))
  store i32* %.global_tid., i32** %.global_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.global_tid..addr, metadata !500, metadata !82), !dbg !501
  %3 = ptrtoint i32** %.bound_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.218, i32 0, i32 0))
  store i32* %.bound_tid., i32** %.bound_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.bound_tid..addr, metadata !502, metadata !82), !dbg !501
  %4 = ptrtoint i32** %i.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.219, i32 0, i32 0))
  store i32* %i, i32** %i.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %i.addr, metadata !503, metadata !82), !dbg !501
  %5 = ptrtoint i32** %i.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %5, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.220, i32 0, i32 0))
  %6 = load i32*, i32** %i.addr, align 8, !dbg !504
  call void @llvm.dbg.declare(metadata i32* %.omp.iv, metadata !505, metadata !82), !dbg !501
  call void @llvm.dbg.declare(metadata i32* %.omp.lb, metadata !506, metadata !82), !dbg !501
  %7 = ptrtoint i32* %.omp.lb to i64
  call void @__DiscoPoPOpenMPWrite(i64 %7, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.221, i32 0, i32 0))
  store i32 0, i32* %.omp.lb, align 4, !dbg !507
  call void @llvm.dbg.declare(metadata i32* %.omp.ub, metadata !508, metadata !82), !dbg !501
  %8 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPWrite(i64 %8, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.222, i32 0, i32 0))
  store i32 65535, i32* %.omp.ub, align 4, !dbg !507
  call void @llvm.dbg.declare(metadata i32* %.omp.stride, metadata !509, metadata !82), !dbg !501
  %9 = ptrtoint i32* %.omp.stride to i64
  call void @__DiscoPoPOpenMPWrite(i64 %9, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.223, i32 0, i32 0))
  store i32 1, i32* %.omp.stride, align 4, !dbg !507
  call void @llvm.dbg.declare(metadata i32* %.omp.is_last, metadata !510, metadata !82), !dbg !501
  %10 = ptrtoint i32* %.omp.is_last to i64
  call void @__DiscoPoPOpenMPWrite(i64 %10, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.224, i32 0, i32 0))
  store i32 0, i32* %.omp.is_last, align 4, !dbg !507
  call void @llvm.dbg.declare(metadata i32* %i1, metadata !511, metadata !82), !dbg !501
  %11 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !504
  %12 = ptrtoint i8** %11 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %12, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.225, i32 0, i32 0))
  store i8* getelementptr inbounds ([30 x i8], [30 x i8]* @2, i32 0, i32 0), i8** %11, align 8, !dbg !504
  %13 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %13, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.226, i32 0, i32 0))
  %14 = load i32*, i32** %.global_tid..addr, align 8, !dbg !504
  %15 = ptrtoint i32* %14 to i64
  call void @__DiscoPoPOpenMPRead(i64 %15, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.227, i32 0, i32 0))
  %16 = load i32, i32* %14, align 4, !dbg !504
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.229, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_for_static_init_4(%ident_t* %.kmpc_loc.addr, i32 %16, i32 34, i32* %.omp.is_last, i32* %.omp.lb, i32* %.omp.ub, i32* %.omp.stride, i32 1, i32 1), !dbg !504
  %17 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %17, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.230, i32 0, i32 0))
  %18 = load i32, i32* %.omp.ub, align 4, !dbg !507
  %cmp = icmp sgt i32 %18, 65535, !dbg !507
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !507

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !512

cond.false:                                       ; preds = %entry
  %19 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %19, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.231, i32 0, i32 0))
  %20 = load i32, i32* %.omp.ub, align 4, !dbg !514
  br label %cond.end, !dbg !514

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 65535, %cond.true ], [ %20, %cond.false ], !dbg !516
  %21 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPWrite(i64 %21, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.232, i32 0, i32 0))
  store i32 %cond, i32* %.omp.ub, align 4, !dbg !516
  %22 = ptrtoint i32* %.omp.lb to i64
  call void @__DiscoPoPOpenMPRead(i64 %22, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.233, i32 0, i32 0))
  %23 = load i32, i32* %.omp.lb, align 4, !dbg !516
  %24 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPWrite(i64 %24, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.234, i32 0, i32 0))
  store i32 %23, i32* %.omp.iv, align 4, !dbg !516
  br label %omp.inner.for.cond, !dbg !518

omp.inner.for.cond:                               ; preds = %omp.inner.for.inc, %cond.end
  %25 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %25, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.235, i32 0, i32 0))
  %26 = load i32, i32* %.omp.iv, align 4, !dbg !519
  %27 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %27, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.236, i32 0, i32 0))
  %28 = load i32, i32* %.omp.ub, align 4, !dbg !519
  %cmp2 = icmp sle i32 %26, %28, !dbg !501
  br i1 %cmp2, label %omp.inner.for.body, label %omp.inner.for.end, !dbg !521

omp.inner.for.body:                               ; preds = %omp.inner.for.cond
  %29 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %29, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.237, i32 0, i32 0))
  %30 = load i32, i32* %.omp.iv, align 4, !dbg !522
  %mul = mul nsw i32 %30, 1, !dbg !524
  %add = add nsw i32 0, %mul, !dbg !524
  %31 = ptrtoint i32* %i1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %31, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.238, i32 0, i32 0))
  store i32 %add, i32* %i1, align 4, !dbg !524
  %32 = ptrtoint i32* %i1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %32, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.239, i32 0, i32 0))
  %33 = load i32, i32* %i1, align 4, !dbg !525
  %idxprom = sext i32 %33 to i64, !dbg !526
  %arrayidx = getelementptr inbounds [65536 x i32], [65536 x i32]* @key_buff2, i64 0, i64 %idxprom, !dbg !526
  %34 = ptrtoint i32* %arrayidx to i64
  call void @__DiscoPoPOpenMPWrite(i64 %34, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.240, i32 0, i32 0))
  store i32 0, i32* %arrayidx, align 4, !dbg !527
  br label %omp.body.continue, !dbg !526

omp.body.continue:                                ; preds = %omp.inner.for.body
  br label %omp.inner.for.inc, !dbg !528

omp.inner.for.inc:                                ; preds = %omp.body.continue
  %35 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %35, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.241, i32 0, i32 0))
  %36 = load i32, i32* %.omp.iv, align 4, !dbg !529
  %add3 = add nsw i32 %36, 1, !dbg !531
  %37 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPWrite(i64 %37, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.242, i32 0, i32 0))
  store i32 %add3, i32* %.omp.iv, align 4, !dbg !531
  br label %omp.inner.for.cond, !dbg !532

omp.inner.for.end:                                ; preds = %omp.inner.for.cond
  br label %omp.loop.exit, !dbg !533

omp.loop.exit:                                    ; preds = %omp.inner.for.end
  %38 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !534
  %39 = ptrtoint i8** %38 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %39, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.243, i32 0, i32 0))
  store i8* getelementptr inbounds ([30 x i8], [30 x i8]* @2, i32 0, i32 0), i8** %38, align 8, !dbg !534
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.245, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_for_static_fini(%ident_t* %.kmpc_loc.addr, i32 %16), !dbg !534
  call void @__DiscoPoPOpenMPAfterCall()
  ret void, !dbg !535
}

declare void @__kmpc_for_static_init_4(%ident_t*, i32, i32, i32*, i32*, i32*, i32*, i32, i32)

declare void @__kmpc_for_static_fini(%ident_t*, i32)

; Function Attrs: nounwind uwtable
define void @full_verify() #0 !dbg !536 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %k1 = alloca i32, align 4
  %k2 = alloca i32, align 4
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  call void @llvm.dbg.declare(metadata i32* %i, metadata !537, metadata !82), !dbg !538
  call void @llvm.dbg.declare(metadata i32* %j, metadata !539, metadata !82), !dbg !540
  call void @llvm.dbg.declare(metadata i32* %k, metadata !541, metadata !82), !dbg !542
  call void @llvm.dbg.declare(metadata i32* %k1, metadata !543, metadata !82), !dbg !544
  call void @llvm.dbg.declare(metadata i32* %k2, metadata !545, metadata !82), !dbg !546
  %2 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !547
  %3 = ptrtoint i8** %2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.246, i32 0, i32 0))
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @3, i32 0, i32 0), i8** %2, align 8, !dbg !547
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([126 x i8], [126 x i8]* @.str.248, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* %.kmpc_loc.addr, i32 0, void (i32*, i32*, ...)* bitcast (void (i32*, i32*)* @.omp_outlined..3 to void (i32*, i32*, ...)*)), !dbg !547
  %4 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.249, i32 0, i32 0))
  store i32 0, i32* %j, align 4, !dbg !548
  %5 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !549
  %6 = ptrtoint i8** %5 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.250, i32 0, i32 0))
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @4, i32 0, i32 0), i8** %5, align 8, !dbg !549
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([126 x i8], [126 x i8]* @.str.252, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* %.kmpc_loc.addr, i32 2, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, i32*)* @.omp_outlined..4 to void (i32*, i32*, ...)*), i32* %i, i32* %j), !dbg !549
  %7 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %7, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.253, i32 0, i32 0))
  %8 = load i32, i32* %j, align 4, !dbg !550
  %cmp = icmp ne i32 %8, 0, !dbg !552
  br i1 %cmp, label %if.then, label %if.else, !dbg !553

if.then:                                          ; preds = %entry
  %9 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %9, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.254, i32 0, i32 0))
  %10 = load i32, i32* %j, align 4, !dbg !554
  %conv = sext i32 %10 to i64, !dbg !555
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.5, i32 0, i32 0), i64 %conv), !dbg !556
  br label %if.end, !dbg !556

if.else:                                          ; preds = %entry
  %11 = ptrtoint i32* @passed_verification to i64
  call void @__DiscoPoPOpenMPRead(i64 %11, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.255, i32 0, i32 0))
  %12 = load i32, i32* @passed_verification, align 4, !dbg !557
  %inc = add nsw i32 %12, 1, !dbg !557
  %13 = ptrtoint i32* @passed_verification to i64
  call void @__DiscoPoPOpenMPWrite(i64 %13, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.256, i32 0, i32 0))
  store i32 %inc, i32* @passed_verification, align 4, !dbg !557
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !558
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..3(i32* noalias %.global_tid., i32* noalias %.bound_tid.) #0 !dbg !559 {
entry:
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.258, i32 0, i32 0))
  %.global_tid..addr = alloca i32*, align 8
  %.bound_tid..addr = alloca i32*, align 8
  %.omp.iv = alloca i32, align 4
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %k1 = alloca i32, align 4
  %j1 = alloca i32, align 4
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  %2 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.259, i32 0, i32 0))
  store i32* %.global_tid., i32** %.global_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.global_tid..addr, metadata !562, metadata !82), !dbg !563
  %3 = ptrtoint i32** %.bound_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.260, i32 0, i32 0))
  store i32* %.bound_tid., i32** %.bound_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.bound_tid..addr, metadata !564, metadata !82), !dbg !563
  call void @llvm.dbg.declare(metadata i32* %.omp.iv, metadata !565, metadata !82), !dbg !563
  call void @llvm.dbg.declare(metadata i32* %.omp.lb, metadata !566, metadata !82), !dbg !563
  %4 = ptrtoint i32* %.omp.lb to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.261, i32 0, i32 0))
  store i32 0, i32* %.omp.lb, align 4, !dbg !567
  call void @llvm.dbg.declare(metadata i32* %.omp.ub, metadata !568, metadata !82), !dbg !563
  %5 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.262, i32 0, i32 0))
  store i32 511, i32* %.omp.ub, align 4, !dbg !567
  call void @llvm.dbg.declare(metadata i32* %.omp.stride, metadata !569, metadata !82), !dbg !563
  %6 = ptrtoint i32* %.omp.stride to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.263, i32 0, i32 0))
  store i32 1, i32* %.omp.stride, align 4, !dbg !567
  call void @llvm.dbg.declare(metadata i32* %.omp.is_last, metadata !570, metadata !82), !dbg !563
  %7 = ptrtoint i32* %.omp.is_last to i64
  call void @__DiscoPoPOpenMPWrite(i64 %7, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.264, i32 0, i32 0))
  store i32 0, i32* %.omp.is_last, align 4, !dbg !567
  call void @llvm.dbg.declare(metadata i32* %i, metadata !571, metadata !82), !dbg !563
  call void @llvm.dbg.declare(metadata i32* %j, metadata !572, metadata !82), !dbg !563
  call void @llvm.dbg.declare(metadata i32* %k, metadata !573, metadata !82), !dbg !563
  call void @llvm.dbg.declare(metadata i32* %k1, metadata !574, metadata !82), !dbg !563
  call void @llvm.dbg.declare(metadata i32* %j1, metadata !572, metadata !82), !dbg !563
  %8 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !575
  %9 = ptrtoint i8** %8 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %9, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.265, i32 0, i32 0))
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @3, i32 0, i32 0), i8** %8, align 8, !dbg !575
  %10 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %10, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.266, i32 0, i32 0))
  %11 = load i32*, i32** %.global_tid..addr, align 8, !dbg !575
  %12 = ptrtoint i32* %11 to i64
  call void @__DiscoPoPOpenMPRead(i64 %12, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.267, i32 0, i32 0))
  %13 = load i32, i32* %11, align 4, !dbg !575
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.269, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_dispatch_init_4(%ident_t* %.kmpc_loc.addr, i32 %13, i32 35, i32 0, i32 511, i32 1, i32 1), !dbg !575
  br label %omp.dispatch.cond, !dbg !575

omp.dispatch.cond:                                ; preds = %omp.dispatch.inc, %entry
  %14 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !576
  %15 = ptrtoint i8** %14 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %15, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.270, i32 0, i32 0))
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @3, i32 0, i32 0), i8** %14, align 8, !dbg !576
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.272, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  %16 = call i32 @__kmpc_dispatch_next_4(%ident_t* %.kmpc_loc.addr, i32 %13, i32* %.omp.is_last, i32* %.omp.lb, i32* %.omp.ub, i32* %.omp.stride), !dbg !576
  %tobool = icmp ne i32 %16, 0, !dbg !576
  br i1 %tobool, label %omp.dispatch.body, label %omp.dispatch.end, !dbg !576

omp.dispatch.body:                                ; preds = %omp.dispatch.cond
  %17 = ptrtoint i32* %.omp.lb to i64
  call void @__DiscoPoPOpenMPRead(i64 %17, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.273, i32 0, i32 0))
  %18 = load i32, i32* %.omp.lb, align 4, !dbg !578
  %19 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPWrite(i64 %19, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.274, i32 0, i32 0))
  store i32 %18, i32* %.omp.iv, align 4, !dbg !578
  br label %omp.inner.for.cond, !dbg !580

omp.inner.for.cond:                               ; preds = %omp.inner.for.inc, %omp.dispatch.body
  %20 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %20, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.275, i32 0, i32 0))
  %21 = load i32, i32* %.omp.iv, align 4, !dbg !581, !llvm.mem.parallel_loop_access !583
  %22 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %22, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.276, i32 0, i32 0))
  %23 = load i32, i32* %.omp.ub, align 4, !dbg !581, !llvm.mem.parallel_loop_access !583
  %cmp = icmp sle i32 %21, %23, !dbg !563
  br i1 %cmp, label %omp.inner.for.body, label %omp.inner.for.end, !dbg !584

omp.inner.for.body:                               ; preds = %omp.inner.for.cond
  %24 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %24, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.277, i32 0, i32 0))
  %25 = load i32, i32* %.omp.iv, align 4, !dbg !585, !llvm.mem.parallel_loop_access !583
  %mul = mul nsw i32 %25, 1, !dbg !587
  %add = add nsw i32 0, %mul, !dbg !587
  %26 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %26, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.278, i32 0, i32 0))
  store i32 %add, i32* %j, align 4, !dbg !587, !llvm.mem.parallel_loop_access !583
  %27 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %27, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.279, i32 0, i32 0))
  %28 = load i32, i32* %j, align 4, !dbg !588, !llvm.mem.parallel_loop_access !583
  %cmp2 = icmp sgt i32 %28, 0, !dbg !590
  br i1 %cmp2, label %cond.true, label %cond.false, !dbg !591

cond.true:                                        ; preds = %omp.inner.for.body
  %29 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %29, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.280, i32 0, i32 0))
  %30 = load i32, i32* %j, align 4, !dbg !592, !llvm.mem.parallel_loop_access !583
  %sub = sub nsw i32 %30, 1, !dbg !594
  %idxprom = sext i32 %sub to i64, !dbg !595
  %31 = call [512 x i32]* @_ZTW11bucket_ptrs(), !dbg !595, !llvm.mem.parallel_loop_access !583
  %arrayidx = getelementptr inbounds [512 x i32], [512 x i32]* %31, i64 0, i64 %idxprom, !dbg !595
  %32 = ptrtoint i32* %arrayidx to i64
  call void @__DiscoPoPOpenMPRead(i64 %32, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.281, i32 0, i32 0))
  %33 = load i32, i32* %arrayidx, align 4, !dbg !595, !llvm.mem.parallel_loop_access !583
  br label %cond.end, !dbg !596

cond.false:                                       ; preds = %omp.inner.for.body
  br label %cond.end, !dbg !597

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %33, %cond.true ], [ 0, %cond.false ], !dbg !599
  %34 = ptrtoint i32* %k1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %34, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.282, i32 0, i32 0))
  store i32 %cond, i32* %k1, align 4, !dbg !601, !llvm.mem.parallel_loop_access !583
  %35 = ptrtoint i32* %k1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %35, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.283, i32 0, i32 0))
  %36 = load i32, i32* %k1, align 4, !dbg !602, !llvm.mem.parallel_loop_access !583
  %37 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %37, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.284, i32 0, i32 0))
  store i32 %36, i32* %i, align 4, !dbg !604, !llvm.mem.parallel_loop_access !583
  br label %for.cond, !dbg !605

for.cond:                                         ; preds = %for.inc, %cond.end
  %38 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %38, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.285, i32 0, i32 0))
  %39 = load i32, i32* %i, align 4, !dbg !606
  %40 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %40, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.286, i32 0, i32 0))
  %41 = load i32, i32* %j, align 4, !dbg !609
  %idxprom3 = sext i32 %41 to i64, !dbg !610
  %42 = call [512 x i32]* @_ZTW11bucket_ptrs(), !dbg !610
  %arrayidx4 = getelementptr inbounds [512 x i32], [512 x i32]* %42, i64 0, i64 %idxprom3, !dbg !610
  %43 = ptrtoint i32* %arrayidx4 to i64
  call void @__DiscoPoPOpenMPRead(i64 %43, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.287, i32 0, i32 0))
  %44 = load i32, i32* %arrayidx4, align 4, !dbg !610
  %cmp5 = icmp slt i32 %39, %44, !dbg !611
  br i1 %cmp5, label %for.body, label %for.end, !dbg !612

for.body:                                         ; preds = %for.cond
  %45 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %45, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.288, i32 0, i32 0))
  %46 = load i32, i32* %i, align 4, !dbg !613
  %idxprom6 = sext i32 %46 to i64, !dbg !615
  %arrayidx7 = getelementptr inbounds [65536 x i32], [65536 x i32]* @key_buff2, i64 0, i64 %idxprom6, !dbg !615
  %47 = ptrtoint i32* %arrayidx7 to i64
  call void @__DiscoPoPOpenMPRead(i64 %47, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.289, i32 0, i32 0))
  %48 = load i32, i32* %arrayidx7, align 4, !dbg !615
  %idxprom8 = sext i32 %48 to i64, !dbg !616
  %49 = ptrtoint i32** @key_buff_ptr_global to i64
  call void @__DiscoPoPOpenMPRead(i64 %49, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.290, i32 0, i32 0))
  %50 = load i32*, i32** @key_buff_ptr_global, align 8, !dbg !616
  %arrayidx9 = getelementptr inbounds i32, i32* %50, i64 %idxprom8, !dbg !616
  %51 = ptrtoint i32* %arrayidx9 to i64
  call void @__DiscoPoPOpenMPRead(i64 %51, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.291, i32 0, i32 0))
  %52 = load i32, i32* %arrayidx9, align 4, !dbg !617
  %dec = add nsw i32 %52, -1, !dbg !617
  %53 = ptrtoint i32* %arrayidx9 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %53, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.292, i32 0, i32 0))
  store i32 %dec, i32* %arrayidx9, align 4, !dbg !617
  %54 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPWrite(i64 %54, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.293, i32 0, i32 0))
  store i32 %dec, i32* %k, align 4, !dbg !618
  %55 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %55, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.294, i32 0, i32 0))
  %56 = load i32, i32* %i, align 4, !dbg !619
  %idxprom10 = sext i32 %56 to i64, !dbg !620
  %arrayidx11 = getelementptr inbounds [65536 x i32], [65536 x i32]* @key_buff2, i64 0, i64 %idxprom10, !dbg !620
  %57 = ptrtoint i32* %arrayidx11 to i64
  call void @__DiscoPoPOpenMPRead(i64 %57, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.295, i32 0, i32 0))
  %58 = load i32, i32* %arrayidx11, align 4, !dbg !620
  %59 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %59, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.296, i32 0, i32 0))
  %60 = load i32, i32* %k, align 4, !dbg !621
  %idxprom12 = sext i32 %60 to i64, !dbg !622
  %arrayidx13 = getelementptr inbounds [65536 x i32], [65536 x i32]* @key_array, i64 0, i64 %idxprom12, !dbg !622
  %61 = ptrtoint i32* %arrayidx13 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %61, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.297, i32 0, i32 0))
  store i32 %58, i32* %arrayidx13, align 4, !dbg !623
  br label %for.inc, !dbg !624

for.inc:                                          ; preds = %for.body
  %62 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %62, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.298, i32 0, i32 0))
  %63 = load i32, i32* %i, align 4, !dbg !625
  %inc = add nsw i32 %63, 1, !dbg !625
  %64 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %64, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.299, i32 0, i32 0))
  store i32 %inc, i32* %i, align 4, !dbg !625
  br label %for.cond, !dbg !627

for.end:                                          ; preds = %for.cond
  br label %omp.body.continue, !dbg !628

omp.body.continue:                                ; preds = %for.end
  br label %omp.inner.for.inc, !dbg !629

omp.inner.for.inc:                                ; preds = %omp.body.continue
  %65 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %65, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.300, i32 0, i32 0))
  %66 = load i32, i32* %.omp.iv, align 4, !dbg !630, !llvm.mem.parallel_loop_access !583
  %add14 = add nsw i32 %66, 1, !dbg !632
  %67 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPWrite(i64 %67, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.301, i32 0, i32 0))
  store i32 %add14, i32* %.omp.iv, align 4, !dbg !632, !llvm.mem.parallel_loop_access !583
  br label %omp.inner.for.cond, !dbg !633, !llvm.loop !583

omp.inner.for.end:                                ; preds = %omp.inner.for.cond
  br label %omp.dispatch.inc, !dbg !634

omp.dispatch.inc:                                 ; preds = %omp.inner.for.end
  br label %omp.dispatch.cond, !dbg !635

omp.dispatch.end:                                 ; preds = %omp.dispatch.cond
  call void @__DiscoPoPOpenMPAfterCall()
  ret void, !dbg !636
}

declare void @__kmpc_dispatch_init_4(%ident_t*, i32, i32, i32, i32, i32, i32)

declare i32 @__kmpc_dispatch_next_4(%ident_t*, i32, i32*, i32*, i32*, i32*)

; Function Attrs: nounwind uwtable
define weak_odr hidden [512 x i32]* @_ZTW11bucket_ptrs() #0 {
  ret [512 x i32]* @bucket_ptrs
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..4(i32* noalias %.global_tid., i32* noalias %.bound_tid., i32* dereferenceable(4) %i, i32* dereferenceable(4) %j) #0 !dbg !637 {
entry:
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.303, i32 0, i32 0))
  %.global_tid..addr = alloca i32*, align 8
  %.bound_tid..addr = alloca i32*, align 8
  %i.addr = alloca i32*, align 8
  %j.addr = alloca i32*, align 8
  %.omp.iv = alloca i32, align 4
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %j1 = alloca i32, align 4
  %i2 = alloca i32, align 4
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  %.omp.reduction.red_list = alloca [1 x i8*], align 8
  %2 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.304, i32 0, i32 0))
  store i32* %.global_tid., i32** %.global_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.global_tid..addr, metadata !640, metadata !82), !dbg !641
  %3 = ptrtoint i32** %.bound_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.305, i32 0, i32 0))
  store i32* %.bound_tid., i32** %.bound_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.bound_tid..addr, metadata !642, metadata !82), !dbg !641
  %4 = ptrtoint i32** %i.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.306, i32 0, i32 0))
  store i32* %i, i32** %i.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %i.addr, metadata !643, metadata !82), !dbg !641
  %5 = ptrtoint i32** %j.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.307, i32 0, i32 0))
  store i32* %j, i32** %j.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %j.addr, metadata !644, metadata !82), !dbg !641
  %6 = ptrtoint i32** %i.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %6, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.308, i32 0, i32 0))
  %7 = load i32*, i32** %i.addr, align 8, !dbg !645
  %8 = ptrtoint i32** %j.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %8, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.309, i32 0, i32 0))
  %9 = load i32*, i32** %j.addr, align 8, !dbg !645
  call void @llvm.dbg.declare(metadata i32* %.omp.iv, metadata !646, metadata !82), !dbg !641
  call void @llvm.dbg.declare(metadata i32* %.omp.lb, metadata !647, metadata !82), !dbg !641
  %10 = ptrtoint i32* %.omp.lb to i64
  call void @__DiscoPoPOpenMPWrite(i64 %10, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.310, i32 0, i32 0))
  store i32 0, i32* %.omp.lb, align 4, !dbg !648
  call void @llvm.dbg.declare(metadata i32* %.omp.ub, metadata !649, metadata !82), !dbg !641
  %11 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPWrite(i64 %11, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.311, i32 0, i32 0))
  store i32 65534, i32* %.omp.ub, align 4, !dbg !648
  call void @llvm.dbg.declare(metadata i32* %.omp.stride, metadata !650, metadata !82), !dbg !641
  %12 = ptrtoint i32* %.omp.stride to i64
  call void @__DiscoPoPOpenMPWrite(i64 %12, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.312, i32 0, i32 0))
  store i32 1, i32* %.omp.stride, align 4, !dbg !648
  call void @llvm.dbg.declare(metadata i32* %.omp.is_last, metadata !651, metadata !82), !dbg !641
  %13 = ptrtoint i32* %.omp.is_last to i64
  call void @__DiscoPoPOpenMPWrite(i64 %13, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.313, i32 0, i32 0))
  store i32 0, i32* %.omp.is_last, align 4, !dbg !648
  call void @llvm.dbg.declare(metadata i32* %j1, metadata !652, metadata !82), !dbg !641
  %14 = ptrtoint i32* %j1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %14, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.314, i32 0, i32 0))
  store i32 0, i32* %j1, align 4, !dbg !653
  call void @llvm.dbg.declare(metadata i32* %i2, metadata !654, metadata !82), !dbg !641
  %15 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !645
  %16 = ptrtoint i8** %15 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %16, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.315, i32 0, i32 0))
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @4, i32 0, i32 0), i8** %15, align 8, !dbg !645
  %17 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %17, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.316, i32 0, i32 0))
  %18 = load i32*, i32** %.global_tid..addr, align 8, !dbg !645
  %19 = ptrtoint i32* %18 to i64
  call void @__DiscoPoPOpenMPRead(i64 %19, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.317, i32 0, i32 0))
  %20 = load i32, i32* %18, align 4, !dbg !645
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.319, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_for_static_init_4(%ident_t* %.kmpc_loc.addr, i32 %20, i32 34, i32* %.omp.is_last, i32* %.omp.lb, i32* %.omp.ub, i32* %.omp.stride, i32 1, i32 1), !dbg !645
  %21 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %21, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.320, i32 0, i32 0))
  %22 = load i32, i32* %.omp.ub, align 4, !dbg !648
  %cmp = icmp sgt i32 %22, 65534, !dbg !648
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !648

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !655

cond.false:                                       ; preds = %entry
  %23 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %23, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.321, i32 0, i32 0))
  %24 = load i32, i32* %.omp.ub, align 4, !dbg !657
  br label %cond.end, !dbg !657

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 65534, %cond.true ], [ %24, %cond.false ], !dbg !659
  %25 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPWrite(i64 %25, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.322, i32 0, i32 0))
  store i32 %cond, i32* %.omp.ub, align 4, !dbg !659
  %26 = ptrtoint i32* %.omp.lb to i64
  call void @__DiscoPoPOpenMPRead(i64 %26, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.323, i32 0, i32 0))
  %27 = load i32, i32* %.omp.lb, align 4, !dbg !659
  %28 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPWrite(i64 %28, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.324, i32 0, i32 0))
  store i32 %27, i32* %.omp.iv, align 4, !dbg !659
  br label %omp.inner.for.cond, !dbg !661

omp.inner.for.cond:                               ; preds = %omp.inner.for.inc, %cond.end
  %29 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %29, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.325, i32 0, i32 0))
  %30 = load i32, i32* %.omp.iv, align 4, !dbg !662
  %31 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %31, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.326, i32 0, i32 0))
  %32 = load i32, i32* %.omp.ub, align 4, !dbg !662
  %cmp3 = icmp sle i32 %30, %32, !dbg !641
  br i1 %cmp3, label %omp.inner.for.body, label %omp.inner.for.end, !dbg !664

omp.inner.for.body:                               ; preds = %omp.inner.for.cond
  %33 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %33, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.327, i32 0, i32 0))
  %34 = load i32, i32* %.omp.iv, align 4, !dbg !665
  %mul = mul nsw i32 %34, 1, !dbg !667
  %add = add nsw i32 1, %mul, !dbg !667
  %35 = ptrtoint i32* %i2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %35, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.328, i32 0, i32 0))
  store i32 %add, i32* %i2, align 4, !dbg !667
  %36 = ptrtoint i32* %i2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %36, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.329, i32 0, i32 0))
  %37 = load i32, i32* %i2, align 4, !dbg !668
  %sub = sub nsw i32 %37, 1, !dbg !670
  %idxprom = sext i32 %sub to i64, !dbg !671
  %arrayidx = getelementptr inbounds [65536 x i32], [65536 x i32]* @key_array, i64 0, i64 %idxprom, !dbg !671
  %38 = ptrtoint i32* %arrayidx to i64
  call void @__DiscoPoPOpenMPRead(i64 %38, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.330, i32 0, i32 0))
  %39 = load i32, i32* %arrayidx, align 4, !dbg !671
  %40 = ptrtoint i32* %i2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %40, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.331, i32 0, i32 0))
  %41 = load i32, i32* %i2, align 4, !dbg !672
  %idxprom4 = sext i32 %41 to i64, !dbg !673
  %arrayidx5 = getelementptr inbounds [65536 x i32], [65536 x i32]* @key_array, i64 0, i64 %idxprom4, !dbg !673
  %42 = ptrtoint i32* %arrayidx5 to i64
  call void @__DiscoPoPOpenMPRead(i64 %42, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.332, i32 0, i32 0))
  %43 = load i32, i32* %arrayidx5, align 4, !dbg !673
  %cmp6 = icmp sgt i32 %39, %43, !dbg !674
  br i1 %cmp6, label %if.then, label %if.end, !dbg !675

if.then:                                          ; preds = %omp.inner.for.body
  %44 = ptrtoint i32* %j1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %44, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.333, i32 0, i32 0))
  %45 = load i32, i32* %j1, align 4, !dbg !676
  %inc = add nsw i32 %45, 1, !dbg !676
  %46 = ptrtoint i32* %j1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %46, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.334, i32 0, i32 0))
  store i32 %inc, i32* %j1, align 4, !dbg !676
  br label %if.end, !dbg !677

if.end:                                           ; preds = %if.then, %omp.inner.for.body
  br label %omp.body.continue, !dbg !678

omp.body.continue:                                ; preds = %if.end
  br label %omp.inner.for.inc, !dbg !680

omp.inner.for.inc:                                ; preds = %omp.body.continue
  %47 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %47, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.335, i32 0, i32 0))
  %48 = load i32, i32* %.omp.iv, align 4, !dbg !681
  %add7 = add nsw i32 %48, 1, !dbg !683
  %49 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPWrite(i64 %49, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.336, i32 0, i32 0))
  store i32 %add7, i32* %.omp.iv, align 4, !dbg !683
  br label %omp.inner.for.cond, !dbg !684

omp.inner.for.end:                                ; preds = %omp.inner.for.cond
  br label %omp.loop.exit, !dbg !685

omp.loop.exit:                                    ; preds = %omp.inner.for.end
  %50 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !686
  %51 = ptrtoint i8** %50 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %51, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.337, i32 0, i32 0))
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @4, i32 0, i32 0), i8** %50, align 8, !dbg !686
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.339, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_for_static_fini(%ident_t* %.kmpc_loc.addr, i32 %20), !dbg !686
  %52 = getelementptr inbounds [1 x i8*], [1 x i8*]* %.omp.reduction.red_list, i64 0, i64 0, !dbg !686
  %53 = bitcast i32* %j1 to i8*, !dbg !686
  %54 = ptrtoint i8** %52 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %54, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.340, i32 0, i32 0))
  store i8* %53, i8** %52, align 8, !dbg !686
  %55 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !686
  %56 = ptrtoint i8** %55 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %56, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.341, i32 0, i32 0))
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @5, i32 0, i32 0), i8** %55, align 8, !dbg !686
  %57 = bitcast [1 x i8*]* %.omp.reduction.red_list to i8*, !dbg !686
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.343, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  %58 = call i32 @__kmpc_reduce_nowait(%ident_t* %.kmpc_loc.addr, i32 %20, i32 1, i64 8, i8* %57, void (i8*, i8*)* @.omp.reduction.reduction_func, [8 x i32]* @.gomp_critical_user_.reduction.var), !dbg !687
  switch i32 %58, label %.omp.reduction.default [
    i32 1, label %.omp.reduction.case1
    i32 2, label %.omp.reduction.case2
  ], !dbg !686

.omp.reduction.case1:                             ; preds = %omp.loop.exit
  %59 = ptrtoint i32* %9 to i64
  call void @__DiscoPoPOpenMPRead(i64 %59, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.344, i32 0, i32 0))
  %60 = load i32, i32* %9, align 4, !dbg !689
  %61 = ptrtoint i32* %j1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %61, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.345, i32 0, i32 0))
  %62 = load i32, i32* %j1, align 4, !dbg !689
  %add8 = add nsw i32 %60, %62, !dbg !690
  %63 = ptrtoint i32* %9 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %63, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.346, i32 0, i32 0))
  store i32 %add8, i32* %9, align 4, !dbg !690
  call void @__kmpc_end_reduce_nowait(%ident_t* %.kmpc_loc.addr, i32 %20, [8 x i32]* @.gomp_critical_user_.reduction.var), !dbg !691
  br label %.omp.reduction.default, !dbg !691

.omp.reduction.case2:                             ; preds = %omp.loop.exit
  %64 = ptrtoint i32* %j1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %64, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.347, i32 0, i32 0))
  %65 = load i32, i32* %j1, align 4, !dbg !692
  %66 = atomicrmw add i32* %9, i32 %65 monotonic, !dbg !693
  br label %.omp.reduction.default, !dbg !693

.omp.reduction.default:                           ; preds = %.omp.reduction.case2, %.omp.reduction.case1, %omp.loop.exit
  call void @__DiscoPoPOpenMPAfterCall()
  ret void, !dbg !694
}

; Function Attrs: nounwind uwtable
define internal void @.omp.reduction.reduction_func(i8*, i8*) #0 !dbg !695 {
entry:
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.349, i32 0, i32 0))
  %.addr = alloca i8*, align 8
  %.addr1 = alloca i8*, align 8
  %2 = ptrtoint i8** %.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.350, i32 0, i32 0))
  store i8* %0, i8** %.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %.addr, metadata !697, metadata !82), !dbg !698
  %3 = ptrtoint i8** %.addr1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.351, i32 0, i32 0))
  store i8* %1, i8** %.addr1, align 8
  call void @llvm.dbg.declare(metadata i8** %.addr1, metadata !699, metadata !82), !dbg !698
  %4 = ptrtoint i8** %.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %4, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.352, i32 0, i32 0))
  %5 = load i8*, i8** %.addr, align 8
  %6 = bitcast i8* %5 to [1 x i8*]*
  %7 = ptrtoint i8** %.addr1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %7, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.353, i32 0, i32 0))
  %8 = load i8*, i8** %.addr1, align 8
  %9 = bitcast i8* %8 to [1 x i8*]*
  %10 = getelementptr inbounds [1 x i8*], [1 x i8*]* %9, i64 0, i64 0
  %11 = ptrtoint i8** %10 to i64
  call void @__DiscoPoPOpenMPRead(i64 %11, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.354, i32 0, i32 0))
  %12 = load i8*, i8** %10, align 8
  %13 = bitcast i8* %12 to i32*
  %14 = getelementptr inbounds [1 x i8*], [1 x i8*]* %6, i64 0, i64 0
  %15 = ptrtoint i8** %14 to i64
  call void @__DiscoPoPOpenMPRead(i64 %15, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.355, i32 0, i32 0))
  %16 = load i8*, i8** %14, align 8
  %17 = bitcast i8* %16 to i32*
  %18 = ptrtoint i32* %17 to i64
  call void @__DiscoPoPOpenMPRead(i64 %18, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.356, i32 0, i32 0))
  %19 = load i32, i32* %17, align 4, !dbg !700
  %20 = ptrtoint i32* %13 to i64
  call void @__DiscoPoPOpenMPRead(i64 %20, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.357, i32 0, i32 0))
  %21 = load i32, i32* %13, align 4, !dbg !700
  %add = add nsw i32 %19, %21, !dbg !701
  %22 = ptrtoint i32* %17 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %22, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.358, i32 0, i32 0))
  store i32 %add, i32* %17, align 4, !dbg !701
  call void @__DiscoPoPOpenMPAfterCall()
  ret void, !dbg !700
}

declare i32 @__kmpc_reduce_nowait(%ident_t*, i32, i32, i64, i8*, void (i8*, i8*)*, [8 x i32]*)

declare void @__kmpc_end_reduce_nowait(%ident_t*, i32, [8 x i32]*)

declare i32 @printf(i8*, ...) #3

; Function Attrs: nounwind uwtable
define void @rank(i32 %iteration) #0 !dbg !702 {
entry:
  %iteration.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %key_buff_ptr = alloca i32*, align 8
  %key_buff_ptr2 = alloca i32*, align 8
  %shift = alloca i32, align 4
  %num_bucket_keys = alloca i32, align 4
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  %key_rank = alloca i32, align 4
  %failed = alloca i32, align 4
  %2 = ptrtoint i32* %iteration.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.359, i32 0, i32 0))
  store i32 %iteration, i32* %iteration.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %iteration.addr, metadata !705, metadata !82), !dbg !706
  call void @llvm.dbg.declare(metadata i32* %i, metadata !707, metadata !82), !dbg !708
  call void @llvm.dbg.declare(metadata i32* %k, metadata !709, metadata !82), !dbg !710
  call void @llvm.dbg.declare(metadata i32** %key_buff_ptr, metadata !711, metadata !82), !dbg !712
  call void @llvm.dbg.declare(metadata i32** %key_buff_ptr2, metadata !713, metadata !82), !dbg !714
  call void @llvm.dbg.declare(metadata i32* %shift, metadata !715, metadata !82), !dbg !716
  %3 = ptrtoint i32* %shift to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.360, i32 0, i32 0))
  store i32 2, i32* %shift, align 4, !dbg !716
  call void @llvm.dbg.declare(metadata i32* %num_bucket_keys, metadata !717, metadata !82), !dbg !718
  %4 = ptrtoint i32* %shift to i64
  call void @__DiscoPoPOpenMPRead(i64 %4, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.361, i32 0, i32 0))
  %5 = load i32, i32* %shift, align 4, !dbg !719
  %sh_prom = zext i32 %5 to i64, !dbg !720
  %shl = shl i64 1, %sh_prom, !dbg !720
  %conv = trunc i64 %shl to i32, !dbg !721
  %6 = ptrtoint i32* %num_bucket_keys to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.362, i32 0, i32 0))
  store i32 %conv, i32* %num_bucket_keys, align 4, !dbg !718
  %7 = ptrtoint i32* %iteration.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %7, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.363, i32 0, i32 0))
  %8 = load i32, i32* %iteration.addr, align 4, !dbg !722
  %9 = ptrtoint i32* %iteration.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %9, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.364, i32 0, i32 0))
  %10 = load i32, i32* %iteration.addr, align 4, !dbg !723
  %idxprom = sext i32 %10 to i64, !dbg !724
  %arrayidx = getelementptr inbounds [65536 x i32], [65536 x i32]* @key_array, i64 0, i64 %idxprom, !dbg !724
  %11 = ptrtoint i32* %arrayidx to i64
  call void @__DiscoPoPOpenMPWrite(i64 %11, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.365, i32 0, i32 0))
  store i32 %8, i32* %arrayidx, align 4, !dbg !725
  %12 = ptrtoint i32* %iteration.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %12, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.366, i32 0, i32 0))
  %13 = load i32, i32* %iteration.addr, align 4, !dbg !726
  %sub = sub nsw i32 2048, %13, !dbg !727
  %14 = ptrtoint i32* %iteration.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %14, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.367, i32 0, i32 0))
  %15 = load i32, i32* %iteration.addr, align 4, !dbg !728
  %add = add nsw i32 %15, 10, !dbg !729
  %idxprom1 = sext i32 %add to i64, !dbg !730
  %arrayidx2 = getelementptr inbounds [65536 x i32], [65536 x i32]* @key_array, i64 0, i64 %idxprom1, !dbg !730
  %16 = ptrtoint i32* %arrayidx2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %16, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.368, i32 0, i32 0))
  store i32 %sub, i32* %arrayidx2, align 4, !dbg !731
  %17 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %17, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.369, i32 0, i32 0))
  store i32 0, i32* %i, align 4, !dbg !732
  br label %for.cond, !dbg !734

for.cond:                                         ; preds = %for.inc, %entry
  %18 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %18, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.370, i32 0, i32 0))
  %19 = load i32, i32* %i, align 4, !dbg !735
  %cmp = icmp slt i32 %19, 5, !dbg !738
  br i1 %cmp, label %for.body, label %for.end, !dbg !739

for.body:                                         ; preds = %for.cond
  %20 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %20, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.371, i32 0, i32 0))
  %21 = load i32, i32* %i, align 4, !dbg !740
  %idxprom4 = sext i32 %21 to i64, !dbg !741
  %arrayidx5 = getelementptr inbounds [5 x i32], [5 x i32]* @test_index_array, i64 0, i64 %idxprom4, !dbg !741
  %22 = ptrtoint i32* %arrayidx5 to i64
  call void @__DiscoPoPOpenMPRead(i64 %22, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.372, i32 0, i32 0))
  %23 = load i32, i32* %arrayidx5, align 4, !dbg !741
  %idxprom6 = sext i32 %23 to i64, !dbg !742
  %arrayidx7 = getelementptr inbounds [65536 x i32], [65536 x i32]* @key_array, i64 0, i64 %idxprom6, !dbg !742
  %24 = ptrtoint i32* %arrayidx7 to i64
  call void @__DiscoPoPOpenMPRead(i64 %24, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.373, i32 0, i32 0))
  %25 = load i32, i32* %arrayidx7, align 4, !dbg !742
  %26 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %26, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.374, i32 0, i32 0))
  %27 = load i32, i32* %i, align 4, !dbg !743
  %idxprom8 = sext i32 %27 to i64, !dbg !744
  %arrayidx9 = getelementptr inbounds [5 x i32], [5 x i32]* @partial_verify_vals, i64 0, i64 %idxprom8, !dbg !744
  %28 = ptrtoint i32* %arrayidx9 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %28, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.375, i32 0, i32 0))
  store i32 %25, i32* %arrayidx9, align 4, !dbg !745
  br label %for.inc, !dbg !744

for.inc:                                          ; preds = %for.body
  %29 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %29, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.376, i32 0, i32 0))
  %30 = load i32, i32* %i, align 4, !dbg !746
  %inc = add nsw i32 %30, 1, !dbg !746
  %31 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %31, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.377, i32 0, i32 0))
  store i32 %inc, i32* %i, align 4, !dbg !746
  br label %for.cond, !dbg !748

for.end:                                          ; preds = %for.cond
  %32 = ptrtoint i32** %key_buff_ptr2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %32, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.378, i32 0, i32 0))
  store i32* getelementptr inbounds ([65536 x i32], [65536 x i32]* @key_buff2, i32 0, i32 0), i32** %key_buff_ptr2, align 8, !dbg !749
  %33 = ptrtoint i32** %key_buff_ptr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %33, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.379, i32 0, i32 0))
  store i32* getelementptr inbounds ([2048 x i32], [2048 x i32]* @key_buff1, i32 0, i32 0), i32** %key_buff_ptr, align 8, !dbg !750
  %34 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !751
  %35 = ptrtoint i8** %34 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %35, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.380, i32 0, i32 0))
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @6, i32 0, i32 0), i8** %34, align 8, !dbg !751
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([119 x i8], [119 x i8]* @.str.382, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* %.kmpc_loc.addr, i32 4, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, i32*, i32**, i32**)* @.omp_outlined..6 to void (i32*, i32*, ...)*), i32* %shift, i32* %num_bucket_keys, i32** %key_buff_ptr, i32** %key_buff_ptr2), !dbg !751
  %36 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %36, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.383, i32 0, i32 0))
  store i32 0, i32* %i, align 4, !dbg !752
  br label %for.cond10, !dbg !754

for.cond10:                                       ; preds = %for.inc49, %for.end
  %37 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %37, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.384, i32 0, i32 0))
  %38 = load i32, i32* %i, align 4, !dbg !755
  %cmp11 = icmp slt i32 %38, 5, !dbg !758
  br i1 %cmp11, label %for.body13, label %for.end51, !dbg !759

for.body13:                                       ; preds = %for.cond10
  %39 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %39, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.385, i32 0, i32 0))
  %40 = load i32, i32* %i, align 4, !dbg !760
  %idxprom14 = sext i32 %40 to i64, !dbg !762
  %arrayidx15 = getelementptr inbounds [5 x i32], [5 x i32]* @partial_verify_vals, i64 0, i64 %idxprom14, !dbg !762
  %41 = ptrtoint i32* %arrayidx15 to i64
  call void @__DiscoPoPOpenMPRead(i64 %41, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.386, i32 0, i32 0))
  %42 = load i32, i32* %arrayidx15, align 4, !dbg !762
  %43 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPWrite(i64 %43, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.387, i32 0, i32 0))
  store i32 %42, i32* %k, align 4, !dbg !763
  %44 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %44, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.388, i32 0, i32 0))
  %45 = load i32, i32* %k, align 4, !dbg !764
  %cmp16 = icmp slt i32 0, %45, !dbg !766
  br i1 %cmp16, label %land.lhs.true, label %if.end48, !dbg !767

land.lhs.true:                                    ; preds = %for.body13
  %46 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %46, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.389, i32 0, i32 0))
  %47 = load i32, i32* %k, align 4, !dbg !768
  %cmp18 = icmp sle i32 %47, 65535, !dbg !770
  br i1 %cmp18, label %if.then, label %if.end48, !dbg !771

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %key_rank, metadata !772, metadata !82), !dbg !774
  %48 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %48, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.390, i32 0, i32 0))
  %49 = load i32, i32* %k, align 4, !dbg !775
  %sub20 = sub nsw i32 %49, 1, !dbg !776
  %idxprom21 = sext i32 %sub20 to i64, !dbg !777
  %50 = ptrtoint i32** %key_buff_ptr to i64
  call void @__DiscoPoPOpenMPRead(i64 %50, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.391, i32 0, i32 0))
  %51 = load i32*, i32** %key_buff_ptr, align 8, !dbg !777
  %arrayidx22 = getelementptr inbounds i32, i32* %51, i64 %idxprom21, !dbg !777
  %52 = ptrtoint i32* %arrayidx22 to i64
  call void @__DiscoPoPOpenMPRead(i64 %52, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.392, i32 0, i32 0))
  %53 = load i32, i32* %arrayidx22, align 4, !dbg !777
  %54 = ptrtoint i32* %key_rank to i64
  call void @__DiscoPoPOpenMPWrite(i64 %54, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.393, i32 0, i32 0))
  store i32 %53, i32* %key_rank, align 4, !dbg !774
  call void @llvm.dbg.declare(metadata i32* %failed, metadata !778, metadata !82), !dbg !779
  %55 = ptrtoint i32* %failed to i64
  call void @__DiscoPoPOpenMPWrite(i64 %55, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.394, i32 0, i32 0))
  store i32 0, i32* %failed, align 4, !dbg !779
  %56 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %56, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.395, i32 0, i32 0))
  %57 = load i32, i32* %i, align 4, !dbg !780
  %cmp23 = icmp sle i32 %57, 2, !dbg !782
  br i1 %cmp23, label %if.then25, label %if.else33, !dbg !783

if.then25:                                        ; preds = %if.then
  %58 = ptrtoint i32* %key_rank to i64
  call void @__DiscoPoPOpenMPRead(i64 %58, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.396, i32 0, i32 0))
  %59 = load i32, i32* %key_rank, align 4, !dbg !784
  %60 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %60, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.397, i32 0, i32 0))
  %61 = load i32, i32* %i, align 4, !dbg !787
  %idxprom26 = sext i32 %61 to i64, !dbg !788
  %arrayidx27 = getelementptr inbounds [5 x i32], [5 x i32]* @test_rank_array, i64 0, i64 %idxprom26, !dbg !788
  %62 = ptrtoint i32* %arrayidx27 to i64
  call void @__DiscoPoPOpenMPRead(i64 %62, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.398, i32 0, i32 0))
  %63 = load i32, i32* %arrayidx27, align 4, !dbg !788
  %64 = ptrtoint i32* %iteration.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %64, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.399, i32 0, i32 0))
  %65 = load i32, i32* %iteration.addr, align 4, !dbg !789
  %add28 = add nsw i32 %63, %65, !dbg !790
  %cmp29 = icmp ne i32 %59, %add28, !dbg !791
  br i1 %cmp29, label %if.then31, label %if.else, !dbg !792

if.then31:                                        ; preds = %if.then25
  %66 = ptrtoint i32* %failed to i64
  call void @__DiscoPoPOpenMPWrite(i64 %66, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.400, i32 0, i32 0))
  store i32 1, i32* %failed, align 4, !dbg !793
  br label %if.end, !dbg !794

if.else:                                          ; preds = %if.then25
  %67 = ptrtoint i32* @passed_verification to i64
  call void @__DiscoPoPOpenMPRead(i64 %67, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.401, i32 0, i32 0))
  %68 = load i32, i32* @passed_verification, align 4, !dbg !795
  %inc32 = add nsw i32 %68, 1, !dbg !795
  %69 = ptrtoint i32* @passed_verification to i64
  call void @__DiscoPoPOpenMPWrite(i64 %69, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.402, i32 0, i32 0))
  store i32 %inc32, i32* @passed_verification, align 4, !dbg !795
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then31
  br label %if.end43, !dbg !796

if.else33:                                        ; preds = %if.then
  %70 = ptrtoint i32* %key_rank to i64
  call void @__DiscoPoPOpenMPRead(i64 %70, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.403, i32 0, i32 0))
  %71 = load i32, i32* %key_rank, align 4, !dbg !797
  %72 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %72, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.404, i32 0, i32 0))
  %73 = load i32, i32* %i, align 4, !dbg !800
  %idxprom34 = sext i32 %73 to i64, !dbg !801
  %arrayidx35 = getelementptr inbounds [5 x i32], [5 x i32]* @test_rank_array, i64 0, i64 %idxprom34, !dbg !801
  %74 = ptrtoint i32* %arrayidx35 to i64
  call void @__DiscoPoPOpenMPRead(i64 %74, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.405, i32 0, i32 0))
  %75 = load i32, i32* %arrayidx35, align 4, !dbg !801
  %76 = ptrtoint i32* %iteration.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %76, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.406, i32 0, i32 0))
  %77 = load i32, i32* %iteration.addr, align 4, !dbg !802
  %sub36 = sub nsw i32 %75, %77, !dbg !803
  %cmp37 = icmp ne i32 %71, %sub36, !dbg !804
  br i1 %cmp37, label %if.then39, label %if.else40, !dbg !805

if.then39:                                        ; preds = %if.else33
  %78 = ptrtoint i32* %failed to i64
  call void @__DiscoPoPOpenMPWrite(i64 %78, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.407, i32 0, i32 0))
  store i32 1, i32* %failed, align 4, !dbg !806
  br label %if.end42, !dbg !807

if.else40:                                        ; preds = %if.else33
  %79 = ptrtoint i32* @passed_verification to i64
  call void @__DiscoPoPOpenMPRead(i64 %79, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.408, i32 0, i32 0))
  %80 = load i32, i32* @passed_verification, align 4, !dbg !808
  %inc41 = add nsw i32 %80, 1, !dbg !808
  %81 = ptrtoint i32* @passed_verification to i64
  call void @__DiscoPoPOpenMPWrite(i64 %81, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.409, i32 0, i32 0))
  store i32 %inc41, i32* @passed_verification, align 4, !dbg !808
  br label %if.end42

if.end42:                                         ; preds = %if.else40, %if.then39
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.end
  %82 = ptrtoint i32* %failed to i64
  call void @__DiscoPoPOpenMPRead(i64 %82, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.410, i32 0, i32 0))
  %83 = load i32, i32* %failed, align 4, !dbg !809
  %cmp44 = icmp eq i32 %83, 1, !dbg !811
  br i1 %cmp44, label %if.then46, label %if.end47, !dbg !812

if.then46:                                        ; preds = %if.end43
  %84 = ptrtoint i32* %iteration.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %84, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.411, i32 0, i32 0))
  %85 = load i32, i32* %iteration.addr, align 4, !dbg !813
  %86 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %86, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.412, i32 0, i32 0))
  %87 = load i32, i32* %i, align 4, !dbg !814
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.7, i32 0, i32 0), i32 %85, i32 %87), !dbg !815
  br label %if.end47, !dbg !815

if.end47:                                         ; preds = %if.then46, %if.end43
  br label %if.end48, !dbg !816

if.end48:                                         ; preds = %if.end47, %land.lhs.true, %for.body13
  br label %for.inc49, !dbg !817

for.inc49:                                        ; preds = %if.end48
  %88 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %88, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.413, i32 0, i32 0))
  %89 = load i32, i32* %i, align 4, !dbg !818
  %inc50 = add nsw i32 %89, 1, !dbg !818
  %90 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %90, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.414, i32 0, i32 0))
  store i32 %inc50, i32* %i, align 4, !dbg !818
  br label %for.cond10, !dbg !820

for.end51:                                        ; preds = %for.cond10
  %91 = ptrtoint i32* %iteration.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %91, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.415, i32 0, i32 0))
  %92 = load i32, i32* %iteration.addr, align 4, !dbg !821
  %cmp52 = icmp eq i32 %92, 10, !dbg !823
  br i1 %cmp52, label %if.then54, label %if.end55, !dbg !824

if.then54:                                        ; preds = %for.end51
  %93 = ptrtoint i32** %key_buff_ptr to i64
  call void @__DiscoPoPOpenMPRead(i64 %93, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.416, i32 0, i32 0))
  %94 = load i32*, i32** %key_buff_ptr, align 8, !dbg !825
  %95 = ptrtoint i32** @key_buff_ptr_global to i64
  call void @__DiscoPoPOpenMPWrite(i64 %95, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.417, i32 0, i32 0))
  store i32* %94, i32** @key_buff_ptr_global, align 8, !dbg !826
  br label %if.end55, !dbg !827

if.end55:                                         ; preds = %if.then54, %for.end51
  ret void, !dbg !828
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..6(i32* noalias %.global_tid., i32* noalias %.bound_tid., i32* dereferenceable(4) %shift, i32* dereferenceable(4) %num_bucket_keys, i32** dereferenceable(8) %key_buff_ptr, i32** dereferenceable(8) %key_buff_ptr2) #0 !dbg !829 {
entry:
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.419, i32 0, i32 0))
  %.global_tid..addr = alloca i32*, align 8
  %.bound_tid..addr = alloca i32*, align 8
  %shift.addr = alloca i32*, align 8
  %num_bucket_keys.addr = alloca i32*, align 8
  %key_buff_ptr.addr = alloca i32**, align 8
  %key_buff_ptr2.addr = alloca i32**, align 8
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %work_buff = alloca i32*, align 8
  %m = alloca i32, align 4
  %k1 = alloca i32, align 4
  %k2 = alloca i32, align 4
  %myid = alloca i32, align 4
  %num_procs = alloca i32, align 4
  %.omp.iv = alloca i32, align 4
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %i4 = alloca i32, align 4
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  %.omp.iv62 = alloca i32, align 4
  %.omp.lb63 = alloca i32, align 4
  %.omp.ub64 = alloca i32, align 4
  %.omp.stride65 = alloca i32, align 4
  %.omp.is_last66 = alloca i32, align 4
  %i67 = alloca i32, align 4
  %.omp.iv113 = alloca i32, align 4
  %.omp.lb114 = alloca i32, align 4
  %.omp.ub115 = alloca i32, align 4
  %.omp.stride116 = alloca i32, align 4
  %.omp.is_last117 = alloca i32, align 4
  %i118 = alloca i32, align 4
  %2 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.420, i32 0, i32 0))
  store i32* %.global_tid., i32** %.global_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.global_tid..addr, metadata !834, metadata !82), !dbg !835
  %3 = ptrtoint i32** %.bound_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.421, i32 0, i32 0))
  store i32* %.bound_tid., i32** %.bound_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.bound_tid..addr, metadata !836, metadata !82), !dbg !835
  %4 = ptrtoint i32** %shift.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.422, i32 0, i32 0))
  store i32* %shift, i32** %shift.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %shift.addr, metadata !837, metadata !82), !dbg !835
  %5 = ptrtoint i32** %num_bucket_keys.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.423, i32 0, i32 0))
  store i32* %num_bucket_keys, i32** %num_bucket_keys.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %num_bucket_keys.addr, metadata !838, metadata !82), !dbg !835
  %6 = ptrtoint i32*** %key_buff_ptr.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.424, i32 0, i32 0))
  store i32** %key_buff_ptr, i32*** %key_buff_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32*** %key_buff_ptr.addr, metadata !839, metadata !82), !dbg !835
  %7 = ptrtoint i32*** %key_buff_ptr2.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %7, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.425, i32 0, i32 0))
  store i32** %key_buff_ptr2, i32*** %key_buff_ptr2.addr, align 8
  call void @llvm.dbg.declare(metadata i32*** %key_buff_ptr2.addr, metadata !840, metadata !82), !dbg !835
  %8 = ptrtoint i32** %shift.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %8, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.426, i32 0, i32 0))
  %9 = load i32*, i32** %shift.addr, align 8, !dbg !841
  %10 = ptrtoint i32** %num_bucket_keys.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %10, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.427, i32 0, i32 0))
  %11 = load i32*, i32** %num_bucket_keys.addr, align 8, !dbg !841
  %12 = ptrtoint i32*** %key_buff_ptr.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %12, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.428, i32 0, i32 0))
  %13 = load i32**, i32*** %key_buff_ptr.addr, align 8, !dbg !841
  %14 = ptrtoint i32*** %key_buff_ptr2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %14, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.429, i32 0, i32 0))
  %15 = load i32**, i32*** %key_buff_ptr2.addr, align 8, !dbg !841
  call void @llvm.dbg.declare(metadata i32* %i, metadata !842, metadata !82), !dbg !835
  call void @llvm.dbg.declare(metadata i32* %k, metadata !843, metadata !82), !dbg !835
  call void @llvm.dbg.declare(metadata i32** %work_buff, metadata !844, metadata !82), !dbg !846
  call void @llvm.dbg.declare(metadata i32* %m, metadata !847, metadata !82), !dbg !848
  call void @llvm.dbg.declare(metadata i32* %k1, metadata !849, metadata !82), !dbg !850
  call void @llvm.dbg.declare(metadata i32* %k2, metadata !851, metadata !82), !dbg !852
  call void @llvm.dbg.declare(metadata i32* %myid, metadata !853, metadata !82), !dbg !854
  %16 = ptrtoint i32* %myid to i64
  call void @__DiscoPoPOpenMPWrite(i64 %16, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.430, i32 0, i32 0))
  store i32 0, i32* %myid, align 4, !dbg !854
  call void @llvm.dbg.declare(metadata i32* %num_procs, metadata !855, metadata !82), !dbg !856
  %17 = ptrtoint i32* %num_procs to i64
  call void @__DiscoPoPOpenMPWrite(i64 %17, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.431, i32 0, i32 0))
  store i32 1, i32* %num_procs, align 4, !dbg !856
  %call = call i32 @omp_get_thread_num(), !dbg !857
  %18 = ptrtoint i32* %myid to i64
  call void @__DiscoPoPOpenMPWrite(i64 %18, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.432, i32 0, i32 0))
  store i32 %call, i32* %myid, align 4, !dbg !858
  %call1 = call i32 @omp_get_num_threads(), !dbg !859
  %19 = ptrtoint i32* %num_procs to i64
  call void @__DiscoPoPOpenMPWrite(i64 %19, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.433, i32 0, i32 0))
  store i32 %call1, i32* %num_procs, align 4, !dbg !860
  %20 = ptrtoint i32* %myid to i64
  call void @__DiscoPoPOpenMPRead(i64 %20, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.434, i32 0, i32 0))
  %21 = load i32, i32* %myid, align 4, !dbg !861
  %idxprom = sext i32 %21 to i64, !dbg !862
  %22 = ptrtoint i32*** @bucket_size to i64
  call void @__DiscoPoPOpenMPRead(i64 %22, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.435, i32 0, i32 0))
  %23 = load i32**, i32*** @bucket_size, align 8, !dbg !862
  %arrayidx = getelementptr inbounds i32*, i32** %23, i64 %idxprom, !dbg !862
  %24 = ptrtoint i32** %arrayidx to i64
  call void @__DiscoPoPOpenMPRead(i64 %24, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.436, i32 0, i32 0))
  %25 = load i32*, i32** %arrayidx, align 8, !dbg !862
  %26 = ptrtoint i32** %work_buff to i64
  call void @__DiscoPoPOpenMPWrite(i64 %26, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.437, i32 0, i32 0))
  store i32* %25, i32** %work_buff, align 8, !dbg !863
  %27 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %27, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.438, i32 0, i32 0))
  store i32 0, i32* %i, align 4, !dbg !864
  br label %for.cond, !dbg !866

for.cond:                                         ; preds = %for.inc, %entry
  %28 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %28, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.439, i32 0, i32 0))
  %29 = load i32, i32* %i, align 4, !dbg !867
  %cmp = icmp slt i32 %29, 512, !dbg !870
  br i1 %cmp, label %for.body, label %for.end, !dbg !871

for.body:                                         ; preds = %for.cond
  %30 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %30, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.440, i32 0, i32 0))
  %31 = load i32, i32* %i, align 4, !dbg !872
  %idxprom2 = sext i32 %31 to i64, !dbg !873
  %32 = ptrtoint i32** %work_buff to i64
  call void @__DiscoPoPOpenMPRead(i64 %32, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.441, i32 0, i32 0))
  %33 = load i32*, i32** %work_buff, align 8, !dbg !873
  %arrayidx3 = getelementptr inbounds i32, i32* %33, i64 %idxprom2, !dbg !873
  %34 = ptrtoint i32* %arrayidx3 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %34, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.442, i32 0, i32 0))
  store i32 0, i32* %arrayidx3, align 4, !dbg !874
  br label %for.inc, !dbg !873

for.inc:                                          ; preds = %for.body
  %35 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %35, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.443, i32 0, i32 0))
  %36 = load i32, i32* %i, align 4, !dbg !875
  %inc = add nsw i32 %36, 1, !dbg !875
  %37 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %37, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.444, i32 0, i32 0))
  store i32 %inc, i32* %i, align 4, !dbg !875
  br label %for.cond, !dbg !877

for.end:                                          ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %.omp.iv, metadata !878, metadata !82), !dbg !880
  call void @llvm.dbg.declare(metadata i32* %.omp.lb, metadata !881, metadata !82), !dbg !880
  %38 = ptrtoint i32* %.omp.lb to i64
  call void @__DiscoPoPOpenMPWrite(i64 %38, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.445, i32 0, i32 0))
  store i32 0, i32* %.omp.lb, align 4, !dbg !882
  call void @llvm.dbg.declare(metadata i32* %.omp.ub, metadata !883, metadata !82), !dbg !880
  %39 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPWrite(i64 %39, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.446, i32 0, i32 0))
  store i32 65535, i32* %.omp.ub, align 4, !dbg !882
  call void @llvm.dbg.declare(metadata i32* %.omp.stride, metadata !884, metadata !82), !dbg !880
  %40 = ptrtoint i32* %.omp.stride to i64
  call void @__DiscoPoPOpenMPWrite(i64 %40, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.447, i32 0, i32 0))
  store i32 1, i32* %.omp.stride, align 4, !dbg !882
  call void @llvm.dbg.declare(metadata i32* %.omp.is_last, metadata !885, metadata !82), !dbg !880
  %41 = ptrtoint i32* %.omp.is_last to i64
  call void @__DiscoPoPOpenMPWrite(i64 %41, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.448, i32 0, i32 0))
  store i32 0, i32* %.omp.is_last, align 4, !dbg !882
  call void @llvm.dbg.declare(metadata i32* %i4, metadata !886, metadata !82), !dbg !880
  %42 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !887
  %43 = ptrtoint i8** %42 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %43, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.449, i32 0, i32 0))
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @7, i32 0, i32 0), i8** %42, align 8, !dbg !887
  %44 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %44, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.450, i32 0, i32 0))
  %45 = load i32*, i32** %.global_tid..addr, align 8, !dbg !887
  %46 = ptrtoint i32* %45 to i64
  call void @__DiscoPoPOpenMPRead(i64 %46, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.451, i32 0, i32 0))
  %47 = load i32, i32* %45, align 4, !dbg !887
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.453, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_for_static_init_4(%ident_t* %.kmpc_loc.addr, i32 %47, i32 34, i32* %.omp.is_last, i32* %.omp.lb, i32* %.omp.ub, i32* %.omp.stride, i32 1, i32 1), !dbg !887
  %48 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %48, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.454, i32 0, i32 0))
  %49 = load i32, i32* %.omp.ub, align 4, !dbg !882
  %cmp5 = icmp sgt i32 %49, 65535, !dbg !882
  br i1 %cmp5, label %cond.true, label %cond.false, !dbg !882

cond.true:                                        ; preds = %for.end
  br label %cond.end, !dbg !888

cond.false:                                       ; preds = %for.end
  %50 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %50, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.455, i32 0, i32 0))
  %51 = load i32, i32* %.omp.ub, align 4, !dbg !890
  br label %cond.end, !dbg !890

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 65535, %cond.true ], [ %51, %cond.false ], !dbg !892
  %52 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPWrite(i64 %52, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.456, i32 0, i32 0))
  store i32 %cond, i32* %.omp.ub, align 4, !dbg !892
  %53 = ptrtoint i32* %.omp.lb to i64
  call void @__DiscoPoPOpenMPRead(i64 %53, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.457, i32 0, i32 0))
  %54 = load i32, i32* %.omp.lb, align 4, !dbg !892
  %55 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPWrite(i64 %55, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.458, i32 0, i32 0))
  store i32 %54, i32* %.omp.iv, align 4, !dbg !892
  br label %omp.inner.for.cond, !dbg !894

omp.inner.for.cond:                               ; preds = %omp.inner.for.inc, %cond.end
  %56 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %56, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.459, i32 0, i32 0))
  %57 = load i32, i32* %.omp.iv, align 4, !dbg !896
  %58 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %58, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.460, i32 0, i32 0))
  %59 = load i32, i32* %.omp.ub, align 4, !dbg !896
  %cmp6 = icmp sle i32 %57, %59, !dbg !880
  br i1 %cmp6, label %omp.inner.for.body, label %omp.inner.for.end, !dbg !898

omp.inner.for.body:                               ; preds = %omp.inner.for.cond
  %60 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %60, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.461, i32 0, i32 0))
  %61 = load i32, i32* %.omp.iv, align 4, !dbg !900
  %mul = mul nsw i32 %61, 1, !dbg !902
  %add = add nsw i32 0, %mul, !dbg !902
  %62 = ptrtoint i32* %i4 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %62, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.462, i32 0, i32 0))
  store i32 %add, i32* %i4, align 4, !dbg !902
  %63 = ptrtoint i32* %i4 to i64
  call void @__DiscoPoPOpenMPRead(i64 %63, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.463, i32 0, i32 0))
  %64 = load i32, i32* %i4, align 4, !dbg !903
  %idxprom7 = sext i32 %64 to i64, !dbg !904
  %arrayidx8 = getelementptr inbounds [65536 x i32], [65536 x i32]* @key_array, i64 0, i64 %idxprom7, !dbg !904
  %65 = ptrtoint i32* %arrayidx8 to i64
  call void @__DiscoPoPOpenMPRead(i64 %65, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.464, i32 0, i32 0))
  %66 = load i32, i32* %arrayidx8, align 4, !dbg !904
  %67 = ptrtoint i32* %9 to i64
  call void @__DiscoPoPOpenMPRead(i64 %67, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.465, i32 0, i32 0))
  %68 = load i32, i32* %9, align 4, !dbg !905
  %shr = ashr i32 %66, %68, !dbg !906
  %idxprom9 = sext i32 %shr to i64, !dbg !907
  %69 = ptrtoint i32** %work_buff to i64
  call void @__DiscoPoPOpenMPRead(i64 %69, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.466, i32 0, i32 0))
  %70 = load i32*, i32** %work_buff, align 8, !dbg !907
  %arrayidx10 = getelementptr inbounds i32, i32* %70, i64 %idxprom9, !dbg !907
  %71 = ptrtoint i32* %arrayidx10 to i64
  call void @__DiscoPoPOpenMPRead(i64 %71, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.467, i32 0, i32 0))
  %72 = load i32, i32* %arrayidx10, align 4, !dbg !908
  %inc11 = add nsw i32 %72, 1, !dbg !908
  %73 = ptrtoint i32* %arrayidx10 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %73, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.468, i32 0, i32 0))
  store i32 %inc11, i32* %arrayidx10, align 4, !dbg !908
  br label %omp.body.continue, !dbg !907

omp.body.continue:                                ; preds = %omp.inner.for.body
  br label %omp.inner.for.inc, !dbg !909

omp.inner.for.inc:                                ; preds = %omp.body.continue
  %74 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %74, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.469, i32 0, i32 0))
  %75 = load i32, i32* %.omp.iv, align 4, !dbg !910
  %add12 = add nsw i32 %75, 1, !dbg !912
  %76 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPWrite(i64 %76, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.470, i32 0, i32 0))
  store i32 %add12, i32* %.omp.iv, align 4, !dbg !912
  br label %omp.inner.for.cond, !dbg !913

omp.inner.for.end:                                ; preds = %omp.inner.for.cond
  br label %omp.loop.exit, !dbg !914

omp.loop.exit:                                    ; preds = %omp.inner.for.end
  %77 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !915
  %78 = ptrtoint i8** %77 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %78, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.471, i32 0, i32 0))
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @7, i32 0, i32 0), i8** %77, align 8, !dbg !915
  %79 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %79, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.472, i32 0, i32 0))
  %80 = load i32*, i32** %.global_tid..addr, align 8, !dbg !915
  %81 = ptrtoint i32* %80 to i64
  call void @__DiscoPoPOpenMPRead(i64 %81, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.473, i32 0, i32 0))
  %82 = load i32, i32* %80, align 4, !dbg !915
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.475, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_for_static_fini(%ident_t* %.kmpc_loc.addr, i32 %82), !dbg !915
  %83 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !916
  %84 = ptrtoint i8** %83 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %84, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.476, i32 0, i32 0))
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @7, i32 0, i32 0), i8** %83, align 8, !dbg !916
  %85 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %85, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.477, i32 0, i32 0))
  %86 = load i32*, i32** %.global_tid..addr, align 8, !dbg !916
  %87 = ptrtoint i32* %86 to i64
  call void @__DiscoPoPOpenMPRead(i64 %87, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.478, i32 0, i32 0))
  %88 = load i32, i32* %86, align 4, !dbg !916
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.480, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_barrier(%ident_t* %.kmpc_loc.addr, i32 %88), !dbg !917
  %89 = call [512 x i32]* @_ZTW11bucket_ptrs(), !dbg !919
  %arrayidx13 = getelementptr inbounds [512 x i32], [512 x i32]* %89, i64 0, i64 0, !dbg !919
  %90 = ptrtoint i32* %arrayidx13 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %90, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.481, i32 0, i32 0))
  store i32 0, i32* %arrayidx13, align 16, !dbg !920
  %91 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPWrite(i64 %91, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.482, i32 0, i32 0))
  store i32 0, i32* %k, align 4, !dbg !921
  br label %for.cond14, !dbg !923

for.cond14:                                       ; preds = %for.inc22, %omp.loop.exit
  %92 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %92, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.483, i32 0, i32 0))
  %93 = load i32, i32* %k, align 4, !dbg !924
  %94 = ptrtoint i32* %myid to i64
  call void @__DiscoPoPOpenMPRead(i64 %94, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.484, i32 0, i32 0))
  %95 = load i32, i32* %myid, align 4, !dbg !927
  %cmp15 = icmp slt i32 %93, %95, !dbg !928
  br i1 %cmp15, label %for.body16, label %for.end24, !dbg !929

for.body16:                                       ; preds = %for.cond14
  %96 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %96, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.485, i32 0, i32 0))
  %97 = load i32, i32* %k, align 4, !dbg !930
  %idxprom17 = sext i32 %97 to i64, !dbg !931
  %98 = ptrtoint i32*** @bucket_size to i64
  call void @__DiscoPoPOpenMPRead(i64 %98, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.486, i32 0, i32 0))
  %99 = load i32**, i32*** @bucket_size, align 8, !dbg !931
  %arrayidx18 = getelementptr inbounds i32*, i32** %99, i64 %idxprom17, !dbg !931
  %100 = ptrtoint i32** %arrayidx18 to i64
  call void @__DiscoPoPOpenMPRead(i64 %100, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.487, i32 0, i32 0))
  %101 = load i32*, i32** %arrayidx18, align 8, !dbg !931
  %arrayidx19 = getelementptr inbounds i32, i32* %101, i64 0, !dbg !931
  %102 = ptrtoint i32* %arrayidx19 to i64
  call void @__DiscoPoPOpenMPRead(i64 %102, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.488, i32 0, i32 0))
  %103 = load i32, i32* %arrayidx19, align 4, !dbg !931
  %104 = call [512 x i32]* @_ZTW11bucket_ptrs(), !dbg !932
  %arrayidx20 = getelementptr inbounds [512 x i32], [512 x i32]* %104, i64 0, i64 0, !dbg !932
  %105 = ptrtoint i32* %arrayidx20 to i64
  call void @__DiscoPoPOpenMPRead(i64 %105, i32 16, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.489, i32 0, i32 0))
  %106 = load i32, i32* %arrayidx20, align 16, !dbg !933
  %add21 = add nsw i32 %106, %103, !dbg !933
  %107 = ptrtoint i32* %arrayidx20 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %107, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.490, i32 0, i32 0))
  store i32 %add21, i32* %arrayidx20, align 16, !dbg !933
  br label %for.inc22, !dbg !932

for.inc22:                                        ; preds = %for.body16
  %108 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %108, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.491, i32 0, i32 0))
  %109 = load i32, i32* %k, align 4, !dbg !934
  %inc23 = add nsw i32 %109, 1, !dbg !934
  %110 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPWrite(i64 %110, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.492, i32 0, i32 0))
  store i32 %inc23, i32* %k, align 4, !dbg !934
  br label %for.cond14, !dbg !936

for.end24:                                        ; preds = %for.cond14
  %111 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %111, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.493, i32 0, i32 0))
  store i32 1, i32* %i, align 4, !dbg !937
  br label %for.cond25, !dbg !939

for.cond25:                                       ; preds = %for.inc59, %for.end24
  %112 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %112, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.494, i32 0, i32 0))
  %113 = load i32, i32* %i, align 4, !dbg !940
  %cmp26 = icmp slt i32 %113, 512, !dbg !943
  br i1 %cmp26, label %for.body27, label %for.end61, !dbg !944

for.body27:                                       ; preds = %for.cond25
  %114 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %114, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.495, i32 0, i32 0))
  %115 = load i32, i32* %i, align 4, !dbg !945
  %sub = sub nsw i32 %115, 1, !dbg !947
  %idxprom28 = sext i32 %sub to i64, !dbg !948
  %116 = call [512 x i32]* @_ZTW11bucket_ptrs(), !dbg !948
  %arrayidx29 = getelementptr inbounds [512 x i32], [512 x i32]* %116, i64 0, i64 %idxprom28, !dbg !948
  %117 = ptrtoint i32* %arrayidx29 to i64
  call void @__DiscoPoPOpenMPRead(i64 %117, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.496, i32 0, i32 0))
  %118 = load i32, i32* %arrayidx29, align 4, !dbg !948
  %119 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %119, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.497, i32 0, i32 0))
  %120 = load i32, i32* %i, align 4, !dbg !949
  %idxprom30 = sext i32 %120 to i64, !dbg !950
  %121 = call [512 x i32]* @_ZTW11bucket_ptrs(), !dbg !951
  %arrayidx31 = getelementptr inbounds [512 x i32], [512 x i32]* %121, i64 0, i64 %idxprom30, !dbg !950
  %122 = ptrtoint i32* %arrayidx31 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %122, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.498, i32 0, i32 0))
  store i32 %118, i32* %arrayidx31, align 4, !dbg !953
  %123 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPWrite(i64 %123, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.499, i32 0, i32 0))
  store i32 0, i32* %k, align 4, !dbg !954
  br label %for.cond32, !dbg !956

for.cond32:                                       ; preds = %for.inc42, %for.body27
  %124 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %124, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.500, i32 0, i32 0))
  %125 = load i32, i32* %k, align 4, !dbg !957
  %126 = ptrtoint i32* %myid to i64
  call void @__DiscoPoPOpenMPRead(i64 %126, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.501, i32 0, i32 0))
  %127 = load i32, i32* %myid, align 4, !dbg !960
  %cmp33 = icmp slt i32 %125, %127, !dbg !961
  br i1 %cmp33, label %for.body34, label %for.end44, !dbg !962

for.body34:                                       ; preds = %for.cond32
  %128 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %128, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.502, i32 0, i32 0))
  %129 = load i32, i32* %i, align 4, !dbg !963
  %idxprom35 = sext i32 %129 to i64, !dbg !964
  %130 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %130, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.503, i32 0, i32 0))
  %131 = load i32, i32* %k, align 4, !dbg !965
  %idxprom36 = sext i32 %131 to i64, !dbg !964
  %132 = ptrtoint i32*** @bucket_size to i64
  call void @__DiscoPoPOpenMPRead(i64 %132, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.504, i32 0, i32 0))
  %133 = load i32**, i32*** @bucket_size, align 8, !dbg !964
  %arrayidx37 = getelementptr inbounds i32*, i32** %133, i64 %idxprom36, !dbg !964
  %134 = ptrtoint i32** %arrayidx37 to i64
  call void @__DiscoPoPOpenMPRead(i64 %134, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.505, i32 0, i32 0))
  %135 = load i32*, i32** %arrayidx37, align 8, !dbg !964
  %arrayidx38 = getelementptr inbounds i32, i32* %135, i64 %idxprom35, !dbg !964
  %136 = ptrtoint i32* %arrayidx38 to i64
  call void @__DiscoPoPOpenMPRead(i64 %136, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.506, i32 0, i32 0))
  %137 = load i32, i32* %arrayidx38, align 4, !dbg !964
  %138 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %138, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.507, i32 0, i32 0))
  %139 = load i32, i32* %i, align 4, !dbg !966
  %idxprom39 = sext i32 %139 to i64, !dbg !967
  %140 = call [512 x i32]* @_ZTW11bucket_ptrs(), !dbg !967
  %arrayidx40 = getelementptr inbounds [512 x i32], [512 x i32]* %140, i64 0, i64 %idxprom39, !dbg !967
  %141 = ptrtoint i32* %arrayidx40 to i64
  call void @__DiscoPoPOpenMPRead(i64 %141, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.508, i32 0, i32 0))
  %142 = load i32, i32* %arrayidx40, align 4, !dbg !968
  %add41 = add nsw i32 %142, %137, !dbg !968
  %143 = ptrtoint i32* %arrayidx40 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %143, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.509, i32 0, i32 0))
  store i32 %add41, i32* %arrayidx40, align 4, !dbg !968
  br label %for.inc42, !dbg !967

for.inc42:                                        ; preds = %for.body34
  %144 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %144, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.510, i32 0, i32 0))
  %145 = load i32, i32* %k, align 4, !dbg !969
  %inc43 = add nsw i32 %145, 1, !dbg !969
  %146 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPWrite(i64 %146, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.511, i32 0, i32 0))
  store i32 %inc43, i32* %k, align 4, !dbg !969
  br label %for.cond32, !dbg !971

for.end44:                                        ; preds = %for.cond32
  %147 = ptrtoint i32* %myid to i64
  call void @__DiscoPoPOpenMPRead(i64 %147, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.512, i32 0, i32 0))
  %148 = load i32, i32* %myid, align 4, !dbg !972
  %149 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPWrite(i64 %149, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.513, i32 0, i32 0))
  store i32 %148, i32* %k, align 4, !dbg !974
  br label %for.cond45, !dbg !975

for.cond45:                                       ; preds = %for.inc56, %for.end44
  %150 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %150, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.514, i32 0, i32 0))
  %151 = load i32, i32* %k, align 4, !dbg !976
  %152 = ptrtoint i32* %num_procs to i64
  call void @__DiscoPoPOpenMPRead(i64 %152, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.515, i32 0, i32 0))
  %153 = load i32, i32* %num_procs, align 4, !dbg !979
  %cmp46 = icmp slt i32 %151, %153, !dbg !980
  br i1 %cmp46, label %for.body47, label %for.end58, !dbg !981

for.body47:                                       ; preds = %for.cond45
  %154 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %154, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.516, i32 0, i32 0))
  %155 = load i32, i32* %i, align 4, !dbg !982
  %sub48 = sub nsw i32 %155, 1, !dbg !983
  %idxprom49 = sext i32 %sub48 to i64, !dbg !984
  %156 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %156, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.517, i32 0, i32 0))
  %157 = load i32, i32* %k, align 4, !dbg !985
  %idxprom50 = sext i32 %157 to i64, !dbg !984
  %158 = ptrtoint i32*** @bucket_size to i64
  call void @__DiscoPoPOpenMPRead(i64 %158, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.518, i32 0, i32 0))
  %159 = load i32**, i32*** @bucket_size, align 8, !dbg !984
  %arrayidx51 = getelementptr inbounds i32*, i32** %159, i64 %idxprom50, !dbg !984
  %160 = ptrtoint i32** %arrayidx51 to i64
  call void @__DiscoPoPOpenMPRead(i64 %160, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.519, i32 0, i32 0))
  %161 = load i32*, i32** %arrayidx51, align 8, !dbg !984
  %arrayidx52 = getelementptr inbounds i32, i32* %161, i64 %idxprom49, !dbg !984
  %162 = ptrtoint i32* %arrayidx52 to i64
  call void @__DiscoPoPOpenMPRead(i64 %162, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.520, i32 0, i32 0))
  %163 = load i32, i32* %arrayidx52, align 4, !dbg !984
  %164 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %164, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.521, i32 0, i32 0))
  %165 = load i32, i32* %i, align 4, !dbg !986
  %idxprom53 = sext i32 %165 to i64, !dbg !987
  %166 = call [512 x i32]* @_ZTW11bucket_ptrs(), !dbg !987
  %arrayidx54 = getelementptr inbounds [512 x i32], [512 x i32]* %166, i64 0, i64 %idxprom53, !dbg !987
  %167 = ptrtoint i32* %arrayidx54 to i64
  call void @__DiscoPoPOpenMPRead(i64 %167, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.522, i32 0, i32 0))
  %168 = load i32, i32* %arrayidx54, align 4, !dbg !988
  %add55 = add nsw i32 %168, %163, !dbg !988
  %169 = ptrtoint i32* %arrayidx54 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %169, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.523, i32 0, i32 0))
  store i32 %add55, i32* %arrayidx54, align 4, !dbg !988
  br label %for.inc56, !dbg !987

for.inc56:                                        ; preds = %for.body47
  %170 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %170, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.524, i32 0, i32 0))
  %171 = load i32, i32* %k, align 4, !dbg !989
  %inc57 = add nsw i32 %171, 1, !dbg !989
  %172 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPWrite(i64 %172, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.525, i32 0, i32 0))
  store i32 %inc57, i32* %k, align 4, !dbg !989
  br label %for.cond45, !dbg !991

for.end58:                                        ; preds = %for.cond45
  br label %for.inc59, !dbg !992

for.inc59:                                        ; preds = %for.end58
  %173 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %173, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.526, i32 0, i32 0))
  %174 = load i32, i32* %i, align 4, !dbg !993
  %inc60 = add nsw i32 %174, 1, !dbg !993
  %175 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %175, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.527, i32 0, i32 0))
  store i32 %inc60, i32* %i, align 4, !dbg !993
  br label %for.cond25, !dbg !995

for.end61:                                        ; preds = %for.cond25
  call void @llvm.dbg.declare(metadata i32* %.omp.iv62, metadata !996, metadata !82), !dbg !998
  call void @llvm.dbg.declare(metadata i32* %.omp.lb63, metadata !999, metadata !82), !dbg !998
  %176 = ptrtoint i32* %.omp.lb63 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %176, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.528, i32 0, i32 0))
  store i32 0, i32* %.omp.lb63, align 4, !dbg !1000
  call void @llvm.dbg.declare(metadata i32* %.omp.ub64, metadata !1001, metadata !82), !dbg !998
  %177 = ptrtoint i32* %.omp.ub64 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %177, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.529, i32 0, i32 0))
  store i32 65535, i32* %.omp.ub64, align 4, !dbg !1000
  call void @llvm.dbg.declare(metadata i32* %.omp.stride65, metadata !1002, metadata !82), !dbg !998
  %178 = ptrtoint i32* %.omp.stride65 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %178, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.530, i32 0, i32 0))
  store i32 1, i32* %.omp.stride65, align 4, !dbg !1000
  call void @llvm.dbg.declare(metadata i32* %.omp.is_last66, metadata !1003, metadata !82), !dbg !998
  %179 = ptrtoint i32* %.omp.is_last66 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %179, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.531, i32 0, i32 0))
  store i32 0, i32* %.omp.is_last66, align 4, !dbg !1000
  call void @llvm.dbg.declare(metadata i32* %i67, metadata !1004, metadata !82), !dbg !998
  %180 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !1005
  %181 = ptrtoint i8** %180 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %181, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.532, i32 0, i32 0))
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @8, i32 0, i32 0), i8** %180, align 8, !dbg !1005
  %182 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %182, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.533, i32 0, i32 0))
  %183 = load i32*, i32** %.global_tid..addr, align 8, !dbg !1005
  %184 = ptrtoint i32* %183 to i64
  call void @__DiscoPoPOpenMPRead(i64 %184, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.534, i32 0, i32 0))
  %185 = load i32, i32* %183, align 4, !dbg !1005
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.536, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_for_static_init_4(%ident_t* %.kmpc_loc.addr, i32 %185, i32 34, i32* %.omp.is_last66, i32* %.omp.lb63, i32* %.omp.ub64, i32* %.omp.stride65, i32 1, i32 1), !dbg !1005
  %186 = ptrtoint i32* %.omp.ub64 to i64
  call void @__DiscoPoPOpenMPRead(i64 %186, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.537, i32 0, i32 0))
  %187 = load i32, i32* %.omp.ub64, align 4, !dbg !1000
  %cmp68 = icmp sgt i32 %187, 65535, !dbg !1000
  br i1 %cmp68, label %cond.true69, label %cond.false70, !dbg !1000

cond.true69:                                      ; preds = %for.end61
  br label %cond.end71, !dbg !1006

cond.false70:                                     ; preds = %for.end61
  %188 = ptrtoint i32* %.omp.ub64 to i64
  call void @__DiscoPoPOpenMPRead(i64 %188, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.538, i32 0, i32 0))
  %189 = load i32, i32* %.omp.ub64, align 4, !dbg !1008
  br label %cond.end71, !dbg !1008

cond.end71:                                       ; preds = %cond.false70, %cond.true69
  %cond72 = phi i32 [ 65535, %cond.true69 ], [ %189, %cond.false70 ], !dbg !1010
  %190 = ptrtoint i32* %.omp.ub64 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %190, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.539, i32 0, i32 0))
  store i32 %cond72, i32* %.omp.ub64, align 4, !dbg !1010
  %191 = ptrtoint i32* %.omp.lb63 to i64
  call void @__DiscoPoPOpenMPRead(i64 %191, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.540, i32 0, i32 0))
  %192 = load i32, i32* %.omp.lb63, align 4, !dbg !1010
  %193 = ptrtoint i32* %.omp.iv62 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %193, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.541, i32 0, i32 0))
  store i32 %192, i32* %.omp.iv62, align 4, !dbg !1010
  br label %omp.inner.for.cond73, !dbg !1012

omp.inner.for.cond73:                             ; preds = %omp.inner.for.inc87, %cond.end71
  %194 = ptrtoint i32* %.omp.iv62 to i64
  call void @__DiscoPoPOpenMPRead(i64 %194, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.542, i32 0, i32 0))
  %195 = load i32, i32* %.omp.iv62, align 4, !dbg !1013
  %196 = ptrtoint i32* %.omp.ub64 to i64
  call void @__DiscoPoPOpenMPRead(i64 %196, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.543, i32 0, i32 0))
  %197 = load i32, i32* %.omp.ub64, align 4, !dbg !1013
  %cmp74 = icmp sle i32 %195, %197, !dbg !1015
  br i1 %cmp74, label %omp.inner.for.body75, label %omp.inner.for.end89, !dbg !1017

omp.inner.for.body75:                             ; preds = %omp.inner.for.cond73
  %198 = ptrtoint i32* %.omp.iv62 to i64
  call void @__DiscoPoPOpenMPRead(i64 %198, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.544, i32 0, i32 0))
  %199 = load i32, i32* %.omp.iv62, align 4, !dbg !1018
  %mul76 = mul nsw i32 %199, 1, !dbg !1019
  %add77 = add nsw i32 0, %mul76, !dbg !1019
  %200 = ptrtoint i32* %i67 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %200, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.545, i32 0, i32 0))
  store i32 %add77, i32* %i67, align 4, !dbg !1019
  %201 = ptrtoint i32* %i67 to i64
  call void @__DiscoPoPOpenMPRead(i64 %201, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.546, i32 0, i32 0))
  %202 = load i32, i32* %i67, align 4, !dbg !1020
  %idxprom78 = sext i32 %202 to i64, !dbg !1022
  %arrayidx79 = getelementptr inbounds [65536 x i32], [65536 x i32]* @key_array, i64 0, i64 %idxprom78, !dbg !1022
  %203 = ptrtoint i32* %arrayidx79 to i64
  call void @__DiscoPoPOpenMPRead(i64 %203, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.547, i32 0, i32 0))
  %204 = load i32, i32* %arrayidx79, align 4, !dbg !1022
  %205 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPWrite(i64 %205, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.548, i32 0, i32 0))
  store i32 %204, i32* %k, align 4, !dbg !1023
  %206 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %206, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.549, i32 0, i32 0))
  %207 = load i32, i32* %k, align 4, !dbg !1024
  %208 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %208, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.550, i32 0, i32 0))
  %209 = load i32, i32* %k, align 4, !dbg !1025
  %210 = ptrtoint i32* %9 to i64
  call void @__DiscoPoPOpenMPRead(i64 %210, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.551, i32 0, i32 0))
  %211 = load i32, i32* %9, align 4, !dbg !1026
  %shr80 = ashr i32 %209, %211, !dbg !1027
  %idxprom81 = sext i32 %shr80 to i64, !dbg !1028
  %212 = call [512 x i32]* @_ZTW11bucket_ptrs(), !dbg !1028
  %arrayidx82 = getelementptr inbounds [512 x i32], [512 x i32]* %212, i64 0, i64 %idxprom81, !dbg !1028
  %213 = ptrtoint i32* %arrayidx82 to i64
  call void @__DiscoPoPOpenMPRead(i64 %213, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.552, i32 0, i32 0))
  %214 = load i32, i32* %arrayidx82, align 4, !dbg !1029
  %inc83 = add nsw i32 %214, 1, !dbg !1029
  %215 = ptrtoint i32* %arrayidx82 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %215, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.553, i32 0, i32 0))
  store i32 %inc83, i32* %arrayidx82, align 4, !dbg !1029
  %idxprom84 = sext i32 %214 to i64, !dbg !1030
  %arrayidx85 = getelementptr inbounds [65536 x i32], [65536 x i32]* @key_buff2, i64 0, i64 %idxprom84, !dbg !1030
  %216 = ptrtoint i32* %arrayidx85 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %216, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.554, i32 0, i32 0))
  store i32 %207, i32* %arrayidx85, align 4, !dbg !1031
  br label %omp.body.continue86, !dbg !1032

omp.body.continue86:                              ; preds = %omp.inner.for.body75
  br label %omp.inner.for.inc87, !dbg !1033

omp.inner.for.inc87:                              ; preds = %omp.body.continue86
  %217 = ptrtoint i32* %.omp.iv62 to i64
  call void @__DiscoPoPOpenMPRead(i64 %217, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.555, i32 0, i32 0))
  %218 = load i32, i32* %.omp.iv62, align 4, !dbg !1034
  %add88 = add nsw i32 %218, 1, !dbg !1036
  %219 = ptrtoint i32* %.omp.iv62 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %219, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.556, i32 0, i32 0))
  store i32 %add88, i32* %.omp.iv62, align 4, !dbg !1036
  br label %omp.inner.for.cond73, !dbg !1037

omp.inner.for.end89:                              ; preds = %omp.inner.for.cond73
  br label %omp.loop.exit90, !dbg !1038

omp.loop.exit90:                                  ; preds = %omp.inner.for.end89
  %220 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !1039
  %221 = ptrtoint i8** %220 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %221, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.557, i32 0, i32 0))
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @8, i32 0, i32 0), i8** %220, align 8, !dbg !1039
  %222 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %222, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.558, i32 0, i32 0))
  %223 = load i32*, i32** %.global_tid..addr, align 8, !dbg !1039
  %224 = ptrtoint i32* %223 to i64
  call void @__DiscoPoPOpenMPRead(i64 %224, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.559, i32 0, i32 0))
  %225 = load i32, i32* %223, align 4, !dbg !1039
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.561, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_for_static_fini(%ident_t* %.kmpc_loc.addr, i32 %225), !dbg !1039
  %226 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !1040
  %227 = ptrtoint i8** %226 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %227, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.562, i32 0, i32 0))
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @8, i32 0, i32 0), i8** %226, align 8, !dbg !1040
  %228 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %228, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.563, i32 0, i32 0))
  %229 = load i32*, i32** %.global_tid..addr, align 8, !dbg !1040
  %230 = ptrtoint i32* %229 to i64
  call void @__DiscoPoPOpenMPRead(i64 %230, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.564, i32 0, i32 0))
  %231 = load i32, i32* %229, align 4, !dbg !1040
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.566, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_barrier(%ident_t* %.kmpc_loc.addr, i32 %231), !dbg !1041
  %232 = ptrtoint i32* %myid to i64
  call void @__DiscoPoPOpenMPRead(i64 %232, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.567, i32 0, i32 0))
  %233 = load i32, i32* %myid, align 4, !dbg !1043
  %234 = ptrtoint i32* %num_procs to i64
  call void @__DiscoPoPOpenMPRead(i64 %234, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.568, i32 0, i32 0))
  %235 = load i32, i32* %num_procs, align 4, !dbg !1045
  %sub91 = sub nsw i32 %235, 1, !dbg !1046
  %cmp92 = icmp slt i32 %233, %sub91, !dbg !1047
  br i1 %cmp92, label %if.then, label %if.end, !dbg !1048

if.then:                                          ; preds = %omp.loop.exit90
  %236 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %236, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.569, i32 0, i32 0))
  store i32 0, i32* %i, align 4, !dbg !1049
  br label %for.cond93, !dbg !1052

for.cond93:                                       ; preds = %for.inc110, %if.then
  %237 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %237, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.570, i32 0, i32 0))
  %238 = load i32, i32* %i, align 4, !dbg !1053
  %cmp94 = icmp slt i32 %238, 512, !dbg !1056
  br i1 %cmp94, label %for.body95, label %for.end112, !dbg !1057

for.body95:                                       ; preds = %for.cond93
  %239 = ptrtoint i32* %myid to i64
  call void @__DiscoPoPOpenMPRead(i64 %239, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.571, i32 0, i32 0))
  %240 = load i32, i32* %myid, align 4, !dbg !1058
  %add96 = add nsw i32 %240, 1, !dbg !1060
  %241 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPWrite(i64 %241, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.572, i32 0, i32 0))
  store i32 %add96, i32* %k, align 4, !dbg !1061
  br label %for.cond97, !dbg !1062

for.cond97:                                       ; preds = %for.inc107, %for.body95
  %242 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %242, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.573, i32 0, i32 0))
  %243 = load i32, i32* %k, align 4, !dbg !1063
  %244 = ptrtoint i32* %num_procs to i64
  call void @__DiscoPoPOpenMPRead(i64 %244, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.574, i32 0, i32 0))
  %245 = load i32, i32* %num_procs, align 4, !dbg !1066
  %cmp98 = icmp slt i32 %243, %245, !dbg !1067
  br i1 %cmp98, label %for.body99, label %for.end109, !dbg !1068

for.body99:                                       ; preds = %for.cond97
  %246 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %246, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.575, i32 0, i32 0))
  %247 = load i32, i32* %i, align 4, !dbg !1069
  %idxprom100 = sext i32 %247 to i64, !dbg !1070
  %248 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %248, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.576, i32 0, i32 0))
  %249 = load i32, i32* %k, align 4, !dbg !1071
  %idxprom101 = sext i32 %249 to i64, !dbg !1070
  %250 = ptrtoint i32*** @bucket_size to i64
  call void @__DiscoPoPOpenMPRead(i64 %250, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.577, i32 0, i32 0))
  %251 = load i32**, i32*** @bucket_size, align 8, !dbg !1070
  %arrayidx102 = getelementptr inbounds i32*, i32** %251, i64 %idxprom101, !dbg !1070
  %252 = ptrtoint i32** %arrayidx102 to i64
  call void @__DiscoPoPOpenMPRead(i64 %252, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.578, i32 0, i32 0))
  %253 = load i32*, i32** %arrayidx102, align 8, !dbg !1070
  %arrayidx103 = getelementptr inbounds i32, i32* %253, i64 %idxprom100, !dbg !1070
  %254 = ptrtoint i32* %arrayidx103 to i64
  call void @__DiscoPoPOpenMPRead(i64 %254, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.579, i32 0, i32 0))
  %255 = load i32, i32* %arrayidx103, align 4, !dbg !1070
  %256 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %256, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.580, i32 0, i32 0))
  %257 = load i32, i32* %i, align 4, !dbg !1072
  %idxprom104 = sext i32 %257 to i64, !dbg !1073
  %258 = call [512 x i32]* @_ZTW11bucket_ptrs(), !dbg !1073
  %arrayidx105 = getelementptr inbounds [512 x i32], [512 x i32]* %258, i64 0, i64 %idxprom104, !dbg !1073
  %259 = ptrtoint i32* %arrayidx105 to i64
  call void @__DiscoPoPOpenMPRead(i64 %259, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.581, i32 0, i32 0))
  %260 = load i32, i32* %arrayidx105, align 4, !dbg !1074
  %add106 = add nsw i32 %260, %255, !dbg !1074
  %261 = ptrtoint i32* %arrayidx105 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %261, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.582, i32 0, i32 0))
  store i32 %add106, i32* %arrayidx105, align 4, !dbg !1074
  br label %for.inc107, !dbg !1073

for.inc107:                                       ; preds = %for.body99
  %262 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %262, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.583, i32 0, i32 0))
  %263 = load i32, i32* %k, align 4, !dbg !1075
  %inc108 = add nsw i32 %263, 1, !dbg !1075
  %264 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPWrite(i64 %264, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.584, i32 0, i32 0))
  store i32 %inc108, i32* %k, align 4, !dbg !1075
  br label %for.cond97, !dbg !1077

for.end109:                                       ; preds = %for.cond97
  br label %for.inc110, !dbg !1078

for.inc110:                                       ; preds = %for.end109
  %265 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %265, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.585, i32 0, i32 0))
  %266 = load i32, i32* %i, align 4, !dbg !1080
  %inc111 = add nsw i32 %266, 1, !dbg !1080
  %267 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %267, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.586, i32 0, i32 0))
  store i32 %inc111, i32* %i, align 4, !dbg !1080
  br label %for.cond93, !dbg !1082

for.end112:                                       ; preds = %for.cond93
  br label %if.end, !dbg !1083

if.end:                                           ; preds = %for.end112, %omp.loop.exit90
  call void @llvm.dbg.declare(metadata i32* %.omp.iv113, metadata !1084, metadata !82), !dbg !1086
  call void @llvm.dbg.declare(metadata i32* %.omp.lb114, metadata !1087, metadata !82), !dbg !1086
  %268 = ptrtoint i32* %.omp.lb114 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %268, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.587, i32 0, i32 0))
  store i32 0, i32* %.omp.lb114, align 4, !dbg !1088
  call void @llvm.dbg.declare(metadata i32* %.omp.ub115, metadata !1089, metadata !82), !dbg !1086
  %269 = ptrtoint i32* %.omp.ub115 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %269, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.588, i32 0, i32 0))
  store i32 511, i32* %.omp.ub115, align 4, !dbg !1088
  call void @llvm.dbg.declare(metadata i32* %.omp.stride116, metadata !1090, metadata !82), !dbg !1086
  %270 = ptrtoint i32* %.omp.stride116 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %270, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.589, i32 0, i32 0))
  store i32 1, i32* %.omp.stride116, align 4, !dbg !1088
  call void @llvm.dbg.declare(metadata i32* %.omp.is_last117, metadata !1091, metadata !82), !dbg !1086
  %271 = ptrtoint i32* %.omp.is_last117 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %271, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.590, i32 0, i32 0))
  store i32 0, i32* %.omp.is_last117, align 4, !dbg !1088
  call void @llvm.dbg.declare(metadata i32* %i118, metadata !1092, metadata !82), !dbg !1086
  %272 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !1093
  %273 = ptrtoint i8** %272 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %273, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.591, i32 0, i32 0))
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @9, i32 0, i32 0), i8** %272, align 8, !dbg !1093
  %274 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %274, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.592, i32 0, i32 0))
  %275 = load i32*, i32** %.global_tid..addr, align 8, !dbg !1093
  %276 = ptrtoint i32* %275 to i64
  call void @__DiscoPoPOpenMPRead(i64 %276, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.593, i32 0, i32 0))
  %277 = load i32, i32* %275, align 4, !dbg !1093
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.595, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_dispatch_init_4(%ident_t* %.kmpc_loc.addr, i32 %277, i32 35, i32 0, i32 511, i32 1, i32 1), !dbg !1093
  br label %omp.dispatch.cond, !dbg !1093

omp.dispatch.cond:                                ; preds = %omp.dispatch.inc, %if.end
  %278 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !1094
  %279 = ptrtoint i8** %278 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %279, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.596, i32 0, i32 0))
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @9, i32 0, i32 0), i8** %278, align 8, !dbg !1094
  %280 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %280, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.597, i32 0, i32 0))
  %281 = load i32*, i32** %.global_tid..addr, align 8, !dbg !1094
  %282 = ptrtoint i32* %281 to i64
  call void @__DiscoPoPOpenMPRead(i64 %282, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.598, i32 0, i32 0))
  %283 = load i32, i32* %281, align 4, !dbg !1094
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.600, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  %284 = call i32 @__kmpc_dispatch_next_4(%ident_t* %.kmpc_loc.addr, i32 %283, i32* %.omp.is_last117, i32* %.omp.lb114, i32* %.omp.ub115, i32* %.omp.stride116), !dbg !1094
  %tobool = icmp ne i32 %284, 0, !dbg !1094
  br i1 %tobool, label %omp.dispatch.body, label %omp.dispatch.end, !dbg !1094

omp.dispatch.body:                                ; preds = %omp.dispatch.cond
  %285 = ptrtoint i32* %.omp.lb114 to i64
  call void @__DiscoPoPOpenMPRead(i64 %285, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.601, i32 0, i32 0))
  %286 = load i32, i32* %.omp.lb114, align 4, !dbg !1095
  %287 = ptrtoint i32* %.omp.iv113 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %287, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.602, i32 0, i32 0))
  store i32 %286, i32* %.omp.iv113, align 4, !dbg !1095
  br label %omp.inner.for.cond119, !dbg !1097

omp.inner.for.cond119:                            ; preds = %omp.inner.for.inc172, %omp.dispatch.body
  %288 = ptrtoint i32* %.omp.iv113 to i64
  call void @__DiscoPoPOpenMPRead(i64 %288, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.603, i32 0, i32 0))
  %289 = load i32, i32* %.omp.iv113, align 4, !dbg !1098, !llvm.mem.parallel_loop_access !1100
  %290 = ptrtoint i32* %.omp.ub115 to i64
  call void @__DiscoPoPOpenMPRead(i64 %290, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.604, i32 0, i32 0))
  %291 = load i32, i32* %.omp.ub115, align 4, !dbg !1098, !llvm.mem.parallel_loop_access !1100
  %cmp120 = icmp sle i32 %289, %291, !dbg !1101
  br i1 %cmp120, label %omp.inner.for.body121, label %omp.inner.for.end174, !dbg !1103

omp.inner.for.body121:                            ; preds = %omp.inner.for.cond119
  %292 = ptrtoint i32* %.omp.iv113 to i64
  call void @__DiscoPoPOpenMPRead(i64 %292, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.605, i32 0, i32 0))
  %293 = load i32, i32* %.omp.iv113, align 4, !dbg !1105, !llvm.mem.parallel_loop_access !1100
  %mul122 = mul nsw i32 %293, 1, !dbg !1107
  %add123 = add nsw i32 0, %mul122, !dbg !1107
  %294 = ptrtoint i32* %i118 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %294, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.606, i32 0, i32 0))
  store i32 %add123, i32* %i118, align 4, !dbg !1107, !llvm.mem.parallel_loop_access !1100
  %295 = ptrtoint i32* %i118 to i64
  call void @__DiscoPoPOpenMPRead(i64 %295, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.607, i32 0, i32 0))
  %296 = load i32, i32* %i118, align 4, !dbg !1108, !llvm.mem.parallel_loop_access !1100
  %297 = ptrtoint i32* %11 to i64
  call void @__DiscoPoPOpenMPRead(i64 %297, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.608, i32 0, i32 0))
  %298 = load i32, i32* %11, align 4, !dbg !1110, !llvm.mem.parallel_loop_access !1100
  %mul124 = mul nsw i32 %296, %298, !dbg !1111
  %299 = ptrtoint i32* %k1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %299, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.609, i32 0, i32 0))
  store i32 %mul124, i32* %k1, align 4, !dbg !1112, !llvm.mem.parallel_loop_access !1100
  %300 = ptrtoint i32* %k1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %300, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.610, i32 0, i32 0))
  %301 = load i32, i32* %k1, align 4, !dbg !1113, !llvm.mem.parallel_loop_access !1100
  %302 = ptrtoint i32* %11 to i64
  call void @__DiscoPoPOpenMPRead(i64 %302, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.611, i32 0, i32 0))
  %303 = load i32, i32* %11, align 4, !dbg !1114, !llvm.mem.parallel_loop_access !1100
  %add125 = add nsw i32 %301, %303, !dbg !1115
  %304 = ptrtoint i32* %k2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %304, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.612, i32 0, i32 0))
  store i32 %add125, i32* %k2, align 4, !dbg !1116, !llvm.mem.parallel_loop_access !1100
  %305 = ptrtoint i32* %k1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %305, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.613, i32 0, i32 0))
  %306 = load i32, i32* %k1, align 4, !dbg !1117, !llvm.mem.parallel_loop_access !1100
  %307 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPWrite(i64 %307, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.614, i32 0, i32 0))
  store i32 %306, i32* %k, align 4, !dbg !1119, !llvm.mem.parallel_loop_access !1100
  br label %for.cond126, !dbg !1120

for.cond126:                                      ; preds = %for.inc131, %omp.inner.for.body121
  %308 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %308, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.615, i32 0, i32 0))
  %309 = load i32, i32* %k, align 4, !dbg !1121
  %310 = ptrtoint i32* %k2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %310, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.616, i32 0, i32 0))
  %311 = load i32, i32* %k2, align 4, !dbg !1124
  %cmp127 = icmp slt i32 %309, %311, !dbg !1125
  br i1 %cmp127, label %for.body128, label %for.end133, !dbg !1126

for.body128:                                      ; preds = %for.cond126
  %312 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %312, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.617, i32 0, i32 0))
  %313 = load i32, i32* %k, align 4, !dbg !1127
  %idxprom129 = sext i32 %313 to i64, !dbg !1128
  %314 = ptrtoint i32** %13 to i64
  call void @__DiscoPoPOpenMPRead(i64 %314, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.618, i32 0, i32 0))
  %315 = load i32*, i32** %13, align 8, !dbg !1128
  %arrayidx130 = getelementptr inbounds i32, i32* %315, i64 %idxprom129, !dbg !1128
  %316 = ptrtoint i32* %arrayidx130 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %316, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.619, i32 0, i32 0))
  store i32 0, i32* %arrayidx130, align 4, !dbg !1129
  br label %for.inc131, !dbg !1128

for.inc131:                                       ; preds = %for.body128
  %317 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %317, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.620, i32 0, i32 0))
  %318 = load i32, i32* %k, align 4, !dbg !1130
  %inc132 = add nsw i32 %318, 1, !dbg !1130
  %319 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPWrite(i64 %319, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.621, i32 0, i32 0))
  store i32 %inc132, i32* %k, align 4, !dbg !1130
  br label %for.cond126, !dbg !1132

for.end133:                                       ; preds = %for.cond126
  %320 = ptrtoint i32* %i118 to i64
  call void @__DiscoPoPOpenMPRead(i64 %320, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.622, i32 0, i32 0))
  %321 = load i32, i32* %i118, align 4, !dbg !1133, !llvm.mem.parallel_loop_access !1100
  %cmp134 = icmp sgt i32 %321, 0, !dbg !1134
  br i1 %cmp134, label %cond.true135, label %cond.false139, !dbg !1135

cond.true135:                                     ; preds = %for.end133
  %322 = ptrtoint i32* %i118 to i64
  call void @__DiscoPoPOpenMPRead(i64 %322, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.623, i32 0, i32 0))
  %323 = load i32, i32* %i118, align 4, !dbg !1136, !llvm.mem.parallel_loop_access !1100
  %sub136 = sub nsw i32 %323, 1, !dbg !1138
  %idxprom137 = sext i32 %sub136 to i64, !dbg !1139
  %324 = call [512 x i32]* @_ZTW11bucket_ptrs(), !dbg !1139, !llvm.mem.parallel_loop_access !1100
  %arrayidx138 = getelementptr inbounds [512 x i32], [512 x i32]* %324, i64 0, i64 %idxprom137, !dbg !1139
  %325 = ptrtoint i32* %arrayidx138 to i64
  call void @__DiscoPoPOpenMPRead(i64 %325, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.624, i32 0, i32 0))
  %326 = load i32, i32* %arrayidx138, align 4, !dbg !1139, !llvm.mem.parallel_loop_access !1100
  br label %cond.end140, !dbg !1140

cond.false139:                                    ; preds = %for.end133
  br label %cond.end140, !dbg !1141

cond.end140:                                      ; preds = %cond.false139, %cond.true135
  %cond141 = phi i32 [ %326, %cond.true135 ], [ 0, %cond.false139 ], !dbg !1143
  %327 = ptrtoint i32* %m to i64
  call void @__DiscoPoPOpenMPWrite(i64 %327, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.625, i32 0, i32 0))
  store i32 %cond141, i32* %m, align 4, !dbg !1145, !llvm.mem.parallel_loop_access !1100
  %328 = ptrtoint i32* %m to i64
  call void @__DiscoPoPOpenMPRead(i64 %328, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.626, i32 0, i32 0))
  %329 = load i32, i32* %m, align 4, !dbg !1146, !llvm.mem.parallel_loop_access !1100
  %330 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPWrite(i64 %330, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.627, i32 0, i32 0))
  store i32 %329, i32* %k, align 4, !dbg !1148, !llvm.mem.parallel_loop_access !1100
  br label %for.cond142, !dbg !1149

for.cond142:                                      ; preds = %for.inc152, %cond.end140
  %331 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %331, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.628, i32 0, i32 0))
  %332 = load i32, i32* %k, align 4, !dbg !1150
  %333 = ptrtoint i32* %i118 to i64
  call void @__DiscoPoPOpenMPRead(i64 %333, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.629, i32 0, i32 0))
  %334 = load i32, i32* %i118, align 4, !dbg !1153
  %idxprom143 = sext i32 %334 to i64, !dbg !1154
  %335 = call [512 x i32]* @_ZTW11bucket_ptrs(), !dbg !1154
  %arrayidx144 = getelementptr inbounds [512 x i32], [512 x i32]* %335, i64 0, i64 %idxprom143, !dbg !1154
  %336 = ptrtoint i32* %arrayidx144 to i64
  call void @__DiscoPoPOpenMPRead(i64 %336, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.630, i32 0, i32 0))
  %337 = load i32, i32* %arrayidx144, align 4, !dbg !1154
  %cmp145 = icmp slt i32 %332, %337, !dbg !1155
  br i1 %cmp145, label %for.body146, label %for.end154, !dbg !1156

for.body146:                                      ; preds = %for.cond142
  %338 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %338, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.631, i32 0, i32 0))
  %339 = load i32, i32* %k, align 4, !dbg !1157
  %idxprom147 = sext i32 %339 to i64, !dbg !1158
  %340 = ptrtoint i32** %15 to i64
  call void @__DiscoPoPOpenMPRead(i64 %340, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.632, i32 0, i32 0))
  %341 = load i32*, i32** %15, align 8, !dbg !1158
  %arrayidx148 = getelementptr inbounds i32, i32* %341, i64 %idxprom147, !dbg !1158
  %342 = ptrtoint i32* %arrayidx148 to i64
  call void @__DiscoPoPOpenMPRead(i64 %342, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.633, i32 0, i32 0))
  %343 = load i32, i32* %arrayidx148, align 4, !dbg !1158
  %idxprom149 = sext i32 %343 to i64, !dbg !1159
  %344 = ptrtoint i32** %13 to i64
  call void @__DiscoPoPOpenMPRead(i64 %344, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.634, i32 0, i32 0))
  %345 = load i32*, i32** %13, align 8, !dbg !1159
  %arrayidx150 = getelementptr inbounds i32, i32* %345, i64 %idxprom149, !dbg !1159
  %346 = ptrtoint i32* %arrayidx150 to i64
  call void @__DiscoPoPOpenMPRead(i64 %346, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.635, i32 0, i32 0))
  %347 = load i32, i32* %arrayidx150, align 4, !dbg !1160
  %inc151 = add nsw i32 %347, 1, !dbg !1160
  %348 = ptrtoint i32* %arrayidx150 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %348, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.636, i32 0, i32 0))
  store i32 %inc151, i32* %arrayidx150, align 4, !dbg !1160
  br label %for.inc152, !dbg !1159

for.inc152:                                       ; preds = %for.body146
  %349 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %349, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.637, i32 0, i32 0))
  %350 = load i32, i32* %k, align 4, !dbg !1161
  %inc153 = add nsw i32 %350, 1, !dbg !1161
  %351 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPWrite(i64 %351, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.638, i32 0, i32 0))
  store i32 %inc153, i32* %k, align 4, !dbg !1161
  br label %for.cond142, !dbg !1163

for.end154:                                       ; preds = %for.cond142
  %352 = ptrtoint i32* %m to i64
  call void @__DiscoPoPOpenMPRead(i64 %352, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.639, i32 0, i32 0))
  %353 = load i32, i32* %m, align 4, !dbg !1164, !llvm.mem.parallel_loop_access !1100
  %354 = ptrtoint i32* %k1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %354, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.640, i32 0, i32 0))
  %355 = load i32, i32* %k1, align 4, !dbg !1165, !llvm.mem.parallel_loop_access !1100
  %idxprom155 = sext i32 %355 to i64, !dbg !1166
  %356 = ptrtoint i32** %13 to i64
  call void @__DiscoPoPOpenMPRead(i64 %356, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.641, i32 0, i32 0))
  %357 = load i32*, i32** %13, align 8, !dbg !1166, !llvm.mem.parallel_loop_access !1100
  %arrayidx156 = getelementptr inbounds i32, i32* %357, i64 %idxprom155, !dbg !1166
  %358 = ptrtoint i32* %arrayidx156 to i64
  call void @__DiscoPoPOpenMPRead(i64 %358, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.642, i32 0, i32 0))
  %359 = load i32, i32* %arrayidx156, align 4, !dbg !1167, !llvm.mem.parallel_loop_access !1100
  %add157 = add nsw i32 %359, %353, !dbg !1167
  %360 = ptrtoint i32* %arrayidx156 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %360, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.643, i32 0, i32 0))
  store i32 %add157, i32* %arrayidx156, align 4, !dbg !1167, !llvm.mem.parallel_loop_access !1100
  %361 = ptrtoint i32* %k1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %361, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.644, i32 0, i32 0))
  %362 = load i32, i32* %k1, align 4, !dbg !1168, !llvm.mem.parallel_loop_access !1100
  %add158 = add nsw i32 %362, 1, !dbg !1170
  %363 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPWrite(i64 %363, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.645, i32 0, i32 0))
  store i32 %add158, i32* %k, align 4, !dbg !1171, !llvm.mem.parallel_loop_access !1100
  br label %for.cond159, !dbg !1172

for.cond159:                                      ; preds = %for.inc168, %for.end154
  %364 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %364, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.646, i32 0, i32 0))
  %365 = load i32, i32* %k, align 4, !dbg !1173
  %366 = ptrtoint i32* %k2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %366, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.647, i32 0, i32 0))
  %367 = load i32, i32* %k2, align 4, !dbg !1176
  %cmp160 = icmp slt i32 %365, %367, !dbg !1177
  br i1 %cmp160, label %for.body161, label %for.end170, !dbg !1178

for.body161:                                      ; preds = %for.cond159
  %368 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %368, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.648, i32 0, i32 0))
  %369 = load i32, i32* %k, align 4, !dbg !1179
  %sub162 = sub nsw i32 %369, 1, !dbg !1180
  %idxprom163 = sext i32 %sub162 to i64, !dbg !1181
  %370 = ptrtoint i32** %13 to i64
  call void @__DiscoPoPOpenMPRead(i64 %370, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.649, i32 0, i32 0))
  %371 = load i32*, i32** %13, align 8, !dbg !1181
  %arrayidx164 = getelementptr inbounds i32, i32* %371, i64 %idxprom163, !dbg !1181
  %372 = ptrtoint i32* %arrayidx164 to i64
  call void @__DiscoPoPOpenMPRead(i64 %372, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.650, i32 0, i32 0))
  %373 = load i32, i32* %arrayidx164, align 4, !dbg !1181
  %374 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %374, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.651, i32 0, i32 0))
  %375 = load i32, i32* %k, align 4, !dbg !1182
  %idxprom165 = sext i32 %375 to i64, !dbg !1183
  %376 = ptrtoint i32** %13 to i64
  call void @__DiscoPoPOpenMPRead(i64 %376, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.652, i32 0, i32 0))
  %377 = load i32*, i32** %13, align 8, !dbg !1183
  %arrayidx166 = getelementptr inbounds i32, i32* %377, i64 %idxprom165, !dbg !1183
  %378 = ptrtoint i32* %arrayidx166 to i64
  call void @__DiscoPoPOpenMPRead(i64 %378, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.653, i32 0, i32 0))
  %379 = load i32, i32* %arrayidx166, align 4, !dbg !1184
  %add167 = add nsw i32 %379, %373, !dbg !1184
  %380 = ptrtoint i32* %arrayidx166 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %380, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.654, i32 0, i32 0))
  store i32 %add167, i32* %arrayidx166, align 4, !dbg !1184
  br label %for.inc168, !dbg !1183

for.inc168:                                       ; preds = %for.body161
  %381 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %381, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.655, i32 0, i32 0))
  %382 = load i32, i32* %k, align 4, !dbg !1185
  %inc169 = add nsw i32 %382, 1, !dbg !1185
  %383 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPWrite(i64 %383, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.656, i32 0, i32 0))
  store i32 %inc169, i32* %k, align 4, !dbg !1185
  br label %for.cond159, !dbg !1187

for.end170:                                       ; preds = %for.cond159
  br label %omp.body.continue171, !dbg !1188

omp.body.continue171:                             ; preds = %for.end170
  br label %omp.inner.for.inc172, !dbg !1189

omp.inner.for.inc172:                             ; preds = %omp.body.continue171
  %384 = ptrtoint i32* %.omp.iv113 to i64
  call void @__DiscoPoPOpenMPRead(i64 %384, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.657, i32 0, i32 0))
  %385 = load i32, i32* %.omp.iv113, align 4, !dbg !1191, !llvm.mem.parallel_loop_access !1100
  %add173 = add nsw i32 %385, 1, !dbg !1192
  %386 = ptrtoint i32* %.omp.iv113 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %386, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.658, i32 0, i32 0))
  store i32 %add173, i32* %.omp.iv113, align 4, !dbg !1192, !llvm.mem.parallel_loop_access !1100
  br label %omp.inner.for.cond119, !dbg !1194, !llvm.loop !1100

omp.inner.for.end174:                             ; preds = %omp.inner.for.cond119
  br label %omp.dispatch.inc, !dbg !1196

omp.dispatch.inc:                                 ; preds = %omp.inner.for.end174
  br label %omp.dispatch.cond, !dbg !1198

omp.dispatch.end:                                 ; preds = %omp.dispatch.cond
  %387 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !1199
  %388 = ptrtoint i8** %387 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %388, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.659, i32 0, i32 0))
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @9, i32 0, i32 0), i8** %387, align 8, !dbg !1199
  %389 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %389, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.660, i32 0, i32 0))
  %390 = load i32*, i32** %.global_tid..addr, align 8, !dbg !1199
  %391 = ptrtoint i32* %390 to i64
  call void @__DiscoPoPOpenMPRead(i64 %391, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.661, i32 0, i32 0))
  %392 = load i32, i32* %390, align 4, !dbg !1199
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.663, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_barrier(%ident_t* %.kmpc_loc.addr, i32 %392), !dbg !1199
  call void @__DiscoPoPOpenMPAfterCall()
  ret void, !dbg !1200
}

declare void @__kmpc_barrier(%ident_t*, i32)

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 !dbg !1201 {
entry:
  call void @__DiscoPoPOpenMPInitialize()
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %i = alloca i32, align 4
  %iteration = alloca i32, align 4
  %timer_on = alloca i32, align 4
  %timecounter = alloca double, align 8
  %fp = alloca %struct._IO_FILE*, align 8
  %t_total = alloca double, align 8
  %t_percent = alloca double, align 8
  store i32 0, i32* %retval, align 4
  %0 = ptrtoint i32* %argc.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.664, i32 0, i32 0))
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !1207, metadata !82), !dbg !1208
  %1 = ptrtoint i8*** %argv.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.665, i32 0, i32 0))
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !1209, metadata !82), !dbg !1210
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1211, metadata !82), !dbg !1212
  call void @llvm.dbg.declare(metadata i32* %iteration, metadata !1213, metadata !82), !dbg !1214
  call void @llvm.dbg.declare(metadata i32* %timer_on, metadata !1215, metadata !82), !dbg !1216
  call void @llvm.dbg.declare(metadata double* %timecounter, metadata !1217, metadata !82), !dbg !1218
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %fp, metadata !1219, metadata !82), !dbg !1275
  %2 = ptrtoint i32* %timer_on to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.666, i32 0, i32 0))
  store i32 0, i32* %timer_on, align 4, !dbg !1276
  %call = call %struct._IO_FILE* @fopen(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i32 0, i32 0)), !dbg !1277
  %3 = ptrtoint %struct._IO_FILE** %fp to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.667, i32 0, i32 0))
  store %struct._IO_FILE* %call, %struct._IO_FILE** %fp, align 8, !dbg !1279
  %cmp = icmp ne %struct._IO_FILE* %call, null, !dbg !1280
  br i1 %cmp, label %if.then, label %if.end, !dbg !1281

if.then:                                          ; preds = %entry
  %4 = ptrtoint %struct._IO_FILE** %fp to i64
  call void @__DiscoPoPOpenMPRead(i64 %4, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.668, i32 0, i32 0))
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !1282
  %call1 = call i32 @fclose(%struct._IO_FILE* %5), !dbg !1284
  %6 = ptrtoint i32* %timer_on to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.669, i32 0, i32 0))
  store i32 1, i32* %timer_on, align 4, !dbg !1285
  br label %if.end, !dbg !1286

if.end:                                           ; preds = %if.then, %entry
  call void @timer_clear(i32 0), !dbg !1287
  %7 = ptrtoint i32* %timer_on to i64
  call void @__DiscoPoPOpenMPRead(i64 %7, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.670, i32 0, i32 0))
  %8 = load i32, i32* %timer_on, align 4, !dbg !1288
  %tobool = icmp ne i32 %8, 0, !dbg !1288
  br i1 %tobool, label %if.then2, label %if.end3, !dbg !1290

if.then2:                                         ; preds = %if.end
  call void @timer_clear(i32 1), !dbg !1291
  call void @timer_clear(i32 2), !dbg !1293
  call void @timer_clear(i32 3), !dbg !1294
  br label %if.end3, !dbg !1295

if.end3:                                          ; preds = %if.then2, %if.end
  %9 = ptrtoint i32* %timer_on to i64
  call void @__DiscoPoPOpenMPRead(i64 %9, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.671, i32 0, i32 0))
  %10 = load i32, i32* %timer_on, align 4, !dbg !1296
  %tobool4 = icmp ne i32 %10, 0, !dbg !1296
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !1298

if.then5:                                         ; preds = %if.end3
  call void @timer_start(i32 3), !dbg !1299
  br label %if.end6, !dbg !1299

if.end6:                                          ; preds = %if.then5, %if.end3
  %11 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.672, i32 0, i32 0))
  store i32 0, i32* %i, align 4, !dbg !1301
  br label %for.cond, !dbg !1303

for.cond:                                         ; preds = %for.inc, %if.end6
  %12 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %12, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.673, i32 0, i32 0))
  %13 = load i32, i32* %i, align 4, !dbg !1304
  %cmp7 = icmp slt i32 %13, 5, !dbg !1307
  br i1 %cmp7, label %for.body, label %for.end, !dbg !1308

for.body:                                         ; preds = %for.cond
  %14 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %14, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.674, i32 0, i32 0))
  %15 = load i32, i32* %i, align 4, !dbg !1309
  %idxprom = sext i32 %15 to i64, !dbg !1310
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* @S_test_index_array, i64 0, i64 %idxprom, !dbg !1310
  %16 = ptrtoint i32* %arrayidx to i64
  call void @__DiscoPoPOpenMPRead(i64 %16, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.675, i32 0, i32 0))
  %17 = load i32, i32* %arrayidx, align 4, !dbg !1310
  %18 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %18, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.676, i32 0, i32 0))
  %19 = load i32, i32* %i, align 4, !dbg !1311
  %idxprom8 = sext i32 %19 to i64, !dbg !1312
  %arrayidx9 = getelementptr inbounds [5 x i32], [5 x i32]* @test_index_array, i64 0, i64 %idxprom8, !dbg !1312
  %20 = ptrtoint i32* %arrayidx9 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %20, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.677, i32 0, i32 0))
  store i32 %17, i32* %arrayidx9, align 4, !dbg !1313
  %21 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %21, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.678, i32 0, i32 0))
  %22 = load i32, i32* %i, align 4, !dbg !1314
  %idxprom10 = sext i32 %22 to i64, !dbg !1315
  %arrayidx11 = getelementptr inbounds [5 x i32], [5 x i32]* @S_test_rank_array, i64 0, i64 %idxprom10, !dbg !1315
  %23 = ptrtoint i32* %arrayidx11 to i64
  call void @__DiscoPoPOpenMPRead(i64 %23, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.679, i32 0, i32 0))
  %24 = load i32, i32* %arrayidx11, align 4, !dbg !1315
  %25 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %25, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.680, i32 0, i32 0))
  %26 = load i32, i32* %i, align 4, !dbg !1316
  %idxprom12 = sext i32 %26 to i64, !dbg !1317
  %arrayidx13 = getelementptr inbounds [5 x i32], [5 x i32]* @test_rank_array, i64 0, i64 %idxprom12, !dbg !1317
  %27 = ptrtoint i32* %arrayidx13 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %27, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.681, i32 0, i32 0))
  store i32 %24, i32* %arrayidx13, align 4, !dbg !1318
  br label %for.inc, !dbg !1317

for.inc:                                          ; preds = %for.body
  %28 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %28, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.682, i32 0, i32 0))
  %29 = load i32, i32* %i, align 4, !dbg !1319
  %inc = add nsw i32 %29, 1, !dbg !1319
  %30 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %30, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.683, i32 0, i32 0))
  store i32 %inc, i32* %i, align 4, !dbg !1319
  br label %for.cond, !dbg !1321

for.end:                                          ; preds = %for.cond
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.10, i32 0, i32 0)), !dbg !1322
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.11, i32 0, i32 0), i64 65536, i32 83), !dbg !1323
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.12, i32 0, i32 0), i32 10), !dbg !1324
  %call17 = call i32 @omp_get_max_threads(), !dbg !1325
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.13, i32 0, i32 0), i32 %call17), !dbg !1326
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i32 0, i32 0)), !dbg !1328
  %31 = ptrtoint i32* %timer_on to i64
  call void @__DiscoPoPOpenMPRead(i64 %31, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.684, i32 0, i32 0))
  %32 = load i32, i32* %timer_on, align 4, !dbg !1329
  %tobool20 = icmp ne i32 %32, 0, !dbg !1329
  br i1 %tobool20, label %if.then21, label %if.end22, !dbg !1331

if.then21:                                        ; preds = %for.end
  call void @timer_start(i32 1), !dbg !1332
  br label %if.end22, !dbg !1332

if.end22:                                         ; preds = %if.then21, %for.end
  call void @create_seq(double 0x41B2B9B0A1000000, double 0x41D2309CE5400000), !dbg !1334
  call void @alloc_key_buff(), !dbg !1335
  %33 = ptrtoint i32* %timer_on to i64
  call void @__DiscoPoPOpenMPRead(i64 %33, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.685, i32 0, i32 0))
  %34 = load i32, i32* %timer_on, align 4, !dbg !1336
  %tobool23 = icmp ne i32 %34, 0, !dbg !1336
  br i1 %tobool23, label %if.then24, label %if.end25, !dbg !1338

if.then24:                                        ; preds = %if.end22
  call void @timer_stop(i32 1), !dbg !1339
  br label %if.end25, !dbg !1339

if.end25:                                         ; preds = %if.then24, %if.end22
  call void @rank(i32 1), !dbg !1341
  %35 = ptrtoint i32* @passed_verification to i64
  call void @__DiscoPoPOpenMPWrite(i64 %35, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.686, i32 0, i32 0))
  store i32 0, i32* @passed_verification, align 4, !dbg !1342
  call void @timer_start(i32 0), !dbg !1343
  %36 = ptrtoint i32* %iteration to i64
  call void @__DiscoPoPOpenMPWrite(i64 %36, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.687, i32 0, i32 0))
  store i32 1, i32* %iteration, align 4, !dbg !1344
  br label %for.cond26, !dbg !1346

for.cond26:                                       ; preds = %for.inc29, %if.end25
  %37 = ptrtoint i32* %iteration to i64
  call void @__DiscoPoPOpenMPRead(i64 %37, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.688, i32 0, i32 0))
  %38 = load i32, i32* %iteration, align 4, !dbg !1347
  %cmp27 = icmp sle i32 %38, 10, !dbg !1350
  br i1 %cmp27, label %for.body28, label %for.end31, !dbg !1351

for.body28:                                       ; preds = %for.cond26
  %39 = ptrtoint i32* %iteration to i64
  call void @__DiscoPoPOpenMPRead(i64 %39, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.689, i32 0, i32 0))
  %40 = load i32, i32* %iteration, align 4, !dbg !1352
  call void @rank(i32 %40), !dbg !1354
  br label %for.inc29, !dbg !1355

for.inc29:                                        ; preds = %for.body28
  %41 = ptrtoint i32* %iteration to i64
  call void @__DiscoPoPOpenMPRead(i64 %41, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.690, i32 0, i32 0))
  %42 = load i32, i32* %iteration, align 4, !dbg !1356
  %inc30 = add nsw i32 %42, 1, !dbg !1356
  %43 = ptrtoint i32* %iteration to i64
  call void @__DiscoPoPOpenMPWrite(i64 %43, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.691, i32 0, i32 0))
  store i32 %inc30, i32* %iteration, align 4, !dbg !1356
  br label %for.cond26, !dbg !1358

for.end31:                                        ; preds = %for.cond26
  call void @timer_stop(i32 0), !dbg !1359
  %call32 = call double @timer_read(i32 0), !dbg !1360
  %44 = ptrtoint double* %timecounter to i64
  call void @__DiscoPoPOpenMPWrite(i64 %44, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.692, i32 0, i32 0))
  store double %call32, double* %timecounter, align 8, !dbg !1361
  %45 = ptrtoint i32* %timer_on to i64
  call void @__DiscoPoPOpenMPRead(i64 %45, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.693, i32 0, i32 0))
  %46 = load i32, i32* %timer_on, align 4, !dbg !1362
  %tobool33 = icmp ne i32 %46, 0, !dbg !1362
  br i1 %tobool33, label %if.then34, label %if.end35, !dbg !1364

if.then34:                                        ; preds = %for.end31
  call void @timer_start(i32 2), !dbg !1365
  br label %if.end35, !dbg !1365

if.end35:                                         ; preds = %if.then34, %for.end31
  call void @full_verify(), !dbg !1367
  %47 = ptrtoint i32* %timer_on to i64
  call void @__DiscoPoPOpenMPRead(i64 %47, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.694, i32 0, i32 0))
  %48 = load i32, i32* %timer_on, align 4, !dbg !1368
  %tobool36 = icmp ne i32 %48, 0, !dbg !1368
  br i1 %tobool36, label %if.then37, label %if.end38, !dbg !1370

if.then37:                                        ; preds = %if.end35
  call void @timer_stop(i32 2), !dbg !1371
  br label %if.end38, !dbg !1371

if.end38:                                         ; preds = %if.then37, %if.end35
  %49 = ptrtoint i32* %timer_on to i64
  call void @__DiscoPoPOpenMPRead(i64 %49, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.695, i32 0, i32 0))
  %50 = load i32, i32* %timer_on, align 4, !dbg !1373
  %tobool39 = icmp ne i32 %50, 0, !dbg !1373
  br i1 %tobool39, label %if.then40, label %if.end41, !dbg !1375

if.then40:                                        ; preds = %if.end38
  call void @timer_stop(i32 3), !dbg !1376
  br label %if.end41, !dbg !1376

if.end41:                                         ; preds = %if.then40, %if.end38
  %51 = ptrtoint i32* @passed_verification to i64
  call void @__DiscoPoPOpenMPRead(i64 %51, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.696, i32 0, i32 0))
  %52 = load i32, i32* @passed_verification, align 4, !dbg !1378
  %cmp42 = icmp ne i32 %52, 51, !dbg !1380
  br i1 %cmp42, label %if.then43, label %if.end44, !dbg !1381

if.then43:                                        ; preds = %if.end41
  %53 = ptrtoint i32* @passed_verification to i64
  call void @__DiscoPoPOpenMPWrite(i64 %53, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.697, i32 0, i32 0))
  store i32 0, i32* @passed_verification, align 4, !dbg !1382
  br label %if.end44, !dbg !1383

if.end44:                                         ; preds = %if.then43, %if.end41
  %54 = ptrtoint double* %timecounter to i64
  call void @__DiscoPoPOpenMPRead(i64 %54, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.698, i32 0, i32 0))
  %55 = load double, double* %timecounter, align 8, !dbg !1384
  %56 = ptrtoint double* %timecounter to i64
  call void @__DiscoPoPOpenMPRead(i64 %56, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.699, i32 0, i32 0))
  %57 = load double, double* %timecounter, align 8, !dbg !1385
  %div = fdiv double 6.553600e+05, %57, !dbg !1386
  %div45 = fdiv double %div, 1.000000e+06, !dbg !1387
  %58 = ptrtoint i32* @passed_verification to i64
  call void @__DiscoPoPOpenMPRead(i64 %58, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.700, i32 0, i32 0))
  %59 = load i32, i32* @passed_verification, align 4, !dbg !1388
  call void @c_print_results(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i8 signext 83, i32 1024, i32 64, i32 0, i32 10, double %55, double %div45, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.16, i32 0, i32 0), i32 %59, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i32 0, i32 0)), !dbg !1389
  %60 = ptrtoint i32* %timer_on to i64
  call void @__DiscoPoPOpenMPRead(i64 %60, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.701, i32 0, i32 0))
  %61 = load i32, i32* %timer_on, align 4, !dbg !1390
  %tobool46 = icmp ne i32 %61, 0, !dbg !1390
  br i1 %tobool46, label %if.then47, label %if.end65, !dbg !1392

if.then47:                                        ; preds = %if.end44
  call void @llvm.dbg.declare(metadata double* %t_total, metadata !1393, metadata !82), !dbg !1395
  call void @llvm.dbg.declare(metadata double* %t_percent, metadata !1396, metadata !82), !dbg !1397
  %call48 = call double @timer_read(i32 3), !dbg !1398
  %62 = ptrtoint double* %t_total to i64
  call void @__DiscoPoPOpenMPWrite(i64 %62, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.702, i32 0, i32 0))
  store double %call48, double* %t_total, align 8, !dbg !1399
  %call49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.21, i32 0, i32 0)), !dbg !1400
  %63 = ptrtoint double* %t_total to i64
  call void @__DiscoPoPOpenMPRead(i64 %63, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.703, i32 0, i32 0))
  %64 = load double, double* %t_total, align 8, !dbg !1401
  %call50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.22, i32 0, i32 0), double %64), !dbg !1402
  %65 = ptrtoint double* %t_total to i64
  call void @__DiscoPoPOpenMPRead(i64 %65, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.704, i32 0, i32 0))
  %66 = load double, double* %t_total, align 8, !dbg !1403
  %cmp51 = fcmp oeq double %66, 0.000000e+00, !dbg !1405
  br i1 %cmp51, label %if.then52, label %if.end53, !dbg !1406

if.then52:                                        ; preds = %if.then47
  %67 = ptrtoint double* %t_total to i64
  call void @__DiscoPoPOpenMPWrite(i64 %67, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.705, i32 0, i32 0))
  store double 1.000000e+00, double* %t_total, align 8, !dbg !1407
  br label %if.end53, !dbg !1409

if.end53:                                         ; preds = %if.then52, %if.then47
  %call54 = call double @timer_read(i32 1), !dbg !1410
  %68 = ptrtoint double* %timecounter to i64
  call void @__DiscoPoPOpenMPWrite(i64 %68, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.706, i32 0, i32 0))
  store double %call54, double* %timecounter, align 8, !dbg !1411
  %69 = ptrtoint double* %timecounter to i64
  call void @__DiscoPoPOpenMPRead(i64 %69, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.707, i32 0, i32 0))
  %70 = load double, double* %timecounter, align 8, !dbg !1412
  %71 = ptrtoint double* %t_total to i64
  call void @__DiscoPoPOpenMPRead(i64 %71, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.708, i32 0, i32 0))
  %72 = load double, double* %t_total, align 8, !dbg !1413
  %div55 = fdiv double %70, %72, !dbg !1414
  %mul = fmul double %div55, 1.000000e+02, !dbg !1415
  %73 = ptrtoint double* %t_percent to i64
  call void @__DiscoPoPOpenMPWrite(i64 %73, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.709, i32 0, i32 0))
  store double %mul, double* %t_percent, align 8, !dbg !1416
  %74 = ptrtoint double* %timecounter to i64
  call void @__DiscoPoPOpenMPRead(i64 %74, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.710, i32 0, i32 0))
  %75 = load double, double* %timecounter, align 8, !dbg !1417
  %76 = ptrtoint double* %t_percent to i64
  call void @__DiscoPoPOpenMPRead(i64 %76, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.711, i32 0, i32 0))
  %77 = load double, double* %t_percent, align 8, !dbg !1418
  %call56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.23, i32 0, i32 0), double %75, double %77), !dbg !1419
  %call57 = call double @timer_read(i32 0), !dbg !1420
  %78 = ptrtoint double* %timecounter to i64
  call void @__DiscoPoPOpenMPWrite(i64 %78, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.712, i32 0, i32 0))
  store double %call57, double* %timecounter, align 8, !dbg !1421
  %79 = ptrtoint double* %timecounter to i64
  call void @__DiscoPoPOpenMPRead(i64 %79, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.713, i32 0, i32 0))
  %80 = load double, double* %timecounter, align 8, !dbg !1422
  %81 = ptrtoint double* %t_total to i64
  call void @__DiscoPoPOpenMPRead(i64 %81, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.714, i32 0, i32 0))
  %82 = load double, double* %t_total, align 8, !dbg !1423
  %div58 = fdiv double %80, %82, !dbg !1424
  %mul59 = fmul double %div58, 1.000000e+02, !dbg !1425
  %83 = ptrtoint double* %t_percent to i64
  call void @__DiscoPoPOpenMPWrite(i64 %83, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.715, i32 0, i32 0))
  store double %mul59, double* %t_percent, align 8, !dbg !1426
  %84 = ptrtoint double* %timecounter to i64
  call void @__DiscoPoPOpenMPRead(i64 %84, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.716, i32 0, i32 0))
  %85 = load double, double* %timecounter, align 8, !dbg !1427
  %86 = ptrtoint double* %t_percent to i64
  call void @__DiscoPoPOpenMPRead(i64 %86, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.717, i32 0, i32 0))
  %87 = load double, double* %t_percent, align 8, !dbg !1428
  %call60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.24, i32 0, i32 0), double %85, double %87), !dbg !1429
  %call61 = call double @timer_read(i32 2), !dbg !1430
  %88 = ptrtoint double* %timecounter to i64
  call void @__DiscoPoPOpenMPWrite(i64 %88, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.718, i32 0, i32 0))
  store double %call61, double* %timecounter, align 8, !dbg !1431
  %89 = ptrtoint double* %timecounter to i64
  call void @__DiscoPoPOpenMPRead(i64 %89, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.719, i32 0, i32 0))
  %90 = load double, double* %timecounter, align 8, !dbg !1432
  %91 = ptrtoint double* %t_total to i64
  call void @__DiscoPoPOpenMPRead(i64 %91, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.720, i32 0, i32 0))
  %92 = load double, double* %t_total, align 8, !dbg !1433
  %div62 = fdiv double %90, %92, !dbg !1434
  %mul63 = fmul double %div62, 1.000000e+02, !dbg !1435
  %93 = ptrtoint double* %t_percent to i64
  call void @__DiscoPoPOpenMPWrite(i64 %93, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.721, i32 0, i32 0))
  store double %mul63, double* %t_percent, align 8, !dbg !1436
  %94 = ptrtoint double* %timecounter to i64
  call void @__DiscoPoPOpenMPRead(i64 %94, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.722, i32 0, i32 0))
  %95 = load double, double* %timecounter, align 8, !dbg !1437
  %96 = ptrtoint double* %t_percent to i64
  call void @__DiscoPoPOpenMPRead(i64 %96, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.723, i32 0, i32 0))
  %97 = load double, double* %t_percent, align 8, !dbg !1438
  %call64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.25, i32 0, i32 0), double %95, double %97), !dbg !1439
  br label %if.end65, !dbg !1440

if.end65:                                         ; preds = %if.end53, %if.end44
  call void @__DiscoPoPOpenMPFinalize()
  ret i32 0, !dbg !1441
}

declare %struct._IO_FILE* @fopen(i8*, i8*) #3

declare i32 @fclose(%struct._IO_FILE*) #3

; Function Attrs: nounwind uwtable
define void @c_print_results(i8* %name, i8 signext %class, i32 %n1, i32 %n2, i32 %n3, i32 %niter, double %t, double %mops, i8* %optype, i32 %passed_verification, i8* %npbversion, i8* %compiletime, i8* %cc, i8* %clink, i8* %c_lib, i8* %c_inc, i8* %cflags, i8* %clinkflags) #0 !dbg !1442 {
entry:
  %name.addr = alloca i8*, align 8
  %class.addr = alloca i8, align 1
  %n1.addr = alloca i32, align 4
  %n2.addr = alloca i32, align 4
  %n3.addr = alloca i32, align 4
  %niter.addr = alloca i32, align 4
  %t.addr = alloca double, align 8
  %mops.addr = alloca double, align 8
  %optype.addr = alloca i8*, align 8
  %passed_verification.addr = alloca i32, align 4
  %npbversion.addr = alloca i8*, align 8
  %compiletime.addr = alloca i8*, align 8
  %cc.addr = alloca i8*, align 8
  %clink.addr = alloca i8*, align 8
  %c_lib.addr = alloca i8*, align 8
  %c_inc.addr = alloca i8*, align 8
  %cflags.addr = alloca i8*, align 8
  %clinkflags.addr = alloca i8*, align 8
  %num_threads = alloca i32, align 4
  %max_threads = alloca i32, align 4
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  %nn = alloca i64, align 8
  %2 = ptrtoint i8** %name.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.724, i32 0, i32 0))
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !1446, metadata !82), !dbg !1447
  %3 = ptrtoint i8* %class.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.725, i32 0, i32 0))
  store i8 %class, i8* %class.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %class.addr, metadata !1448, metadata !82), !dbg !1449
  %4 = ptrtoint i32* %n1.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.726, i32 0, i32 0))
  store i32 %n1, i32* %n1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n1.addr, metadata !1450, metadata !82), !dbg !1451
  %5 = ptrtoint i32* %n2.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.727, i32 0, i32 0))
  store i32 %n2, i32* %n2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n2.addr, metadata !1452, metadata !82), !dbg !1453
  %6 = ptrtoint i32* %n3.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.728, i32 0, i32 0))
  store i32 %n3, i32* %n3.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n3.addr, metadata !1454, metadata !82), !dbg !1455
  %7 = ptrtoint i32* %niter.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %7, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.729, i32 0, i32 0))
  store i32 %niter, i32* %niter.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %niter.addr, metadata !1456, metadata !82), !dbg !1457
  %8 = ptrtoint double* %t.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.730, i32 0, i32 0))
  store double %t, double* %t.addr, align 8
  call void @llvm.dbg.declare(metadata double* %t.addr, metadata !1458, metadata !82), !dbg !1459
  %9 = ptrtoint double* %mops.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %9, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.731, i32 0, i32 0))
  store double %mops, double* %mops.addr, align 8
  call void @llvm.dbg.declare(metadata double* %mops.addr, metadata !1460, metadata !82), !dbg !1461
  %10 = ptrtoint i8** %optype.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %10, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.732, i32 0, i32 0))
  store i8* %optype, i8** %optype.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optype.addr, metadata !1462, metadata !82), !dbg !1463
  %11 = ptrtoint i32* %passed_verification.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %11, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.733, i32 0, i32 0))
  store i32 %passed_verification, i32* %passed_verification.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %passed_verification.addr, metadata !1464, metadata !82), !dbg !1465
  %12 = ptrtoint i8** %npbversion.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %12, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.734, i32 0, i32 0))
  store i8* %npbversion, i8** %npbversion.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %npbversion.addr, metadata !1466, metadata !82), !dbg !1467
  %13 = ptrtoint i8** %compiletime.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %13, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.735, i32 0, i32 0))
  store i8* %compiletime, i8** %compiletime.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %compiletime.addr, metadata !1468, metadata !82), !dbg !1469
  %14 = ptrtoint i8** %cc.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %14, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.736, i32 0, i32 0))
  store i8* %cc, i8** %cc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cc.addr, metadata !1470, metadata !82), !dbg !1471
  %15 = ptrtoint i8** %clink.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %15, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.737, i32 0, i32 0))
  store i8* %clink, i8** %clink.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %clink.addr, metadata !1472, metadata !82), !dbg !1473
  %16 = ptrtoint i8** %c_lib.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %16, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.738, i32 0, i32 0))
  store i8* %c_lib, i8** %c_lib.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %c_lib.addr, metadata !1474, metadata !82), !dbg !1475
  %17 = ptrtoint i8** %c_inc.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %17, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.739, i32 0, i32 0))
  store i8* %c_inc, i8** %c_inc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %c_inc.addr, metadata !1476, metadata !82), !dbg !1477
  %18 = ptrtoint i8** %cflags.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %18, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.740, i32 0, i32 0))
  store i8* %cflags, i8** %cflags.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cflags.addr, metadata !1478, metadata !82), !dbg !1479
  %19 = ptrtoint i8** %clinkflags.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %19, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.741, i32 0, i32 0))
  store i8* %clinkflags, i8** %clinkflags.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %clinkflags.addr, metadata !1480, metadata !82), !dbg !1481
  call void @llvm.dbg.declare(metadata i32* %num_threads, metadata !1482, metadata !82), !dbg !1483
  call void @llvm.dbg.declare(metadata i32* %max_threads, metadata !1484, metadata !82), !dbg !1485
  %20 = ptrtoint i32* %max_threads to i64
  call void @__DiscoPoPOpenMPWrite(i64 %20, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.742, i32 0, i32 0))
  store i32 1, i32* %max_threads, align 4, !dbg !1486
  %21 = ptrtoint i32* %num_threads to i64
  call void @__DiscoPoPOpenMPWrite(i64 %21, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.743, i32 0, i32 0))
  store i32 1, i32* %num_threads, align 4, !dbg !1487
  %call = call i32 @omp_get_max_threads(), !dbg !1488
  %22 = ptrtoint i32* %max_threads to i64
  call void @__DiscoPoPOpenMPWrite(i64 %22, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.744, i32 0, i32 0))
  store i32 %call, i32* %max_threads, align 4, !dbg !1489
  %23 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !1490
  %24 = ptrtoint i8** %23 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %24, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.745, i32 0, i32 0))
  store i8* getelementptr inbounds ([42 x i8], [42 x i8]* @11, i32 0, i32 0), i8** %23, align 8, !dbg !1490
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([146 x i8], [146 x i8]* @.str.747, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* %.kmpc_loc.addr, i32 1, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*)* @.omp_outlined..5 to void (i32*, i32*, ...)*), i32* %num_threads), !dbg !1490
  %25 = ptrtoint i8** %name.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %25, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.748, i32 0, i32 0))
  %26 = load i8*, i8** %name.addr, align 8, !dbg !1491
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.6, i32 0, i32 0), i8* %26), !dbg !1492
  %27 = ptrtoint i8* %class.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %27, i32 1, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.749, i32 0, i32 0))
  %28 = load i8, i8* %class.addr, align 1, !dbg !1493
  %conv = sext i8 %28 to i32, !dbg !1493
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.2, i32 0, i32 0), i32 %conv), !dbg !1494
  %29 = ptrtoint i32* %n3.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %29, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.750, i32 0, i32 0))
  %30 = load i32, i32* %n3.addr, align 4, !dbg !1495
  %cmp = icmp eq i32 %30, 0, !dbg !1497
  br i1 %cmp, label %if.then, label %if.else, !dbg !1498

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %nn, metadata !1499, metadata !82), !dbg !1501
  %31 = ptrtoint i32* %n1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %31, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.751, i32 0, i32 0))
  %32 = load i32, i32* %n1.addr, align 4, !dbg !1502
  %conv4 = sext i32 %32 to i64, !dbg !1502
  %33 = ptrtoint i64* %nn to i64
  call void @__DiscoPoPOpenMPWrite(i64 %33, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.752, i32 0, i32 0))
  store i64 %conv4, i64* %nn, align 8, !dbg !1501
  %34 = ptrtoint i32* %n2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %34, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.753, i32 0, i32 0))
  %35 = load i32, i32* %n2.addr, align 4, !dbg !1503
  %cmp5 = icmp ne i32 %35, 0, !dbg !1505
  br i1 %cmp5, label %if.then7, label %if.end, !dbg !1506

if.then7:                                         ; preds = %if.then
  %36 = ptrtoint i32* %n2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %36, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.754, i32 0, i32 0))
  %37 = load i32, i32* %n2.addr, align 4, !dbg !1507
  %conv8 = sext i32 %37 to i64, !dbg !1507
  %38 = ptrtoint i64* %nn to i64
  call void @__DiscoPoPOpenMPRead(i64 %38, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.755, i32 0, i32 0))
  %39 = load i64, i64* %nn, align 8, !dbg !1509
  %mul = mul nsw i64 %39, %conv8, !dbg !1509
  %40 = ptrtoint i64* %nn to i64
  call void @__DiscoPoPOpenMPWrite(i64 %40, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.756, i32 0, i32 0))
  store i64 %mul, i64* %nn, align 8, !dbg !1509
  br label %if.end, !dbg !1510

if.end:                                           ; preds = %if.then7, %if.then
  %41 = ptrtoint i64* %nn to i64
  call void @__DiscoPoPOpenMPRead(i64 %41, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.757, i32 0, i32 0))
  %42 = load i64, i64* %nn, align 8, !dbg !1511
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.3.7, i32 0, i32 0), i64 %42), !dbg !1512
  br label %if.end11, !dbg !1513

if.else:                                          ; preds = %entry
  %43 = ptrtoint i32* %n1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %43, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.758, i32 0, i32 0))
  %44 = load i32, i32* %n1.addr, align 4, !dbg !1514
  %45 = ptrtoint i32* %n2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %45, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.759, i32 0, i32 0))
  %46 = load i32, i32* %n2.addr, align 4, !dbg !1515
  %47 = ptrtoint i32* %n3.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %47, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.760, i32 0, i32 0))
  %48 = load i32, i32* %n3.addr, align 4, !dbg !1516
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.4, i32 0, i32 0), i32 %44, i32 %46, i32 %48), !dbg !1517
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.end
  %49 = ptrtoint i32* %niter.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %49, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.761, i32 0, i32 0))
  %50 = load i32, i32* %niter.addr, align 4, !dbg !1518
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5.8, i32 0, i32 0), i32 %50), !dbg !1519
  %51 = ptrtoint double* %t.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %51, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.762, i32 0, i32 0))
  %52 = load double, double* %t.addr, align 8, !dbg !1520
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.6, i32 0, i32 0), double %52), !dbg !1521
  %53 = ptrtoint i32* %num_threads to i64
  call void @__DiscoPoPOpenMPRead(i64 %53, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.763, i32 0, i32 0))
  %54 = load i32, i32* %num_threads, align 4, !dbg !1522
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.7.9, i32 0, i32 0), i32 %54), !dbg !1523
  %55 = ptrtoint i32* %max_threads to i64
  call void @__DiscoPoPOpenMPRead(i64 %55, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.764, i32 0, i32 0))
  %56 = load i32, i32* %max_threads, align 4, !dbg !1524
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.8.10, i32 0, i32 0), i32 %56), !dbg !1525
  %57 = ptrtoint i32* %num_threads to i64
  call void @__DiscoPoPOpenMPRead(i64 %57, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.765, i32 0, i32 0))
  %58 = load i32, i32* %num_threads, align 4, !dbg !1526
  %59 = ptrtoint i32* %max_threads to i64
  call void @__DiscoPoPOpenMPRead(i64 %59, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.766, i32 0, i32 0))
  %60 = load i32, i32* %max_threads, align 4, !dbg !1528
  %cmp16 = icmp ne i32 %58, %60, !dbg !1529
  br i1 %cmp16, label %if.then18, label %if.end20, !dbg !1530

if.then18:                                        ; preds = %if.end11
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.9.11, i32 0, i32 0)), !dbg !1531
  br label %if.end20, !dbg !1531

if.end20:                                         ; preds = %if.then18, %if.end11
  %61 = ptrtoint double* %mops.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %61, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.767, i32 0, i32 0))
  %62 = load double, double* %mops.addr, align 8, !dbg !1532
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.10.12, i32 0, i32 0), double %62), !dbg !1533
  %63 = ptrtoint double* %mops.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %63, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.768, i32 0, i32 0))
  %64 = load double, double* %mops.addr, align 8, !dbg !1534
  %65 = ptrtoint i32* %num_threads to i64
  call void @__DiscoPoPOpenMPRead(i64 %65, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.769, i32 0, i32 0))
  %66 = load i32, i32* %num_threads, align 4, !dbg !1535
  %conv22 = sitofp i32 %66 to double, !dbg !1536
  %div = fdiv double %64, %conv22, !dbg !1537
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.11.13, i32 0, i32 0), double %div), !dbg !1538
  %67 = ptrtoint i8** %optype.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %67, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.770, i32 0, i32 0))
  %68 = load i8*, i8** %optype.addr, align 8, !dbg !1539
  %call24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.12.14, i32 0, i32 0), i8* %68), !dbg !1540
  %69 = ptrtoint i32* %passed_verification.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %69, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.771, i32 0, i32 0))
  %70 = load i32, i32* %passed_verification.addr, align 4, !dbg !1541
  %cmp25 = icmp slt i32 %70, 0, !dbg !1543
  br i1 %cmp25, label %if.then27, label %if.else29, !dbg !1544

if.then27:                                        ; preds = %if.end20
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.13.15, i32 0, i32 0)), !dbg !1545
  br label %if.end35, !dbg !1545

if.else29:                                        ; preds = %if.end20
  %71 = ptrtoint i32* %passed_verification.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %71, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.772, i32 0, i32 0))
  %72 = load i32, i32* %passed_verification.addr, align 4, !dbg !1546
  %tobool = icmp ne i32 %72, 0, !dbg !1546
  br i1 %tobool, label %if.then30, label %if.else32, !dbg !1548

if.then30:                                        ; preds = %if.else29
  %call31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.14.16, i32 0, i32 0)), !dbg !1549
  br label %if.end34, !dbg !1549

if.else32:                                        ; preds = %if.else29
  %call33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.15.17, i32 0, i32 0)), !dbg !1550
  br label %if.end34

if.end34:                                         ; preds = %if.else32, %if.then30
  br label %if.end35

if.end35:                                         ; preds = %if.end34, %if.then27
  %73 = ptrtoint i8** %npbversion.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %73, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.773, i32 0, i32 0))
  %74 = load i8*, i8** %npbversion.addr, align 8, !dbg !1551
  %call36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.16.18, i32 0, i32 0), i8* %74), !dbg !1552
  %75 = ptrtoint i8** %compiletime.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %75, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.774, i32 0, i32 0))
  %76 = load i8*, i8** %compiletime.addr, align 8, !dbg !1553
  %call37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.17.19, i32 0, i32 0), i8* %76), !dbg !1554
  %call38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.18.20, i32 0, i32 0)), !dbg !1555
  %77 = ptrtoint i8** %cc.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %77, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.775, i32 0, i32 0))
  %78 = load i8*, i8** %cc.addr, align 8, !dbg !1556
  %call39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.19.21, i32 0, i32 0), i8* %78), !dbg !1557
  %79 = ptrtoint i8** %clink.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %79, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.776, i32 0, i32 0))
  %80 = load i8*, i8** %clink.addr, align 8, !dbg !1558
  %call40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.20.22, i32 0, i32 0), i8* %80), !dbg !1559
  %81 = ptrtoint i8** %c_lib.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %81, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.777, i32 0, i32 0))
  %82 = load i8*, i8** %c_lib.addr, align 8, !dbg !1560
  %call41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.21.23, i32 0, i32 0), i8* %82), !dbg !1561
  %83 = ptrtoint i8** %c_inc.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %83, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.778, i32 0, i32 0))
  %84 = load i8*, i8** %c_inc.addr, align 8, !dbg !1562
  %call42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.22.24, i32 0, i32 0), i8* %84), !dbg !1563
  %85 = ptrtoint i8** %cflags.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %85, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.779, i32 0, i32 0))
  %86 = load i8*, i8** %cflags.addr, align 8, !dbg !1564
  %call43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.23.25, i32 0, i32 0), i8* %86), !dbg !1565
  %87 = ptrtoint i8** %clinkflags.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %87, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.780, i32 0, i32 0))
  %88 = load i8*, i8** %clinkflags.addr, align 8, !dbg !1566
  %call44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.24.26, i32 0, i32 0), i8* %88), !dbg !1567
  %call45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.25.27, i32 0, i32 0)), !dbg !1568
  %call46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.26, i32 0, i32 0)), !dbg !1569
  %call47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.27, i32 0, i32 0)), !dbg !1570
  %call48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.28, i32 0, i32 0)), !dbg !1571
  %call49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.29, i32 0, i32 0)), !dbg !1572
  %call50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.30, i32 0, i32 0)), !dbg !1573
  ret void, !dbg !1574
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..5(i32* noalias %.global_tid., i32* noalias %.bound_tid., i32* dereferenceable(4) %num_threads) #0 !dbg !1575 {
entry:
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([147 x i8], [147 x i8]* @.str.782, i32 0, i32 0))
  %.global_tid..addr = alloca i32*, align 8
  %.bound_tid..addr = alloca i32*, align 8
  %num_threads.addr = alloca i32*, align 8
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  %2 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.783, i32 0, i32 0))
  store i32* %.global_tid., i32** %.global_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.global_tid..addr, metadata !1578, metadata !82), !dbg !1579
  %3 = ptrtoint i32** %.bound_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.784, i32 0, i32 0))
  store i32* %.bound_tid., i32** %.bound_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.bound_tid..addr, metadata !1580, metadata !82), !dbg !1579
  %4 = ptrtoint i32** %num_threads.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.785, i32 0, i32 0))
  store i32* %num_threads, i32** %num_threads.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %num_threads.addr, metadata !1581, metadata !82), !dbg !1579
  %5 = ptrtoint i32** %num_threads.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %5, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.786, i32 0, i32 0))
  %6 = load i32*, i32** %num_threads.addr, align 8, !dbg !1582
  %7 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !1584
  %8 = ptrtoint i8** %7 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %8, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.787, i32 0, i32 0))
  store i8* getelementptr inbounds ([43 x i8], [43 x i8]* @12, i32 0, i32 0), i8** %7, align 8, !dbg !1584
  %9 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %9, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.788, i32 0, i32 0))
  %10 = load i32*, i32** %.global_tid..addr, align 8, !dbg !1584
  %11 = ptrtoint i32* %10 to i64
  call void @__DiscoPoPOpenMPRead(i64 %11, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.789, i32 0, i32 0))
  %12 = load i32, i32* %10, align 4, !dbg !1584
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([147 x i8], [147 x i8]* @.str.791, i32 0, i32 0))
  %13 = call i32 @__kmpc_master(%ident_t* %.kmpc_loc.addr, i32 %12), !dbg !1584
  %tobool = icmp ne i32 %13, 0, !dbg !1584
  br i1 %tobool, label %omp_if.then, label %omp_if.end, !dbg !1584

omp_if.then:                                      ; preds = %entry
  %call = call i32 @omp_get_num_threads(), !dbg !1586
  %14 = ptrtoint i32* %6 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %14, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.792, i32 0, i32 0))
  store i32 %call, i32* %6, align 4, !dbg !1588
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_end_master(%ident_t* %.kmpc_loc.addr, i32 %12), !dbg !1589
  br label %omp_if.end, !dbg !1591

omp_if.end:                                       ; preds = %omp_if.then, %entry
  call void @__DiscoPoPOpenMPAfterCall()
  ret void, !dbg !1592
}

declare i32 @__kmpc_master(%ident_t*, i32)

declare void @__kmpc_end_master(%ident_t*, i32)

; Function Attrs: nounwind uwtable
define void @timer_clear(i32 %n) #0 !dbg !1593 {
entry:
  %n.addr = alloca i32, align 4
  %0 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.793, i32 0, i32 0))
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !1594, metadata !82), !dbg !1595
  %1 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %1, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.794, i32 0, i32 0))
  %2 = load i32, i32* %n.addr, align 4, !dbg !1596
  %idxprom = sext i32 %2 to i64, !dbg !1597
  %3 = call [64 x double]* @_ZTWL7elapsed(), !dbg !1597
  %arrayidx = getelementptr inbounds [64 x double], [64 x double]* %3, i64 0, i64 %idxprom, !dbg !1597
  %4 = ptrtoint double* %arrayidx to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.795, i32 0, i32 0))
  store double 0.000000e+00, double* %arrayidx, align 8, !dbg !1598
  %5 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %5, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.796, i32 0, i32 0))
  %6 = load i32, i32* %n.addr, align 4, !dbg !1599
  %idxprom1 = sext i32 %6 to i64, !dbg !1600
  %7 = call [64 x i32]* @_ZTWL5count(), !dbg !1600
  %arrayidx2 = getelementptr inbounds [64 x i32], [64 x i32]* %7, i64 0, i64 %idxprom1, !dbg !1600
  %8 = ptrtoint i32* %arrayidx2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %8, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.797, i32 0, i32 0))
  store i32 0, i32* %arrayidx2, align 4, !dbg !1601
  ret void, !dbg !1602
}

; Function Attrs: nounwind uwtable
define internal [64 x double]* @_ZTWL7elapsed() #0 {
  ret [64 x double]* @elapsed
}

; Function Attrs: nounwind uwtable
define internal [64 x i32]* @_ZTWL5count() #0 {
  ret [64 x i32]* @count
}

; Function Attrs: nounwind uwtable
define void @timer_start(i32 %n) #0 !dbg !1603 {
entry:
  %n.addr = alloca i32, align 4
  %0 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.798, i32 0, i32 0))
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !1604, metadata !82), !dbg !1605
  %call = call double @elapsed_time(), !dbg !1606
  %1 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %1, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.799, i32 0, i32 0))
  %2 = load i32, i32* %n.addr, align 4, !dbg !1607
  %idxprom = sext i32 %2 to i64, !dbg !1608
  %3 = call [64 x double]* @_ZTWL5start(), !dbg !1609
  %arrayidx = getelementptr inbounds [64 x double], [64 x double]* %3, i64 0, i64 %idxprom, !dbg !1608
  %4 = ptrtoint double* %arrayidx to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.800, i32 0, i32 0))
  store double %call, double* %arrayidx, align 8, !dbg !1611
  ret void, !dbg !1612
}

; Function Attrs: nounwind uwtable
define internal double @elapsed_time() #0 !dbg !1613 {
entry:
  %t = alloca double, align 8
  call void @llvm.dbg.declare(metadata double* %t, metadata !1615, metadata !82), !dbg !1616
  %call = call double @omp_get_wtime(), !dbg !1617
  %0 = ptrtoint double* %t to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.801, i32 0, i32 0))
  store double %call, double* %t, align 8, !dbg !1618
  %1 = ptrtoint double* %t to i64
  call void @__DiscoPoPOpenMPRead(i64 %1, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.802, i32 0, i32 0))
  %2 = load double, double* %t, align 8, !dbg !1619
  ret double %2, !dbg !1620
}

declare double @omp_get_wtime() #3

; Function Attrs: nounwind uwtable
define internal [64 x double]* @_ZTWL5start() #0 {
  ret [64 x double]* @start
}

; Function Attrs: nounwind uwtable
define void @timer_stop(i32 %n) #0 !dbg !1621 {
entry:
  %n.addr = alloca i32, align 4
  %t = alloca double, align 8
  %now = alloca double, align 8
  %0 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.803, i32 0, i32 0))
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !1622, metadata !82), !dbg !1623
  call void @llvm.dbg.declare(metadata double* %t, metadata !1624, metadata !82), !dbg !1625
  call void @llvm.dbg.declare(metadata double* %now, metadata !1626, metadata !82), !dbg !1627
  %call = call double @elapsed_time(), !dbg !1628
  %1 = ptrtoint double* %now to i64
  call void @__DiscoPoPOpenMPWrite(i64 %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.804, i32 0, i32 0))
  store double %call, double* %now, align 8, !dbg !1629
  %2 = ptrtoint double* %now to i64
  call void @__DiscoPoPOpenMPRead(i64 %2, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.805, i32 0, i32 0))
  %3 = load double, double* %now, align 8, !dbg !1630
  %4 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %4, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.806, i32 0, i32 0))
  %5 = load i32, i32* %n.addr, align 4, !dbg !1631
  %idxprom = sext i32 %5 to i64, !dbg !1632
  %6 = call [64 x double]* @_ZTWL5start(), !dbg !1632
  %arrayidx = getelementptr inbounds [64 x double], [64 x double]* %6, i64 0, i64 %idxprom, !dbg !1632
  %7 = ptrtoint double* %arrayidx to i64
  call void @__DiscoPoPOpenMPRead(i64 %7, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.807, i32 0, i32 0))
  %8 = load double, double* %arrayidx, align 8, !dbg !1632
  %sub = fsub double %3, %8, !dbg !1633
  %9 = ptrtoint double* %t to i64
  call void @__DiscoPoPOpenMPWrite(i64 %9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.808, i32 0, i32 0))
  store double %sub, double* %t, align 8, !dbg !1634
  %10 = ptrtoint double* %t to i64
  call void @__DiscoPoPOpenMPRead(i64 %10, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.809, i32 0, i32 0))
  %11 = load double, double* %t, align 8, !dbg !1635
  %12 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %12, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.810, i32 0, i32 0))
  %13 = load i32, i32* %n.addr, align 4, !dbg !1636
  %idxprom1 = sext i32 %13 to i64, !dbg !1637
  %14 = call [64 x double]* @_ZTWL7elapsed(), !dbg !1637
  %arrayidx2 = getelementptr inbounds [64 x double], [64 x double]* %14, i64 0, i64 %idxprom1, !dbg !1637
  %15 = ptrtoint double* %arrayidx2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %15, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.811, i32 0, i32 0))
  %16 = load double, double* %arrayidx2, align 8, !dbg !1638
  %add = fadd double %16, %11, !dbg !1638
  %17 = ptrtoint double* %arrayidx2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %17, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.812, i32 0, i32 0))
  store double %add, double* %arrayidx2, align 8, !dbg !1638
  %18 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %18, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.813, i32 0, i32 0))
  %19 = load i32, i32* %n.addr, align 4, !dbg !1639
  %idxprom3 = sext i32 %19 to i64, !dbg !1640
  %20 = call [64 x i32]* @_ZTWL5count(), !dbg !1640
  %arrayidx4 = getelementptr inbounds [64 x i32], [64 x i32]* %20, i64 0, i64 %idxprom3, !dbg !1640
  %21 = ptrtoint i32* %arrayidx4 to i64
  call void @__DiscoPoPOpenMPRead(i64 %21, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.814, i32 0, i32 0))
  %22 = load i32, i32* %arrayidx4, align 4, !dbg !1641
  %inc = add i32 %22, 1, !dbg !1641
  %23 = ptrtoint i32* %arrayidx4 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %23, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.815, i32 0, i32 0))
  store i32 %inc, i32* %arrayidx4, align 4, !dbg !1641
  ret void, !dbg !1642
}

; Function Attrs: nounwind uwtable
define double @timer_read(i32 %n) #0 !dbg !1643 {
entry:
  %n.addr = alloca i32, align 4
  %0 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.816, i32 0, i32 0))
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !1646, metadata !82), !dbg !1647
  %1 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %1, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.817, i32 0, i32 0))
  %2 = load i32, i32* %n.addr, align 4, !dbg !1648
  %idxprom = sext i32 %2 to i64, !dbg !1649
  %3 = call [64 x double]* @_ZTWL7elapsed(), !dbg !1649
  %arrayidx = getelementptr inbounds [64 x double], [64 x double]* %3, i64 0, i64 %idxprom, !dbg !1649
  %4 = ptrtoint double* %arrayidx to i64
  call void @__DiscoPoPOpenMPRead(i64 %4, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.818, i32 0, i32 0))
  %5 = load double, double* %arrayidx, align 8, !dbg !1649
  ret double %5, !dbg !1650
}

; Function Attrs: nounwind uwtable
define i32 @timer_count(i32 %n) #0 !dbg !1651 {
entry:
  %n.addr = alloca i32, align 4
  %0 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.819, i32 0, i32 0))
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !1654, metadata !82), !dbg !1655
  %1 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %1, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.820, i32 0, i32 0))
  %2 = load i32, i32* %n.addr, align 4, !dbg !1656
  %idxprom = sext i32 %2 to i64, !dbg !1657
  %3 = call [64 x i32]* @_ZTWL5count(), !dbg !1657
  %arrayidx = getelementptr inbounds [64 x i32], [64 x i32]* %3, i64 0, i64 %idxprom, !dbg !1657
  %4 = ptrtoint i32* %arrayidx to i64
  call void @__DiscoPoPOpenMPRead(i64 %4, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.821, i32 0, i32 0))
  %5 = load i32, i32* %arrayidx, align 4, !dbg !1657
  ret i32 %5, !dbg !1658
}

; Function Attrs: nounwind uwtable
define void @wtime_(double* %t) #0 !dbg !71 {
entry:
  %t.addr = alloca double*, align 8
  %tv = alloca %struct.timeval, align 8
  %0 = ptrtoint double** %t.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.822, i32 0, i32 0))
  store double* %t, double** %t.addr, align 8
  call void @llvm.dbg.declare(metadata double** %t.addr, metadata !1659, metadata !82), !dbg !1660
  call void @llvm.dbg.declare(metadata %struct.timeval* %tv, metadata !1661, metadata !82), !dbg !1670
  %call = call i32 @gettimeofday(%struct.timeval* %tv, %struct.timezone* null) #6, !dbg !1671
  %1 = ptrtoint i32* @wtime_.sec to i64
  call void @__DiscoPoPOpenMPRead(i64 %1, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.823, i32 0, i32 0))
  %2 = load i32, i32* @wtime_.sec, align 4, !dbg !1672
  %cmp = icmp slt i32 %2, 0, !dbg !1674
  br i1 %cmp, label %if.then, label %if.end, !dbg !1675

if.then:                                          ; preds = %entry
  %tv_sec = getelementptr inbounds %struct.timeval, %struct.timeval* %tv, i32 0, i32 0, !dbg !1676
  %3 = ptrtoint i64* %tv_sec to i64
  call void @__DiscoPoPOpenMPRead(i64 %3, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.824, i32 0, i32 0))
  %4 = load i64, i64* %tv_sec, align 8, !dbg !1676
  %conv = trunc i64 %4 to i32, !dbg !1678
  %5 = ptrtoint i32* @wtime_.sec to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.825, i32 0, i32 0))
  store i32 %conv, i32* @wtime_.sec, align 4, !dbg !1679
  br label %if.end, !dbg !1680

if.end:                                           ; preds = %if.then, %entry
  %tv_sec1 = getelementptr inbounds %struct.timeval, %struct.timeval* %tv, i32 0, i32 0, !dbg !1681
  %6 = ptrtoint i64* %tv_sec1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %6, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.826, i32 0, i32 0))
  %7 = load i64, i64* %tv_sec1, align 8, !dbg !1681
  %8 = ptrtoint i32* @wtime_.sec to i64
  call void @__DiscoPoPOpenMPRead(i64 %8, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.827, i32 0, i32 0))
  %9 = load i32, i32* @wtime_.sec, align 4, !dbg !1682
  %conv2 = sext i32 %9 to i64, !dbg !1682
  %sub = sub nsw i64 %7, %conv2, !dbg !1683
  %conv3 = sitofp i64 %sub to double, !dbg !1684
  %tv_usec = getelementptr inbounds %struct.timeval, %struct.timeval* %tv, i32 0, i32 1, !dbg !1685
  %10 = ptrtoint i64* %tv_usec to i64
  call void @__DiscoPoPOpenMPRead(i64 %10, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.828, i32 0, i32 0))
  %11 = load i64, i64* %tv_usec, align 8, !dbg !1685
  %conv4 = sitofp i64 %11 to double, !dbg !1686
  %mul = fmul double 1.000000e-06, %conv4, !dbg !1687
  %add = fadd double %conv3, %mul, !dbg !1688
  %12 = ptrtoint double** %t.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %12, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.829, i32 0, i32 0))
  %13 = load double*, double** %t.addr, align 8, !dbg !1689
  %14 = ptrtoint double* %13 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %14, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.830, i32 0, i32 0))
  store double %add, double* %13, align 8, !dbg !1690
  ret void, !dbg !1691
}

; Function Attrs: nounwind
declare i32 @gettimeofday(%struct.timeval*, %struct.timezone*) #4

declare void @__DiscoPoPOpenMPInitialize()

declare void @__CollectThreadInfo()

declare void @__DiscoPoPOpenMPFinalize()

declare void @__DiscoPoPOpenMPRead(i64, i32, i32, i32, i8*)

declare void @__DiscoPoPOpenMPWrite(i64, i8*)

declare void @__DiscoPoPOpenMPBeforeCall(i8*)

declare void @__DiscoPoPOpenMPAfterCall()

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.dbg.cu = !{!0, !52, !55, !67}
!llvm.ident = !{!75, !75, !75, !75}
!llvm.module.flags = !{!76, !77}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.9.0 (trunk)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, globals: !11)
!1 = !DIFile(filename: "is.c", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/IS")
!2 = !{}
!3 = !{!4, !5, !6, !7, !9, !10}
!4 = !DIBasicType(name: "long int", size: 64, align: 64, encoding: DW_ATE_signed)
!5 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64, align: 64)
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64, align: 64)
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64, align: 64)
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "INT_TYPE", file: !1, line: 158, baseType: !9)
!9 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!10 = !DIBasicType(name: "double", size: 64, align: 64, encoding: DW_ATE_float)
!11 = !{!12, !13, !14, !18, !22, !23, !27, !28, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51}
!12 = !DIGlobalVariable(name: "key_buff_ptr_global", scope: !0, file: !1, line: 165, type: !7, isLocal: false, isDefinition: true, variable: i32** @key_buff_ptr_global)
!13 = !DIGlobalVariable(name: "passed_verification", scope: !0, file: !1, line: 168, type: !9, isLocal: false, isDefinition: true, variable: i32* @passed_verification)
!14 = !DIGlobalVariable(name: "key_array", scope: !0, file: !1, line: 175, type: !15, isLocal: false, isDefinition: true, variable: [65536 x i32]* @key_array)
!15 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 2097152, align: 32, elements: !16)
!16 = !{!17}
!17 = !DISubrange(count: 65536)
!18 = !DIGlobalVariable(name: "key_buff1", scope: !0, file: !1, line: 176, type: !19, isLocal: false, isDefinition: true, variable: [2048 x i32]* @key_buff1)
!19 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 65536, align: 32, elements: !20)
!20 = !{!21}
!21 = !DISubrange(count: 2048)
!22 = !DIGlobalVariable(name: "key_buff2", scope: !0, file: !1, line: 177, type: !15, isLocal: false, isDefinition: true, variable: [65536 x i32]* @key_buff2)
!23 = !DIGlobalVariable(name: "partial_verify_vals", scope: !0, file: !1, line: 178, type: !24, isLocal: false, isDefinition: true, variable: [5 x i32]* @partial_verify_vals)
!24 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 160, align: 32, elements: !25)
!25 = !{!26}
!26 = !DISubrange(count: 5)
!27 = !DIGlobalVariable(name: "bucket_size", scope: !0, file: !1, line: 182, type: !6, isLocal: false, isDefinition: true, variable: i32*** @bucket_size)
!28 = !DIGlobalVariable(name: "bucket_ptrs", scope: !0, file: !1, line: 183, type: !29, isLocal: false, isDefinition: true, variable: [512 x i32]* @bucket_ptrs)
!29 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 16384, align: 32, elements: !30)
!30 = !{!31}
!31 = !DISubrange(count: 512)
!32 = !DIGlobalVariable(name: "test_index_array", scope: !0, file: !1, line: 191, type: !24, isLocal: false, isDefinition: true, variable: [5 x i32]* @test_index_array)
!33 = !DIGlobalVariable(name: "test_rank_array", scope: !0, file: !1, line: 192, type: !24, isLocal: false, isDefinition: true, variable: [5 x i32]* @test_rank_array)
!34 = !DIGlobalVariable(name: "R23", scope: !0, file: !1, line: 297, type: !10, isLocal: true, isDefinition: true, variable: double* @R23)
!35 = !DIGlobalVariable(name: "R46", scope: !0, file: !1, line: 297, type: !10, isLocal: true, isDefinition: true, variable: double* @R46)
!36 = !DIGlobalVariable(name: "T23", scope: !0, file: !1, line: 297, type: !10, isLocal: true, isDefinition: true, variable: double* @T23)
!37 = !DIGlobalVariable(name: "T46", scope: !0, file: !1, line: 297, type: !10, isLocal: true, isDefinition: true, variable: double* @T46)
!38 = !DIGlobalVariable(name: "key_buff1_aptr", scope: !0, file: !1, line: 179, type: !6, isLocal: false, isDefinition: true, variable: i32*** @key_buff1_aptr)
!39 = !DIGlobalVariable(name: "S_test_index_array", scope: !0, file: !1, line: 194, type: !24, isLocal: false, isDefinition: true, variable: [5 x i32]* @S_test_index_array)
!40 = !DIGlobalVariable(name: "S_test_rank_array", scope: !0, file: !1, line: 196, type: !24, isLocal: false, isDefinition: true, variable: [5 x i32]* @S_test_rank_array)
!41 = !DIGlobalVariable(name: "W_test_index_array", scope: !0, file: !1, line: 199, type: !24, isLocal: false, isDefinition: true, variable: [5 x i32]* @W_test_index_array)
!42 = !DIGlobalVariable(name: "W_test_rank_array", scope: !0, file: !1, line: 201, type: !24, isLocal: false, isDefinition: true, variable: [5 x i32]* @W_test_rank_array)
!43 = !DIGlobalVariable(name: "A_test_index_array", scope: !0, file: !1, line: 204, type: !24, isLocal: false, isDefinition: true, variable: [5 x i32]* @A_test_index_array)
!44 = !DIGlobalVariable(name: "A_test_rank_array", scope: !0, file: !1, line: 206, type: !24, isLocal: false, isDefinition: true, variable: [5 x i32]* @A_test_rank_array)
!45 = !DIGlobalVariable(name: "B_test_index_array", scope: !0, file: !1, line: 209, type: !24, isLocal: false, isDefinition: true, variable: [5 x i32]* @B_test_index_array)
!46 = !DIGlobalVariable(name: "B_test_rank_array", scope: !0, file: !1, line: 211, type: !24, isLocal: false, isDefinition: true, variable: [5 x i32]* @B_test_rank_array)
!47 = !DIGlobalVariable(name: "C_test_index_array", scope: !0, file: !1, line: 214, type: !24, isLocal: false, isDefinition: true, variable: [5 x i32]* @C_test_index_array)
!48 = !DIGlobalVariable(name: "C_test_rank_array", scope: !0, file: !1, line: 216, type: !24, isLocal: false, isDefinition: true, variable: [5 x i32]* @C_test_rank_array)
!49 = !DIGlobalVariable(name: "D_test_index_array", scope: !0, file: !1, line: 219, type: !24, isLocal: false, isDefinition: true, variable: [5 x i32]* @D_test_index_array)
!50 = !DIGlobalVariable(name: "D_test_rank_array", scope: !0, file: !1, line: 221, type: !24, isLocal: false, isDefinition: true, variable: [5 x i32]* @D_test_rank_array)
!51 = !DIGlobalVariable(name: "KS", scope: !0, file: !1, line: 296, type: !9, isLocal: true, isDefinition: true, variable: i32* @KS)
!52 = distinct !DICompileUnit(language: DW_LANG_C99, file: !53, producer: "clang version 3.9.0 (trunk)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !54)
!53 = !DIFile(filename: "../common/c_print_results.c", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common")
!54 = !{!10}
!55 = distinct !DICompileUnit(language: DW_LANG_C99, file: !56, producer: "clang version 3.9.0 (trunk)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, globals: !57)
!56 = !DIFile(filename: "../common/c_timers.c", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common")
!57 = !{!58, !63, !64}
!58 = !DIGlobalVariable(name: "start", scope: !55, file: !59, line: 28, type: !60, isLocal: true, isDefinition: true, variable: [64 x double]* @start)
!59 = !DIFile(filename: "c_timers.c", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common")
!60 = !DICompositeType(tag: DW_TAG_array_type, baseType: !10, size: 4096, align: 64, elements: !61)
!61 = !{!62}
!62 = !DISubrange(count: 64)
!63 = !DIGlobalVariable(name: "elapsed", scope: !55, file: !59, line: 28, type: !60, isLocal: true, isDefinition: true, variable: [64 x double]* @elapsed)
!64 = !DIGlobalVariable(name: "count", scope: !55, file: !59, line: 29, type: !65, isLocal: true, isDefinition: true, variable: [64 x i32]* @count)
!65 = !DICompositeType(tag: DW_TAG_array_type, baseType: !66, size: 2048, align: 32, elements: !61)
!66 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!67 = distinct !DICompileUnit(language: DW_LANG_C99, file: !68, producer: "clang version 3.9.0 (trunk)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, globals: !69)
!68 = !DIFile(filename: "../common/wtime.c", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common")
!69 = !{!70}
!70 = !DIGlobalVariable(name: "sec", scope: !71, file: !68, line: 10, type: !9, isLocal: true, isDefinition: true, variable: i32* @wtime_.sec)
!71 = distinct !DISubprogram(name: "wtime_", scope: !68, file: !68, line: 7, type: !72, isLocal: false, isDefinition: true, scopeLine: 8, flags: DIFlagPrototyped, isOptimized: false, unit: !67, variables: !2)
!72 = !DISubroutineType(types: !73)
!73 = !{null, !74}
!74 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64, align: 64)
!75 = !{!"clang version 3.9.0 (trunk)"}
!76 = !{i32 2, !"Dwarf Version", i32 4}
!77 = !{i32 2, !"Debug Info Version", i32 3}
!78 = distinct !DISubprogram(name: "randlc", scope: !1, file: !1, line: 300, type: !79, isLocal: false, isDefinition: true, scopeLine: 301, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!79 = !DISubroutineType(types: !80)
!80 = !{!10, !74, !74}
!81 = !DILocalVariable(name: "X", arg: 1, scope: !78, file: !1, line: 300, type: !74)
!82 = !DIExpression()
!83 = !DILocation(line: 300, column: 24, scope: !78)
!84 = !DILocalVariable(name: "A", arg: 2, scope: !78, file: !1, line: 300, type: !74)
!85 = !DILocation(line: 300, column: 35, scope: !78)
!86 = !DILocalVariable(name: "T1", scope: !78, file: !1, line: 302, type: !10)
!87 = !DILocation(line: 302, column: 15, scope: !78)
!88 = !DILocalVariable(name: "T2", scope: !78, file: !1, line: 302, type: !10)
!89 = !DILocation(line: 302, column: 19, scope: !78)
!90 = !DILocalVariable(name: "T3", scope: !78, file: !1, line: 302, type: !10)
!91 = !DILocation(line: 302, column: 23, scope: !78)
!92 = !DILocalVariable(name: "T4", scope: !78, file: !1, line: 302, type: !10)
!93 = !DILocation(line: 302, column: 27, scope: !78)
!94 = !DILocalVariable(name: "A1", scope: !78, file: !1, line: 303, type: !10)
!95 = !DILocation(line: 303, column: 15, scope: !78)
!96 = !DILocalVariable(name: "A2", scope: !78, file: !1, line: 304, type: !10)
!97 = !DILocation(line: 304, column: 15, scope: !78)
!98 = !DILocalVariable(name: "X1", scope: !78, file: !1, line: 305, type: !10)
!99 = !DILocation(line: 305, column: 15, scope: !78)
!100 = !DILocalVariable(name: "X2", scope: !78, file: !1, line: 306, type: !10)
!101 = !DILocation(line: 306, column: 15, scope: !78)
!102 = !DILocalVariable(name: "Z", scope: !78, file: !1, line: 307, type: !10)
!103 = !DILocation(line: 307, column: 15, scope: !78)
!104 = !DILocalVariable(name: "i", scope: !78, file: !1, line: 308, type: !9)
!105 = !DILocation(line: 308, column: 17, scope: !78)
!106 = !DILocalVariable(name: "j", scope: !78, file: !1, line: 308, type: !9)
!107 = !DILocation(line: 308, column: 20, scope: !78)
!108 = !DILocation(line: 310, column: 11, scope: !109)
!109 = distinct !DILexicalBlock(scope: !78, file: !1, line: 310, column: 11)
!110 = !DILocation(line: 310, column: 14, scope: !109)
!111 = !DILocation(line: 310, column: 11, scope: !78)
!112 = !DILocation(line: 312, column: 9, scope: !113)
!113 = distinct !DILexicalBlock(scope: !109, file: !1, line: 311, column: 7)
!114 = !DILocation(line: 312, column: 13, scope: !113)
!115 = !DILocation(line: 313, column: 9, scope: !113)
!116 = !DILocation(line: 313, column: 13, scope: !113)
!117 = !DILocation(line: 314, column: 9, scope: !113)
!118 = !DILocation(line: 314, column: 13, scope: !113)
!119 = !DILocation(line: 315, column: 9, scope: !113)
!120 = !DILocation(line: 315, column: 13, scope: !113)
!121 = !DILocation(line: 317, column: 15, scope: !122)
!122 = distinct !DILexicalBlock(scope: !113, file: !1, line: 317, column: 9)
!123 = !DILocation(line: 317, column: 14, scope: !122)
!124 = !DILocation(line: 317, column: 19, scope: !125)
!125 = !DILexicalBlockFile(scope: !126, file: !1, discriminator: 1)
!126 = distinct !DILexicalBlock(scope: !122, file: !1, line: 317, column: 9)
!127 = !DILocation(line: 317, column: 20, scope: !125)
!128 = !DILocation(line: 317, column: 9, scope: !125)
!129 = !DILocation(line: 319, column: 24, scope: !130)
!130 = distinct !DILexicalBlock(scope: !126, file: !1, line: 318, column: 9)
!131 = !DILocation(line: 319, column: 22, scope: !130)
!132 = !DILocation(line: 319, column: 11, scope: !133)
!133 = !DILexicalBlockFile(scope: !130, file: !1, discriminator: 1)
!134 = !DILocation(line: 319, column: 15, scope: !130)
!135 = !DILocation(line: 320, column: 23, scope: !130)
!136 = !DILocation(line: 320, column: 21, scope: !130)
!137 = !DILocation(line: 320, column: 11, scope: !133)
!138 = !DILocation(line: 320, column: 15, scope: !130)
!139 = !DILocation(line: 321, column: 9, scope: !130)
!140 = !DILocation(line: 317, column: 27, scope: !141)
!141 = !DILexicalBlockFile(scope: !126, file: !1, discriminator: 2)
!142 = !DILocation(line: 317, column: 9, scope: !141)
!143 = !DILocation(line: 322, column: 15, scope: !144)
!144 = distinct !DILexicalBlock(scope: !113, file: !1, line: 322, column: 9)
!145 = !DILocation(line: 322, column: 14, scope: !144)
!146 = !DILocation(line: 322, column: 19, scope: !147)
!147 = !DILexicalBlockFile(scope: !148, file: !1, discriminator: 1)
!148 = distinct !DILexicalBlock(scope: !144, file: !1, line: 322, column: 9)
!149 = !DILocation(line: 322, column: 20, scope: !147)
!150 = !DILocation(line: 322, column: 9, scope: !147)
!151 = !DILocation(line: 324, column: 24, scope: !152)
!152 = distinct !DILexicalBlock(scope: !148, file: !1, line: 323, column: 9)
!153 = !DILocation(line: 324, column: 22, scope: !152)
!154 = !DILocation(line: 324, column: 11, scope: !155)
!155 = !DILexicalBlockFile(scope: !152, file: !1, discriminator: 1)
!156 = !DILocation(line: 324, column: 15, scope: !152)
!157 = !DILocation(line: 325, column: 23, scope: !152)
!158 = !DILocation(line: 325, column: 21, scope: !152)
!159 = !DILocation(line: 325, column: 11, scope: !155)
!160 = !DILocation(line: 325, column: 15, scope: !152)
!161 = !DILocation(line: 326, column: 9, scope: !152)
!162 = !DILocation(line: 322, column: 27, scope: !163)
!163 = !DILexicalBlockFile(scope: !148, file: !1, discriminator: 2)
!164 = !DILocation(line: 322, column: 9, scope: !163)
!165 = !DILocation(line: 327, column: 9, scope: !113)
!166 = !DILocation(line: 327, column: 12, scope: !113)
!167 = !DILocation(line: 328, column: 7, scope: !113)
!168 = !DILocation(line: 332, column: 12, scope: !78)
!169 = !DILocation(line: 332, column: 19, scope: !78)
!170 = !DILocation(line: 332, column: 18, scope: !78)
!171 = !DILocation(line: 332, column: 16, scope: !78)
!172 = !DILocation(line: 332, column: 10, scope: !78)
!173 = !DILocation(line: 333, column: 12, scope: !78)
!174 = !DILocation(line: 333, column: 10, scope: !78)
!175 = !DILocation(line: 334, column: 12, scope: !78)
!176 = !DILocation(line: 334, column: 10, scope: !78)
!177 = !DILocation(line: 335, column: 13, scope: !78)
!178 = !DILocation(line: 335, column: 12, scope: !78)
!179 = !DILocation(line: 335, column: 17, scope: !78)
!180 = !DILocation(line: 335, column: 23, scope: !78)
!181 = !DILocation(line: 335, column: 21, scope: !78)
!182 = !DILocation(line: 335, column: 15, scope: !78)
!183 = !DILocation(line: 335, column: 10, scope: !78)
!184 = !DILocation(line: 341, column: 12, scope: !78)
!185 = !DILocation(line: 341, column: 19, scope: !78)
!186 = !DILocation(line: 341, column: 18, scope: !78)
!187 = !DILocation(line: 341, column: 16, scope: !78)
!188 = !DILocation(line: 341, column: 10, scope: !78)
!189 = !DILocation(line: 342, column: 12, scope: !78)
!190 = !DILocation(line: 342, column: 10, scope: !78)
!191 = !DILocation(line: 343, column: 12, scope: !78)
!192 = !DILocation(line: 343, column: 10, scope: !78)
!193 = !DILocation(line: 344, column: 13, scope: !78)
!194 = !DILocation(line: 344, column: 12, scope: !78)
!195 = !DILocation(line: 344, column: 17, scope: !78)
!196 = !DILocation(line: 344, column: 23, scope: !78)
!197 = !DILocation(line: 344, column: 21, scope: !78)
!198 = !DILocation(line: 344, column: 15, scope: !78)
!199 = !DILocation(line: 344, column: 10, scope: !78)
!200 = !DILocation(line: 345, column: 12, scope: !78)
!201 = !DILocation(line: 345, column: 17, scope: !78)
!202 = !DILocation(line: 345, column: 15, scope: !78)
!203 = !DILocation(line: 345, column: 22, scope: !78)
!204 = !DILocation(line: 345, column: 27, scope: !78)
!205 = !DILocation(line: 345, column: 25, scope: !78)
!206 = !DILocation(line: 345, column: 20, scope: !78)
!207 = !DILocation(line: 345, column: 10, scope: !78)
!208 = !DILocation(line: 347, column: 12, scope: !78)
!209 = !DILocation(line: 347, column: 18, scope: !78)
!210 = !DILocation(line: 347, column: 16, scope: !78)
!211 = !DILocation(line: 347, column: 10, scope: !78)
!212 = !DILocation(line: 348, column: 12, scope: !78)
!213 = !DILocation(line: 348, column: 10, scope: !78)
!214 = !DILocation(line: 349, column: 11, scope: !78)
!215 = !DILocation(line: 349, column: 16, scope: !78)
!216 = !DILocation(line: 349, column: 22, scope: !78)
!217 = !DILocation(line: 349, column: 20, scope: !78)
!218 = !DILocation(line: 349, column: 14, scope: !78)
!219 = !DILocation(line: 349, column: 9, scope: !78)
!220 = !DILocation(line: 350, column: 12, scope: !78)
!221 = !DILocation(line: 350, column: 18, scope: !78)
!222 = !DILocation(line: 350, column: 16, scope: !78)
!223 = !DILocation(line: 350, column: 22, scope: !78)
!224 = !DILocation(line: 350, column: 27, scope: !78)
!225 = !DILocation(line: 350, column: 25, scope: !78)
!226 = !DILocation(line: 350, column: 20, scope: !78)
!227 = !DILocation(line: 350, column: 10, scope: !78)
!228 = !DILocation(line: 351, column: 12, scope: !78)
!229 = !DILocation(line: 351, column: 18, scope: !78)
!230 = !DILocation(line: 351, column: 16, scope: !78)
!231 = !DILocation(line: 351, column: 10, scope: !78)
!232 = !DILocation(line: 352, column: 12, scope: !78)
!233 = !DILocation(line: 352, column: 10, scope: !78)
!234 = !DILocation(line: 353, column: 12, scope: !78)
!235 = !DILocation(line: 353, column: 17, scope: !78)
!236 = !DILocation(line: 353, column: 23, scope: !78)
!237 = !DILocation(line: 353, column: 21, scope: !78)
!238 = !DILocation(line: 353, column: 15, scope: !78)
!239 = !DILocation(line: 353, column: 8, scope: !78)
!240 = !DILocation(line: 353, column: 10, scope: !78)
!241 = !DILocation(line: 354, column: 14, scope: !78)
!242 = !DILocation(line: 354, column: 21, scope: !78)
!243 = !DILocation(line: 354, column: 20, scope: !78)
!244 = !DILocation(line: 354, column: 18, scope: !78)
!245 = !DILocation(line: 354, column: 7, scope: !78)
!246 = distinct !DISubprogram(name: "find_my_seed", scope: !1, file: !1, line: 374, type: !247, isLocal: false, isDefinition: true, scopeLine: 379, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!247 = !DISubroutineType(types: !248)
!248 = !{!10, !9, !9, !4, !10, !10}
!249 = !DILocalVariable(name: "kn", arg: 1, scope: !246, file: !1, line: 374, type: !9)
!250 = !DILocation(line: 374, column: 28, scope: !246)
!251 = !DILocalVariable(name: "np", arg: 2, scope: !246, file: !1, line: 375, type: !9)
!252 = !DILocation(line: 375, column: 28, scope: !246)
!253 = !DILocalVariable(name: "nn", arg: 3, scope: !246, file: !1, line: 376, type: !4)
!254 = !DILocation(line: 376, column: 29, scope: !246)
!255 = !DILocalVariable(name: "s", arg: 4, scope: !246, file: !1, line: 377, type: !10)
!256 = !DILocation(line: 377, column: 31, scope: !246)
!257 = !DILocalVariable(name: "a", arg: 5, scope: !246, file: !1, line: 378, type: !10)
!258 = !DILocation(line: 378, column: 31, scope: !246)
!259 = !DILocalVariable(name: "t1", scope: !246, file: !1, line: 381, type: !10)
!260 = !DILocation(line: 381, column: 14, scope: !246)
!261 = !DILocalVariable(name: "t2", scope: !246, file: !1, line: 381, type: !10)
!262 = !DILocation(line: 381, column: 17, scope: !246)
!263 = !DILocalVariable(name: "mq", scope: !246, file: !1, line: 382, type: !4)
!264 = !DILocation(line: 382, column: 14, scope: !246)
!265 = !DILocalVariable(name: "nq", scope: !246, file: !1, line: 382, type: !4)
!266 = !DILocation(line: 382, column: 17, scope: !246)
!267 = !DILocalVariable(name: "kk", scope: !246, file: !1, line: 382, type: !4)
!268 = !DILocation(line: 382, column: 20, scope: !246)
!269 = !DILocalVariable(name: "ik", scope: !246, file: !1, line: 382, type: !4)
!270 = !DILocation(line: 382, column: 23, scope: !246)
!271 = !DILocation(line: 384, column: 12, scope: !272)
!272 = distinct !DILexicalBlock(scope: !246, file: !1, line: 384, column: 12)
!273 = !DILocation(line: 384, column: 15, scope: !272)
!274 = !DILocation(line: 384, column: 12, scope: !246)
!275 = !DILocation(line: 384, column: 29, scope: !276)
!276 = !DILexicalBlockFile(scope: !272, file: !1, discriminator: 1)
!277 = !DILocation(line: 384, column: 22, scope: !276)
!278 = !DILocation(line: 386, column: 13, scope: !246)
!279 = !DILocation(line: 386, column: 15, scope: !246)
!280 = !DILocation(line: 386, column: 20, scope: !246)
!281 = !DILocation(line: 386, column: 18, scope: !246)
!282 = !DILocation(line: 386, column: 23, scope: !246)
!283 = !DILocation(line: 386, column: 30, scope: !246)
!284 = !DILocation(line: 386, column: 28, scope: !246)
!285 = !DILocation(line: 386, column: 10, scope: !246)
!286 = !DILocation(line: 387, column: 12, scope: !246)
!287 = !DILocation(line: 387, column: 15, scope: !246)
!288 = !DILocation(line: 387, column: 21, scope: !246)
!289 = !DILocation(line: 387, column: 19, scope: !246)
!290 = !DILocation(line: 387, column: 10, scope: !246)
!291 = !DILocation(line: 389, column: 12, scope: !246)
!292 = !DILocation(line: 389, column: 10, scope: !246)
!293 = !DILocation(line: 390, column: 12, scope: !246)
!294 = !DILocation(line: 390, column: 10, scope: !246)
!295 = !DILocation(line: 391, column: 12, scope: !246)
!296 = !DILocation(line: 391, column: 10, scope: !246)
!297 = !DILocation(line: 392, column: 7, scope: !246)
!298 = !DILocation(line: 392, column: 15, scope: !299)
!299 = !DILexicalBlockFile(scope: !246, file: !1, discriminator: 1)
!300 = !DILocation(line: 392, column: 18, scope: !299)
!301 = !DILocation(line: 392, column: 7, scope: !299)
!302 = !DILocation(line: 393, column: 14, scope: !303)
!303 = distinct !DILexicalBlock(scope: !246, file: !1, line: 392, column: 24)
!304 = !DILocation(line: 393, column: 17, scope: !303)
!305 = !DILocation(line: 393, column: 12, scope: !303)
!306 = !DILocation(line: 394, column: 18, scope: !307)
!307 = distinct !DILexicalBlock(scope: !303, file: !1, line: 394, column: 14)
!308 = !DILocation(line: 394, column: 16, scope: !307)
!309 = !DILocation(line: 394, column: 25, scope: !307)
!310 = !DILocation(line: 394, column: 21, scope: !307)
!311 = !DILocation(line: 394, column: 14, scope: !303)
!312 = !DILocation(line: 395, column: 19, scope: !313)
!313 = distinct !DILexicalBlock(scope: !307, file: !1, line: 394, column: 30)
!314 = !DILocation(line: 396, column: 11, scope: !313)
!315 = !DILocation(line: 396, column: 9, scope: !313)
!316 = !DILocation(line: 397, column: 3, scope: !313)
!317 = !DILocation(line: 399, column: 19, scope: !318)
!318 = distinct !DILexicalBlock(scope: !307, file: !1, line: 398, column: 8)
!319 = !DILocation(line: 400, column: 11, scope: !318)
!320 = !DILocation(line: 400, column: 14, scope: !318)
!321 = !DILocation(line: 400, column: 9, scope: !318)
!322 = !DILocation(line: 392, column: 7, scope: !323)
!323 = !DILexicalBlockFile(scope: !246, file: !1, discriminator: 2)
!324 = !DILocation(line: 403, column: 13, scope: !246)
!325 = !DILocation(line: 405, column: 15, scope: !246)
!326 = !DILocation(line: 405, column: 7, scope: !246)
!327 = !DILocation(line: 407, column: 1, scope: !246)
!328 = distinct !DISubprogram(name: "create_seq", scope: !1, file: !1, line: 415, type: !329, isLocal: false, isDefinition: true, scopeLine: 416, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!329 = !DISubroutineType(types: !330)
!330 = !{null, !10, !10}
!331 = !DILocalVariable(name: "seed", arg: 1, scope: !328, file: !1, line: 415, type: !10)
!332 = !DILocation(line: 415, column: 25, scope: !328)
!333 = !DILocalVariable(name: "a", arg: 2, scope: !328, file: !1, line: 415, type: !10)
!334 = !DILocation(line: 415, column: 38, scope: !328)
!335 = !DILocalVariable(name: "x", scope: !328, file: !1, line: 417, type: !10)
!336 = !DILocation(line: 417, column: 10, scope: !328)
!337 = !DILocalVariable(name: "s", scope: !328, file: !1, line: 417, type: !10)
!338 = !DILocation(line: 417, column: 13, scope: !328)
!339 = !DILocalVariable(name: "i", scope: !328, file: !1, line: 418, type: !8)
!340 = !DILocation(line: 418, column: 12, scope: !328)
!341 = !DILocalVariable(name: "k", scope: !328, file: !1, line: 418, type: !8)
!342 = !DILocation(line: 418, column: 15, scope: !328)
!343 = !DILocation(line: 420, column: 9, scope: !328)
!344 = !DILocation(line: 456, column: 1, scope: !328)
!345 = distinct !DISubprogram(name: ".omp_outlined.", scope: !1, file: !1, line: 442, type: !346, isLocal: true, isDefinition: true, scopeLine: 421, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!346 = !DISubroutineType(types: !347)
!347 = !{null, !348, !348, !351, !351}
!348 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !349)
!349 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !350)
!350 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64, align: 64)
!351 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !10, size: 64, align: 64)
!352 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !345, type: !348, flags: DIFlagArtificial | DIFlagObjectPointer)
!353 = !DILocation(line: 0, scope: !345)
!354 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !345, type: !348, flags: DIFlagArtificial)
!355 = !DILocalVariable(name: "a", arg: 3, scope: !345, type: !351, flags: DIFlagArtificial)
!356 = !DILocalVariable(name: "seed", arg: 4, scope: !345, type: !351, flags: DIFlagArtificial)
!357 = !DILocation(line: 421, column: 3, scope: !345)
!358 = !DILocalVariable(name: "x", scope: !345, type: !10, flags: DIFlagArtificial)
!359 = !DILocalVariable(name: "s", scope: !345, type: !10, flags: DIFlagArtificial)
!360 = !DILocalVariable(name: "i", scope: !345, type: !8, flags: DIFlagArtificial)
!361 = !DILocalVariable(name: "k", scope: !345, type: !8, flags: DIFlagArtificial)
!362 = !DILocalVariable(name: "k1", scope: !363, file: !1, line: 422, type: !8)
!363 = distinct !DILexicalBlock(scope: !345, file: !1, line: 421, column: 3)
!364 = !DILocation(line: 422, column: 14, scope: !363)
!365 = !DILocalVariable(name: "k2", scope: !363, file: !1, line: 422, type: !8)
!366 = !DILocation(line: 422, column: 18, scope: !363)
!367 = !DILocalVariable(name: "an", scope: !363, file: !1, line: 423, type: !10)
!368 = !DILocation(line: 423, column: 12, scope: !363)
!369 = !DILocation(line: 423, column: 17, scope: !363)
!370 = !DILocalVariable(name: "myid", scope: !363, file: !1, line: 424, type: !9)
!371 = !DILocation(line: 424, column: 9, scope: !363)
!372 = !DILocalVariable(name: "num_procs", scope: !363, file: !1, line: 424, type: !9)
!373 = !DILocation(line: 424, column: 15, scope: !363)
!374 = !DILocalVariable(name: "mq", scope: !363, file: !1, line: 425, type: !8)
!375 = !DILocation(line: 425, column: 14, scope: !363)
!376 = !DILocation(line: 428, column: 12, scope: !363)
!377 = !DILocation(line: 428, column: 10, scope: !363)
!378 = !DILocation(line: 429, column: 17, scope: !363)
!379 = !DILocation(line: 429, column: 15, scope: !363)
!380 = !DILocation(line: 435, column: 22, scope: !363)
!381 = !DILocation(line: 435, column: 20, scope: !363)
!382 = !DILocation(line: 435, column: 32, scope: !363)
!383 = !DILocation(line: 435, column: 39, scope: !363)
!384 = !DILocation(line: 435, column: 37, scope: !363)
!385 = !DILocation(line: 435, column: 8, scope: !363)
!386 = !DILocation(line: 436, column: 10, scope: !363)
!387 = !DILocation(line: 436, column: 15, scope: !363)
!388 = !DILocation(line: 436, column: 13, scope: !363)
!389 = !DILocation(line: 436, column: 8, scope: !363)
!390 = !DILocation(line: 437, column: 10, scope: !363)
!391 = !DILocation(line: 437, column: 15, scope: !363)
!392 = !DILocation(line: 437, column: 13, scope: !363)
!393 = !DILocation(line: 437, column: 8, scope: !363)
!394 = !DILocation(line: 438, column: 10, scope: !395)
!395 = distinct !DILexicalBlock(scope: !363, file: !1, line: 438, column: 10)
!396 = !DILocation(line: 438, column: 13, scope: !395)
!397 = !DILocation(line: 438, column: 10, scope: !363)
!398 = !DILocation(line: 438, column: 29, scope: !399)
!399 = !DILexicalBlockFile(scope: !395, file: !1, discriminator: 1)
!400 = !DILocation(line: 438, column: 26, scope: !399)
!401 = !DILocation(line: 440, column: 5, scope: !363)
!402 = !DILocation(line: 440, column: 8, scope: !363)
!403 = !DILocation(line: 441, column: 23, scope: !363)
!404 = !DILocation(line: 441, column: 29, scope: !363)
!405 = !DILocation(line: 442, column: 27, scope: !363)
!406 = !DILocation(line: 442, column: 33, scope: !363)
!407 = !DILocation(line: 441, column: 9, scope: !363)
!408 = !DILocation(line: 441, column: 7, scope: !363)
!409 = !DILocation(line: 444, column: 7, scope: !363)
!410 = !DILocation(line: 446, column: 12, scope: !411)
!411 = distinct !DILexicalBlock(scope: !363, file: !1, line: 446, column: 5)
!412 = !DILocation(line: 446, column: 11, scope: !411)
!413 = !DILocation(line: 446, column: 10, scope: !411)
!414 = !DILocation(line: 446, column: 16, scope: !415)
!415 = !DILexicalBlockFile(scope: !416, file: !1, discriminator: 1)
!416 = distinct !DILexicalBlock(scope: !411, file: !1, line: 446, column: 5)
!417 = !DILocation(line: 446, column: 18, scope: !415)
!418 = !DILocation(line: 446, column: 17, scope: !415)
!419 = !DILocation(line: 446, column: 5, scope: !415)
!420 = !DILocation(line: 448, column: 11, scope: !421)
!421 = distinct !DILexicalBlock(scope: !416, file: !1, line: 447, column: 5)
!422 = !DILocation(line: 448, column: 9, scope: !421)
!423 = !DILocation(line: 449, column: 12, scope: !421)
!424 = !DILocation(line: 449, column: 9, scope: !421)
!425 = !DILocation(line: 450, column: 12, scope: !421)
!426 = !DILocation(line: 450, column: 9, scope: !421)
!427 = !DILocation(line: 451, column: 12, scope: !421)
!428 = !DILocation(line: 451, column: 9, scope: !421)
!429 = !DILocation(line: 453, column: 22, scope: !421)
!430 = !DILocation(line: 453, column: 24, scope: !421)
!431 = !DILocation(line: 453, column: 23, scope: !421)
!432 = !DILocation(line: 453, column: 17, scope: !421)
!433 = !DILocation(line: 453, column: 7, scope: !421)
!434 = !DILocation(line: 453, column: 20, scope: !421)
!435 = !DILocation(line: 454, column: 5, scope: !421)
!436 = !DILocation(line: 446, column: 23, scope: !437)
!437 = !DILexicalBlockFile(scope: !416, file: !1, discriminator: 2)
!438 = !DILocation(line: 446, column: 5, scope: !437)
!439 = !DILocation(line: 455, column: 3, scope: !345)
!440 = distinct !DISubprogram(name: "alloc_mem", scope: !1, file: !1, line: 463, type: !441, isLocal: false, isDefinition: true, scopeLine: 464, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!441 = !DISubroutineType(types: !442)
!442 = !{!5, !443}
!443 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !444, line: 62, baseType: !445)
!444 = !DIFile(filename: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/llvm-3.8/build/bin/../lib/clang/3.9.0/include/stddef.h", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/IS")
!445 = !DIBasicType(name: "long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!446 = !DILocalVariable(name: "size", arg: 1, scope: !440, file: !1, line: 463, type: !443)
!447 = !DILocation(line: 463, column: 25, scope: !440)
!448 = !DILocalVariable(name: "p", scope: !440, file: !1, line: 465, type: !5)
!449 = !DILocation(line: 465, column: 11, scope: !440)
!450 = !DILocation(line: 467, column: 24, scope: !440)
!451 = !DILocation(line: 467, column: 17, scope: !440)
!452 = !DILocation(line: 467, column: 7, scope: !440)
!453 = !DILocation(line: 468, column: 10, scope: !454)
!454 = distinct !DILexicalBlock(scope: !440, file: !1, line: 468, column: 9)
!455 = !DILocation(line: 468, column: 9, scope: !440)
!456 = !DILocation(line: 469, column: 9, scope: !457)
!457 = distinct !DILexicalBlock(scope: !454, file: !1, line: 468, column: 13)
!458 = !DILocation(line: 470, column: 9, scope: !457)
!459 = !DILocation(line: 472, column: 12, scope: !440)
!460 = !DILocation(line: 472, column: 5, scope: !440)
!461 = distinct !DISubprogram(name: "alloc_key_buff", scope: !1, file: !1, line: 475, type: !462, isLocal: false, isDefinition: true, scopeLine: 476, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!462 = !DISubroutineType(types: !463)
!463 = !{null}
!464 = !DILocalVariable(name: "i", scope: !461, file: !1, line: 477, type: !8)
!465 = !DILocation(line: 477, column: 14, scope: !461)
!466 = !DILocalVariable(name: "num_procs", scope: !461, file: !1, line: 478, type: !9)
!467 = !DILocation(line: 478, column: 14, scope: !461)
!468 = !DILocation(line: 482, column: 17, scope: !461)
!469 = !DILocation(line: 482, column: 15, scope: !461)
!470 = !DILocation(line: 488, column: 63, scope: !461)
!471 = !DILocation(line: 488, column: 61, scope: !461)
!472 = !DILocation(line: 488, column: 32, scope: !461)
!473 = !DILocation(line: 488, column: 19, scope: !461)
!474 = !DILocation(line: 488, column: 17, scope: !461)
!475 = !DILocation(line: 490, column: 12, scope: !476)
!476 = distinct !DILexicalBlock(scope: !461, file: !1, line: 490, column: 5)
!477 = !DILocation(line: 490, column: 10, scope: !476)
!478 = !DILocation(line: 490, column: 17, scope: !479)
!479 = !DILexicalBlockFile(scope: !480, file: !1, discriminator: 1)
!480 = distinct !DILexicalBlock(scope: !476, file: !1, line: 490, column: 5)
!481 = !DILocation(line: 490, column: 21, scope: !479)
!482 = !DILocation(line: 490, column: 19, scope: !479)
!483 = !DILocation(line: 490, column: 5, scope: !479)
!484 = !DILocation(line: 491, column: 38, scope: !485)
!485 = distinct !DILexicalBlock(scope: !480, file: !1, line: 490, column: 37)
!486 = !DILocation(line: 491, column: 26, scope: !485)
!487 = !DILocation(line: 491, column: 21, scope: !485)
!488 = !DILocation(line: 491, column: 9, scope: !485)
!489 = !DILocation(line: 491, column: 24, scope: !485)
!490 = !DILocation(line: 492, column: 5, scope: !485)
!491 = !DILocation(line: 490, column: 33, scope: !492)
!492 = !DILexicalBlockFile(scope: !480, file: !1, discriminator: 2)
!493 = !DILocation(line: 490, column: 5, scope: !492)
!494 = !DILocation(line: 494, column: 13, scope: !461)
!495 = !DILocation(line: 508, column: 1, scope: !461)
!496 = distinct !DISubprogram(name: ".omp_outlined..2", scope: !1, file: !1, line: 495, type: !497, isLocal: true, isDefinition: true, scopeLine: 495, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!497 = !DISubroutineType(types: !498)
!498 = !{null, !348, !348, !499}
!499 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !8, size: 64, align: 64)
!500 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !496, type: !348, flags: DIFlagArtificial | DIFlagObjectPointer)
!501 = !DILocation(line: 0, scope: !496)
!502 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !496, type: !348, flags: DIFlagArtificial)
!503 = !DILocalVariable(name: "i", arg: 3, scope: !496, type: !499, flags: DIFlagArtificial)
!504 = !DILocation(line: 495, column: 5, scope: !496)
!505 = !DILocalVariable(name: ".omp.iv", scope: !496, type: !9, flags: DIFlagArtificial)
!506 = !DILocalVariable(name: ".omp.lb", scope: !496, type: !9, flags: DIFlagArtificial)
!507 = !DILocation(line: 495, column: 10, scope: !496)
!508 = !DILocalVariable(name: ".omp.ub", scope: !496, type: !9, flags: DIFlagArtificial)
!509 = !DILocalVariable(name: ".omp.stride", scope: !496, type: !9, flags: DIFlagArtificial)
!510 = !DILocalVariable(name: ".omp.is_last", scope: !496, type: !9, flags: DIFlagArtificial)
!511 = !DILocalVariable(name: "i", scope: !496, type: !8, flags: DIFlagArtificial)
!512 = !DILocation(line: 495, column: 10, scope: !513)
!513 = !DILexicalBlockFile(scope: !496, file: !1, discriminator: 1)
!514 = !DILocation(line: 495, column: 10, scope: !515)
!515 = !DILexicalBlockFile(scope: !496, file: !1, discriminator: 2)
!516 = !DILocation(line: 495, column: 10, scope: !517)
!517 = !DILexicalBlockFile(scope: !496, file: !1, discriminator: 3)
!518 = !DILocation(line: 495, column: 5, scope: !517)
!519 = !DILocation(line: 495, column: 10, scope: !520)
!520 = !DILexicalBlockFile(scope: !496, file: !1, discriminator: 4)
!521 = !DILocation(line: 495, column: 5, scope: !520)
!522 = !DILocation(line: 495, column: 10, scope: !523)
!523 = !DILexicalBlockFile(scope: !496, file: !1, discriminator: 5)
!524 = !DILocation(line: 495, column: 27, scope: !523)
!525 = !DILocation(line: 496, column: 19, scope: !496)
!526 = !DILocation(line: 496, column: 9, scope: !496)
!527 = !DILocation(line: 496, column: 22, scope: !496)
!528 = !DILocation(line: 494, column: 13, scope: !496)
!529 = !DILocation(line: 495, column: 10, scope: !530)
!530 = !DILexicalBlockFile(scope: !496, file: !1, discriminator: 6)
!531 = !DILocation(line: 0, scope: !513)
!532 = !DILocation(line: 494, column: 13, scope: !513)
!533 = !DILocation(line: 494, column: 13, scope: !515)
!534 = !DILocation(line: 494, column: 13, scope: !517)
!535 = !DILocation(line: 496, column: 24, scope: !513)
!536 = distinct !DISubprogram(name: "full_verify", scope: !1, file: !1, line: 517, type: !462, isLocal: false, isDefinition: true, scopeLine: 518, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!537 = !DILocalVariable(name: "i", scope: !536, file: !1, line: 519, type: !8)
!538 = !DILocation(line: 519, column: 16, scope: !536)
!539 = !DILocalVariable(name: "j", scope: !536, file: !1, line: 519, type: !8)
!540 = !DILocation(line: 519, column: 19, scope: !536)
!541 = !DILocalVariable(name: "k", scope: !536, file: !1, line: 520, type: !8)
!542 = !DILocation(line: 520, column: 16, scope: !536)
!543 = !DILocalVariable(name: "k1", scope: !536, file: !1, line: 520, type: !8)
!544 = !DILocation(line: 520, column: 19, scope: !536)
!545 = !DILocalVariable(name: "k2", scope: !536, file: !1, line: 520, type: !8)
!546 = !DILocation(line: 520, column: 23, scope: !536)
!547 = !DILocation(line: 533, column: 13, scope: !536)
!548 = !DILocation(line: 573, column: 7, scope: !536)
!549 = !DILocation(line: 574, column: 13, scope: !536)
!550 = !DILocation(line: 579, column: 9, scope: !551)
!551 = distinct !DILexicalBlock(scope: !536, file: !1, line: 579, column: 9)
!552 = !DILocation(line: 579, column: 11, scope: !551)
!553 = !DILocation(line: 579, column: 9, scope: !536)
!554 = !DILocation(line: 580, column: 73, scope: !551)
!555 = !DILocation(line: 580, column: 67, scope: !551)
!556 = !DILocation(line: 580, column: 9, scope: !551)
!557 = !DILocation(line: 582, column: 28, scope: !551)
!558 = !DILocation(line: 584, column: 1, scope: !536)
!559 = distinct !DISubprogram(name: ".omp_outlined..3", scope: !1, file: !1, line: 533, type: !560, isLocal: true, isDefinition: true, scopeLine: 535, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!560 = !DISubroutineType(types: !561)
!561 = !{null, !348, !348}
!562 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !559, type: !348, flags: DIFlagArtificial | DIFlagObjectPointer)
!563 = !DILocation(line: 0, scope: !559)
!564 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !559, type: !348, flags: DIFlagArtificial)
!565 = !DILocalVariable(name: ".omp.iv", scope: !559, type: !9, flags: DIFlagArtificial)
!566 = !DILocalVariable(name: ".omp.lb", scope: !559, type: !9, flags: DIFlagArtificial)
!567 = !DILocation(line: 535, column: 10, scope: !559)
!568 = !DILocalVariable(name: ".omp.ub", scope: !559, type: !9, flags: DIFlagArtificial)
!569 = !DILocalVariable(name: ".omp.stride", scope: !559, type: !9, flags: DIFlagArtificial)
!570 = !DILocalVariable(name: ".omp.is_last", scope: !559, type: !9, flags: DIFlagArtificial)
!571 = !DILocalVariable(name: "i", scope: !559, type: !8, flags: DIFlagArtificial)
!572 = !DILocalVariable(name: "j", scope: !559, type: !8, flags: DIFlagArtificial)
!573 = !DILocalVariable(name: "k", scope: !559, type: !8, flags: DIFlagArtificial)
!574 = !DILocalVariable(name: "k1", scope: !559, type: !8, flags: DIFlagArtificial)
!575 = !DILocation(line: 535, column: 5, scope: !559)
!576 = !DILocation(line: 535, column: 5, scope: !577)
!577 = !DILexicalBlockFile(scope: !559, file: !1, discriminator: 1)
!578 = !DILocation(line: 535, column: 10, scope: !579)
!579 = !DILexicalBlockFile(scope: !559, file: !1, discriminator: 2)
!580 = !DILocation(line: 535, column: 5, scope: !579)
!581 = !DILocation(line: 535, column: 10, scope: !582)
!582 = !DILexicalBlockFile(scope: !559, file: !1, discriminator: 3)
!583 = distinct !{!583}
!584 = !DILocation(line: 535, column: 5, scope: !582)
!585 = !DILocation(line: 535, column: 10, scope: !586)
!586 = !DILexicalBlockFile(scope: !559, file: !1, discriminator: 4)
!587 = !DILocation(line: 535, column: 31, scope: !586)
!588 = !DILocation(line: 537, column: 15, scope: !589)
!589 = distinct !DILexicalBlock(scope: !559, file: !1, line: 535, column: 37)
!590 = !DILocation(line: 537, column: 17, scope: !589)
!591 = !DILocation(line: 537, column: 14, scope: !589)
!592 = !DILocation(line: 537, column: 35, scope: !593)
!593 = !DILexicalBlockFile(scope: !589, file: !1, discriminator: 1)
!594 = !DILocation(line: 537, column: 36, scope: !593)
!595 = !DILocation(line: 537, column: 23, scope: !593)
!596 = !DILocation(line: 537, column: 14, scope: !593)
!597 = !DILocation(line: 537, column: 14, scope: !598)
!598 = !DILexicalBlockFile(scope: !589, file: !1, discriminator: 2)
!599 = !DILocation(line: 537, column: 14, scope: !600)
!600 = !DILexicalBlockFile(scope: !589, file: !1, discriminator: 3)
!601 = !DILocation(line: 537, column: 12, scope: !600)
!602 = !DILocation(line: 538, column: 19, scope: !603)
!603 = distinct !DILexicalBlock(scope: !589, file: !1, line: 538, column: 9)
!604 = !DILocation(line: 538, column: 17, scope: !603)
!605 = !DILocation(line: 538, column: 15, scope: !603)
!606 = !DILocation(line: 538, column: 23, scope: !607)
!607 = !DILexicalBlockFile(scope: !608, file: !1, discriminator: 1)
!608 = distinct !DILexicalBlock(scope: !603, file: !1, line: 538, column: 9)
!609 = !DILocation(line: 538, column: 39, scope: !607)
!610 = !DILocation(line: 538, column: 27, scope: !607)
!611 = !DILocation(line: 538, column: 25, scope: !607)
!612 = !DILocation(line: 538, column: 9, scope: !607)
!613 = !DILocation(line: 539, column: 49, scope: !614)
!614 = distinct !DILexicalBlock(scope: !608, file: !1, line: 538, column: 49)
!615 = !DILocation(line: 539, column: 39, scope: !614)
!616 = !DILocation(line: 539, column: 19, scope: !614)
!617 = !DILocation(line: 539, column: 17, scope: !614)
!618 = !DILocation(line: 539, column: 15, scope: !614)
!619 = !DILocation(line: 540, column: 38, scope: !614)
!620 = !DILocation(line: 540, column: 28, scope: !614)
!621 = !DILocation(line: 540, column: 23, scope: !614)
!622 = !DILocation(line: 540, column: 13, scope: !614)
!623 = !DILocation(line: 540, column: 26, scope: !614)
!624 = !DILocation(line: 541, column: 9, scope: !614)
!625 = !DILocation(line: 538, column: 44, scope: !626)
!626 = !DILexicalBlockFile(scope: !608, file: !1, discriminator: 2)
!627 = !DILocation(line: 538, column: 9, scope: !626)
!628 = !DILocation(line: 542, column: 5, scope: !589)
!629 = !DILocation(line: 533, column: 13, scope: !559)
!630 = !DILocation(line: 535, column: 10, scope: !631)
!631 = !DILexicalBlockFile(scope: !559, file: !1, discriminator: 5)
!632 = !DILocation(line: 0, scope: !579)
!633 = !DILocation(line: 533, column: 13, scope: !577)
!634 = !DILocation(line: 533, column: 13, scope: !579)
!635 = !DILocation(line: 533, column: 13, scope: !582)
!636 = !DILocation(line: 542, column: 5, scope: !577)
!637 = distinct !DISubprogram(name: ".omp_outlined..4", scope: !1, file: !1, line: 577, type: !638, isLocal: true, isDefinition: true, scopeLine: 575, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!638 = !DISubroutineType(types: !639)
!639 = !{null, !348, !348, !499, !499}
!640 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !637, type: !348, flags: DIFlagArtificial | DIFlagObjectPointer)
!641 = !DILocation(line: 0, scope: !637)
!642 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !637, type: !348, flags: DIFlagArtificial)
!643 = !DILocalVariable(name: "i", arg: 3, scope: !637, type: !499, flags: DIFlagArtificial)
!644 = !DILocalVariable(name: "j", arg: 4, scope: !637, type: !499, flags: DIFlagArtificial)
!645 = !DILocation(line: 575, column: 5, scope: !637)
!646 = !DILocalVariable(name: ".omp.iv", scope: !637, type: !9, flags: DIFlagArtificial)
!647 = !DILocalVariable(name: ".omp.lb", scope: !637, type: !9, flags: DIFlagArtificial)
!648 = !DILocation(line: 575, column: 10, scope: !637)
!649 = !DILocalVariable(name: ".omp.ub", scope: !637, type: !9, flags: DIFlagArtificial)
!650 = !DILocalVariable(name: ".omp.stride", scope: !637, type: !9, flags: DIFlagArtificial)
!651 = !DILocalVariable(name: ".omp.is_last", scope: !637, type: !9, flags: DIFlagArtificial)
!652 = !DILocalVariable(name: "j", scope: !637, type: !8, flags: DIFlagArtificial)
!653 = !DILocation(line: 574, column: 42, scope: !637)
!654 = !DILocalVariable(name: "i", scope: !637, type: !8, flags: DIFlagArtificial)
!655 = !DILocation(line: 575, column: 10, scope: !656)
!656 = !DILexicalBlockFile(scope: !637, file: !1, discriminator: 1)
!657 = !DILocation(line: 575, column: 10, scope: !658)
!658 = !DILexicalBlockFile(scope: !637, file: !1, discriminator: 2)
!659 = !DILocation(line: 575, column: 10, scope: !660)
!660 = !DILexicalBlockFile(scope: !637, file: !1, discriminator: 3)
!661 = !DILocation(line: 575, column: 5, scope: !660)
!662 = !DILocation(line: 575, column: 10, scope: !663)
!663 = !DILexicalBlockFile(scope: !637, file: !1, discriminator: 4)
!664 = !DILocation(line: 575, column: 5, scope: !663)
!665 = !DILocation(line: 575, column: 10, scope: !666)
!666 = !DILexicalBlockFile(scope: !637, file: !1, discriminator: 5)
!667 = !DILocation(line: 575, column: 27, scope: !666)
!668 = !DILocation(line: 576, column: 23, scope: !669)
!669 = distinct !DILexicalBlock(scope: !637, file: !1, line: 576, column: 13)
!670 = !DILocation(line: 576, column: 24, scope: !669)
!671 = !DILocation(line: 576, column: 13, scope: !669)
!672 = !DILocation(line: 576, column: 40, scope: !669)
!673 = !DILocation(line: 576, column: 30, scope: !669)
!674 = !DILocation(line: 576, column: 28, scope: !669)
!675 = !DILocation(line: 576, column: 13, scope: !637)
!676 = !DILocation(line: 577, column: 14, scope: !669)
!677 = !DILocation(line: 577, column: 13, scope: !669)
!678 = !DILocation(line: 576, column: 41, scope: !679)
!679 = !DILexicalBlockFile(scope: !669, file: !1, discriminator: 1)
!680 = !DILocation(line: 574, column: 13, scope: !656)
!681 = !DILocation(line: 575, column: 10, scope: !682)
!682 = !DILexicalBlockFile(scope: !637, file: !1, discriminator: 6)
!683 = !DILocation(line: 0, scope: !660)
!684 = !DILocation(line: 574, column: 13, scope: !658)
!685 = !DILocation(line: 574, column: 13, scope: !660)
!686 = !DILocation(line: 574, column: 13, scope: !663)
!687 = !DILocation(line: 574, column: 13, scope: !688)
!688 = !DILexicalBlockFile(scope: !663, file: !1, discriminator: 7)
!689 = !DILocation(line: 574, column: 42, scope: !666)
!690 = !DILocation(line: 574, column: 40, scope: !666)
!691 = !DILocation(line: 574, column: 13, scope: !666)
!692 = !DILocation(line: 574, column: 42, scope: !682)
!693 = !DILocation(line: 574, column: 13, scope: !682)
!694 = !DILocation(line: 577, column: 14, scope: !656)
!695 = distinct !DISubprogram(linkageName: ".omp.reduction.reduction_func", scope: !1, file: !1, type: !696, isLocal: true, isDefinition: true, flags: DIFlagArtificial, isOptimized: false, unit: !0, variables: !2)
!696 = !DISubroutineType(types: !2)
!697 = !DILocalVariable(arg: 1, scope: !695, type: !5, flags: DIFlagArtificial | DIFlagObjectPointer)
!698 = !DILocation(line: 0, scope: !695)
!699 = !DILocalVariable(arg: 2, scope: !695, type: !5, flags: DIFlagArtificial)
!700 = !DILocation(line: 574, column: 42, scope: !695)
!701 = !DILocation(line: 574, column: 40, scope: !695)
!702 = distinct !DISubprogram(name: "rank", scope: !1, file: !1, line: 594, type: !703, isLocal: false, isDefinition: true, scopeLine: 595, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!703 = !DISubroutineType(types: !704)
!704 = !{null, !9}
!705 = !DILocalVariable(name: "iteration", arg: 1, scope: !702, file: !1, line: 594, type: !9)
!706 = !DILocation(line: 594, column: 16, scope: !702)
!707 = !DILocalVariable(name: "i", scope: !702, file: !1, line: 597, type: !8)
!708 = !DILocation(line: 597, column: 17, scope: !702)
!709 = !DILocalVariable(name: "k", scope: !702, file: !1, line: 597, type: !8)
!710 = !DILocation(line: 597, column: 20, scope: !702)
!711 = !DILocalVariable(name: "key_buff_ptr", scope: !702, file: !1, line: 598, type: !7)
!712 = !DILocation(line: 598, column: 18, scope: !702)
!713 = !DILocalVariable(name: "key_buff_ptr2", scope: !702, file: !1, line: 598, type: !7)
!714 = !DILocation(line: 598, column: 33, scope: !702)
!715 = !DILocalVariable(name: "shift", scope: !702, file: !1, line: 601, type: !9)
!716 = !DILocation(line: 601, column: 9, scope: !702)
!717 = !DILocalVariable(name: "num_bucket_keys", scope: !702, file: !1, line: 602, type: !8)
!718 = !DILocation(line: 602, column: 14, scope: !702)
!719 = !DILocation(line: 602, column: 39, scope: !702)
!720 = !DILocation(line: 602, column: 36, scope: !702)
!721 = !DILocation(line: 602, column: 32, scope: !702)
!722 = !DILocation(line: 606, column: 28, scope: !702)
!723 = !DILocation(line: 606, column: 15, scope: !702)
!724 = !DILocation(line: 606, column: 5, scope: !702)
!725 = !DILocation(line: 606, column: 26, scope: !702)
!726 = !DILocation(line: 607, column: 53, scope: !702)
!727 = !DILocation(line: 607, column: 51, scope: !702)
!728 = !DILocation(line: 607, column: 15, scope: !702)
!729 = !DILocation(line: 607, column: 24, scope: !702)
!730 = !DILocation(line: 607, column: 5, scope: !702)
!731 = !DILocation(line: 607, column: 41, scope: !702)
!732 = !DILocation(line: 612, column: 11, scope: !733)
!733 = distinct !DILexicalBlock(scope: !702, file: !1, line: 612, column: 5)
!734 = !DILocation(line: 612, column: 10, scope: !733)
!735 = !DILocation(line: 612, column: 15, scope: !736)
!736 = !DILexicalBlockFile(scope: !737, file: !1, discriminator: 1)
!737 = distinct !DILexicalBlock(scope: !733, file: !1, line: 612, column: 5)
!738 = !DILocation(line: 612, column: 16, scope: !736)
!739 = !DILocation(line: 612, column: 5, scope: !736)
!740 = !DILocation(line: 613, column: 61, scope: !737)
!741 = !DILocation(line: 613, column: 44, scope: !737)
!742 = !DILocation(line: 613, column: 34, scope: !737)
!743 = !DILocation(line: 613, column: 29, scope: !737)
!744 = !DILocation(line: 613, column: 9, scope: !737)
!745 = !DILocation(line: 613, column: 32, scope: !737)
!746 = !DILocation(line: 612, column: 35, scope: !747)
!747 = !DILexicalBlockFile(scope: !737, file: !1, discriminator: 2)
!748 = !DILocation(line: 612, column: 5, scope: !747)
!749 = !DILocation(line: 618, column: 19, scope: !702)
!750 = !DILocation(line: 622, column: 18, scope: !702)
!751 = !DILocation(line: 625, column: 9, scope: !702)
!752 = !DILocation(line: 764, column: 11, scope: !753)
!753 = distinct !DILexicalBlock(scope: !702, file: !1, line: 764, column: 5)
!754 = !DILocation(line: 764, column: 10, scope: !753)
!755 = !DILocation(line: 764, column: 15, scope: !756)
!756 = !DILexicalBlockFile(scope: !757, file: !1, discriminator: 1)
!757 = distinct !DILexicalBlock(scope: !753, file: !1, line: 764, column: 5)
!758 = !DILocation(line: 764, column: 16, scope: !756)
!759 = !DILocation(line: 764, column: 5, scope: !756)
!760 = !DILocation(line: 766, column: 33, scope: !761)
!761 = distinct !DILexicalBlock(scope: !757, file: !1, line: 765, column: 5)
!762 = !DILocation(line: 766, column: 13, scope: !761)
!763 = !DILocation(line: 766, column: 11, scope: !761)
!764 = !DILocation(line: 767, column: 17, scope: !765)
!765 = distinct !DILexicalBlock(scope: !761, file: !1, line: 767, column: 13)
!766 = !DILocation(line: 767, column: 15, scope: !765)
!767 = !DILocation(line: 767, column: 20, scope: !765)
!768 = !DILocation(line: 767, column: 24, scope: !769)
!769 = !DILexicalBlockFile(scope: !765, file: !1, discriminator: 1)
!770 = !DILocation(line: 767, column: 26, scope: !769)
!771 = !DILocation(line: 767, column: 13, scope: !769)
!772 = !DILocalVariable(name: "key_rank", scope: !773, file: !1, line: 769, type: !8)
!773 = distinct !DILexicalBlock(scope: !765, file: !1, line: 768, column: 9)
!774 = !DILocation(line: 769, column: 22, scope: !773)
!775 = !DILocation(line: 769, column: 46, scope: !773)
!776 = !DILocation(line: 769, column: 47, scope: !773)
!777 = !DILocation(line: 769, column: 33, scope: !773)
!778 = !DILocalVariable(name: "failed", scope: !773, file: !1, line: 770, type: !9)
!779 = !DILocation(line: 770, column: 17, scope: !773)
!780 = !DILocation(line: 775, column: 25, scope: !781)
!781 = distinct !DILexicalBlock(scope: !773, file: !1, line: 775, column: 25)
!782 = !DILocation(line: 775, column: 27, scope: !781)
!783 = !DILocation(line: 775, column: 25, scope: !773)
!784 = !DILocation(line: 777, column: 29, scope: !785)
!785 = distinct !DILexicalBlock(scope: !786, file: !1, line: 777, column: 29)
!786 = distinct !DILexicalBlock(scope: !781, file: !1, line: 776, column: 21)
!787 = !DILocation(line: 777, column: 57, scope: !785)
!788 = !DILocation(line: 777, column: 41, scope: !785)
!789 = !DILocation(line: 777, column: 60, scope: !785)
!790 = !DILocation(line: 777, column: 59, scope: !785)
!791 = !DILocation(line: 777, column: 38, scope: !785)
!792 = !DILocation(line: 777, column: 29, scope: !786)
!793 = !DILocation(line: 778, column: 36, scope: !785)
!794 = !DILocation(line: 778, column: 29, scope: !785)
!795 = !DILocation(line: 780, column: 48, scope: !785)
!796 = !DILocation(line: 781, column: 21, scope: !786)
!797 = !DILocation(line: 784, column: 29, scope: !798)
!798 = distinct !DILexicalBlock(scope: !799, file: !1, line: 784, column: 29)
!799 = distinct !DILexicalBlock(scope: !781, file: !1, line: 783, column: 21)
!800 = !DILocation(line: 784, column: 57, scope: !798)
!801 = !DILocation(line: 784, column: 41, scope: !798)
!802 = !DILocation(line: 784, column: 60, scope: !798)
!803 = !DILocation(line: 784, column: 59, scope: !798)
!804 = !DILocation(line: 784, column: 38, scope: !798)
!805 = !DILocation(line: 784, column: 29, scope: !799)
!806 = !DILocation(line: 785, column: 36, scope: !798)
!807 = !DILocation(line: 785, column: 29, scope: !798)
!808 = !DILocation(line: 787, column: 48, scope: !798)
!809 = !DILocation(line: 871, column: 17, scope: !810)
!810 = distinct !DILexicalBlock(scope: !773, file: !1, line: 871, column: 17)
!811 = !DILocation(line: 871, column: 24, scope: !810)
!812 = !DILocation(line: 871, column: 17, scope: !773)
!813 = !DILocation(line: 874, column: 26, scope: !810)
!814 = !DILocation(line: 874, column: 42, scope: !810)
!815 = !DILocation(line: 872, column: 17, scope: !810)
!816 = !DILocation(line: 875, column: 9, scope: !773)
!817 = !DILocation(line: 876, column: 5, scope: !761)
!818 = !DILocation(line: 764, column: 35, scope: !819)
!819 = !DILexicalBlockFile(scope: !757, file: !1, discriminator: 2)
!820 = !DILocation(line: 764, column: 5, scope: !819)
!821 = !DILocation(line: 885, column: 9, scope: !822)
!822 = distinct !DILexicalBlock(scope: !702, file: !1, line: 885, column: 9)
!823 = !DILocation(line: 885, column: 19, scope: !822)
!824 = !DILocation(line: 885, column: 9, scope: !702)
!825 = !DILocation(line: 886, column: 31, scope: !822)
!826 = !DILocation(line: 886, column: 29, scope: !822)
!827 = !DILocation(line: 886, column: 9, scope: !822)
!828 = !DILocation(line: 888, column: 1, scope: !702)
!829 = distinct !DISubprogram(name: ".omp_outlined..6", scope: !1, file: !1, line: 708, type: !830, isLocal: true, isDefinition: true, scopeLine: 626, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!830 = !DISubroutineType(types: !831)
!831 = !{null, !348, !348, !832, !499, !833, !833}
!832 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !9, size: 64, align: 64)
!833 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !7, size: 64, align: 64)
!834 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !829, type: !348, flags: DIFlagArtificial | DIFlagObjectPointer)
!835 = !DILocation(line: 0, scope: !829)
!836 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !829, type: !348, flags: DIFlagArtificial)
!837 = !DILocalVariable(name: "shift", arg: 3, scope: !829, type: !832, flags: DIFlagArtificial)
!838 = !DILocalVariable(name: "num_bucket_keys", arg: 4, scope: !829, type: !499, flags: DIFlagArtificial)
!839 = !DILocalVariable(name: "key_buff_ptr", arg: 5, scope: !829, type: !833, flags: DIFlagArtificial)
!840 = !DILocalVariable(name: "key_buff_ptr2", arg: 6, scope: !829, type: !833, flags: DIFlagArtificial)
!841 = !DILocation(line: 626, column: 3, scope: !829)
!842 = !DILocalVariable(name: "i", scope: !829, type: !8, flags: DIFlagArtificial)
!843 = !DILocalVariable(name: "k", scope: !829, type: !8, flags: DIFlagArtificial)
!844 = !DILocalVariable(name: "work_buff", scope: !845, file: !1, line: 627, type: !7)
!845 = distinct !DILexicalBlock(scope: !829, file: !1, line: 626, column: 3)
!846 = !DILocation(line: 627, column: 15, scope: !845)
!847 = !DILocalVariable(name: "m", scope: !845, file: !1, line: 627, type: !8)
!848 = !DILocation(line: 627, column: 26, scope: !845)
!849 = !DILocalVariable(name: "k1", scope: !845, file: !1, line: 627, type: !8)
!850 = !DILocation(line: 627, column: 29, scope: !845)
!851 = !DILocalVariable(name: "k2", scope: !845, file: !1, line: 627, type: !8)
!852 = !DILocation(line: 627, column: 33, scope: !845)
!853 = !DILocalVariable(name: "myid", scope: !845, file: !1, line: 628, type: !9)
!854 = !DILocation(line: 628, column: 9, scope: !845)
!855 = !DILocalVariable(name: "num_procs", scope: !845, file: !1, line: 628, type: !9)
!856 = !DILocation(line: 628, column: 19, scope: !845)
!857 = !DILocation(line: 631, column: 12, scope: !845)
!858 = !DILocation(line: 631, column: 10, scope: !845)
!859 = !DILocation(line: 632, column: 17, scope: !845)
!860 = !DILocation(line: 632, column: 15, scope: !845)
!861 = !DILocation(line: 641, column: 29, scope: !845)
!862 = !DILocation(line: 641, column: 17, scope: !845)
!863 = !DILocation(line: 641, column: 15, scope: !845)
!864 = !DILocation(line: 644, column: 11, scope: !865)
!865 = distinct !DILexicalBlock(scope: !845, file: !1, line: 644, column: 5)
!866 = !DILocation(line: 644, column: 10, scope: !865)
!867 = !DILocation(line: 644, column: 15, scope: !868)
!868 = !DILexicalBlockFile(scope: !869, file: !1, discriminator: 1)
!869 = distinct !DILexicalBlock(scope: !865, file: !1, line: 644, column: 5)
!870 = !DILocation(line: 644, column: 16, scope: !868)
!871 = !DILocation(line: 644, column: 5, scope: !868)
!872 = !DILocation(line: 645, column: 19, scope: !869)
!873 = !DILocation(line: 645, column: 9, scope: !869)
!874 = !DILocation(line: 645, column: 22, scope: !869)
!875 = !DILocation(line: 644, column: 31, scope: !876)
!876 = !DILexicalBlockFile(scope: !869, file: !1, discriminator: 2)
!877 = !DILocation(line: 644, column: 5, scope: !876)
!878 = !DILocalVariable(name: ".omp.iv", scope: !879, type: !9, flags: DIFlagArtificial)
!879 = distinct !DILexicalBlock(scope: !845, file: !1, line: 648, column: 13)
!880 = !DILocation(line: 0, scope: !879)
!881 = !DILocalVariable(name: ".omp.lb", scope: !879, type: !9, flags: DIFlagArtificial)
!882 = !DILocation(line: 649, column: 10, scope: !879)
!883 = !DILocalVariable(name: ".omp.ub", scope: !879, type: !9, flags: DIFlagArtificial)
!884 = !DILocalVariable(name: ".omp.stride", scope: !879, type: !9, flags: DIFlagArtificial)
!885 = !DILocalVariable(name: ".omp.is_last", scope: !879, type: !9, flags: DIFlagArtificial)
!886 = !DILocalVariable(name: "i", scope: !879, type: !8, flags: DIFlagArtificial)
!887 = !DILocation(line: 648, column: 13, scope: !845)
!888 = !DILocation(line: 649, column: 10, scope: !889)
!889 = !DILexicalBlockFile(scope: !879, file: !1, discriminator: 1)
!890 = !DILocation(line: 649, column: 10, scope: !891)
!891 = !DILexicalBlockFile(scope: !879, file: !1, discriminator: 2)
!892 = !DILocation(line: 649, column: 10, scope: !893)
!893 = !DILexicalBlockFile(scope: !879, file: !1, discriminator: 3)
!894 = !DILocation(line: 648, column: 13, scope: !895)
!895 = !DILexicalBlockFile(scope: !845, file: !1, discriminator: 1)
!896 = !DILocation(line: 649, column: 10, scope: !897)
!897 = !DILexicalBlockFile(scope: !879, file: !1, discriminator: 4)
!898 = !DILocation(line: 648, column: 13, scope: !899)
!899 = !DILexicalBlockFile(scope: !845, file: !1, discriminator: 2)
!900 = !DILocation(line: 649, column: 10, scope: !901)
!901 = !DILexicalBlockFile(scope: !879, file: !1, discriminator: 5)
!902 = !DILocation(line: 649, column: 27, scope: !901)
!903 = !DILocation(line: 650, column: 29, scope: !879)
!904 = !DILocation(line: 650, column: 19, scope: !879)
!905 = !DILocation(line: 650, column: 35, scope: !879)
!906 = !DILocation(line: 650, column: 32, scope: !879)
!907 = !DILocation(line: 650, column: 9, scope: !879)
!908 = !DILocation(line: 650, column: 41, scope: !879)
!909 = !DILocation(line: 648, column: 13, scope: !893)
!910 = !DILocation(line: 649, column: 10, scope: !911)
!911 = !DILexicalBlockFile(scope: !879, file: !1, discriminator: 6)
!912 = !DILocation(line: 0, scope: !897)
!913 = !DILocation(line: 648, column: 13, scope: !897)
!914 = !DILocation(line: 648, column: 13, scope: !901)
!915 = !DILocation(line: 648, column: 13, scope: !911)
!916 = !DILocation(line: 648, column: 37, scope: !911)
!917 = !DILocation(line: 648, column: 37, scope: !918)
!918 = !DILexicalBlockFile(scope: !911, file: !1, discriminator: 7)
!919 = !DILocation(line: 654, column: 5, scope: !845)
!920 = !DILocation(line: 654, column: 20, scope: !845)
!921 = !DILocation(line: 655, column: 11, scope: !922)
!922 = distinct !DILexicalBlock(scope: !845, file: !1, line: 655, column: 5)
!923 = !DILocation(line: 655, column: 10, scope: !922)
!924 = !DILocation(line: 655, column: 15, scope: !925)
!925 = !DILexicalBlockFile(scope: !926, file: !1, discriminator: 1)
!926 = distinct !DILexicalBlock(scope: !922, file: !1, line: 655, column: 5)
!927 = !DILocation(line: 655, column: 18, scope: !925)
!928 = !DILocation(line: 655, column: 16, scope: !925)
!929 = !DILocation(line: 655, column: 5, scope: !925)
!930 = !DILocation(line: 656, column: 39, scope: !926)
!931 = !DILocation(line: 656, column: 27, scope: !926)
!932 = !DILocation(line: 656, column: 9, scope: !926)
!933 = !DILocation(line: 656, column: 24, scope: !926)
!934 = !DILocation(line: 655, column: 25, scope: !935)
!935 = !DILexicalBlockFile(scope: !926, file: !1, discriminator: 2)
!936 = !DILocation(line: 655, column: 5, scope: !935)
!937 = !DILocation(line: 658, column: 11, scope: !938)
!938 = distinct !DILexicalBlock(scope: !845, file: !1, line: 658, column: 5)
!939 = !DILocation(line: 658, column: 10, scope: !938)
!940 = !DILocation(line: 658, column: 15, scope: !941)
!941 = !DILexicalBlockFile(scope: !942, file: !1, discriminator: 1)
!942 = distinct !DILexicalBlock(scope: !938, file: !1, line: 658, column: 5)
!943 = !DILocation(line: 658, column: 16, scope: !941)
!944 = !DILocation(line: 658, column: 5, scope: !941)
!945 = !DILocation(line: 659, column: 38, scope: !946)
!946 = distinct !DILexicalBlock(scope: !942, file: !1, line: 658, column: 37)
!947 = !DILocation(line: 659, column: 39, scope: !946)
!948 = !DILocation(line: 659, column: 26, scope: !946)
!949 = !DILocation(line: 659, column: 21, scope: !946)
!950 = !DILocation(line: 659, column: 9, scope: !946)
!951 = !DILocation(line: 659, column: 9, scope: !952)
!952 = !DILexicalBlockFile(scope: !946, file: !1, discriminator: 1)
!953 = !DILocation(line: 659, column: 24, scope: !946)
!954 = !DILocation(line: 660, column: 15, scope: !955)
!955 = distinct !DILexicalBlock(scope: !946, file: !1, line: 660, column: 9)
!956 = !DILocation(line: 660, column: 14, scope: !955)
!957 = !DILocation(line: 660, column: 19, scope: !958)
!958 = !DILexicalBlockFile(scope: !959, file: !1, discriminator: 1)
!959 = distinct !DILexicalBlock(scope: !955, file: !1, line: 660, column: 9)
!960 = !DILocation(line: 660, column: 22, scope: !958)
!961 = !DILocation(line: 660, column: 20, scope: !958)
!962 = !DILocation(line: 660, column: 9, scope: !958)
!963 = !DILocation(line: 661, column: 46, scope: !959)
!964 = !DILocation(line: 661, column: 31, scope: !959)
!965 = !DILocation(line: 661, column: 43, scope: !959)
!966 = !DILocation(line: 661, column: 25, scope: !959)
!967 = !DILocation(line: 661, column: 13, scope: !959)
!968 = !DILocation(line: 661, column: 28, scope: !959)
!969 = !DILocation(line: 660, column: 29, scope: !970)
!970 = !DILexicalBlockFile(scope: !959, file: !1, discriminator: 2)
!971 = !DILocation(line: 660, column: 9, scope: !970)
!972 = !DILocation(line: 662, column: 16, scope: !973)
!973 = distinct !DILexicalBlock(scope: !946, file: !1, line: 662, column: 9)
!974 = !DILocation(line: 662, column: 15, scope: !973)
!975 = !DILocation(line: 662, column: 14, scope: !973)
!976 = !DILocation(line: 662, column: 22, scope: !977)
!977 = !DILexicalBlockFile(scope: !978, file: !1, discriminator: 1)
!978 = distinct !DILexicalBlock(scope: !973, file: !1, line: 662, column: 9)
!979 = !DILocation(line: 662, column: 25, scope: !977)
!980 = !DILocation(line: 662, column: 23, scope: !977)
!981 = !DILocation(line: 662, column: 9, scope: !977)
!982 = !DILocation(line: 663, column: 46, scope: !978)
!983 = !DILocation(line: 663, column: 47, scope: !978)
!984 = !DILocation(line: 663, column: 31, scope: !978)
!985 = !DILocation(line: 663, column: 43, scope: !978)
!986 = !DILocation(line: 663, column: 25, scope: !978)
!987 = !DILocation(line: 663, column: 13, scope: !978)
!988 = !DILocation(line: 663, column: 28, scope: !978)
!989 = !DILocation(line: 662, column: 37, scope: !990)
!990 = !DILexicalBlockFile(scope: !978, file: !1, discriminator: 2)
!991 = !DILocation(line: 662, column: 9, scope: !990)
!992 = !DILocation(line: 664, column: 5, scope: !946)
!993 = !DILocation(line: 658, column: 32, scope: !994)
!994 = !DILexicalBlockFile(scope: !942, file: !1, discriminator: 2)
!995 = !DILocation(line: 658, column: 5, scope: !994)
!996 = !DILocalVariable(name: ".omp.iv", scope: !997, type: !9, flags: DIFlagArtificial)
!997 = distinct !DILexicalBlock(scope: !845, file: !1, line: 668, column: 13)
!998 = !DILocation(line: 0, scope: !997)
!999 = !DILocalVariable(name: ".omp.lb", scope: !997, type: !9, flags: DIFlagArtificial)
!1000 = !DILocation(line: 669, column: 10, scope: !997)
!1001 = !DILocalVariable(name: ".omp.ub", scope: !997, type: !9, flags: DIFlagArtificial)
!1002 = !DILocalVariable(name: ".omp.stride", scope: !997, type: !9, flags: DIFlagArtificial)
!1003 = !DILocalVariable(name: ".omp.is_last", scope: !997, type: !9, flags: DIFlagArtificial)
!1004 = !DILocalVariable(name: "i", scope: !997, type: !8, flags: DIFlagArtificial)
!1005 = !DILocation(line: 668, column: 13, scope: !845)
!1006 = !DILocation(line: 669, column: 10, scope: !1007)
!1007 = !DILexicalBlockFile(scope: !997, file: !1, discriminator: 1)
!1008 = !DILocation(line: 669, column: 10, scope: !1009)
!1009 = !DILexicalBlockFile(scope: !997, file: !1, discriminator: 2)
!1010 = !DILocation(line: 669, column: 10, scope: !1011)
!1011 = !DILexicalBlockFile(scope: !997, file: !1, discriminator: 3)
!1012 = !DILocation(line: 668, column: 13, scope: !895)
!1013 = !DILocation(line: 669, column: 10, scope: !1014)
!1014 = !DILexicalBlockFile(scope: !997, file: !1, discriminator: 4)
!1015 = !DILocation(line: 0, scope: !1016)
!1016 = !DILexicalBlockFile(scope: !997, file: !1, discriminator: 5)
!1017 = !DILocation(line: 668, column: 13, scope: !899)
!1018 = !DILocation(line: 669, column: 10, scope: !1016)
!1019 = !DILocation(line: 669, column: 27, scope: !1016)
!1020 = !DILocation(line: 671, column: 23, scope: !1021)
!1021 = distinct !DILexicalBlock(scope: !997, file: !1, line: 670, column: 5)
!1022 = !DILocation(line: 671, column: 13, scope: !1021)
!1023 = !DILocation(line: 671, column: 11, scope: !1021)
!1024 = !DILocation(line: 672, column: 48, scope: !1021)
!1025 = !DILocation(line: 672, column: 31, scope: !1021)
!1026 = !DILocation(line: 672, column: 36, scope: !1021)
!1027 = !DILocation(line: 672, column: 33, scope: !1021)
!1028 = !DILocation(line: 672, column: 19, scope: !1021)
!1029 = !DILocation(line: 672, column: 42, scope: !1021)
!1030 = !DILocation(line: 672, column: 9, scope: !1021)
!1031 = !DILocation(line: 672, column: 46, scope: !1021)
!1032 = !DILocation(line: 673, column: 5, scope: !1021)
!1033 = !DILocation(line: 668, column: 13, scope: !1011)
!1034 = !DILocation(line: 669, column: 10, scope: !1035)
!1035 = !DILexicalBlockFile(scope: !997, file: !1, discriminator: 6)
!1036 = !DILocation(line: 0, scope: !1035)
!1037 = !DILocation(line: 668, column: 13, scope: !1014)
!1038 = !DILocation(line: 668, column: 13, scope: !1016)
!1039 = !DILocation(line: 668, column: 13, scope: !1035)
!1040 = !DILocation(line: 668, column: 37, scope: !1035)
!1041 = !DILocation(line: 668, column: 37, scope: !1042)
!1042 = !DILexicalBlockFile(scope: !1035, file: !1, discriminator: 7)
!1043 = !DILocation(line: 676, column: 9, scope: !1044)
!1044 = distinct !DILexicalBlock(scope: !845, file: !1, line: 676, column: 9)
!1045 = !DILocation(line: 676, column: 16, scope: !1044)
!1046 = !DILocation(line: 676, column: 25, scope: !1044)
!1047 = !DILocation(line: 676, column: 14, scope: !1044)
!1048 = !DILocation(line: 676, column: 9, scope: !845)
!1049 = !DILocation(line: 677, column: 15, scope: !1050)
!1050 = distinct !DILexicalBlock(scope: !1051, file: !1, line: 677, column: 9)
!1051 = distinct !DILexicalBlock(scope: !1044, file: !1, line: 676, column: 29)
!1052 = !DILocation(line: 677, column: 14, scope: !1050)
!1053 = !DILocation(line: 677, column: 19, scope: !1054)
!1054 = !DILexicalBlockFile(scope: !1055, file: !1, discriminator: 1)
!1055 = distinct !DILexicalBlock(scope: !1050, file: !1, line: 677, column: 9)
!1056 = !DILocation(line: 677, column: 20, scope: !1054)
!1057 = !DILocation(line: 677, column: 9, scope: !1054)
!1058 = !DILocation(line: 678, column: 20, scope: !1059)
!1059 = distinct !DILexicalBlock(scope: !1055, file: !1, line: 678, column: 13)
!1060 = !DILocation(line: 678, column: 24, scope: !1059)
!1061 = !DILocation(line: 678, column: 19, scope: !1059)
!1062 = !DILocation(line: 678, column: 18, scope: !1059)
!1063 = !DILocation(line: 678, column: 28, scope: !1064)
!1064 = !DILexicalBlockFile(scope: !1065, file: !1, discriminator: 1)
!1065 = distinct !DILexicalBlock(scope: !1059, file: !1, line: 678, column: 13)
!1066 = !DILocation(line: 678, column: 31, scope: !1064)
!1067 = !DILocation(line: 678, column: 29, scope: !1064)
!1068 = !DILocation(line: 678, column: 13, scope: !1064)
!1069 = !DILocation(line: 679, column: 50, scope: !1065)
!1070 = !DILocation(line: 679, column: 35, scope: !1065)
!1071 = !DILocation(line: 679, column: 47, scope: !1065)
!1072 = !DILocation(line: 679, column: 29, scope: !1065)
!1073 = !DILocation(line: 679, column: 17, scope: !1065)
!1074 = !DILocation(line: 679, column: 32, scope: !1065)
!1075 = !DILocation(line: 678, column: 43, scope: !1076)
!1076 = !DILexicalBlockFile(scope: !1065, file: !1, discriminator: 2)
!1077 = !DILocation(line: 678, column: 13, scope: !1076)
!1078 = !DILocation(line: 679, column: 51, scope: !1079)
!1079 = !DILexicalBlockFile(scope: !1059, file: !1, discriminator: 1)
!1080 = !DILocation(line: 677, column: 36, scope: !1081)
!1081 = !DILexicalBlockFile(scope: !1055, file: !1, discriminator: 2)
!1082 = !DILocation(line: 677, column: 9, scope: !1081)
!1083 = !DILocation(line: 680, column: 5, scope: !1051)
!1084 = !DILocalVariable(name: ".omp.iv", scope: !1085, type: !9, flags: DIFlagArtificial)
!1085 = distinct !DILexicalBlock(scope: !845, file: !1, line: 691, column: 13)
!1086 = !DILocation(line: 0, scope: !1085)
!1087 = !DILocalVariable(name: ".omp.lb", scope: !1085, type: !9, flags: DIFlagArtificial)
!1088 = !DILocation(line: 693, column: 10, scope: !1085)
!1089 = !DILocalVariable(name: ".omp.ub", scope: !1085, type: !9, flags: DIFlagArtificial)
!1090 = !DILocalVariable(name: ".omp.stride", scope: !1085, type: !9, flags: DIFlagArtificial)
!1091 = !DILocalVariable(name: ".omp.is_last", scope: !1085, type: !9, flags: DIFlagArtificial)
!1092 = !DILocalVariable(name: "i", scope: !1085, type: !8, flags: DIFlagArtificial)
!1093 = !DILocation(line: 691, column: 13, scope: !845)
!1094 = !DILocation(line: 691, column: 13, scope: !895)
!1095 = !DILocation(line: 693, column: 10, scope: !1096)
!1096 = !DILexicalBlockFile(scope: !1085, file: !1, discriminator: 1)
!1097 = !DILocation(line: 691, column: 13, scope: !899)
!1098 = !DILocation(line: 693, column: 10, scope: !1099)
!1099 = !DILexicalBlockFile(scope: !1085, file: !1, discriminator: 2)
!1100 = distinct !{!1100}
!1101 = !DILocation(line: 0, scope: !1102)
!1102 = !DILexicalBlockFile(scope: !1085, file: !1, discriminator: 7)
!1103 = !DILocation(line: 691, column: 13, scope: !1104)
!1104 = !DILexicalBlockFile(scope: !845, file: !1, discriminator: 3)
!1105 = !DILocation(line: 693, column: 10, scope: !1106)
!1106 = !DILexicalBlockFile(scope: !1085, file: !1, discriminator: 3)
!1107 = !DILocation(line: 693, column: 31, scope: !1106)
!1108 = !DILocation(line: 696, column: 14, scope: !1109)
!1109 = distinct !DILexicalBlock(scope: !1085, file: !1, line: 693, column: 37)
!1110 = !DILocation(line: 696, column: 18, scope: !1109)
!1111 = !DILocation(line: 696, column: 16, scope: !1109)
!1112 = !DILocation(line: 696, column: 12, scope: !1109)
!1113 = !DILocation(line: 697, column: 14, scope: !1109)
!1114 = !DILocation(line: 697, column: 19, scope: !1109)
!1115 = !DILocation(line: 697, column: 17, scope: !1109)
!1116 = !DILocation(line: 697, column: 12, scope: !1109)
!1117 = !DILocation(line: 698, column: 19, scope: !1118)
!1118 = distinct !DILexicalBlock(scope: !1109, file: !1, line: 698, column: 9)
!1119 = !DILocation(line: 698, column: 17, scope: !1118)
!1120 = !DILocation(line: 698, column: 15, scope: !1118)
!1121 = !DILocation(line: 698, column: 23, scope: !1122)
!1122 = !DILexicalBlockFile(scope: !1123, file: !1, discriminator: 1)
!1123 = distinct !DILexicalBlock(scope: !1118, file: !1, line: 698, column: 9)
!1124 = !DILocation(line: 698, column: 27, scope: !1122)
!1125 = !DILocation(line: 698, column: 25, scope: !1122)
!1126 = !DILocation(line: 698, column: 9, scope: !1122)
!1127 = !DILocation(line: 699, column: 26, scope: !1123)
!1128 = !DILocation(line: 699, column: 13, scope: !1123)
!1129 = !DILocation(line: 699, column: 29, scope: !1123)
!1130 = !DILocation(line: 698, column: 32, scope: !1131)
!1131 = !DILexicalBlockFile(scope: !1123, file: !1, discriminator: 2)
!1132 = !DILocation(line: 698, column: 9, scope: !1131)
!1133 = !DILocation(line: 706, column: 14, scope: !1109)
!1134 = !DILocation(line: 706, column: 16, scope: !1109)
!1135 = !DILocation(line: 706, column: 13, scope: !1109)
!1136 = !DILocation(line: 706, column: 34, scope: !1137)
!1137 = !DILexicalBlockFile(scope: !1109, file: !1, discriminator: 1)
!1138 = !DILocation(line: 706, column: 35, scope: !1137)
!1139 = !DILocation(line: 706, column: 22, scope: !1137)
!1140 = !DILocation(line: 706, column: 13, scope: !1137)
!1141 = !DILocation(line: 706, column: 13, scope: !1142)
!1142 = !DILexicalBlockFile(scope: !1109, file: !1, discriminator: 2)
!1143 = !DILocation(line: 706, column: 13, scope: !1144)
!1144 = !DILexicalBlockFile(scope: !1109, file: !1, discriminator: 3)
!1145 = !DILocation(line: 706, column: 11, scope: !1144)
!1146 = !DILocation(line: 707, column: 19, scope: !1147)
!1147 = distinct !DILexicalBlock(scope: !1109, file: !1, line: 707, column: 9)
!1148 = !DILocation(line: 707, column: 17, scope: !1147)
!1149 = !DILocation(line: 707, column: 15, scope: !1147)
!1150 = !DILocation(line: 707, column: 22, scope: !1151)
!1151 = !DILexicalBlockFile(scope: !1152, file: !1, discriminator: 1)
!1152 = distinct !DILexicalBlock(scope: !1147, file: !1, line: 707, column: 9)
!1153 = !DILocation(line: 707, column: 38, scope: !1151)
!1154 = !DILocation(line: 707, column: 26, scope: !1151)
!1155 = !DILocation(line: 707, column: 24, scope: !1151)
!1156 = !DILocation(line: 707, column: 9, scope: !1151)
!1157 = !DILocation(line: 708, column: 40, scope: !1152)
!1158 = !DILocation(line: 708, column: 26, scope: !1152)
!1159 = !DILocation(line: 708, column: 13, scope: !1152)
!1160 = !DILocation(line: 708, column: 43, scope: !1152)
!1161 = !DILocation(line: 707, column: 43, scope: !1162)
!1162 = !DILexicalBlockFile(scope: !1152, file: !1, discriminator: 2)
!1163 = !DILocation(line: 707, column: 9, scope: !1162)
!1164 = !DILocation(line: 714, column: 29, scope: !1109)
!1165 = !DILocation(line: 714, column: 22, scope: !1109)
!1166 = !DILocation(line: 714, column: 9, scope: !1109)
!1167 = !DILocation(line: 714, column: 26, scope: !1109)
!1168 = !DILocation(line: 715, column: 19, scope: !1169)
!1169 = distinct !DILexicalBlock(scope: !1109, file: !1, line: 715, column: 9)
!1170 = !DILocation(line: 715, column: 21, scope: !1169)
!1171 = !DILocation(line: 715, column: 17, scope: !1169)
!1172 = !DILocation(line: 715, column: 15, scope: !1169)
!1173 = !DILocation(line: 715, column: 25, scope: !1174)
!1174 = !DILexicalBlockFile(scope: !1175, file: !1, discriminator: 1)
!1175 = distinct !DILexicalBlock(scope: !1169, file: !1, line: 715, column: 9)
!1176 = !DILocation(line: 715, column: 29, scope: !1174)
!1177 = !DILocation(line: 715, column: 27, scope: !1174)
!1178 = !DILocation(line: 715, column: 9, scope: !1174)
!1179 = !DILocation(line: 716, column: 45, scope: !1175)
!1180 = !DILocation(line: 716, column: 46, scope: !1175)
!1181 = !DILocation(line: 716, column: 32, scope: !1175)
!1182 = !DILocation(line: 716, column: 26, scope: !1175)
!1183 = !DILocation(line: 716, column: 13, scope: !1175)
!1184 = !DILocation(line: 716, column: 29, scope: !1175)
!1185 = !DILocation(line: 715, column: 34, scope: !1186)
!1186 = !DILexicalBlockFile(scope: !1175, file: !1, discriminator: 2)
!1187 = !DILocation(line: 715, column: 9, scope: !1186)
!1188 = !DILocation(line: 718, column: 5, scope: !1109)
!1189 = !DILocation(line: 691, column: 13, scope: !1190)
!1190 = !DILexicalBlockFile(scope: !1085, file: !1, discriminator: 4)
!1191 = !DILocation(line: 693, column: 10, scope: !1190)
!1192 = !DILocation(line: 0, scope: !1193)
!1193 = !DILexicalBlockFile(scope: !1085, file: !1, discriminator: 8)
!1194 = !DILocation(line: 691, column: 13, scope: !1195)
!1195 = !DILexicalBlockFile(scope: !1085, file: !1, discriminator: 5)
!1196 = !DILocation(line: 691, column: 13, scope: !1197)
!1197 = !DILexicalBlockFile(scope: !1085, file: !1, discriminator: 6)
!1198 = !DILocation(line: 691, column: 13, scope: !1102)
!1199 = !DILocation(line: 691, column: 38, scope: !1193)
!1200 = !DILocation(line: 759, column: 3, scope: !829)
!1201 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 895, type: !1202, isLocal: false, isDefinition: true, scopeLine: 896, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!1202 = !DISubroutineType(types: !1203)
!1203 = !{!9, !9, !1204}
!1204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1205, size: 64, align: 64)
!1205 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1206, size: 64, align: 64)
!1206 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!1207 = !DILocalVariable(name: "argc", arg: 1, scope: !1201, file: !1, line: 895, type: !9)
!1208 = !DILocation(line: 895, column: 15, scope: !1201)
!1209 = !DILocalVariable(name: "argv", arg: 2, scope: !1201, file: !1, line: 895, type: !1204)
!1210 = !DILocation(line: 895, column: 28, scope: !1201)
!1211 = !DILocalVariable(name: "i", scope: !1201, file: !1, line: 898, type: !9)
!1212 = !DILocation(line: 898, column: 21, scope: !1201)
!1213 = !DILocalVariable(name: "iteration", scope: !1201, file: !1, line: 898, type: !9)
!1214 = !DILocation(line: 898, column: 24, scope: !1201)
!1215 = !DILocalVariable(name: "timer_on", scope: !1201, file: !1, line: 898, type: !9)
!1216 = !DILocation(line: 898, column: 35, scope: !1201)
!1217 = !DILocalVariable(name: "timecounter", scope: !1201, file: !1, line: 900, type: !10)
!1218 = !DILocation(line: 900, column: 21, scope: !1201)
!1219 = !DILocalVariable(name: "fp", scope: !1201, file: !1, line: 902, type: !1220)
!1220 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1221, size: 64, align: 64)
!1221 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !1222, line: 48, baseType: !1223)
!1222 = !DIFile(filename: "/usr/include/stdio.h", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/IS")
!1223 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !1224, line: 245, size: 1728, align: 64, elements: !1225)
!1224 = !DIFile(filename: "/usr/include/libio.h", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/IS")
!1225 = !{!1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1246, !1247, !1248, !1249, !1252, !1254, !1256, !1260, !1263, !1265, !1266, !1267, !1268, !1269, !1270, !1271}
!1226 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !1223, file: !1224, line: 246, baseType: !9, size: 32, align: 32)
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !1223, file: !1224, line: 251, baseType: !1205, size: 64, align: 64, offset: 64)
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !1223, file: !1224, line: 252, baseType: !1205, size: 64, align: 64, offset: 128)
!1229 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !1223, file: !1224, line: 253, baseType: !1205, size: 64, align: 64, offset: 192)
!1230 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !1223, file: !1224, line: 254, baseType: !1205, size: 64, align: 64, offset: 256)
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !1223, file: !1224, line: 255, baseType: !1205, size: 64, align: 64, offset: 320)
!1232 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !1223, file: !1224, line: 256, baseType: !1205, size: 64, align: 64, offset: 384)
!1233 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !1223, file: !1224, line: 257, baseType: !1205, size: 64, align: 64, offset: 448)
!1234 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !1223, file: !1224, line: 258, baseType: !1205, size: 64, align: 64, offset: 512)
!1235 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !1223, file: !1224, line: 260, baseType: !1205, size: 64, align: 64, offset: 576)
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !1223, file: !1224, line: 261, baseType: !1205, size: 64, align: 64, offset: 640)
!1237 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !1223, file: !1224, line: 262, baseType: !1205, size: 64, align: 64, offset: 704)
!1238 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !1223, file: !1224, line: 264, baseType: !1239, size: 64, align: 64, offset: 768)
!1239 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1240, size: 64, align: 64)
!1240 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !1224, line: 160, size: 192, align: 64, elements: !1241)
!1241 = !{!1242, !1243, !1245}
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "_next", scope: !1240, file: !1224, line: 161, baseType: !1239, size: 64, align: 64)
!1243 = !DIDerivedType(tag: DW_TAG_member, name: "_sbuf", scope: !1240, file: !1224, line: 162, baseType: !1244, size: 64, align: 64, offset: 64)
!1244 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1223, size: 64, align: 64)
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "_pos", scope: !1240, file: !1224, line: 166, baseType: !9, size: 32, align: 32, offset: 128)
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !1223, file: !1224, line: 266, baseType: !1244, size: 64, align: 64, offset: 832)
!1247 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !1223, file: !1224, line: 268, baseType: !9, size: 32, align: 32, offset: 896)
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !1223, file: !1224, line: 272, baseType: !9, size: 32, align: 32, offset: 928)
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !1223, file: !1224, line: 274, baseType: !1250, size: 64, align: 64, offset: 960)
!1250 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !1251, line: 131, baseType: !4)
!1251 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/IS")
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !1223, file: !1224, line: 278, baseType: !1253, size: 16, align: 16, offset: 1024)
!1253 = !DIBasicType(name: "unsigned short", size: 16, align: 16, encoding: DW_ATE_unsigned)
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !1223, file: !1224, line: 279, baseType: !1255, size: 8, align: 8, offset: 1040)
!1255 = !DIBasicType(name: "signed char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !1223, file: !1224, line: 280, baseType: !1257, size: 8, align: 8, offset: 1048)
!1257 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1206, size: 8, align: 8, elements: !1258)
!1258 = !{!1259}
!1259 = !DISubrange(count: 1)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !1223, file: !1224, line: 284, baseType: !1261, size: 64, align: 64, offset: 1088)
!1261 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1262, size: 64, align: 64)
!1262 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !1224, line: 154, baseType: null)
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !1223, file: !1224, line: 293, baseType: !1264, size: 64, align: 64, offset: 1152)
!1264 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !1251, line: 132, baseType: !4)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "__pad1", scope: !1223, file: !1224, line: 302, baseType: !5, size: 64, align: 64, offset: 1216)
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "__pad2", scope: !1223, file: !1224, line: 303, baseType: !5, size: 64, align: 64, offset: 1280)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "__pad3", scope: !1223, file: !1224, line: 304, baseType: !5, size: 64, align: 64, offset: 1344)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "__pad4", scope: !1223, file: !1224, line: 305, baseType: !5, size: 64, align: 64, offset: 1408)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !1223, file: !1224, line: 306, baseType: !443, size: 64, align: 64, offset: 1472)
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !1223, file: !1224, line: 308, baseType: !9, size: 32, align: 32, offset: 1536)
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !1223, file: !1224, line: 310, baseType: !1272, size: 160, align: 8, offset: 1568)
!1272 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1206, size: 160, align: 8, elements: !1273)
!1273 = !{!1274}
!1274 = !DISubrange(count: 20)
!1275 = !DILocation(line: 902, column: 22, scope: !1201)
!1276 = !DILocation(line: 906, column: 14, scope: !1201)
!1277 = !DILocation(line: 907, column: 15, scope: !1278)
!1278 = distinct !DILexicalBlock(scope: !1201, file: !1, line: 907, column: 9)
!1279 = !DILocation(line: 907, column: 13, scope: !1278)
!1280 = !DILocation(line: 907, column: 41, scope: !1278)
!1281 = !DILocation(line: 907, column: 9, scope: !1201)
!1282 = !DILocation(line: 908, column: 16, scope: !1283)
!1283 = distinct !DILexicalBlock(scope: !1278, file: !1, line: 907, column: 50)
!1284 = !DILocation(line: 908, column: 9, scope: !1283)
!1285 = !DILocation(line: 909, column: 18, scope: !1283)
!1286 = !DILocation(line: 910, column: 5, scope: !1283)
!1287 = !DILocation(line: 911, column: 5, scope: !1201)
!1288 = !DILocation(line: 912, column: 9, scope: !1289)
!1289 = distinct !DILexicalBlock(scope: !1201, file: !1, line: 912, column: 9)
!1290 = !DILocation(line: 912, column: 9, scope: !1201)
!1291 = !DILocation(line: 913, column: 9, scope: !1292)
!1292 = distinct !DILexicalBlock(scope: !1289, file: !1, line: 912, column: 19)
!1293 = !DILocation(line: 914, column: 9, scope: !1292)
!1294 = !DILocation(line: 915, column: 9, scope: !1292)
!1295 = !DILocation(line: 916, column: 5, scope: !1292)
!1296 = !DILocation(line: 918, column: 9, scope: !1297)
!1297 = distinct !DILexicalBlock(scope: !1201, file: !1, line: 918, column: 9)
!1298 = !DILocation(line: 918, column: 9, scope: !1201)
!1299 = !DILocation(line: 918, column: 19, scope: !1300)
!1300 = !DILexicalBlockFile(scope: !1297, file: !1, discriminator: 1)
!1301 = !DILocation(line: 922, column: 11, scope: !1302)
!1302 = distinct !DILexicalBlock(scope: !1201, file: !1, line: 922, column: 5)
!1303 = !DILocation(line: 922, column: 10, scope: !1302)
!1304 = !DILocation(line: 922, column: 15, scope: !1305)
!1305 = !DILexicalBlockFile(scope: !1306, file: !1, discriminator: 1)
!1306 = distinct !DILexicalBlock(scope: !1302, file: !1, line: 922, column: 5)
!1307 = !DILocation(line: 922, column: 16, scope: !1305)
!1308 = !DILocation(line: 922, column: 5, scope: !1305)
!1309 = !DILocation(line: 926, column: 58, scope: !1306)
!1310 = !DILocation(line: 926, column: 39, scope: !1306)
!1311 = !DILocation(line: 926, column: 34, scope: !1306)
!1312 = !DILocation(line: 926, column: 17, scope: !1306)
!1313 = !DILocation(line: 926, column: 37, scope: !1306)
!1314 = !DILocation(line: 927, column: 57, scope: !1306)
!1315 = !DILocation(line: 927, column: 39, scope: !1306)
!1316 = !DILocation(line: 927, column: 33, scope: !1306)
!1317 = !DILocation(line: 927, column: 17, scope: !1306)
!1318 = !DILocation(line: 927, column: 37, scope: !1306)
!1319 = !DILocation(line: 922, column: 35, scope: !1320)
!1320 = !DILexicalBlockFile(scope: !1306, file: !1, discriminator: 2)
!1321 = !DILocation(line: 922, column: 5, scope: !1320)
!1322 = !DILocation(line: 954, column: 5, scope: !1201)
!1323 = !DILocation(line: 956, column: 5, scope: !1201)
!1324 = !DILocation(line: 957, column: 5, scope: !1201)
!1325 = !DILocation(line: 959, column: 52, scope: !1201)
!1326 = !DILocation(line: 959, column: 5, scope: !1327)
!1327 = !DILexicalBlockFile(scope: !1201, file: !1, discriminator: 1)
!1328 = !DILocation(line: 961, column: 5, scope: !1201)
!1329 = !DILocation(line: 963, column: 9, scope: !1330)
!1330 = distinct !DILexicalBlock(scope: !1201, file: !1, line: 963, column: 9)
!1331 = !DILocation(line: 963, column: 9, scope: !1201)
!1332 = !DILocation(line: 963, column: 19, scope: !1333)
!1333 = !DILexicalBlockFile(scope: !1330, file: !1, discriminator: 1)
!1334 = !DILocation(line: 966, column: 5, scope: !1201)
!1335 = !DILocation(line: 969, column: 5, scope: !1201)
!1336 = !DILocation(line: 970, column: 9, scope: !1337)
!1337 = distinct !DILexicalBlock(scope: !1201, file: !1, line: 970, column: 9)
!1338 = !DILocation(line: 970, column: 9, scope: !1201)
!1339 = !DILocation(line: 970, column: 19, scope: !1340)
!1340 = !DILexicalBlockFile(scope: !1337, file: !1, discriminator: 1)
!1341 = !DILocation(line: 975, column: 5, scope: !1201)
!1342 = !DILocation(line: 978, column: 25, scope: !1201)
!1343 = !DILocation(line: 983, column: 5, scope: !1201)
!1344 = !DILocation(line: 987, column: 19, scope: !1345)
!1345 = distinct !DILexicalBlock(scope: !1201, file: !1, line: 987, column: 5)
!1346 = !DILocation(line: 987, column: 10, scope: !1345)
!1347 = !DILocation(line: 987, column: 23, scope: !1348)
!1348 = !DILexicalBlockFile(scope: !1349, file: !1, discriminator: 1)
!1349 = distinct !DILexicalBlock(scope: !1345, file: !1, line: 987, column: 5)
!1350 = !DILocation(line: 987, column: 32, scope: !1348)
!1351 = !DILocation(line: 987, column: 5, scope: !1348)
!1352 = !DILocation(line: 990, column: 15, scope: !1353)
!1353 = distinct !DILexicalBlock(scope: !1349, file: !1, line: 988, column: 5)
!1354 = !DILocation(line: 990, column: 9, scope: !1353)
!1355 = !DILocation(line: 991, column: 5, scope: !1353)
!1356 = !DILocation(line: 987, column: 59, scope: !1357)
!1357 = !DILexicalBlockFile(scope: !1349, file: !1, discriminator: 2)
!1358 = !DILocation(line: 987, column: 5, scope: !1357)
!1359 = !DILocation(line: 995, column: 5, scope: !1201)
!1360 = !DILocation(line: 996, column: 19, scope: !1201)
!1361 = !DILocation(line: 996, column: 17, scope: !1201)
!1362 = !DILocation(line: 1001, column: 9, scope: !1363)
!1363 = distinct !DILexicalBlock(scope: !1201, file: !1, line: 1001, column: 9)
!1364 = !DILocation(line: 1001, column: 9, scope: !1201)
!1365 = !DILocation(line: 1001, column: 19, scope: !1366)
!1366 = !DILexicalBlockFile(scope: !1363, file: !1, discriminator: 1)
!1367 = !DILocation(line: 1002, column: 5, scope: !1201)
!1368 = !DILocation(line: 1003, column: 9, scope: !1369)
!1369 = distinct !DILexicalBlock(scope: !1201, file: !1, line: 1003, column: 9)
!1370 = !DILocation(line: 1003, column: 9, scope: !1201)
!1371 = !DILocation(line: 1003, column: 19, scope: !1372)
!1372 = !DILexicalBlockFile(scope: !1369, file: !1, discriminator: 1)
!1373 = !DILocation(line: 1005, column: 9, scope: !1374)
!1374 = distinct !DILexicalBlock(scope: !1201, file: !1, line: 1005, column: 9)
!1375 = !DILocation(line: 1005, column: 9, scope: !1201)
!1376 = !DILocation(line: 1005, column: 19, scope: !1377)
!1377 = !DILexicalBlockFile(scope: !1374, file: !1, discriminator: 1)
!1378 = !DILocation(line: 1009, column: 9, scope: !1379)
!1379 = distinct !DILexicalBlock(scope: !1201, file: !1, line: 1009, column: 9)
!1380 = !DILocation(line: 1009, column: 29, scope: !1379)
!1381 = !DILocation(line: 1009, column: 9, scope: !1201)
!1382 = !DILocation(line: 1010, column: 29, scope: !1379)
!1383 = !DILocation(line: 1010, column: 9, scope: !1379)
!1384 = !DILocation(line: 1017, column: 22, scope: !1201)
!1385 = !DILocation(line: 1019, column: 52, scope: !1201)
!1386 = !DILocation(line: 1019, column: 51, scope: !1201)
!1387 = !DILocation(line: 1019, column: 63, scope: !1201)
!1388 = !DILocation(line: 1021, column: 22, scope: !1201)
!1389 = !DILocation(line: 1011, column: 5, scope: !1201)
!1390 = !DILocation(line: 1033, column: 9, scope: !1391)
!1391 = distinct !DILexicalBlock(scope: !1201, file: !1, line: 1033, column: 9)
!1392 = !DILocation(line: 1033, column: 9, scope: !1201)
!1393 = !DILocalVariable(name: "t_total", scope: !1394, file: !1, line: 1034, type: !10)
!1394 = distinct !DILexicalBlock(scope: !1391, file: !1, line: 1033, column: 19)
!1395 = !DILocation(line: 1034, column: 15, scope: !1394)
!1396 = !DILocalVariable(name: "t_percent", scope: !1394, file: !1, line: 1034, type: !10)
!1397 = !DILocation(line: 1034, column: 24, scope: !1394)
!1398 = !DILocation(line: 1036, column: 18, scope: !1394)
!1399 = !DILocation(line: 1036, column: 16, scope: !1394)
!1400 = !DILocation(line: 1037, column: 8, scope: !1394)
!1401 = !DILocation(line: 1038, column: 44, scope: !1394)
!1402 = !DILocation(line: 1038, column: 8, scope: !1394)
!1403 = !DILocation(line: 1039, column: 12, scope: !1404)
!1404 = distinct !DILexicalBlock(scope: !1394, file: !1, line: 1039, column: 12)
!1405 = !DILocation(line: 1039, column: 20, scope: !1404)
!1406 = !DILocation(line: 1039, column: 12, scope: !1394)
!1407 = !DILocation(line: 1039, column: 36, scope: !1408)
!1408 = !DILexicalBlockFile(scope: !1404, file: !1, discriminator: 1)
!1409 = !DILocation(line: 1039, column: 28, scope: !1408)
!1410 = !DILocation(line: 1040, column: 22, scope: !1394)
!1411 = !DILocation(line: 1040, column: 20, scope: !1394)
!1412 = !DILocation(line: 1041, column: 20, scope: !1394)
!1413 = !DILocation(line: 1041, column: 32, scope: !1394)
!1414 = !DILocation(line: 1041, column: 31, scope: !1394)
!1415 = !DILocation(line: 1041, column: 40, scope: !1394)
!1416 = !DILocation(line: 1041, column: 18, scope: !1394)
!1417 = !DILocation(line: 1042, column: 54, scope: !1394)
!1418 = !DILocation(line: 1042, column: 67, scope: !1394)
!1419 = !DILocation(line: 1042, column: 8, scope: !1394)
!1420 = !DILocation(line: 1043, column: 22, scope: !1394)
!1421 = !DILocation(line: 1043, column: 20, scope: !1394)
!1422 = !DILocation(line: 1044, column: 20, scope: !1394)
!1423 = !DILocation(line: 1044, column: 32, scope: !1394)
!1424 = !DILocation(line: 1044, column: 31, scope: !1394)
!1425 = !DILocation(line: 1044, column: 40, scope: !1394)
!1426 = !DILocation(line: 1044, column: 18, scope: !1394)
!1427 = !DILocation(line: 1045, column: 54, scope: !1394)
!1428 = !DILocation(line: 1045, column: 67, scope: !1394)
!1429 = !DILocation(line: 1045, column: 8, scope: !1394)
!1430 = !DILocation(line: 1046, column: 22, scope: !1394)
!1431 = !DILocation(line: 1046, column: 20, scope: !1394)
!1432 = !DILocation(line: 1047, column: 20, scope: !1394)
!1433 = !DILocation(line: 1047, column: 32, scope: !1394)
!1434 = !DILocation(line: 1047, column: 31, scope: !1394)
!1435 = !DILocation(line: 1047, column: 40, scope: !1394)
!1436 = !DILocation(line: 1047, column: 18, scope: !1394)
!1437 = !DILocation(line: 1048, column: 54, scope: !1394)
!1438 = !DILocation(line: 1048, column: 67, scope: !1394)
!1439 = !DILocation(line: 1048, column: 8, scope: !1394)
!1440 = !DILocation(line: 1049, column: 5, scope: !1394)
!1441 = !DILocation(line: 1051, column: 5, scope: !1201)
!1442 = distinct !DISubprogram(name: "c_print_results", scope: !1443, file: !1443, line: 10, type: !1444, isLocal: false, isDefinition: true, scopeLine: 28, flags: DIFlagPrototyped, isOptimized: false, unit: !52, variables: !2)
!1443 = !DIFile(filename: "c_print_results.c", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common")
!1444 = !DISubroutineType(types: !1445)
!1445 = !{null, !1205, !1206, !9, !9, !9, !9, !10, !10, !1205, !9, !1205, !1205, !1205, !1205, !1205, !1205, !1205, !1205}
!1446 = !DILocalVariable(name: "name", arg: 1, scope: !1442, file: !1443, line: 10, type: !1205)
!1447 = !DILocation(line: 10, column: 31, scope: !1442)
!1448 = !DILocalVariable(name: "class", arg: 2, scope: !1442, file: !1443, line: 11, type: !1206)
!1449 = !DILocation(line: 11, column: 30, scope: !1442)
!1450 = !DILocalVariable(name: "n1", arg: 3, scope: !1442, file: !1443, line: 12, type: !9)
!1451 = !DILocation(line: 12, column: 30, scope: !1442)
!1452 = !DILocalVariable(name: "n2", arg: 4, scope: !1442, file: !1443, line: 13, type: !9)
!1453 = !DILocation(line: 13, column: 30, scope: !1442)
!1454 = !DILocalVariable(name: "n3", arg: 5, scope: !1442, file: !1443, line: 14, type: !9)
!1455 = !DILocation(line: 14, column: 30, scope: !1442)
!1456 = !DILocalVariable(name: "niter", arg: 6, scope: !1442, file: !1443, line: 15, type: !9)
!1457 = !DILocation(line: 15, column: 30, scope: !1442)
!1458 = !DILocalVariable(name: "t", arg: 7, scope: !1442, file: !1443, line: 16, type: !10)
!1459 = !DILocation(line: 16, column: 30, scope: !1442)
!1460 = !DILocalVariable(name: "mops", arg: 8, scope: !1442, file: !1443, line: 17, type: !10)
!1461 = !DILocation(line: 17, column: 30, scope: !1442)
!1462 = !DILocalVariable(name: "optype", arg: 9, scope: !1442, file: !1443, line: 18, type: !1205)
!1463 = !DILocation(line: 18, column: 17, scope: !1442)
!1464 = !DILocalVariable(name: "passed_verification", arg: 10, scope: !1442, file: !1443, line: 19, type: !9)
!1465 = !DILocation(line: 19, column: 30, scope: !1442)
!1466 = !DILocalVariable(name: "npbversion", arg: 11, scope: !1442, file: !1443, line: 20, type: !1205)
!1467 = !DILocation(line: 20, column: 31, scope: !1442)
!1468 = !DILocalVariable(name: "compiletime", arg: 12, scope: !1442, file: !1443, line: 21, type: !1205)
!1469 = !DILocation(line: 21, column: 31, scope: !1442)
!1470 = !DILocalVariable(name: "cc", arg: 13, scope: !1442, file: !1443, line: 22, type: !1205)
!1471 = !DILocation(line: 22, column: 31, scope: !1442)
!1472 = !DILocalVariable(name: "clink", arg: 14, scope: !1442, file: !1443, line: 23, type: !1205)
!1473 = !DILocation(line: 23, column: 31, scope: !1442)
!1474 = !DILocalVariable(name: "c_lib", arg: 15, scope: !1442, file: !1443, line: 24, type: !1205)
!1475 = !DILocation(line: 24, column: 31, scope: !1442)
!1476 = !DILocalVariable(name: "c_inc", arg: 16, scope: !1442, file: !1443, line: 25, type: !1205)
!1477 = !DILocation(line: 25, column: 31, scope: !1442)
!1478 = !DILocalVariable(name: "cflags", arg: 17, scope: !1442, file: !1443, line: 26, type: !1205)
!1479 = !DILocation(line: 26, column: 31, scope: !1442)
!1480 = !DILocalVariable(name: "clinkflags", arg: 18, scope: !1442, file: !1443, line: 27, type: !1205)
!1481 = !DILocation(line: 27, column: 31, scope: !1442)
!1482 = !DILocalVariable(name: "num_threads", scope: !1442, file: !1443, line: 29, type: !9)
!1483 = !DILocation(line: 29, column: 9, scope: !1442)
!1484 = !DILocalVariable(name: "max_threads", scope: !1442, file: !1443, line: 29, type: !9)
!1485 = !DILocation(line: 29, column: 22, scope: !1442)
!1486 = !DILocation(line: 32, column: 17, scope: !1442)
!1487 = !DILocation(line: 33, column: 17, scope: !1442)
!1488 = !DILocation(line: 37, column: 19, scope: !1442)
!1489 = !DILocation(line: 37, column: 17, scope: !1442)
!1490 = !DILocation(line: 38, column: 9, scope: !1442)
!1491 = !DILocation(line: 46, column: 46, scope: !1442)
!1492 = !DILocation(line: 46, column: 5, scope: !1442)
!1493 = !DILocation(line: 48, column: 63, scope: !1442)
!1494 = !DILocation(line: 48, column: 5, scope: !1442)
!1495 = !DILocation(line: 50, column: 9, scope: !1496)
!1496 = distinct !DILexicalBlock(scope: !1442, file: !1443, line: 50, column: 9)
!1497 = !DILocation(line: 50, column: 12, scope: !1496)
!1498 = !DILocation(line: 50, column: 9, scope: !1442)
!1499 = !DILocalVariable(name: "nn", scope: !1500, file: !1443, line: 51, type: !4)
!1500 = distinct !DILexicalBlock(scope: !1496, file: !1443, line: 50, column: 19)
!1501 = !DILocation(line: 51, column: 14, scope: !1500)
!1502 = !DILocation(line: 51, column: 19, scope: !1500)
!1503 = !DILocation(line: 52, column: 14, scope: !1504)
!1504 = distinct !DILexicalBlock(scope: !1500, file: !1443, line: 52, column: 14)
!1505 = !DILocation(line: 52, column: 17, scope: !1504)
!1506 = !DILocation(line: 52, column: 14, scope: !1500)
!1507 = !DILocation(line: 52, column: 30, scope: !1508)
!1508 = !DILexicalBlockFile(scope: !1504, file: !1443, discriminator: 1)
!1509 = !DILocation(line: 52, column: 27, scope: !1508)
!1510 = !DILocation(line: 52, column: 24, scope: !1508)
!1511 = !DILocation(line: 53, column: 59, scope: !1500)
!1512 = !DILocation(line: 53, column: 9, scope: !1500)
!1513 = !DILocation(line: 54, column: 5, scope: !1500)
!1514 = !DILocation(line: 56, column: 65, scope: !1496)
!1515 = !DILocation(line: 56, column: 68, scope: !1496)
!1516 = !DILocation(line: 56, column: 71, scope: !1496)
!1517 = !DILocation(line: 56, column: 9, scope: !1496)
!1518 = !DILocation(line: 58, column: 54, scope: !1442)
!1519 = !DILocation(line: 58, column: 5, scope: !1442)
!1520 = !DILocation(line: 60, column: 56, scope: !1442)
!1521 = !DILocation(line: 60, column: 5, scope: !1442)
!1522 = !DILocation(line: 62, column: 54, scope: !1442)
!1523 = !DILocation(line: 62, column: 5, scope: !1442)
!1524 = !DILocation(line: 64, column: 54, scope: !1442)
!1525 = !DILocation(line: 64, column: 5, scope: !1442)
!1526 = !DILocation(line: 66, column: 9, scope: !1527)
!1527 = distinct !DILexicalBlock(scope: !1442, file: !1443, line: 66, column: 9)
!1528 = !DILocation(line: 66, column: 24, scope: !1527)
!1529 = !DILocation(line: 66, column: 21, scope: !1527)
!1530 = !DILocation(line: 66, column: 9, scope: !1442)
!1531 = !DILocation(line: 67, column: 9, scope: !1527)
!1532 = !DILocation(line: 69, column: 56, scope: !1442)
!1533 = !DILocation(line: 69, column: 5, scope: !1442)
!1534 = !DILocation(line: 72, column: 12, scope: !1442)
!1535 = !DILocation(line: 72, column: 25, scope: !1442)
!1536 = !DILocation(line: 72, column: 17, scope: !1442)
!1537 = !DILocation(line: 72, column: 16, scope: !1442)
!1538 = !DILocation(line: 71, column: 5, scope: !1442)
!1539 = !DILocation(line: 74, column: 42, scope: !1442)
!1540 = !DILocation(line: 74, column: 5, scope: !1442)
!1541 = !DILocation(line: 76, column: 9, scope: !1542)
!1542 = distinct !DILexicalBlock(scope: !1442, file: !1443, line: 76, column: 9)
!1543 = !DILocation(line: 76, column: 29, scope: !1542)
!1544 = !DILocation(line: 76, column: 9, scope: !1442)
!1545 = !DILocation(line: 77, column: 9, scope: !1542)
!1546 = !DILocation(line: 78, column: 14, scope: !1547)
!1547 = distinct !DILexicalBlock(scope: !1542, file: !1443, line: 78, column: 14)
!1548 = !DILocation(line: 78, column: 14, scope: !1542)
!1549 = !DILocation(line: 79, column: 9, scope: !1547)
!1550 = !DILocation(line: 81, column: 9, scope: !1547)
!1551 = !DILocation(line: 83, column: 54, scope: !1442)
!1552 = !DILocation(line: 83, column: 5, scope: !1442)
!1553 = !DILocation(line: 85, column: 54, scope: !1442)
!1554 = !DILocation(line: 85, column: 5, scope: !1442)
!1555 = !DILocation(line: 87, column: 5, scope: !1442)
!1556 = !DILocation(line: 89, column: 40, scope: !1442)
!1557 = !DILocation(line: 89, column: 5, scope: !1442)
!1558 = !DILocation(line: 91, column: 40, scope: !1442)
!1559 = !DILocation(line: 91, column: 5, scope: !1442)
!1560 = !DILocation(line: 93, column: 40, scope: !1442)
!1561 = !DILocation(line: 93, column: 5, scope: !1442)
!1562 = !DILocation(line: 95, column: 40, scope: !1442)
!1563 = !DILocation(line: 95, column: 5, scope: !1442)
!1564 = !DILocation(line: 97, column: 40, scope: !1442)
!1565 = !DILocation(line: 97, column: 5, scope: !1442)
!1566 = !DILocation(line: 99, column: 40, scope: !1442)
!1567 = !DILocation(line: 99, column: 5, scope: !1442)
!1568 = !DILocation(line: 101, column: 5, scope: !1442)
!1569 = !DILocation(line: 102, column: 5, scope: !1442)
!1570 = !DILocation(line: 103, column: 5, scope: !1442)
!1571 = !DILocation(line: 104, column: 5, scope: !1442)
!1572 = !DILocation(line: 105, column: 5, scope: !1442)
!1573 = !DILocation(line: 106, column: 5, scope: !1442)
!1574 = !DILocation(line: 107, column: 1, scope: !1442)
!1575 = distinct !DISubprogram(name: ".omp_outlined.", scope: !53, file: !53, line: 41, type: !1576, isLocal: true, isDefinition: true, scopeLine: 39, flags: DIFlagPrototyped, isOptimized: false, unit: !52, variables: !2)
!1576 = !DISubroutineType(types: !1577)
!1577 = !{null, !348, !348, !832}
!1578 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !1575, type: !348, flags: DIFlagArtificial | DIFlagObjectPointer)
!1579 = !DILocation(line: 0, scope: !1575)
!1580 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !1575, type: !348, flags: DIFlagArtificial)
!1581 = !DILocalVariable(name: "num_threads", arg: 3, scope: !1575, type: !832, flags: DIFlagArtificial)
!1582 = !DILocation(line: 39, column: 1, scope: !1583)
!1583 = !DILexicalBlockFile(scope: !1575, file: !1443, discriminator: 0)
!1584 = !DILocation(line: 40, column: 13, scope: !1585)
!1585 = distinct !DILexicalBlock(scope: !1583, file: !1443, line: 39, column: 1)
!1586 = !DILocation(line: 41, column: 19, scope: !1587)
!1587 = distinct !DILexicalBlock(scope: !1585, file: !1443, line: 40, column: 13)
!1588 = !DILocation(line: 41, column: 17, scope: !1587)
!1589 = !DILocation(line: 41, column: 5, scope: !1590)
!1590 = !DILexicalBlockFile(scope: !1587, file: !1443, discriminator: 1)
!1591 = !DILocation(line: 41, column: 5, scope: !1587)
!1592 = !DILocation(line: 42, column: 1, scope: !1583)
!1593 = distinct !DISubprogram(name: "timer_clear", scope: !59, file: !59, line: 37, type: !703, isLocal: false, isDefinition: true, scopeLine: 38, flags: DIFlagPrototyped, isOptimized: false, unit: !55, variables: !2)
!1594 = !DILocalVariable(name: "n", arg: 1, scope: !1593, file: !59, line: 37, type: !9)
!1595 = !DILocation(line: 37, column: 23, scope: !1593)
!1596 = !DILocation(line: 39, column: 13, scope: !1593)
!1597 = !DILocation(line: 39, column: 5, scope: !1593)
!1598 = !DILocation(line: 39, column: 16, scope: !1593)
!1599 = !DILocation(line: 40, column: 11, scope: !1593)
!1600 = !DILocation(line: 40, column: 5, scope: !1593)
!1601 = !DILocation(line: 40, column: 14, scope: !1593)
!1602 = !DILocation(line: 41, column: 1, scope: !1593)
!1603 = distinct !DISubprogram(name: "timer_start", scope: !59, file: !59, line: 47, type: !703, isLocal: false, isDefinition: true, scopeLine: 48, flags: DIFlagPrototyped, isOptimized: false, unit: !55, variables: !2)
!1604 = !DILocalVariable(name: "n", arg: 1, scope: !1603, file: !59, line: 47, type: !9)
!1605 = !DILocation(line: 47, column: 23, scope: !1603)
!1606 = !DILocation(line: 49, column: 16, scope: !1603)
!1607 = !DILocation(line: 49, column: 11, scope: !1603)
!1608 = !DILocation(line: 49, column: 5, scope: !1603)
!1609 = !DILocation(line: 49, column: 5, scope: !1610)
!1610 = !DILexicalBlockFile(scope: !1603, file: !59, discriminator: 1)
!1611 = !DILocation(line: 49, column: 14, scope: !1603)
!1612 = !DILocation(line: 50, column: 1, scope: !1603)
!1613 = distinct !DISubprogram(name: "elapsed_time", scope: !59, file: !59, line: 14, type: !1614, isLocal: true, isDefinition: true, scopeLine: 15, flags: DIFlagPrototyped, isOptimized: false, unit: !55, variables: !2)
!1614 = !DISubroutineType(types: !54)
!1615 = !DILocalVariable(name: "t", scope: !1613, file: !59, line: 16, type: !10)
!1616 = !DILocation(line: 16, column: 12, scope: !1613)
!1617 = !DILocation(line: 20, column: 9, scope: !1613)
!1618 = !DILocation(line: 20, column: 7, scope: !1613)
!1619 = !DILocation(line: 24, column: 13, scope: !1613)
!1620 = !DILocation(line: 24, column: 5, scope: !1613)
!1621 = distinct !DISubprogram(name: "timer_stop", scope: !59, file: !59, line: 56, type: !703, isLocal: false, isDefinition: true, scopeLine: 57, flags: DIFlagPrototyped, isOptimized: false, unit: !55, variables: !2)
!1622 = !DILocalVariable(name: "n", arg: 1, scope: !1621, file: !59, line: 56, type: !9)
!1623 = !DILocation(line: 56, column: 22, scope: !1621)
!1624 = !DILocalVariable(name: "t", scope: !1621, file: !59, line: 58, type: !10)
!1625 = !DILocation(line: 58, column: 12, scope: !1621)
!1626 = !DILocalVariable(name: "now", scope: !1621, file: !59, line: 58, type: !10)
!1627 = !DILocation(line: 58, column: 15, scope: !1621)
!1628 = !DILocation(line: 60, column: 11, scope: !1621)
!1629 = !DILocation(line: 60, column: 9, scope: !1621)
!1630 = !DILocation(line: 61, column: 9, scope: !1621)
!1631 = !DILocation(line: 61, column: 21, scope: !1621)
!1632 = !DILocation(line: 61, column: 15, scope: !1621)
!1633 = !DILocation(line: 61, column: 13, scope: !1621)
!1634 = !DILocation(line: 61, column: 7, scope: !1621)
!1635 = !DILocation(line: 62, column: 19, scope: !1621)
!1636 = !DILocation(line: 62, column: 13, scope: !1621)
!1637 = !DILocation(line: 62, column: 5, scope: !1621)
!1638 = !DILocation(line: 62, column: 16, scope: !1621)
!1639 = !DILocation(line: 63, column: 11, scope: !1621)
!1640 = !DILocation(line: 63, column: 5, scope: !1621)
!1641 = !DILocation(line: 63, column: 13, scope: !1621)
!1642 = !DILocation(line: 65, column: 1, scope: !1621)
!1643 = distinct !DISubprogram(name: "timer_read", scope: !59, file: !59, line: 71, type: !1644, isLocal: false, isDefinition: true, scopeLine: 72, flags: DIFlagPrototyped, isOptimized: false, unit: !55, variables: !2)
!1644 = !DISubroutineType(types: !1645)
!1645 = !{!10, !9}
!1646 = !DILocalVariable(name: "n", arg: 1, scope: !1643, file: !59, line: 71, type: !9)
!1647 = !DILocation(line: 71, column: 24, scope: !1643)
!1648 = !DILocation(line: 73, column: 21, scope: !1643)
!1649 = !DILocation(line: 73, column: 13, scope: !1643)
!1650 = !DILocation(line: 73, column: 5, scope: !1643)
!1651 = distinct !DISubprogram(name: "timer_count", scope: !59, file: !59, line: 76, type: !1652, isLocal: false, isDefinition: true, scopeLine: 77, flags: DIFlagPrototyped, isOptimized: false, unit: !55, variables: !2)
!1652 = !DISubroutineType(types: !1653)
!1653 = !{!66, !9}
!1654 = !DILocalVariable(name: "n", arg: 1, scope: !1651, file: !59, line: 76, type: !9)
!1655 = !DILocation(line: 76, column: 27, scope: !1651)
!1656 = !DILocation(line: 78, column: 18, scope: !1651)
!1657 = !DILocation(line: 78, column: 12, scope: !1651)
!1658 = !DILocation(line: 78, column: 5, scope: !1651)
!1659 = !DILocalVariable(name: "t", arg: 1, scope: !71, file: !68, line: 7, type: !74)
!1660 = !DILocation(line: 7, column: 20, scope: !71)
!1661 = !DILocalVariable(name: "tv", scope: !71, file: !68, line: 11, type: !1662)
!1662 = !DICompositeType(tag: DW_TAG_structure_type, name: "timeval", file: !1663, line: 30, size: 128, align: 64, elements: !1664)
!1663 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/time.h", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common")
!1664 = !{!1665, !1668}
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !1662, file: !1663, line: 32, baseType: !1666, size: 64, align: 64)
!1666 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !1667, line: 139, baseType: !4)
!1667 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common")
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !1662, file: !1663, line: 33, baseType: !1669, size: 64, align: 64, offset: 64)
!1669 = !DIDerivedType(tag: DW_TAG_typedef, name: "__suseconds_t", file: !1667, line: 141, baseType: !4)
!1670 = !DILocation(line: 11, column: 19, scope: !71)
!1671 = !DILocation(line: 12, column: 4, scope: !71)
!1672 = !DILocation(line: 13, column: 8, scope: !1673)
!1673 = distinct !DILexicalBlock(scope: !71, file: !68, line: 13, column: 8)
!1674 = !DILocation(line: 13, column: 12, scope: !1673)
!1675 = !DILocation(line: 13, column: 8, scope: !71)
!1676 = !DILocation(line: 13, column: 26, scope: !1677)
!1677 = !DILexicalBlockFile(scope: !1673, file: !68, discriminator: 1)
!1678 = !DILocation(line: 13, column: 23, scope: !1677)
!1679 = !DILocation(line: 13, column: 21, scope: !1677)
!1680 = !DILocation(line: 13, column: 17, scope: !1677)
!1681 = !DILocation(line: 14, column: 13, scope: !71)
!1682 = !DILocation(line: 14, column: 22, scope: !71)
!1683 = !DILocation(line: 14, column: 20, scope: !71)
!1684 = !DILocation(line: 14, column: 9, scope: !71)
!1685 = !DILocation(line: 14, column: 39, scope: !71)
!1686 = !DILocation(line: 14, column: 36, scope: !71)
!1687 = !DILocation(line: 14, column: 35, scope: !71)
!1688 = !DILocation(line: 14, column: 27, scope: !71)
!1689 = !DILocation(line: 14, column: 5, scope: !71)
!1690 = !DILocation(line: 14, column: 7, scope: !71)
!1691 = !DILocation(line: 15, column: 1, scope: !71)
