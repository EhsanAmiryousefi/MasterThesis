; ModuleID = '<stdin>'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.dcomplex = type { double, double }
%ident_t = type { i32, i32, i32, i32, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.timeval = type { i64, i64 }
%struct.timezone = type { i32, i32 }

@u0 = common global [266240 x %struct.dcomplex] zeroinitializer, align 16
@u1 = common global [266240 x %struct.dcomplex] zeroinitializer, align 16
@twiddle = common global [266240 x double] zeroinitializer, align 16
@pad1 = common global [3 x %struct.dcomplex] zeroinitializer, align 16
@pad2 = common global [3 x %struct.dcomplex] zeroinitializer, align 16
@.gomp_critical_user_.var = common global [8 x i32] zeroinitializer
@debug = internal global i32 0, align 4
@.str.10 = private unnamed_addr constant [11 x i8] c"timer.flag\00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@timers_enabled = internal global i32 0, align 4
@niter = internal global i32 0, align 4
@.str.12 = private unnamed_addr constant [59 x i8] c"\0A\0A NAS Parallel Benchmarks (NPB3.3-OMP-C) - FT Benchmark\0A\0A\00", align 1
@.str.13 = private unnamed_addr constant [36 x i8] c" Size                : %4dx%4dx%4d\0A\00", align 1
@.str.14 = private unnamed_addr constant [35 x i8] c" Iterations                  :%7d\0A\00", align 1
@.str.15 = private unnamed_addr constant [35 x i8] c" Number of available threads :%7d\0A\00", align 1
@.str.16 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@dims = internal global [3 x i32] zeroinitializer, align 4
@fftblock = internal global i32 0, align 4
@fftblockpad = internal global i32 0, align 4
@0 = private unnamed_addr constant %ident_t { i32 0, i32 2, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i32 0, i32 0) }, align 8
@.str.7 = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@1 = private unnamed_addr constant [23 x i8] c";ft.c;init_ui;199;11;;\00"
@2 = private unnamed_addr constant [32 x i8] c";ft.c;compute_indexmap;376;11;;\00"
@3 = private unnamed_addr constant [42 x i8] c";ft.c;compute_initial_conditions;263;11;;\00"
@u = internal global [65 x %struct.dcomplex] zeroinitializer, align 16
@4 = private unnamed_addr constant [22 x i8] c";ft.c;cffts1;447;11;;\00"
@ty1 = internal thread_local global [64 x [33 x %struct.dcomplex]] zeroinitializer, align 16
@ty2 = internal thread_local global [64 x [33 x %struct.dcomplex]] zeroinitializer, align 16
@.str.28 = private unnamed_addr constant [99 x i8] c"CFFTZ: Either U has not been initialized, or else\0Aone of the input parameters is invalid%5d%5d%5d\0A\00", align 1
@5 = private unnamed_addr constant [22 x i8] c";ft.c;cffts2;480;11;;\00"
@6 = private unnamed_addr constant [22 x i8] c";ft.c;cffts3;513;11;;\00"
@7 = private unnamed_addr constant [22 x i8] c";ft.c;evolve;223;11;;\00"
@8 = private unnamed_addr constant [24 x i8] c";ft.c;checksum;676;11;;\00"
@9 = private unnamed_addr constant [24 x i8] c";ft.c;checksum;680;13;;\00"
@10 = private unnamed_addr constant [24 x i8] c";ft.c;checksum;688;13;;\00"
@.str.32 = private unnamed_addr constant [38 x i8] c" T =%5d     Checksum =%22.12E%22.12E\0A\00", align 1
@sums = internal global [7 x %struct.dcomplex] zeroinitializer, align 16
@.str.33 = private unnamed_addr constant [33 x i8] c" Result verification successful\0A\00", align 1
@.str.34 = private unnamed_addr constant [29 x i8] c" Result verification failed\0A\00", align 1
@.str.35 = private unnamed_addr constant [13 x i8] c" class = %c\0A\00", align 1
@.str = private unnamed_addr constant [3 x i8] c"FT\00", align 1
@.str.1 = private unnamed_addr constant [25 x i8] c"          floating point\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"3.3.1\00", align 1
@.str.3 = private unnamed_addr constant [12 x i8] c"03 May 2017\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"(none)\00", align 1
@.str.5 = private unnamed_addr constant [47 x i8] c"-I ../common -I /media/norouzi/90cafd61-f91...\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"randdp\00", align 1
@.str.18 = private unnamed_addr constant [17 x i8] c"          total \00", align 1
@.str.19 = private unnamed_addr constant [17 x i8] c"          setup \00", align 1
@.str.20 = private unnamed_addr constant [17 x i8] c"            fft \00", align 1
@.str.21 = private unnamed_addr constant [17 x i8] c"         evolve \00", align 1
@.str.22 = private unnamed_addr constant [17 x i8] c"       checksum \00", align 1
@.str.23 = private unnamed_addr constant [17 x i8] c"           fftx \00", align 1
@.str.24 = private unnamed_addr constant [17 x i8] c"           ffty \00", align 1
@.str.25 = private unnamed_addr constant [17 x i8] c"           fftz \00", align 1
@.str.26 = private unnamed_addr constant [35 x i8] c" timer %2d(%16s) :%9.4f (%6.2f%%)\0A\00", align 1
@11 = private unnamed_addr constant %ident_t { i32 0, i32 2, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i32 0, i32 0) }, align 8
@.str.8 = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@12 = private unnamed_addr constant [38 x i8] c";print_results.c;print_results;25;9;;\00"
@13 = private unnamed_addr constant [39 x i8] c";print_results.c;print_results;27;13;;\00"
@.str.1.11 = private unnamed_addr constant [28 x i8] c"\0A\0A %s Benchmark Completed.\0A\00", align 1
@.str.2.12 = private unnamed_addr constant [37 x i8] c" Class           =             %12c\0A\00", align 1
@.str.3.13 = private unnamed_addr constant [8 x i8] c"%15.0lf\00", align 1
@.str.4.14 = private unnamed_addr constant [34 x i8] c" Size            =          %15s\0A\00", align 1
@.str.5.15 = private unnamed_addr constant [37 x i8] c" Size            =             %12d\0A\00", align 1
@.str.6.16 = private unnamed_addr constant [42 x i8] c" Size            =           %4dx%4dx%4d\0A\00", align 1
@.str.7.17 = private unnamed_addr constant [37 x i8] c" Iterations      =             %12d\0A\00", align 1
@.str.8.18 = private unnamed_addr constant [40 x i8] c" Time in seconds =             %12.2lf\0A\00", align 1
@.str.9 = private unnamed_addr constant [37 x i8] c" Total threads   =             %12d\0A\00", align 1
@.str.10.19 = private unnamed_addr constant [37 x i8] c" Avail threads   =             %12d\0A\00", align 1
@.str.11.20 = private unnamed_addr constant [54 x i8] c" Warning: Threads used differ from threads available\0A\00", align 1
@.str.12.21 = private unnamed_addr constant [37 x i8] c" Mop/s total     =          %15.2lf\0A\00", align 1
@.str.13.22 = private unnamed_addr constant [37 x i8] c" Mop/s/thread    =          %15.2lf\0A\00", align 1
@.str.14.23 = private unnamed_addr constant [25 x i8] c" Operation type  = %24s\0A\00", align 1
@.str.15.24 = private unnamed_addr constant [37 x i8] c" Verification    =             %12s\0A\00", align 1
@.str.16.25 = private unnamed_addr constant [11 x i8] c"SUCCESSFUL\00", align 1
@.str.17 = private unnamed_addr constant [13 x i8] c"UNSUCCESSFUL\00", align 1
@.str.18.26 = private unnamed_addr constant [37 x i8] c" Version         =             %12s\0A\00", align 1
@.str.19.27 = private unnamed_addr constant [37 x i8] c" Compile date    =             %12s\0A\00", align 1
@.str.20.28 = private unnamed_addr constant [42 x i8] c"\0A Compile options:\0A    CC           = %s\0A\00", align 1
@.str.21.29 = private unnamed_addr constant [23 x i8] c"    CLINK        = %s\0A\00", align 1
@.str.22.30 = private unnamed_addr constant [23 x i8] c"    C_LIB        = %s\0A\00", align 1
@.str.23.31 = private unnamed_addr constant [23 x i8] c"    C_INC        = %s\0A\00", align 1
@.str.24.32 = private unnamed_addr constant [23 x i8] c"    CFLAGS       = %s\0A\00", align 1
@.str.25.33 = private unnamed_addr constant [23 x i8] c"    CLINKFLAGS   = %s\0A\00", align 1
@.str.26.34 = private unnamed_addr constant [23 x i8] c"    RAND         = %s\0A\00", align 1
@.str.27 = private unnamed_addr constant [195 x i8] c"\0A--------------------------------------\0A Please send all errors/feedbacks to:\0A Center for Manycore Programming\0A cmp@aces.snu.ac.kr\0A http://aces.snu.ac.kr\0A--------------------------------------\0A\0A\00", align 1
@elapsed = internal thread_local global [64 x double] zeroinitializer, align 16
@count = internal thread_local global [64 x i32] zeroinitializer, align 16
@start = internal thread_local global [64 x double] zeroinitializer, align 16
@wtime_.sec = internal global i32 -1, align 4
@.str.29 = private unnamed_addr constant [10 x i8] c"argc.addr\00"
@.str.30 = private unnamed_addr constant [10 x i8] c"argv.addr\00"
@.str.31 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.36 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.37 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.38 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.39 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.40 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.41 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.42 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.43 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.44 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.45 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.46 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.47 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.48 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.49 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.50 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.51 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.52 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.53 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.54 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.55 = private unnamed_addr constant [15 x i8] c"timers_enabled\00"
@.str.56 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.57 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.58 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.59 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.60 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.61 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.62 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.63 = private unnamed_addr constant [15 x i8] c"timers_enabled\00"
@.str.64 = private unnamed_addr constant [15 x i8] c"timers_enabled\00"
@.str.65 = private unnamed_addr constant [15 x i8] c"timers_enabled\00"
@.str.66 = private unnamed_addr constant [5 x i8] c"iter\00"
@.str.67 = private unnamed_addr constant [5 x i8] c"iter\00"
@.str.68 = private unnamed_addr constant [6 x i8] c"niter\00"
@.str.69 = private unnamed_addr constant [15 x i8] c"timers_enabled\00"
@.str.70 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.71 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.72 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.73 = private unnamed_addr constant [15 x i8] c"timers_enabled\00"
@.str.74 = private unnamed_addr constant [15 x i8] c"timers_enabled\00"
@.str.75 = private unnamed_addr constant [15 x i8] c"timers_enabled\00"
@.str.76 = private unnamed_addr constant [15 x i8] c"timers_enabled\00"
@.str.77 = private unnamed_addr constant [5 x i8] c"iter\00"
@.str.78 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.79 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.80 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.81 = private unnamed_addr constant [15 x i8] c"timers_enabled\00"
@.str.82 = private unnamed_addr constant [5 x i8] c"iter\00"
@.str.83 = private unnamed_addr constant [5 x i8] c"iter\00"
@.str.84 = private unnamed_addr constant [6 x i8] c"niter\00"
@.str.85 = private unnamed_addr constant [11 x i8] c"total_time\00"
@.str.86 = private unnamed_addr constant [11 x i8] c"total_time\00"
@.str.87 = private unnamed_addr constant [6 x i8] c"niter\00"
@.str.88 = private unnamed_addr constant [11 x i8] c"total_time\00"
@.str.89 = private unnamed_addr constant [7 x i8] c"mflops\00"
@.str.90 = private unnamed_addr constant [7 x i8] c"mflops\00"
@.str.91 = private unnamed_addr constant [6 x i8] c"Class\00"
@.str.92 = private unnamed_addr constant [6 x i8] c"niter\00"
@.str.93 = private unnamed_addr constant [11 x i8] c"total_time\00"
@.str.94 = private unnamed_addr constant [7 x i8] c"mflops\00"
@.str.95 = private unnamed_addr constant [9 x i8] c"verified\00"
@.str.96 = private unnamed_addr constant [15 x i8] c"timers_enabled\00"
@.str.97 = private unnamed_addr constant [6 x i8] c"debug\00"
@.str.98 = private unnamed_addr constant [3 x i8] c"fp\00"
@.str.99 = private unnamed_addr constant [15 x i8] c"timers_enabled\00"
@.str.100 = private unnamed_addr constant [3 x i8] c"fp\00"
@.str.101 = private unnamed_addr constant [15 x i8] c"timers_enabled\00"
@.str.102 = private unnamed_addr constant [6 x i8] c"niter\00"
@.str.103 = private unnamed_addr constant [6 x i8] c"niter\00"
@.str.104 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.105 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.106 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.107 = private unnamed_addr constant [9 x i8] c"fftblock\00"
@.str.108 = private unnamed_addr constant [12 x i8] c"fftblockpad\00"
@.str.109 = private unnamed_addr constant [9 x i8] c"fftblock\00"
@.str.110 = private unnamed_addr constant [9 x i8] c"fftblock\00"
@.str.111 = private unnamed_addr constant [12 x i8] c"fftblockpad\00"
@.str.112 = private unnamed_addr constant [9 x i8] c"ou0.addr\00"
@.str.113 = private unnamed_addr constant [9 x i8] c"ou1.addr\00"
@.str.114 = private unnamed_addr constant [8 x i8] c"ot.addr\00"
@.str.115 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.116 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.117 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.118 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.119 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.120 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.121 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.122 = private unnamed_addr constant [9 x i8] c"ou0.addr\00"
@.str.123 = private unnamed_addr constant [3 x i8] c"u0\00"
@.str.124 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.125 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.126 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.127 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.128 = private unnamed_addr constant [9 x i8] c"ou1.addr\00"
@.str.129 = private unnamed_addr constant [3 x i8] c"u1\00"
@.str.130 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.131 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.132 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.133 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.134 = private unnamed_addr constant [8 x i8] c"ot.addr\00"
@.str.135 = private unnamed_addr constant [8 x i8] c"twiddle\00"
@.str.136 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.137 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.138 = private unnamed_addr constant [122 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT/ft.c: init_ui :: line No: 191\00"
@.str.139 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.140 = private unnamed_addr constant [129 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT/ft.c: .omp_outlined. :: line No: 200\00"
@.str.141 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.142 = private unnamed_addr constant [17 x i8] c".bound_tid..addr\00"
@.str.143 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.144 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.145 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.146 = private unnamed_addr constant [9 x i8] c"vla.addr\00"
@.str.147 = private unnamed_addr constant [10 x i8] c"vla.addr2\00"
@.str.148 = private unnamed_addr constant [8 x i8] c"u0.addr\00"
@.str.149 = private unnamed_addr constant [10 x i8] c"vla.addr4\00"
@.str.150 = private unnamed_addr constant [10 x i8] c"vla.addr6\00"
@.str.151 = private unnamed_addr constant [8 x i8] c"u1.addr\00"
@.str.152 = private unnamed_addr constant [10 x i8] c"vla.addr8\00"
@.str.153 = private unnamed_addr constant [11 x i8] c"vla.addr10\00"
@.str.154 = private unnamed_addr constant [13 x i8] c"twiddle.addr\00"
@.str.155 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.156 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.157 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.158 = private unnamed_addr constant [9 x i8] c"vla.addr\00"
@.str.159 = private unnamed_addr constant [10 x i8] c"vla.addr2\00"
@.str.160 = private unnamed_addr constant [8 x i8] c"u0.addr\00"
@.str.161 = private unnamed_addr constant [10 x i8] c"vla.addr4\00"
@.str.162 = private unnamed_addr constant [10 x i8] c"vla.addr6\00"
@.str.163 = private unnamed_addr constant [8 x i8] c"u1.addr\00"
@.str.164 = private unnamed_addr constant [10 x i8] c"vla.addr8\00"
@.str.165 = private unnamed_addr constant [11 x i8] c"vla.addr10\00"
@.str.166 = private unnamed_addr constant [13 x i8] c"twiddle.addr\00"
@.str.167 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.168 = private unnamed_addr constant [20 x i8] c".omp.last.iteration\00"
@.str.169 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.170 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.171 = private unnamed_addr constant [8 x i8] c".omp.lb\00"
@.str.172 = private unnamed_addr constant [20 x i8] c".omp.last.iteration\00"
@.str.173 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.174 = private unnamed_addr constant [12 x i8] c".omp.stride\00"
@.str.175 = private unnamed_addr constant [13 x i8] c".omp.is_last\00"
@.str.176 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.177 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.178 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.179 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.180 = private unnamed_addr constant [129 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT/ft.c: .omp_outlined. :: line No: 200\00"
@.str.181 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.182 = private unnamed_addr constant [20 x i8] c".omp.last.iteration\00"
@.str.183 = private unnamed_addr constant [20 x i8] c".omp.last.iteration\00"
@.str.184 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.185 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.186 = private unnamed_addr constant [8 x i8] c".omp.lb\00"
@.str.187 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.188 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.189 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.190 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.191 = private unnamed_addr constant [4 x i8] c"k13\00"
@.str.192 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.193 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.194 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.195 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.196 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.197 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.198 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.199 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.200 = private unnamed_addr constant [4 x i8] c"k13\00"
@.str.201 = private unnamed_addr constant [8 x i8] c"u0.addr\00"
@.str.202 = private unnamed_addr constant [17 x i8] c".compoundliteral\00"
@.str.203 = private unnamed_addr constant [17 x i8] c".compoundliteral\00"
@.str.204 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.205 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.206 = private unnamed_addr constant [4 x i8] c"k13\00"
@.str.207 = private unnamed_addr constant [8 x i8] c"u1.addr\00"
@.str.208 = private unnamed_addr constant [19 x i8] c".compoundliteral32\00"
@.str.209 = private unnamed_addr constant [19 x i8] c".compoundliteral32\00"
@.str.210 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.211 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.212 = private unnamed_addr constant [4 x i8] c"k13\00"
@.str.213 = private unnamed_addr constant [13 x i8] c"twiddle.addr\00"
@.str.214 = private unnamed_addr constant [13 x i8] c"twiddle.addr\00"
@.str.215 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.216 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.217 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.218 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.219 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.220 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.221 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.222 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.223 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.224 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.225 = private unnamed_addr constant [129 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT/ft.c: .omp_outlined. :: line No: 200\00"
@.str.226 = private unnamed_addr constant [8 x i8] c"ot.addr\00"
@.str.227 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.228 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.229 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.230 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.231 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.232 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.233 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.234 = private unnamed_addr constant [8 x i8] c"ot.addr\00"
@.str.235 = private unnamed_addr constant [8 x i8] c"twiddle\00"
@.str.236 = private unnamed_addr constant [3 x i8] c"ap\00"
@.str.237 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.238 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.239 = private unnamed_addr constant [131 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT/ft.c: compute_indexmap :: line No: 358\00"
@.str.240 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.241 = private unnamed_addr constant [132 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT/ft.c: .omp_outlined..17 :: line No: 377\00"
@.str.242 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.243 = private unnamed_addr constant [17 x i8] c".bound_tid..addr\00"
@.str.244 = private unnamed_addr constant [9 x i8] c"vla.addr\00"
@.str.245 = private unnamed_addr constant [10 x i8] c"vla.addr2\00"
@.str.246 = private unnamed_addr constant [13 x i8] c"twiddle.addr\00"
@.str.247 = private unnamed_addr constant [8 x i8] c"ap.addr\00"
@.str.248 = private unnamed_addr constant [9 x i8] c"vla.addr\00"
@.str.249 = private unnamed_addr constant [10 x i8] c"vla.addr2\00"
@.str.250 = private unnamed_addr constant [13 x i8] c"twiddle.addr\00"
@.str.251 = private unnamed_addr constant [8 x i8] c"ap.addr\00"
@.str.252 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.253 = private unnamed_addr constant [20 x i8] c".omp.last.iteration\00"
@.str.254 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.255 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.256 = private unnamed_addr constant [8 x i8] c".omp.lb\00"
@.str.257 = private unnamed_addr constant [20 x i8] c".omp.last.iteration\00"
@.str.258 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.259 = private unnamed_addr constant [12 x i8] c".omp.stride\00"
@.str.260 = private unnamed_addr constant [13 x i8] c".omp.is_last\00"
@.str.261 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.262 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.263 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.264 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.265 = private unnamed_addr constant [132 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT/ft.c: .omp_outlined..17 :: line No: 377\00"
@.str.266 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.267 = private unnamed_addr constant [20 x i8] c".omp.last.iteration\00"
@.str.268 = private unnamed_addr constant [20 x i8] c".omp.last.iteration\00"
@.str.269 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.270 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.271 = private unnamed_addr constant [8 x i8] c".omp.lb\00"
@.str.272 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.273 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.274 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.275 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.276 = private unnamed_addr constant [3 x i8] c"k5\00"
@.str.277 = private unnamed_addr constant [3 x i8] c"k5\00"
@.str.278 = private unnamed_addr constant [3 x i8] c"kk\00"
@.str.279 = private unnamed_addr constant [3 x i8] c"kk\00"
@.str.280 = private unnamed_addr constant [3 x i8] c"kk\00"
@.str.281 = private unnamed_addr constant [4 x i8] c"kk2\00"
@.str.282 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.283 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.284 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.285 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.286 = private unnamed_addr constant [3 x i8] c"jj\00"
@.str.287 = private unnamed_addr constant [3 x i8] c"jj\00"
@.str.288 = private unnamed_addr constant [3 x i8] c"jj\00"
@.str.289 = private unnamed_addr constant [4 x i8] c"kk2\00"
@.str.290 = private unnamed_addr constant [4 x i8] c"kj2\00"
@.str.291 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.292 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.293 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.294 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.295 = private unnamed_addr constant [3 x i8] c"ii\00"
@.str.296 = private unnamed_addr constant [8 x i8] c"ap.addr\00"
@.str.297 = private unnamed_addr constant [3 x i8] c"ii\00"
@.str.298 = private unnamed_addr constant [3 x i8] c"ii\00"
@.str.299 = private unnamed_addr constant [4 x i8] c"kj2\00"
@.str.300 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.301 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.302 = private unnamed_addr constant [3 x i8] c"k5\00"
@.str.303 = private unnamed_addr constant [13 x i8] c"twiddle.addr\00"
@.str.304 = private unnamed_addr constant [13 x i8] c"twiddle.addr\00"
@.str.305 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.306 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.307 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.308 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.309 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.310 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.311 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.312 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.313 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.314 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.315 = private unnamed_addr constant [132 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT/ft.c: .omp_outlined..17 :: line No: 377\00"
@.str.316 = private unnamed_addr constant [9 x i8] c"ou0.addr\00"
@.str.317 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.318 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.319 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.320 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.321 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.322 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.323 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.324 = private unnamed_addr constant [9 x i8] c"ou0.addr\00"
@.str.325 = private unnamed_addr constant [3 x i8] c"u0\00"
@.str.326 = private unnamed_addr constant [6 x i8] c"start\00"
@.str.327 = private unnamed_addr constant [3 x i8] c"an\00"
@.str.328 = private unnamed_addr constant [3 x i8] c"an\00"
@.str.329 = private unnamed_addr constant [6 x i8] c"dummy\00"
@.str.330 = private unnamed_addr constant [3 x i8] c"an\00"
@.str.331 = private unnamed_addr constant [6 x i8] c"start\00"
@.str.332 = private unnamed_addr constant [7 x i8] c"starts\00"
@.str.333 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.334 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.335 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.336 = private unnamed_addr constant [3 x i8] c"an\00"
@.str.337 = private unnamed_addr constant [6 x i8] c"dummy\00"
@.str.338 = private unnamed_addr constant [6 x i8] c"start\00"
@.str.339 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.340 = private unnamed_addr constant [7 x i8] c"starts\00"
@.str.341 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.342 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.343 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.344 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.345 = private unnamed_addr constant [141 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT/ft.c: compute_initial_conditions :: line No: 239\00"
@.str.346 = private unnamed_addr constant [7 x i8] c"a.addr\00"
@.str.347 = private unnamed_addr constant [14 x i8] c"exponent.addr\00"
@.str.348 = private unnamed_addr constant [7 x i8] c"result\00"
@.str.349 = private unnamed_addr constant [14 x i8] c"exponent.addr\00"
@.str.350 = private unnamed_addr constant [7 x i8] c"result\00"
@.str.351 = private unnamed_addr constant [7 x i8] c"a.addr\00"
@.str.352 = private unnamed_addr constant [2 x i8] c"q\00"
@.str.353 = private unnamed_addr constant [2 x i8] c"r\00"
@.str.354 = private unnamed_addr constant [14 x i8] c"exponent.addr\00"
@.str.355 = private unnamed_addr constant [2 x i8] c"n\00"
@.str.356 = private unnamed_addr constant [2 x i8] c"n\00"
@.str.357 = private unnamed_addr constant [2 x i8] c"n\00"
@.str.358 = private unnamed_addr constant [3 x i8] c"n2\00"
@.str.359 = private unnamed_addr constant [3 x i8] c"n2\00"
@.str.360 = private unnamed_addr constant [2 x i8] c"n\00"
@.str.361 = private unnamed_addr constant [2 x i8] c"q\00"
@.str.362 = private unnamed_addr constant [6 x i8] c"dummy\00"
@.str.363 = private unnamed_addr constant [3 x i8] c"n2\00"
@.str.364 = private unnamed_addr constant [2 x i8] c"n\00"
@.str.365 = private unnamed_addr constant [2 x i8] c"q\00"
@.str.366 = private unnamed_addr constant [6 x i8] c"dummy\00"
@.str.367 = private unnamed_addr constant [2 x i8] c"n\00"
@.str.368 = private unnamed_addr constant [2 x i8] c"n\00"
@.str.369 = private unnamed_addr constant [2 x i8] c"q\00"
@.str.370 = private unnamed_addr constant [6 x i8] c"dummy\00"
@.str.371 = private unnamed_addr constant [2 x i8] c"r\00"
@.str.372 = private unnamed_addr constant [7 x i8] c"result\00"
@.str.373 = private unnamed_addr constant [7 x i8] c"result\00"
@.str.374 = private unnamed_addr constant [7 x i8] c"retval\00"
@.str.375 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.376 = private unnamed_addr constant [131 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT/ft.c: .omp_outlined..9 :: line No: 264\00"
@.str.377 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.378 = private unnamed_addr constant [17 x i8] c".bound_tid..addr\00"
@.str.379 = private unnamed_addr constant [12 x i8] c"starts.addr\00"
@.str.380 = private unnamed_addr constant [9 x i8] c"vla.addr\00"
@.str.381 = private unnamed_addr constant [10 x i8] c"vla.addr2\00"
@.str.382 = private unnamed_addr constant [8 x i8] c"u0.addr\00"
@.str.383 = private unnamed_addr constant [12 x i8] c"starts.addr\00"
@.str.384 = private unnamed_addr constant [9 x i8] c"vla.addr\00"
@.str.385 = private unnamed_addr constant [10 x i8] c"vla.addr2\00"
@.str.386 = private unnamed_addr constant [8 x i8] c"u0.addr\00"
@.str.387 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.388 = private unnamed_addr constant [20 x i8] c".omp.last.iteration\00"
@.str.389 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.390 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.391 = private unnamed_addr constant [8 x i8] c".omp.lb\00"
@.str.392 = private unnamed_addr constant [20 x i8] c".omp.last.iteration\00"
@.str.393 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.394 = private unnamed_addr constant [12 x i8] c".omp.stride\00"
@.str.395 = private unnamed_addr constant [13 x i8] c".omp.is_last\00"
@.str.396 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.397 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.398 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.399 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.400 = private unnamed_addr constant [131 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT/ft.c: .omp_outlined..9 :: line No: 264\00"
@.str.401 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.402 = private unnamed_addr constant [20 x i8] c".omp.last.iteration\00"
@.str.403 = private unnamed_addr constant [20 x i8] c".omp.last.iteration\00"
@.str.404 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.405 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.406 = private unnamed_addr constant [8 x i8] c".omp.lb\00"
@.str.407 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.408 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.409 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.410 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.411 = private unnamed_addr constant [3 x i8] c"k5\00"
@.str.412 = private unnamed_addr constant [3 x i8] c"k5\00"
@.str.413 = private unnamed_addr constant [12 x i8] c"starts.addr\00"
@.str.414 = private unnamed_addr constant [3 x i8] c"x0\00"
@.str.415 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.416 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.417 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.418 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.419 = private unnamed_addr constant [3 x i8] c"k5\00"
@.str.420 = private unnamed_addr constant [8 x i8] c"u0.addr\00"
@.str.421 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.422 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.423 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.424 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.425 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.426 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.427 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.428 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.429 = private unnamed_addr constant [131 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT/ft.c: .omp_outlined..9 :: line No: 264\00"
@.str.430 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.431 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.432 = private unnamed_addr constant [3 x i8] c"nu\00"
@.str.433 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.434 = private unnamed_addr constant [2 x i8] c"m\00"
@.str.435 = private unnamed_addr constant [2 x i8] c"m\00"
@.str.436 = private unnamed_addr constant [17 x i8] c".compoundliteral\00"
@.str.437 = private unnamed_addr constant [17 x i8] c".compoundliteral\00"
@.str.438 = private unnamed_addr constant [3 x i8] c"ku\00"
@.str.439 = private unnamed_addr constant [3 x i8] c"ln\00"
@.str.440 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.441 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.442 = private unnamed_addr constant [2 x i8] c"m\00"
@.str.443 = private unnamed_addr constant [3 x i8] c"ln\00"
@.str.444 = private unnamed_addr constant [2 x i8] c"t\00"
@.str.445 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.446 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.447 = private unnamed_addr constant [3 x i8] c"ln\00"
@.str.448 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.449 = private unnamed_addr constant [2 x i8] c"t\00"
@.str.450 = private unnamed_addr constant [3 x i8] c"ti\00"
@.str.451 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.452 = private unnamed_addr constant [3 x i8] c"ku\00"
@.str.453 = private unnamed_addr constant [3 x i8] c"ti\00"
@.str.454 = private unnamed_addr constant [18 x i8] c".compoundliteral9\00"
@.str.455 = private unnamed_addr constant [3 x i8] c"ti\00"
@.str.456 = private unnamed_addr constant [18 x i8] c".compoundliteral9\00"
@.str.457 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.458 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.459 = private unnamed_addr constant [3 x i8] c"ku\00"
@.str.460 = private unnamed_addr constant [3 x i8] c"ln\00"
@.str.461 = private unnamed_addr constant [3 x i8] c"ku\00"
@.str.462 = private unnamed_addr constant [3 x i8] c"ln\00"
@.str.463 = private unnamed_addr constant [3 x i8] c"ln\00"
@.str.464 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.465 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.466 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.467 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.468 = private unnamed_addr constant [3 x i8] c"lg\00"
@.str.469 = private unnamed_addr constant [3 x i8] c"nn\00"
@.str.470 = private unnamed_addr constant [3 x i8] c"nn\00"
@.str.471 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.472 = private unnamed_addr constant [3 x i8] c"nn\00"
@.str.473 = private unnamed_addr constant [3 x i8] c"nn\00"
@.str.474 = private unnamed_addr constant [3 x i8] c"lg\00"
@.str.475 = private unnamed_addr constant [3 x i8] c"lg\00"
@.str.476 = private unnamed_addr constant [3 x i8] c"lg\00"
@.str.477 = private unnamed_addr constant [7 x i8] c"retval\00"
@.str.478 = private unnamed_addr constant [9 x i8] c"dir.addr\00"
@.str.479 = private unnamed_addr constant [8 x i8] c"x1.addr\00"
@.str.480 = private unnamed_addr constant [8 x i8] c"x2.addr\00"
@.str.481 = private unnamed_addr constant [9 x i8] c"dir.addr\00"
@.str.482 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.483 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.484 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.485 = private unnamed_addr constant [8 x i8] c"x1.addr\00"
@.str.486 = private unnamed_addr constant [8 x i8] c"x1.addr\00"
@.str.487 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.488 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.489 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.490 = private unnamed_addr constant [8 x i8] c"x1.addr\00"
@.str.491 = private unnamed_addr constant [8 x i8] c"x1.addr\00"
@.str.492 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.493 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.494 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.495 = private unnamed_addr constant [8 x i8] c"x1.addr\00"
@.str.496 = private unnamed_addr constant [8 x i8] c"x2.addr\00"
@.str.497 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.498 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.499 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.500 = private unnamed_addr constant [8 x i8] c"x1.addr\00"
@.str.501 = private unnamed_addr constant [8 x i8] c"x1.addr\00"
@.str.502 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.503 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.504 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.505 = private unnamed_addr constant [8 x i8] c"x1.addr\00"
@.str.506 = private unnamed_addr constant [8 x i8] c"x1.addr\00"
@.str.507 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.508 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.509 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.510 = private unnamed_addr constant [8 x i8] c"x1.addr\00"
@.str.511 = private unnamed_addr constant [8 x i8] c"x2.addr\00"
@.str.512 = private unnamed_addr constant [8 x i8] c"is.addr\00"
@.str.513 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.514 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.515 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.516 = private unnamed_addr constant [8 x i8] c"ox.addr\00"
@.str.517 = private unnamed_addr constant [11 x i8] c"oxout.addr\00"
@.str.518 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.519 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.520 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.521 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.522 = private unnamed_addr constant [8 x i8] c"ox.addr\00"
@.str.523 = private unnamed_addr constant [2 x i8] c"x\00"
@.str.524 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.525 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.526 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.527 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.528 = private unnamed_addr constant [11 x i8] c"oxout.addr\00"
@.str.529 = private unnamed_addr constant [5 x i8] c"xout\00"
@.str.530 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.531 = private unnamed_addr constant [6 x i8] c"logd1\00"
@.str.532 = private unnamed_addr constant [15 x i8] c"timers_enabled\00"
@.str.533 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.534 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.535 = private unnamed_addr constant [121 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT/ft.c: cffts1 :: line No: 436\00"
@.str.536 = private unnamed_addr constant [15 x i8] c"timers_enabled\00"
@.str.537 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.538 = private unnamed_addr constant [132 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT/ft.c: .omp_outlined..27 :: line No: 448\00"
@.str.539 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.540 = private unnamed_addr constant [17 x i8] c".bound_tid..addr\00"
@.str.541 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.542 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.543 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.544 = private unnamed_addr constant [9 x i8] c"vla.addr\00"
@.str.545 = private unnamed_addr constant [10 x i8] c"vla.addr2\00"
@.str.546 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.547 = private unnamed_addr constant [8 x i8] c"is.addr\00"
@.str.548 = private unnamed_addr constant [11 x i8] c"logd1.addr\00"
@.str.549 = private unnamed_addr constant [10 x i8] c"vla.addr4\00"
@.str.550 = private unnamed_addr constant [10 x i8] c"vla.addr6\00"
@.str.551 = private unnamed_addr constant [10 x i8] c"xout.addr\00"
@.str.552 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.553 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.554 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.555 = private unnamed_addr constant [9 x i8] c"vla.addr\00"
@.str.556 = private unnamed_addr constant [10 x i8] c"vla.addr2\00"
@.str.557 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.558 = private unnamed_addr constant [8 x i8] c"is.addr\00"
@.str.559 = private unnamed_addr constant [11 x i8] c"logd1.addr\00"
@.str.560 = private unnamed_addr constant [10 x i8] c"vla.addr4\00"
@.str.561 = private unnamed_addr constant [10 x i8] c"vla.addr6\00"
@.str.562 = private unnamed_addr constant [10 x i8] c"xout.addr\00"
@.str.563 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.564 = private unnamed_addr constant [20 x i8] c".omp.last.iteration\00"
@.str.565 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.566 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.567 = private unnamed_addr constant [8 x i8] c".omp.lb\00"
@.str.568 = private unnamed_addr constant [20 x i8] c".omp.last.iteration\00"
@.str.569 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.570 = private unnamed_addr constant [12 x i8] c".omp.stride\00"
@.str.571 = private unnamed_addr constant [13 x i8] c".omp.is_last\00"
@.str.572 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.573 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.574 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.575 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.576 = private unnamed_addr constant [132 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT/ft.c: .omp_outlined..27 :: line No: 448\00"
@.str.577 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.578 = private unnamed_addr constant [20 x i8] c".omp.last.iteration\00"
@.str.579 = private unnamed_addr constant [20 x i8] c".omp.last.iteration\00"
@.str.580 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.581 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.582 = private unnamed_addr constant [8 x i8] c".omp.lb\00"
@.str.583 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.584 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.585 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.586 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.587 = private unnamed_addr constant [3 x i8] c"k9\00"
@.str.588 = private unnamed_addr constant [3 x i8] c"jj\00"
@.str.589 = private unnamed_addr constant [3 x i8] c"jj\00"
@.str.590 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.591 = private unnamed_addr constant [9 x i8] c"fftblock\00"
@.str.592 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.593 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.594 = private unnamed_addr constant [9 x i8] c"fftblock\00"
@.str.595 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.596 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.597 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.598 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.599 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.600 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.601 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.602 = private unnamed_addr constant [3 x i8] c"jj\00"
@.str.603 = private unnamed_addr constant [3 x i8] c"k9\00"
@.str.604 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.605 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.606 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.607 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.608 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.609 = private unnamed_addr constant [8 x i8] c"is.addr\00"
@.str.610 = private unnamed_addr constant [11 x i8] c"logd1.addr\00"
@.str.611 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.612 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.613 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.614 = private unnamed_addr constant [9 x i8] c"fftblock\00"
@.str.615 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.616 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.617 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.618 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.619 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.620 = private unnamed_addr constant [3 x i8] c"jj\00"
@.str.621 = private unnamed_addr constant [3 x i8] c"k9\00"
@.str.622 = private unnamed_addr constant [10 x i8] c"xout.addr\00"
@.str.623 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.624 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.625 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.626 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.627 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.628 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.629 = private unnamed_addr constant [9 x i8] c"fftblock\00"
@.str.630 = private unnamed_addr constant [3 x i8] c"jj\00"
@.str.631 = private unnamed_addr constant [3 x i8] c"jj\00"
@.str.632 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.633 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.634 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.635 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.636 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.637 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.638 = private unnamed_addr constant [132 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT/ft.c: .omp_outlined..27 :: line No: 448\00"
@.str.639 = private unnamed_addr constant [8 x i8] c"is.addr\00"
@.str.640 = private unnamed_addr constant [7 x i8] c"m.addr\00"
@.str.641 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.642 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.643 = private unnamed_addr constant [7 x i8] c"y.addr\00"
@.str.644 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.645 = private unnamed_addr constant [12 x i8] c"fftblockpad\00"
@.str.646 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.647 = private unnamed_addr constant [12 x i8] c"fftblockpad\00"
@.str.648 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.649 = private unnamed_addr constant [3 x i8] c"mx\00"
@.str.650 = private unnamed_addr constant [8 x i8] c"is.addr\00"
@.str.651 = private unnamed_addr constant [8 x i8] c"is.addr\00"
@.str.652 = private unnamed_addr constant [7 x i8] c"m.addr\00"
@.str.653 = private unnamed_addr constant [7 x i8] c"m.addr\00"
@.str.654 = private unnamed_addr constant [3 x i8] c"mx\00"
@.str.655 = private unnamed_addr constant [8 x i8] c"is.addr\00"
@.str.656 = private unnamed_addr constant [7 x i8] c"m.addr\00"
@.str.657 = private unnamed_addr constant [3 x i8] c"mx\00"
@.str.658 = private unnamed_addr constant [2 x i8] c"l\00"
@.str.659 = private unnamed_addr constant [2 x i8] c"l\00"
@.str.660 = private unnamed_addr constant [7 x i8] c"m.addr\00"
@.str.661 = private unnamed_addr constant [8 x i8] c"is.addr\00"
@.str.662 = private unnamed_addr constant [2 x i8] c"l\00"
@.str.663 = private unnamed_addr constant [7 x i8] c"m.addr\00"
@.str.664 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.665 = private unnamed_addr constant [9 x i8] c"fftblock\00"
@.str.666 = private unnamed_addr constant [12 x i8] c"fftblockpad\00"
@.str.667 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.668 = private unnamed_addr constant [7 x i8] c"y.addr\00"
@.str.669 = private unnamed_addr constant [2 x i8] c"l\00"
@.str.670 = private unnamed_addr constant [7 x i8] c"m.addr\00"
@.str.671 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.672 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.673 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.674 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.675 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.676 = private unnamed_addr constant [9 x i8] c"fftblock\00"
@.str.677 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.678 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.679 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.680 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.681 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.682 = private unnamed_addr constant [7 x i8] c"y.addr\00"
@.str.683 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.684 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.685 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.686 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.687 = private unnamed_addr constant [8 x i8] c"is.addr\00"
@.str.688 = private unnamed_addr constant [2 x i8] c"l\00"
@.str.689 = private unnamed_addr constant [7 x i8] c"m.addr\00"
@.str.690 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.691 = private unnamed_addr constant [9 x i8] c"fftblock\00"
@.str.692 = private unnamed_addr constant [12 x i8] c"fftblockpad\00"
@.str.693 = private unnamed_addr constant [7 x i8] c"y.addr\00"
@.str.694 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.695 = private unnamed_addr constant [2 x i8] c"l\00"
@.str.696 = private unnamed_addr constant [2 x i8] c"l\00"
@.str.697 = private unnamed_addr constant [8 x i8] c"is.addr\00"
@.str.698 = private unnamed_addr constant [7 x i8] c"l.addr\00"
@.str.699 = private unnamed_addr constant [7 x i8] c"m.addr\00"
@.str.700 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.701 = private unnamed_addr constant [8 x i8] c"ny.addr\00"
@.str.702 = private unnamed_addr constant [9 x i8] c"ny1.addr\00"
@.str.703 = private unnamed_addr constant [7 x i8] c"u.addr\00"
@.str.704 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.705 = private unnamed_addr constant [7 x i8] c"y.addr\00"
@.str.706 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.707 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.708 = private unnamed_addr constant [9 x i8] c"ny1.addr\00"
@.str.709 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.710 = private unnamed_addr constant [9 x i8] c"ny1.addr\00"
@.str.711 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.712 = private unnamed_addr constant [3 x i8] c"n1\00"
@.str.713 = private unnamed_addr constant [7 x i8] c"l.addr\00"
@.str.714 = private unnamed_addr constant [3 x i8] c"lk\00"
@.str.715 = private unnamed_addr constant [7 x i8] c"m.addr\00"
@.str.716 = private unnamed_addr constant [7 x i8] c"l.addr\00"
@.str.717 = private unnamed_addr constant [3 x i8] c"li\00"
@.str.718 = private unnamed_addr constant [3 x i8] c"lk\00"
@.str.719 = private unnamed_addr constant [3 x i8] c"lj\00"
@.str.720 = private unnamed_addr constant [3 x i8] c"li\00"
@.str.721 = private unnamed_addr constant [3 x i8] c"ku\00"
@.str.722 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.723 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.724 = private unnamed_addr constant [3 x i8] c"li\00"
@.str.725 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.726 = private unnamed_addr constant [3 x i8] c"lk\00"
@.str.727 = private unnamed_addr constant [4 x i8] c"i11\00"
@.str.728 = private unnamed_addr constant [4 x i8] c"i11\00"
@.str.729 = private unnamed_addr constant [3 x i8] c"n1\00"
@.str.730 = private unnamed_addr constant [4 x i8] c"i12\00"
@.str.731 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.732 = private unnamed_addr constant [3 x i8] c"lj\00"
@.str.733 = private unnamed_addr constant [4 x i8] c"i21\00"
@.str.734 = private unnamed_addr constant [4 x i8] c"i21\00"
@.str.735 = private unnamed_addr constant [3 x i8] c"lk\00"
@.str.736 = private unnamed_addr constant [4 x i8] c"i22\00"
@.str.737 = private unnamed_addr constant [8 x i8] c"is.addr\00"
@.str.738 = private unnamed_addr constant [3 x i8] c"ku\00"
@.str.739 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.740 = private unnamed_addr constant [7 x i8] c"u.addr\00"
@.str.741 = private unnamed_addr constant [3 x i8] c"ku\00"
@.str.742 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.743 = private unnamed_addr constant [7 x i8] c"u.addr\00"
@.str.744 = private unnamed_addr constant [7 x i8] c"u.addr\00"
@.str.745 = private unnamed_addr constant [17 x i8] c".compoundliteral\00"
@.str.746 = private unnamed_addr constant [3 x i8] c"ku\00"
@.str.747 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.748 = private unnamed_addr constant [7 x i8] c"u.addr\00"
@.str.749 = private unnamed_addr constant [7 x i8] c"u.addr\00"
@.str.750 = private unnamed_addr constant [17 x i8] c".compoundliteral\00"
@.str.751 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.752 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.753 = private unnamed_addr constant [3 x i8] c"lk\00"
@.str.754 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.755 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.756 = private unnamed_addr constant [8 x i8] c"ny.addr\00"
@.str.757 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.758 = private unnamed_addr constant [4 x i8] c"i11\00"
@.str.759 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.760 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.761 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.762 = private unnamed_addr constant [4 x i8] c"i12\00"
@.str.763 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.764 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.765 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.766 = private unnamed_addr constant [4 x i8] c"i21\00"
@.str.767 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.768 = private unnamed_addr constant [7 x i8] c"y.addr\00"
@.str.769 = private unnamed_addr constant [4 x i8] c"x11\00"
@.str.770 = private unnamed_addr constant [4 x i8] c"x21\00"
@.str.771 = private unnamed_addr constant [19 x i8] c".compoundliteral40\00"
@.str.772 = private unnamed_addr constant [4 x i8] c"x11\00"
@.str.773 = private unnamed_addr constant [4 x i8] c"x21\00"
@.str.774 = private unnamed_addr constant [19 x i8] c".compoundliteral40\00"
@.str.775 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.776 = private unnamed_addr constant [4 x i8] c"i22\00"
@.str.777 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.778 = private unnamed_addr constant [7 x i8] c"y.addr\00"
@.str.779 = private unnamed_addr constant [3 x i8] c"u1\00"
@.str.780 = private unnamed_addr constant [4 x i8] c"x11\00"
@.str.781 = private unnamed_addr constant [4 x i8] c"x21\00"
@.str.782 = private unnamed_addr constant [19 x i8] c".compoundliteral57\00"
@.str.783 = private unnamed_addr constant [4 x i8] c"x11\00"
@.str.784 = private unnamed_addr constant [4 x i8] c"x21\00"
@.str.785 = private unnamed_addr constant [19 x i8] c".compoundliteral57\00"
@.str.786 = private unnamed_addr constant [19 x i8] c".compoundliteral57\00"
@.str.787 = private unnamed_addr constant [3 x i8] c"u1\00"
@.str.788 = private unnamed_addr constant [4 x i8] c"x11\00"
@.str.789 = private unnamed_addr constant [4 x i8] c"x21\00"
@.str.790 = private unnamed_addr constant [19 x i8] c".compoundliteral69\00"
@.str.791 = private unnamed_addr constant [4 x i8] c"x11\00"
@.str.792 = private unnamed_addr constant [4 x i8] c"x21\00"
@.str.793 = private unnamed_addr constant [19 x i8] c".compoundliteral69\00"
@.str.794 = private unnamed_addr constant [19 x i8] c".compoundliteral69\00"
@.str.795 = private unnamed_addr constant [19 x i8] c".compoundliteral54\00"
@.str.796 = private unnamed_addr constant [3 x i8] c"u1\00"
@.str.797 = private unnamed_addr constant [4 x i8] c"x11\00"
@.str.798 = private unnamed_addr constant [4 x i8] c"x21\00"
@.str.799 = private unnamed_addr constant [19 x i8] c".compoundliteral83\00"
@.str.800 = private unnamed_addr constant [4 x i8] c"x11\00"
@.str.801 = private unnamed_addr constant [4 x i8] c"x21\00"
@.str.802 = private unnamed_addr constant [19 x i8] c".compoundliteral83\00"
@.str.803 = private unnamed_addr constant [19 x i8] c".compoundliteral83\00"
@.str.804 = private unnamed_addr constant [3 x i8] c"u1\00"
@.str.805 = private unnamed_addr constant [4 x i8] c"x11\00"
@.str.806 = private unnamed_addr constant [4 x i8] c"x21\00"
@.str.807 = private unnamed_addr constant [19 x i8] c".compoundliteral95\00"
@.str.808 = private unnamed_addr constant [4 x i8] c"x11\00"
@.str.809 = private unnamed_addr constant [4 x i8] c"x21\00"
@.str.810 = private unnamed_addr constant [19 x i8] c".compoundliteral95\00"
@.str.811 = private unnamed_addr constant [19 x i8] c".compoundliteral95\00"
@.str.812 = private unnamed_addr constant [19 x i8] c".compoundliteral54\00"
@.str.813 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.814 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.815 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.816 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.817 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.818 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.819 = private unnamed_addr constant [8 x i8] c"is.addr\00"
@.str.820 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.821 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.822 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.823 = private unnamed_addr constant [8 x i8] c"ox.addr\00"
@.str.824 = private unnamed_addr constant [11 x i8] c"oxout.addr\00"
@.str.825 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.826 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.827 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.828 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.829 = private unnamed_addr constant [8 x i8] c"ox.addr\00"
@.str.830 = private unnamed_addr constant [2 x i8] c"x\00"
@.str.831 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.832 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.833 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.834 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.835 = private unnamed_addr constant [11 x i8] c"oxout.addr\00"
@.str.836 = private unnamed_addr constant [5 x i8] c"xout\00"
@.str.837 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.838 = private unnamed_addr constant [6 x i8] c"logd2\00"
@.str.839 = private unnamed_addr constant [15 x i8] c"timers_enabled\00"
@.str.840 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.841 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.842 = private unnamed_addr constant [121 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT/ft.c: cffts2 :: line No: 469\00"
@.str.843 = private unnamed_addr constant [15 x i8] c"timers_enabled\00"
@.str.844 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.845 = private unnamed_addr constant [132 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT/ft.c: .omp_outlined..29 :: line No: 481\00"
@.str.846 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.847 = private unnamed_addr constant [17 x i8] c".bound_tid..addr\00"
@.str.848 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.849 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.850 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.851 = private unnamed_addr constant [9 x i8] c"vla.addr\00"
@.str.852 = private unnamed_addr constant [10 x i8] c"vla.addr2\00"
@.str.853 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.854 = private unnamed_addr constant [8 x i8] c"is.addr\00"
@.str.855 = private unnamed_addr constant [11 x i8] c"logd2.addr\00"
@.str.856 = private unnamed_addr constant [10 x i8] c"vla.addr4\00"
@.str.857 = private unnamed_addr constant [10 x i8] c"vla.addr6\00"
@.str.858 = private unnamed_addr constant [10 x i8] c"xout.addr\00"
@.str.859 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.860 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.861 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.862 = private unnamed_addr constant [9 x i8] c"vla.addr\00"
@.str.863 = private unnamed_addr constant [10 x i8] c"vla.addr2\00"
@.str.864 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.865 = private unnamed_addr constant [8 x i8] c"is.addr\00"
@.str.866 = private unnamed_addr constant [11 x i8] c"logd2.addr\00"
@.str.867 = private unnamed_addr constant [10 x i8] c"vla.addr4\00"
@.str.868 = private unnamed_addr constant [10 x i8] c"vla.addr6\00"
@.str.869 = private unnamed_addr constant [10 x i8] c"xout.addr\00"
@.str.870 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.871 = private unnamed_addr constant [20 x i8] c".omp.last.iteration\00"
@.str.872 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.873 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.874 = private unnamed_addr constant [8 x i8] c".omp.lb\00"
@.str.875 = private unnamed_addr constant [20 x i8] c".omp.last.iteration\00"
@.str.876 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.877 = private unnamed_addr constant [12 x i8] c".omp.stride\00"
@.str.878 = private unnamed_addr constant [13 x i8] c".omp.is_last\00"
@.str.879 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.880 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.881 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.882 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.883 = private unnamed_addr constant [132 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT/ft.c: .omp_outlined..29 :: line No: 481\00"
@.str.884 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.885 = private unnamed_addr constant [20 x i8] c".omp.last.iteration\00"
@.str.886 = private unnamed_addr constant [20 x i8] c".omp.last.iteration\00"
@.str.887 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.888 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.889 = private unnamed_addr constant [8 x i8] c".omp.lb\00"
@.str.890 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.891 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.892 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.893 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.894 = private unnamed_addr constant [3 x i8] c"k9\00"
@.str.895 = private unnamed_addr constant [3 x i8] c"ii\00"
@.str.896 = private unnamed_addr constant [3 x i8] c"ii\00"
@.str.897 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.898 = private unnamed_addr constant [9 x i8] c"fftblock\00"
@.str.899 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.900 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.901 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.902 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.903 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.904 = private unnamed_addr constant [9 x i8] c"fftblock\00"
@.str.905 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.906 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.907 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.908 = private unnamed_addr constant [3 x i8] c"ii\00"
@.str.909 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.910 = private unnamed_addr constant [3 x i8] c"k9\00"
@.str.911 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.912 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.913 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.914 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.915 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.916 = private unnamed_addr constant [8 x i8] c"is.addr\00"
@.str.917 = private unnamed_addr constant [11 x i8] c"logd2.addr\00"
@.str.918 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.919 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.920 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.921 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.922 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.923 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.924 = private unnamed_addr constant [9 x i8] c"fftblock\00"
@.str.925 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.926 = private unnamed_addr constant [3 x i8] c"ii\00"
@.str.927 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.928 = private unnamed_addr constant [3 x i8] c"k9\00"
@.str.929 = private unnamed_addr constant [10 x i8] c"xout.addr\00"
@.str.930 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.931 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.932 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.933 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.934 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.935 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.936 = private unnamed_addr constant [9 x i8] c"fftblock\00"
@.str.937 = private unnamed_addr constant [3 x i8] c"ii\00"
@.str.938 = private unnamed_addr constant [3 x i8] c"ii\00"
@.str.939 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.940 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.941 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.942 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.943 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.944 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.945 = private unnamed_addr constant [132 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT/ft.c: .omp_outlined..29 :: line No: 481\00"
@.str.946 = private unnamed_addr constant [8 x i8] c"is.addr\00"
@.str.947 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.948 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.949 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.950 = private unnamed_addr constant [8 x i8] c"ox.addr\00"
@.str.951 = private unnamed_addr constant [11 x i8] c"oxout.addr\00"
@.str.952 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.953 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.954 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.955 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.956 = private unnamed_addr constant [8 x i8] c"ox.addr\00"
@.str.957 = private unnamed_addr constant [2 x i8] c"x\00"
@.str.958 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.959 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.960 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.961 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.962 = private unnamed_addr constant [11 x i8] c"oxout.addr\00"
@.str.963 = private unnamed_addr constant [5 x i8] c"xout\00"
@.str.964 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.965 = private unnamed_addr constant [6 x i8] c"logd3\00"
@.str.966 = private unnamed_addr constant [15 x i8] c"timers_enabled\00"
@.str.967 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.968 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.969 = private unnamed_addr constant [121 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT/ft.c: cffts3 :: line No: 502\00"
@.str.970 = private unnamed_addr constant [15 x i8] c"timers_enabled\00"
@.str.971 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.972 = private unnamed_addr constant [132 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT/ft.c: .omp_outlined..30 :: line No: 514\00"
@.str.973 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.974 = private unnamed_addr constant [17 x i8] c".bound_tid..addr\00"
@.str.975 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.976 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.977 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.978 = private unnamed_addr constant [9 x i8] c"vla.addr\00"
@.str.979 = private unnamed_addr constant [10 x i8] c"vla.addr2\00"
@.str.980 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.981 = private unnamed_addr constant [8 x i8] c"is.addr\00"
@.str.982 = private unnamed_addr constant [11 x i8] c"logd3.addr\00"
@.str.983 = private unnamed_addr constant [10 x i8] c"vla.addr4\00"
@.str.984 = private unnamed_addr constant [10 x i8] c"vla.addr6\00"
@.str.985 = private unnamed_addr constant [10 x i8] c"xout.addr\00"
@.str.986 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.987 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.988 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.989 = private unnamed_addr constant [9 x i8] c"vla.addr\00"
@.str.990 = private unnamed_addr constant [10 x i8] c"vla.addr2\00"
@.str.991 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.992 = private unnamed_addr constant [8 x i8] c"is.addr\00"
@.str.993 = private unnamed_addr constant [11 x i8] c"logd3.addr\00"
@.str.994 = private unnamed_addr constant [10 x i8] c"vla.addr4\00"
@.str.995 = private unnamed_addr constant [10 x i8] c"vla.addr6\00"
@.str.996 = private unnamed_addr constant [10 x i8] c"xout.addr\00"
@.str.997 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.998 = private unnamed_addr constant [20 x i8] c".omp.last.iteration\00"
@.str.999 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.1000 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.1001 = private unnamed_addr constant [8 x i8] c".omp.lb\00"
@.str.1002 = private unnamed_addr constant [20 x i8] c".omp.last.iteration\00"
@.str.1003 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.1004 = private unnamed_addr constant [12 x i8] c".omp.stride\00"
@.str.1005 = private unnamed_addr constant [13 x i8] c".omp.is_last\00"
@.str.1006 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1007 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.1008 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.1009 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.1010 = private unnamed_addr constant [132 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT/ft.c: .omp_outlined..30 :: line No: 514\00"
@.str.1011 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.1012 = private unnamed_addr constant [20 x i8] c".omp.last.iteration\00"
@.str.1013 = private unnamed_addr constant [20 x i8] c".omp.last.iteration\00"
@.str.1014 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.1015 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.1016 = private unnamed_addr constant [8 x i8] c".omp.lb\00"
@.str.1017 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.1018 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.1019 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.1020 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.1021 = private unnamed_addr constant [3 x i8] c"j9\00"
@.str.1022 = private unnamed_addr constant [3 x i8] c"ii\00"
@.str.1023 = private unnamed_addr constant [3 x i8] c"ii\00"
@.str.1024 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.1025 = private unnamed_addr constant [9 x i8] c"fftblock\00"
@.str.1026 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.1027 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.1028 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.1029 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1030 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1031 = private unnamed_addr constant [9 x i8] c"fftblock\00"
@.str.1032 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1033 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.1034 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1035 = private unnamed_addr constant [3 x i8] c"ii\00"
@.str.1036 = private unnamed_addr constant [3 x i8] c"j9\00"
@.str.1037 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.1038 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.1039 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1040 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1041 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.1042 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.1043 = private unnamed_addr constant [8 x i8] c"is.addr\00"
@.str.1044 = private unnamed_addr constant [11 x i8] c"logd3.addr\00"
@.str.1045 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.1046 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.1047 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.1048 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.1049 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1050 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1051 = private unnamed_addr constant [9 x i8] c"fftblock\00"
@.str.1052 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1053 = private unnamed_addr constant [3 x i8] c"ii\00"
@.str.1054 = private unnamed_addr constant [3 x i8] c"j9\00"
@.str.1055 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.1056 = private unnamed_addr constant [10 x i8] c"xout.addr\00"
@.str.1057 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1058 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.1059 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1060 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1061 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.1062 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.1063 = private unnamed_addr constant [9 x i8] c"fftblock\00"
@.str.1064 = private unnamed_addr constant [3 x i8] c"ii\00"
@.str.1065 = private unnamed_addr constant [3 x i8] c"ii\00"
@.str.1066 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.1067 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.1068 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1069 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.1070 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.1071 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.1072 = private unnamed_addr constant [132 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT/ft.c: .omp_outlined..30 :: line No: 514\00"
@.str.1073 = private unnamed_addr constant [9 x i8] c"ou0.addr\00"
@.str.1074 = private unnamed_addr constant [9 x i8] c"ou1.addr\00"
@.str.1075 = private unnamed_addr constant [8 x i8] c"ot.addr\00"
@.str.1076 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.1077 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.1078 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.1079 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.1080 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.1081 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.1082 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.1083 = private unnamed_addr constant [9 x i8] c"ou0.addr\00"
@.str.1084 = private unnamed_addr constant [3 x i8] c"u0\00"
@.str.1085 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.1086 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.1087 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.1088 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.1089 = private unnamed_addr constant [9 x i8] c"ou1.addr\00"
@.str.1090 = private unnamed_addr constant [3 x i8] c"u1\00"
@.str.1091 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.1092 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.1093 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.1094 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.1095 = private unnamed_addr constant [8 x i8] c"ot.addr\00"
@.str.1096 = private unnamed_addr constant [8 x i8] c"twiddle\00"
@.str.1097 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1098 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.1099 = private unnamed_addr constant [121 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT/ft.c: evolve :: line No: 215\00"
@.str.1100 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.1101 = private unnamed_addr constant [131 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT/ft.c: .omp_outlined..8 :: line No: 224\00"
@.str.1102 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.1103 = private unnamed_addr constant [17 x i8] c".bound_tid..addr\00"
@.str.1104 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.1105 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.1106 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.1107 = private unnamed_addr constant [9 x i8] c"vla.addr\00"
@.str.1108 = private unnamed_addr constant [10 x i8] c"vla.addr2\00"
@.str.1109 = private unnamed_addr constant [8 x i8] c"u0.addr\00"
@.str.1110 = private unnamed_addr constant [10 x i8] c"vla.addr4\00"
@.str.1111 = private unnamed_addr constant [10 x i8] c"vla.addr6\00"
@.str.1112 = private unnamed_addr constant [13 x i8] c"twiddle.addr\00"
@.str.1113 = private unnamed_addr constant [10 x i8] c"vla.addr8\00"
@.str.1114 = private unnamed_addr constant [11 x i8] c"vla.addr10\00"
@.str.1115 = private unnamed_addr constant [8 x i8] c"u1.addr\00"
@.str.1116 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.1117 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.1118 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.1119 = private unnamed_addr constant [9 x i8] c"vla.addr\00"
@.str.1120 = private unnamed_addr constant [10 x i8] c"vla.addr2\00"
@.str.1121 = private unnamed_addr constant [8 x i8] c"u0.addr\00"
@.str.1122 = private unnamed_addr constant [10 x i8] c"vla.addr4\00"
@.str.1123 = private unnamed_addr constant [10 x i8] c"vla.addr6\00"
@.str.1124 = private unnamed_addr constant [13 x i8] c"twiddle.addr\00"
@.str.1125 = private unnamed_addr constant [10 x i8] c"vla.addr8\00"
@.str.1126 = private unnamed_addr constant [11 x i8] c"vla.addr10\00"
@.str.1127 = private unnamed_addr constant [8 x i8] c"u1.addr\00"
@.str.1128 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.1129 = private unnamed_addr constant [20 x i8] c".omp.last.iteration\00"
@.str.1130 = private unnamed_addr constant [2 x i8] c"k\00"
@.str.1131 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.1132 = private unnamed_addr constant [8 x i8] c".omp.lb\00"
@.str.1133 = private unnamed_addr constant [20 x i8] c".omp.last.iteration\00"
@.str.1134 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.1135 = private unnamed_addr constant [12 x i8] c".omp.stride\00"
@.str.1136 = private unnamed_addr constant [13 x i8] c".omp.is_last\00"
@.str.1137 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1138 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.1139 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.1140 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.1141 = private unnamed_addr constant [131 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT/ft.c: .omp_outlined..8 :: line No: 224\00"
@.str.1142 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.1143 = private unnamed_addr constant [20 x i8] c".omp.last.iteration\00"
@.str.1144 = private unnamed_addr constant [20 x i8] c".omp.last.iteration\00"
@.str.1145 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.1146 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.1147 = private unnamed_addr constant [8 x i8] c".omp.lb\00"
@.str.1148 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.1149 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.1150 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.1151 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.1152 = private unnamed_addr constant [4 x i8] c"k13\00"
@.str.1153 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.1154 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.1155 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.1156 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1157 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1158 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.1159 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1160 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.1161 = private unnamed_addr constant [4 x i8] c"k13\00"
@.str.1162 = private unnamed_addr constant [8 x i8] c"u0.addr\00"
@.str.1163 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1164 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.1165 = private unnamed_addr constant [4 x i8] c"k13\00"
@.str.1166 = private unnamed_addr constant [8 x i8] c"u0.addr\00"
@.str.1167 = private unnamed_addr constant [8 x i8] c"u0.addr\00"
@.str.1168 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1169 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.1170 = private unnamed_addr constant [4 x i8] c"k13\00"
@.str.1171 = private unnamed_addr constant [13 x i8] c"twiddle.addr\00"
@.str.1172 = private unnamed_addr constant [13 x i8] c"twiddle.addr\00"
@.str.1173 = private unnamed_addr constant [17 x i8] c".compoundliteral\00"
@.str.1174 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1175 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.1176 = private unnamed_addr constant [4 x i8] c"k13\00"
@.str.1177 = private unnamed_addr constant [8 x i8] c"u0.addr\00"
@.str.1178 = private unnamed_addr constant [8 x i8] c"u0.addr\00"
@.str.1179 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1180 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.1181 = private unnamed_addr constant [4 x i8] c"k13\00"
@.str.1182 = private unnamed_addr constant [13 x i8] c"twiddle.addr\00"
@.str.1183 = private unnamed_addr constant [13 x i8] c"twiddle.addr\00"
@.str.1184 = private unnamed_addr constant [17 x i8] c".compoundliteral\00"
@.str.1185 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1186 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.1187 = private unnamed_addr constant [4 x i8] c"k13\00"
@.str.1188 = private unnamed_addr constant [8 x i8] c"u1.addr\00"
@.str.1189 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1190 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.1191 = private unnamed_addr constant [4 x i8] c"k13\00"
@.str.1192 = private unnamed_addr constant [8 x i8] c"u0.addr\00"
@.str.1193 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1194 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1195 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.1196 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.1197 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.1198 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.1199 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1200 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.1201 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.1202 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.1203 = private unnamed_addr constant [131 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT/ft.c: .omp_outlined..8 :: line No: 224\00"
@.str.1204 = private unnamed_addr constant [7 x i8] c"i.addr\00"
@.str.1205 = private unnamed_addr constant [9 x i8] c"ou1.addr\00"
@.str.1206 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.1207 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.1208 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.1209 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.1210 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.1211 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.1212 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.1213 = private unnamed_addr constant [9 x i8] c"ou1.addr\00"
@.str.1214 = private unnamed_addr constant [3 x i8] c"u1\00"
@.str.1215 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1216 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.1217 = private unnamed_addr constant [123 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT/ft.c: checksum :: line No: 669\00"
@.str.1218 = private unnamed_addr constant [4 x i8] c"chk\00"
@.str.1219 = private unnamed_addr constant [17 x i8] c".compoundliteral\00"
@.str.1220 = private unnamed_addr constant [4 x i8] c"chk\00"
@.str.1221 = private unnamed_addr constant [17 x i8] c".compoundliteral\00"
@.str.1222 = private unnamed_addr constant [7 x i8] c"i.addr\00"
@.str.1223 = private unnamed_addr constant [4 x i8] c"chk\00"
@.str.1224 = private unnamed_addr constant [4 x i8] c"chk\00"
@.str.1225 = private unnamed_addr constant [7 x i8] c"i.addr\00"
@.str.1226 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.1227 = private unnamed_addr constant [132 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT/ft.c: .omp_outlined..31 :: line No: 677\00"
@.str.1228 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.1229 = private unnamed_addr constant [17 x i8] c".bound_tid..addr\00"
@.str.1230 = private unnamed_addr constant [7 x i8] c"j.addr\00"
@.str.1231 = private unnamed_addr constant [9 x i8] c"vla.addr\00"
@.str.1232 = private unnamed_addr constant [10 x i8] c"vla.addr2\00"
@.str.1233 = private unnamed_addr constant [8 x i8] c"u1.addr\00"
@.str.1234 = private unnamed_addr constant [9 x i8] c"chk.addr\00"
@.str.1235 = private unnamed_addr constant [7 x i8] c"j.addr\00"
@.str.1236 = private unnamed_addr constant [9 x i8] c"vla.addr\00"
@.str.1237 = private unnamed_addr constant [10 x i8] c"vla.addr2\00"
@.str.1238 = private unnamed_addr constant [8 x i8] c"u1.addr\00"
@.str.1239 = private unnamed_addr constant [9 x i8] c"chk.addr\00"
@.str.1240 = private unnamed_addr constant [8 x i8] c".omp.lb\00"
@.str.1241 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.1242 = private unnamed_addr constant [12 x i8] c".omp.stride\00"
@.str.1243 = private unnamed_addr constant [13 x i8] c".omp.is_last\00"
@.str.1244 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1245 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.1246 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.1247 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.1248 = private unnamed_addr constant [132 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT/ft.c: .omp_outlined..31 :: line No: 677\00"
@.str.1249 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.1250 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.1251 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.1252 = private unnamed_addr constant [8 x i8] c".omp.lb\00"
@.str.1253 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.1254 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.1255 = private unnamed_addr constant [8 x i8] c".omp.ub\00"
@.str.1256 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.1257 = private unnamed_addr constant [3 x i8] c"j3\00"
@.str.1258 = private unnamed_addr constant [3 x i8] c"j3\00"
@.str.1259 = private unnamed_addr constant [2 x i8] c"q\00"
@.str.1260 = private unnamed_addr constant [3 x i8] c"j3\00"
@.str.1261 = private unnamed_addr constant [2 x i8] c"r\00"
@.str.1262 = private unnamed_addr constant [3 x i8] c"j3\00"
@.str.1263 = private unnamed_addr constant [2 x i8] c"s\00"
@.str.1264 = private unnamed_addr constant [7 x i8] c"my_chk\00"
@.str.1265 = private unnamed_addr constant [2 x i8] c"q\00"
@.str.1266 = private unnamed_addr constant [2 x i8] c"r\00"
@.str.1267 = private unnamed_addr constant [2 x i8] c"s\00"
@.str.1268 = private unnamed_addr constant [8 x i8] c"u1.addr\00"
@.str.1269 = private unnamed_addr constant [8 x i8] c"u1.addr\00"
@.str.1270 = private unnamed_addr constant [17 x i8] c".compoundliteral\00"
@.str.1271 = private unnamed_addr constant [7 x i8] c"my_chk\00"
@.str.1272 = private unnamed_addr constant [2 x i8] c"q\00"
@.str.1273 = private unnamed_addr constant [2 x i8] c"r\00"
@.str.1274 = private unnamed_addr constant [2 x i8] c"s\00"
@.str.1275 = private unnamed_addr constant [8 x i8] c"u1.addr\00"
@.str.1276 = private unnamed_addr constant [8 x i8] c"u1.addr\00"
@.str.1277 = private unnamed_addr constant [17 x i8] c".compoundliteral\00"
@.str.1278 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.1279 = private unnamed_addr constant [8 x i8] c".omp.iv\00"
@.str.1280 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1281 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.1282 = private unnamed_addr constant [132 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT/ft.c: .omp_outlined..31 :: line No: 677\00"
@.str.1283 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1284 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.1285 = private unnamed_addr constant [132 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT/ft.c: .omp_outlined..31 :: line No: 677\00"
@.str.1286 = private unnamed_addr constant [9 x i8] c"chk.addr\00"
@.str.1287 = private unnamed_addr constant [7 x i8] c"my_chk\00"
@.str.1288 = private unnamed_addr constant [19 x i8] c".compoundliteral26\00"
@.str.1289 = private unnamed_addr constant [9 x i8] c"chk.addr\00"
@.str.1290 = private unnamed_addr constant [7 x i8] c"my_chk\00"
@.str.1291 = private unnamed_addr constant [19 x i8] c".compoundliteral26\00"
@.str.1292 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.1293 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.1294 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.1295 = private unnamed_addr constant [8 x i8] c"nt.addr\00"
@.str.1296 = private unnamed_addr constant [14 x i8] c"verified.addr\00"
@.str.1297 = private unnamed_addr constant [11 x i8] c"Class.addr\00"
@.str.1298 = private unnamed_addr constant [11 x i8] c"Class.addr\00"
@.str.1299 = private unnamed_addr constant [11 x i8] c"Class.addr\00"
@.str.1300 = private unnamed_addr constant [8 x i8] c"epsilon\00"
@.str.1301 = private unnamed_addr constant [14 x i8] c"verified.addr\00"
@.str.1302 = private unnamed_addr constant [14 x i8] c"verified.addr\00"
@.str.1303 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.1304 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.1305 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.1306 = private unnamed_addr constant [8 x i8] c"nt.addr\00"
@.str.1307 = private unnamed_addr constant [11 x i8] c"Class.addr\00"
@.str.1308 = private unnamed_addr constant [11 x i8] c"Class.addr\00"
@.str.1309 = private unnamed_addr constant [17 x i8] c".compoundliteral\00"
@.str.1310 = private unnamed_addr constant [17 x i8] c".compoundliteral\00"
@.str.1311 = private unnamed_addr constant [18 x i8] c".compoundliteral7\00"
@.str.1312 = private unnamed_addr constant [18 x i8] c".compoundliteral7\00"
@.str.1313 = private unnamed_addr constant [19 x i8] c".compoundliteral11\00"
@.str.1314 = private unnamed_addr constant [19 x i8] c".compoundliteral11\00"
@.str.1315 = private unnamed_addr constant [19 x i8] c".compoundliteral15\00"
@.str.1316 = private unnamed_addr constant [19 x i8] c".compoundliteral15\00"
@.str.1317 = private unnamed_addr constant [19 x i8] c".compoundliteral19\00"
@.str.1318 = private unnamed_addr constant [19 x i8] c".compoundliteral19\00"
@.str.1319 = private unnamed_addr constant [19 x i8] c".compoundliteral23\00"
@.str.1320 = private unnamed_addr constant [19 x i8] c".compoundliteral23\00"
@.str.1321 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.1322 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.1323 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.1324 = private unnamed_addr constant [8 x i8] c"nt.addr\00"
@.str.1325 = private unnamed_addr constant [11 x i8] c"Class.addr\00"
@.str.1326 = private unnamed_addr constant [11 x i8] c"Class.addr\00"
@.str.1327 = private unnamed_addr constant [19 x i8] c".compoundliteral35\00"
@.str.1328 = private unnamed_addr constant [19 x i8] c".compoundliteral35\00"
@.str.1329 = private unnamed_addr constant [19 x i8] c".compoundliteral39\00"
@.str.1330 = private unnamed_addr constant [19 x i8] c".compoundliteral39\00"
@.str.1331 = private unnamed_addr constant [19 x i8] c".compoundliteral43\00"
@.str.1332 = private unnamed_addr constant [19 x i8] c".compoundliteral43\00"
@.str.1333 = private unnamed_addr constant [19 x i8] c".compoundliteral47\00"
@.str.1334 = private unnamed_addr constant [19 x i8] c".compoundliteral47\00"
@.str.1335 = private unnamed_addr constant [19 x i8] c".compoundliteral51\00"
@.str.1336 = private unnamed_addr constant [19 x i8] c".compoundliteral51\00"
@.str.1337 = private unnamed_addr constant [19 x i8] c".compoundliteral55\00"
@.str.1338 = private unnamed_addr constant [19 x i8] c".compoundliteral55\00"
@.str.1339 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.1340 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.1341 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.1342 = private unnamed_addr constant [8 x i8] c"nt.addr\00"
@.str.1343 = private unnamed_addr constant [11 x i8] c"Class.addr\00"
@.str.1344 = private unnamed_addr constant [11 x i8] c"Class.addr\00"
@.str.1345 = private unnamed_addr constant [19 x i8] c".compoundliteral68\00"
@.str.1346 = private unnamed_addr constant [19 x i8] c".compoundliteral68\00"
@.str.1347 = private unnamed_addr constant [19 x i8] c".compoundliteral72\00"
@.str.1348 = private unnamed_addr constant [19 x i8] c".compoundliteral72\00"
@.str.1349 = private unnamed_addr constant [19 x i8] c".compoundliteral76\00"
@.str.1350 = private unnamed_addr constant [19 x i8] c".compoundliteral76\00"
@.str.1351 = private unnamed_addr constant [19 x i8] c".compoundliteral80\00"
@.str.1352 = private unnamed_addr constant [19 x i8] c".compoundliteral80\00"
@.str.1353 = private unnamed_addr constant [19 x i8] c".compoundliteral84\00"
@.str.1354 = private unnamed_addr constant [19 x i8] c".compoundliteral84\00"
@.str.1355 = private unnamed_addr constant [19 x i8] c".compoundliteral88\00"
@.str.1356 = private unnamed_addr constant [19 x i8] c".compoundliteral88\00"
@.str.1357 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.1358 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.1359 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.1360 = private unnamed_addr constant [8 x i8] c"nt.addr\00"
@.str.1361 = private unnamed_addr constant [11 x i8] c"Class.addr\00"
@.str.1362 = private unnamed_addr constant [11 x i8] c"Class.addr\00"
@.str.1363 = private unnamed_addr constant [20 x i8] c".compoundliteral101\00"
@.str.1364 = private unnamed_addr constant [20 x i8] c".compoundliteral101\00"
@.str.1365 = private unnamed_addr constant [20 x i8] c".compoundliteral105\00"
@.str.1366 = private unnamed_addr constant [20 x i8] c".compoundliteral105\00"
@.str.1367 = private unnamed_addr constant [20 x i8] c".compoundliteral109\00"
@.str.1368 = private unnamed_addr constant [20 x i8] c".compoundliteral109\00"
@.str.1369 = private unnamed_addr constant [20 x i8] c".compoundliteral113\00"
@.str.1370 = private unnamed_addr constant [20 x i8] c".compoundliteral113\00"
@.str.1371 = private unnamed_addr constant [20 x i8] c".compoundliteral117\00"
@.str.1372 = private unnamed_addr constant [20 x i8] c".compoundliteral117\00"
@.str.1373 = private unnamed_addr constant [20 x i8] c".compoundliteral121\00"
@.str.1374 = private unnamed_addr constant [20 x i8] c".compoundliteral121\00"
@.str.1375 = private unnamed_addr constant [20 x i8] c".compoundliteral125\00"
@.str.1376 = private unnamed_addr constant [20 x i8] c".compoundliteral125\00"
@.str.1377 = private unnamed_addr constant [20 x i8] c".compoundliteral129\00"
@.str.1378 = private unnamed_addr constant [20 x i8] c".compoundliteral129\00"
@.str.1379 = private unnamed_addr constant [20 x i8] c".compoundliteral133\00"
@.str.1380 = private unnamed_addr constant [20 x i8] c".compoundliteral133\00"
@.str.1381 = private unnamed_addr constant [20 x i8] c".compoundliteral137\00"
@.str.1382 = private unnamed_addr constant [20 x i8] c".compoundliteral137\00"
@.str.1383 = private unnamed_addr constant [20 x i8] c".compoundliteral141\00"
@.str.1384 = private unnamed_addr constant [20 x i8] c".compoundliteral141\00"
@.str.1385 = private unnamed_addr constant [20 x i8] c".compoundliteral145\00"
@.str.1386 = private unnamed_addr constant [20 x i8] c".compoundliteral145\00"
@.str.1387 = private unnamed_addr constant [20 x i8] c".compoundliteral149\00"
@.str.1388 = private unnamed_addr constant [20 x i8] c".compoundliteral149\00"
@.str.1389 = private unnamed_addr constant [20 x i8] c".compoundliteral153\00"
@.str.1390 = private unnamed_addr constant [20 x i8] c".compoundliteral153\00"
@.str.1391 = private unnamed_addr constant [20 x i8] c".compoundliteral157\00"
@.str.1392 = private unnamed_addr constant [20 x i8] c".compoundliteral157\00"
@.str.1393 = private unnamed_addr constant [20 x i8] c".compoundliteral161\00"
@.str.1394 = private unnamed_addr constant [20 x i8] c".compoundliteral161\00"
@.str.1395 = private unnamed_addr constant [20 x i8] c".compoundliteral165\00"
@.str.1396 = private unnamed_addr constant [20 x i8] c".compoundliteral165\00"
@.str.1397 = private unnamed_addr constant [20 x i8] c".compoundliteral169\00"
@.str.1398 = private unnamed_addr constant [20 x i8] c".compoundliteral169\00"
@.str.1399 = private unnamed_addr constant [20 x i8] c".compoundliteral173\00"
@.str.1400 = private unnamed_addr constant [20 x i8] c".compoundliteral173\00"
@.str.1401 = private unnamed_addr constant [20 x i8] c".compoundliteral177\00"
@.str.1402 = private unnamed_addr constant [20 x i8] c".compoundliteral177\00"
@.str.1403 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.1404 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.1405 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.1406 = private unnamed_addr constant [8 x i8] c"nt.addr\00"
@.str.1407 = private unnamed_addr constant [11 x i8] c"Class.addr\00"
@.str.1408 = private unnamed_addr constant [11 x i8] c"Class.addr\00"
@.str.1409 = private unnamed_addr constant [20 x i8] c".compoundliteral190\00"
@.str.1410 = private unnamed_addr constant [20 x i8] c".compoundliteral190\00"
@.str.1411 = private unnamed_addr constant [20 x i8] c".compoundliteral194\00"
@.str.1412 = private unnamed_addr constant [20 x i8] c".compoundliteral194\00"
@.str.1413 = private unnamed_addr constant [20 x i8] c".compoundliteral198\00"
@.str.1414 = private unnamed_addr constant [20 x i8] c".compoundliteral198\00"
@.str.1415 = private unnamed_addr constant [20 x i8] c".compoundliteral202\00"
@.str.1416 = private unnamed_addr constant [20 x i8] c".compoundliteral202\00"
@.str.1417 = private unnamed_addr constant [20 x i8] c".compoundliteral206\00"
@.str.1418 = private unnamed_addr constant [20 x i8] c".compoundliteral206\00"
@.str.1419 = private unnamed_addr constant [20 x i8] c".compoundliteral210\00"
@.str.1420 = private unnamed_addr constant [20 x i8] c".compoundliteral210\00"
@.str.1421 = private unnamed_addr constant [20 x i8] c".compoundliteral214\00"
@.str.1422 = private unnamed_addr constant [20 x i8] c".compoundliteral214\00"
@.str.1423 = private unnamed_addr constant [20 x i8] c".compoundliteral218\00"
@.str.1424 = private unnamed_addr constant [20 x i8] c".compoundliteral218\00"
@.str.1425 = private unnamed_addr constant [20 x i8] c".compoundliteral222\00"
@.str.1426 = private unnamed_addr constant [20 x i8] c".compoundliteral222\00"
@.str.1427 = private unnamed_addr constant [20 x i8] c".compoundliteral226\00"
@.str.1428 = private unnamed_addr constant [20 x i8] c".compoundliteral226\00"
@.str.1429 = private unnamed_addr constant [20 x i8] c".compoundliteral230\00"
@.str.1430 = private unnamed_addr constant [20 x i8] c".compoundliteral230\00"
@.str.1431 = private unnamed_addr constant [20 x i8] c".compoundliteral234\00"
@.str.1432 = private unnamed_addr constant [20 x i8] c".compoundliteral234\00"
@.str.1433 = private unnamed_addr constant [20 x i8] c".compoundliteral238\00"
@.str.1434 = private unnamed_addr constant [20 x i8] c".compoundliteral238\00"
@.str.1435 = private unnamed_addr constant [20 x i8] c".compoundliteral242\00"
@.str.1436 = private unnamed_addr constant [20 x i8] c".compoundliteral242\00"
@.str.1437 = private unnamed_addr constant [20 x i8] c".compoundliteral246\00"
@.str.1438 = private unnamed_addr constant [20 x i8] c".compoundliteral246\00"
@.str.1439 = private unnamed_addr constant [20 x i8] c".compoundliteral250\00"
@.str.1440 = private unnamed_addr constant [20 x i8] c".compoundliteral250\00"
@.str.1441 = private unnamed_addr constant [20 x i8] c".compoundliteral254\00"
@.str.1442 = private unnamed_addr constant [20 x i8] c".compoundliteral254\00"
@.str.1443 = private unnamed_addr constant [20 x i8] c".compoundliteral258\00"
@.str.1444 = private unnamed_addr constant [20 x i8] c".compoundliteral258\00"
@.str.1445 = private unnamed_addr constant [20 x i8] c".compoundliteral262\00"
@.str.1446 = private unnamed_addr constant [20 x i8] c".compoundliteral262\00"
@.str.1447 = private unnamed_addr constant [20 x i8] c".compoundliteral266\00"
@.str.1448 = private unnamed_addr constant [20 x i8] c".compoundliteral266\00"
@.str.1449 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.1450 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.1451 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.1452 = private unnamed_addr constant [8 x i8] c"nt.addr\00"
@.str.1453 = private unnamed_addr constant [11 x i8] c"Class.addr\00"
@.str.1454 = private unnamed_addr constant [11 x i8] c"Class.addr\00"
@.str.1455 = private unnamed_addr constant [20 x i8] c".compoundliteral279\00"
@.str.1456 = private unnamed_addr constant [20 x i8] c".compoundliteral279\00"
@.str.1457 = private unnamed_addr constant [20 x i8] c".compoundliteral283\00"
@.str.1458 = private unnamed_addr constant [20 x i8] c".compoundliteral283\00"
@.str.1459 = private unnamed_addr constant [20 x i8] c".compoundliteral287\00"
@.str.1460 = private unnamed_addr constant [20 x i8] c".compoundliteral287\00"
@.str.1461 = private unnamed_addr constant [20 x i8] c".compoundliteral291\00"
@.str.1462 = private unnamed_addr constant [20 x i8] c".compoundliteral291\00"
@.str.1463 = private unnamed_addr constant [20 x i8] c".compoundliteral295\00"
@.str.1464 = private unnamed_addr constant [20 x i8] c".compoundliteral295\00"
@.str.1465 = private unnamed_addr constant [20 x i8] c".compoundliteral299\00"
@.str.1466 = private unnamed_addr constant [20 x i8] c".compoundliteral299\00"
@.str.1467 = private unnamed_addr constant [20 x i8] c".compoundliteral303\00"
@.str.1468 = private unnamed_addr constant [20 x i8] c".compoundliteral303\00"
@.str.1469 = private unnamed_addr constant [20 x i8] c".compoundliteral307\00"
@.str.1470 = private unnamed_addr constant [20 x i8] c".compoundliteral307\00"
@.str.1471 = private unnamed_addr constant [20 x i8] c".compoundliteral311\00"
@.str.1472 = private unnamed_addr constant [20 x i8] c".compoundliteral311\00"
@.str.1473 = private unnamed_addr constant [20 x i8] c".compoundliteral315\00"
@.str.1474 = private unnamed_addr constant [20 x i8] c".compoundliteral315\00"
@.str.1475 = private unnamed_addr constant [20 x i8] c".compoundliteral319\00"
@.str.1476 = private unnamed_addr constant [20 x i8] c".compoundliteral319\00"
@.str.1477 = private unnamed_addr constant [20 x i8] c".compoundliteral323\00"
@.str.1478 = private unnamed_addr constant [20 x i8] c".compoundliteral323\00"
@.str.1479 = private unnamed_addr constant [20 x i8] c".compoundliteral327\00"
@.str.1480 = private unnamed_addr constant [20 x i8] c".compoundliteral327\00"
@.str.1481 = private unnamed_addr constant [20 x i8] c".compoundliteral331\00"
@.str.1482 = private unnamed_addr constant [20 x i8] c".compoundliteral331\00"
@.str.1483 = private unnamed_addr constant [20 x i8] c".compoundliteral335\00"
@.str.1484 = private unnamed_addr constant [20 x i8] c".compoundliteral335\00"
@.str.1485 = private unnamed_addr constant [20 x i8] c".compoundliteral339\00"
@.str.1486 = private unnamed_addr constant [20 x i8] c".compoundliteral339\00"
@.str.1487 = private unnamed_addr constant [20 x i8] c".compoundliteral343\00"
@.str.1488 = private unnamed_addr constant [20 x i8] c".compoundliteral343\00"
@.str.1489 = private unnamed_addr constant [20 x i8] c".compoundliteral347\00"
@.str.1490 = private unnamed_addr constant [20 x i8] c".compoundliteral347\00"
@.str.1491 = private unnamed_addr constant [20 x i8] c".compoundliteral351\00"
@.str.1492 = private unnamed_addr constant [20 x i8] c".compoundliteral351\00"
@.str.1493 = private unnamed_addr constant [20 x i8] c".compoundliteral355\00"
@.str.1494 = private unnamed_addr constant [20 x i8] c".compoundliteral355\00"
@.str.1495 = private unnamed_addr constant [20 x i8] c".compoundliteral359\00"
@.str.1496 = private unnamed_addr constant [20 x i8] c".compoundliteral359\00"
@.str.1497 = private unnamed_addr constant [20 x i8] c".compoundliteral363\00"
@.str.1498 = private unnamed_addr constant [20 x i8] c".compoundliteral363\00"
@.str.1499 = private unnamed_addr constant [20 x i8] c".compoundliteral367\00"
@.str.1500 = private unnamed_addr constant [20 x i8] c".compoundliteral367\00"
@.str.1501 = private unnamed_addr constant [20 x i8] c".compoundliteral371\00"
@.str.1502 = private unnamed_addr constant [20 x i8] c".compoundliteral371\00"
@.str.1503 = private unnamed_addr constant [20 x i8] c".compoundliteral375\00"
@.str.1504 = private unnamed_addr constant [20 x i8] c".compoundliteral375\00"
@.str.1505 = private unnamed_addr constant [8 x i8] c"d1.addr\00"
@.str.1506 = private unnamed_addr constant [8 x i8] c"d2.addr\00"
@.str.1507 = private unnamed_addr constant [8 x i8] c"d3.addr\00"
@.str.1508 = private unnamed_addr constant [8 x i8] c"nt.addr\00"
@.str.1509 = private unnamed_addr constant [11 x i8] c"Class.addr\00"
@.str.1510 = private unnamed_addr constant [11 x i8] c"Class.addr\00"
@.str.1511 = private unnamed_addr constant [20 x i8] c".compoundliteral388\00"
@.str.1512 = private unnamed_addr constant [20 x i8] c".compoundliteral388\00"
@.str.1513 = private unnamed_addr constant [20 x i8] c".compoundliteral392\00"
@.str.1514 = private unnamed_addr constant [20 x i8] c".compoundliteral392\00"
@.str.1515 = private unnamed_addr constant [20 x i8] c".compoundliteral396\00"
@.str.1516 = private unnamed_addr constant [20 x i8] c".compoundliteral396\00"
@.str.1517 = private unnamed_addr constant [20 x i8] c".compoundliteral400\00"
@.str.1518 = private unnamed_addr constant [20 x i8] c".compoundliteral400\00"
@.str.1519 = private unnamed_addr constant [20 x i8] c".compoundliteral404\00"
@.str.1520 = private unnamed_addr constant [20 x i8] c".compoundliteral404\00"
@.str.1521 = private unnamed_addr constant [20 x i8] c".compoundliteral408\00"
@.str.1522 = private unnamed_addr constant [20 x i8] c".compoundliteral408\00"
@.str.1523 = private unnamed_addr constant [20 x i8] c".compoundliteral412\00"
@.str.1524 = private unnamed_addr constant [20 x i8] c".compoundliteral412\00"
@.str.1525 = private unnamed_addr constant [20 x i8] c".compoundliteral416\00"
@.str.1526 = private unnamed_addr constant [20 x i8] c".compoundliteral416\00"
@.str.1527 = private unnamed_addr constant [20 x i8] c".compoundliteral420\00"
@.str.1528 = private unnamed_addr constant [20 x i8] c".compoundliteral420\00"
@.str.1529 = private unnamed_addr constant [20 x i8] c".compoundliteral424\00"
@.str.1530 = private unnamed_addr constant [20 x i8] c".compoundliteral424\00"
@.str.1531 = private unnamed_addr constant [20 x i8] c".compoundliteral428\00"
@.str.1532 = private unnamed_addr constant [20 x i8] c".compoundliteral428\00"
@.str.1533 = private unnamed_addr constant [20 x i8] c".compoundliteral432\00"
@.str.1534 = private unnamed_addr constant [20 x i8] c".compoundliteral432\00"
@.str.1535 = private unnamed_addr constant [20 x i8] c".compoundliteral436\00"
@.str.1536 = private unnamed_addr constant [20 x i8] c".compoundliteral436\00"
@.str.1537 = private unnamed_addr constant [20 x i8] c".compoundliteral440\00"
@.str.1538 = private unnamed_addr constant [20 x i8] c".compoundliteral440\00"
@.str.1539 = private unnamed_addr constant [20 x i8] c".compoundliteral444\00"
@.str.1540 = private unnamed_addr constant [20 x i8] c".compoundliteral444\00"
@.str.1541 = private unnamed_addr constant [20 x i8] c".compoundliteral448\00"
@.str.1542 = private unnamed_addr constant [20 x i8] c".compoundliteral448\00"
@.str.1543 = private unnamed_addr constant [20 x i8] c".compoundliteral452\00"
@.str.1544 = private unnamed_addr constant [20 x i8] c".compoundliteral452\00"
@.str.1545 = private unnamed_addr constant [20 x i8] c".compoundliteral456\00"
@.str.1546 = private unnamed_addr constant [20 x i8] c".compoundliteral456\00"
@.str.1547 = private unnamed_addr constant [20 x i8] c".compoundliteral460\00"
@.str.1548 = private unnamed_addr constant [20 x i8] c".compoundliteral460\00"
@.str.1549 = private unnamed_addr constant [20 x i8] c".compoundliteral464\00"
@.str.1550 = private unnamed_addr constant [20 x i8] c".compoundliteral464\00"
@.str.1551 = private unnamed_addr constant [20 x i8] c".compoundliteral468\00"
@.str.1552 = private unnamed_addr constant [20 x i8] c".compoundliteral468\00"
@.str.1553 = private unnamed_addr constant [20 x i8] c".compoundliteral472\00"
@.str.1554 = private unnamed_addr constant [20 x i8] c".compoundliteral472\00"
@.str.1555 = private unnamed_addr constant [20 x i8] c".compoundliteral476\00"
@.str.1556 = private unnamed_addr constant [20 x i8] c".compoundliteral476\00"
@.str.1557 = private unnamed_addr constant [20 x i8] c".compoundliteral480\00"
@.str.1558 = private unnamed_addr constant [20 x i8] c".compoundliteral480\00"
@.str.1559 = private unnamed_addr constant [20 x i8] c".compoundliteral484\00"
@.str.1560 = private unnamed_addr constant [20 x i8] c".compoundliteral484\00"
@.str.1561 = private unnamed_addr constant [11 x i8] c"Class.addr\00"
@.str.1562 = private unnamed_addr constant [11 x i8] c"Class.addr\00"
@.str.1563 = private unnamed_addr constant [14 x i8] c"verified.addr\00"
@.str.1564 = private unnamed_addr constant [14 x i8] c"verified.addr\00"
@.str.1565 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1566 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1567 = private unnamed_addr constant [8 x i8] c"nt.addr\00"
@.str.1568 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1569 = private unnamed_addr constant [5 x i8] c"sums\00"
@.str.1570 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1571 = private unnamed_addr constant [9 x i8] c"csum_ref\00"
@.str.1572 = private unnamed_addr constant [20 x i8] c".compoundliteral498\00"
@.str.1573 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1574 = private unnamed_addr constant [5 x i8] c"sums\00"
@.str.1575 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1576 = private unnamed_addr constant [9 x i8] c"csum_ref\00"
@.str.1577 = private unnamed_addr constant [20 x i8] c".compoundliteral498\00"
@.str.1578 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1579 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1580 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1581 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1582 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1583 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1584 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1585 = private unnamed_addr constant [7 x i8] c"coerce\00"
@.str.1586 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1587 = private unnamed_addr constant [5 x i8] c"sums\00"
@.str.1588 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1589 = private unnamed_addr constant [9 x i8] c"csum_ref\00"
@.str.1590 = private unnamed_addr constant [20 x i8] c".compoundliteral516\00"
@.str.1591 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1592 = private unnamed_addr constant [5 x i8] c"sums\00"
@.str.1593 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1594 = private unnamed_addr constant [9 x i8] c"csum_ref\00"
@.str.1595 = private unnamed_addr constant [20 x i8] c".compoundliteral516\00"
@.str.1596 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1597 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1598 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1599 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1600 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1601 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1602 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1603 = private unnamed_addr constant [10 x i8] c"coerce536\00"
@.str.1604 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1605 = private unnamed_addr constant [5 x i8] c"sums\00"
@.str.1606 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1607 = private unnamed_addr constant [9 x i8] c"csum_ref\00"
@.str.1608 = private unnamed_addr constant [20 x i8] c".compoundliteral538\00"
@.str.1609 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1610 = private unnamed_addr constant [5 x i8] c"sums\00"
@.str.1611 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1612 = private unnamed_addr constant [9 x i8] c"csum_ref\00"
@.str.1613 = private unnamed_addr constant [20 x i8] c".compoundliteral538\00"
@.str.1614 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1615 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1616 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1617 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1618 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1619 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1620 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1621 = private unnamed_addr constant [10 x i8] c"coerce558\00"
@.str.1622 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1623 = private unnamed_addr constant [5 x i8] c"sums\00"
@.str.1624 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1625 = private unnamed_addr constant [9 x i8] c"csum_ref\00"
@.str.1626 = private unnamed_addr constant [20 x i8] c".compoundliteral560\00"
@.str.1627 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1628 = private unnamed_addr constant [5 x i8] c"sums\00"
@.str.1629 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1630 = private unnamed_addr constant [9 x i8] c"csum_ref\00"
@.str.1631 = private unnamed_addr constant [20 x i8] c".compoundliteral560\00"
@.str.1632 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1633 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1634 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1635 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1636 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1637 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1638 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1639 = private unnamed_addr constant [10 x i8] c"coerce580\00"
@.str.1640 = private unnamed_addr constant [4 x i8] c"err\00"
@.str.1641 = private unnamed_addr constant [4 x i8] c"err\00"
@.str.1642 = private unnamed_addr constant [8 x i8] c"epsilon\00"
@.str.1643 = private unnamed_addr constant [14 x i8] c"verified.addr\00"
@.str.1644 = private unnamed_addr constant [14 x i8] c"verified.addr\00"
@.str.1645 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1646 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1647 = private unnamed_addr constant [11 x i8] c"Class.addr\00"
@.str.1648 = private unnamed_addr constant [11 x i8] c"Class.addr\00"
@.str.1649 = private unnamed_addr constant [14 x i8] c"verified.addr\00"
@.str.1650 = private unnamed_addr constant [14 x i8] c"verified.addr\00"
@.str.1651 = private unnamed_addr constant [11 x i8] c"Class.addr\00"
@.str.1652 = private unnamed_addr constant [11 x i8] c"Class.addr\00"
@.str.1653 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1654 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1655 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1656 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1657 = private unnamed_addr constant [3 x i8] c"z1\00"
@.str.1658 = private unnamed_addr constant [2 x i8] c"a\00"
@.str.1659 = private unnamed_addr constant [3 x i8] c"z1\00"
@.str.1660 = private unnamed_addr constant [2 x i8] c"b\00"
@.str.1661 = private unnamed_addr constant [3 x i8] c"z2\00"
@.str.1662 = private unnamed_addr constant [2 x i8] c"c\00"
@.str.1663 = private unnamed_addr constant [3 x i8] c"z2\00"
@.str.1664 = private unnamed_addr constant [2 x i8] c"d\00"
@.str.1665 = private unnamed_addr constant [2 x i8] c"c\00"
@.str.1666 = private unnamed_addr constant [2 x i8] c"c\00"
@.str.1667 = private unnamed_addr constant [2 x i8] c"d\00"
@.str.1668 = private unnamed_addr constant [2 x i8] c"d\00"
@.str.1669 = private unnamed_addr constant [8 x i8] c"divisor\00"
@.str.1670 = private unnamed_addr constant [2 x i8] c"a\00"
@.str.1671 = private unnamed_addr constant [2 x i8] c"c\00"
@.str.1672 = private unnamed_addr constant [2 x i8] c"b\00"
@.str.1673 = private unnamed_addr constant [2 x i8] c"d\00"
@.str.1674 = private unnamed_addr constant [8 x i8] c"divisor\00"
@.str.1675 = private unnamed_addr constant [6 x i8] c"real4\00"
@.str.1676 = private unnamed_addr constant [2 x i8] c"b\00"
@.str.1677 = private unnamed_addr constant [2 x i8] c"c\00"
@.str.1678 = private unnamed_addr constant [2 x i8] c"a\00"
@.str.1679 = private unnamed_addr constant [2 x i8] c"d\00"
@.str.1680 = private unnamed_addr constant [8 x i8] c"divisor\00"
@.str.1681 = private unnamed_addr constant [6 x i8] c"imag8\00"
@.str.1682 = private unnamed_addr constant [6 x i8] c"real4\00"
@.str.1683 = private unnamed_addr constant [7 x i8] c"result\00"
@.str.1684 = private unnamed_addr constant [6 x i8] c"imag8\00"
@.str.1685 = private unnamed_addr constant [7 x i8] c"result\00"
@.str.1686 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1687 = private unnamed_addr constant [9 x i8] c"tstrings\00"
@.str.1688 = private unnamed_addr constant [9 x i8] c"tstrings\00"
@.str.1689 = private unnamed_addr constant [9 x i8] c"tstrings\00"
@.str.1690 = private unnamed_addr constant [9 x i8] c"tstrings\00"
@.str.1691 = private unnamed_addr constant [9 x i8] c"tstrings\00"
@.str.1692 = private unnamed_addr constant [9 x i8] c"tstrings\00"
@.str.1693 = private unnamed_addr constant [9 x i8] c"tstrings\00"
@.str.1694 = private unnamed_addr constant [9 x i8] c"tstrings\00"
@.str.1695 = private unnamed_addr constant [4 x i8] c"t_m\00"
@.str.1696 = private unnamed_addr constant [4 x i8] c"t_m\00"
@.str.1697 = private unnamed_addr constant [4 x i8] c"t_m\00"
@.str.1698 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1699 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1700 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1701 = private unnamed_addr constant [2 x i8] c"t\00"
@.str.1702 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1703 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1704 = private unnamed_addr constant [9 x i8] c"tstrings\00"
@.str.1705 = private unnamed_addr constant [2 x i8] c"t\00"
@.str.1706 = private unnamed_addr constant [2 x i8] c"t\00"
@.str.1707 = private unnamed_addr constant [4 x i8] c"t_m\00"
@.str.1708 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1709 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1710 = private unnamed_addr constant [10 x i8] c"name.addr\00"
@.str.1711 = private unnamed_addr constant [11 x i8] c"class.addr\00"
@.str.1712 = private unnamed_addr constant [8 x i8] c"n1.addr\00"
@.str.1713 = private unnamed_addr constant [8 x i8] c"n2.addr\00"
@.str.1714 = private unnamed_addr constant [8 x i8] c"n3.addr\00"
@.str.1715 = private unnamed_addr constant [11 x i8] c"niter.addr\00"
@.str.1716 = private unnamed_addr constant [7 x i8] c"t.addr\00"
@.str.1717 = private unnamed_addr constant [10 x i8] c"mops.addr\00"
@.str.1718 = private unnamed_addr constant [12 x i8] c"optype.addr\00"
@.str.1719 = private unnamed_addr constant [14 x i8] c"verified.addr\00"
@.str.1720 = private unnamed_addr constant [16 x i8] c"npbversion.addr\00"
@.str.1721 = private unnamed_addr constant [17 x i8] c"compiletime.addr\00"
@.str.1722 = private unnamed_addr constant [9 x i8] c"cs1.addr\00"
@.str.1723 = private unnamed_addr constant [9 x i8] c"cs2.addr\00"
@.str.1724 = private unnamed_addr constant [9 x i8] c"cs3.addr\00"
@.str.1725 = private unnamed_addr constant [9 x i8] c"cs4.addr\00"
@.str.1726 = private unnamed_addr constant [9 x i8] c"cs5.addr\00"
@.str.1727 = private unnamed_addr constant [9 x i8] c"cs6.addr\00"
@.str.1728 = private unnamed_addr constant [9 x i8] c"cs7.addr\00"
@.str.1729 = private unnamed_addr constant [12 x i8] c"max_threads\00"
@.str.1730 = private unnamed_addr constant [12 x i8] c"num_threads\00"
@.str.1731 = private unnamed_addr constant [12 x i8] c"max_threads\00"
@.str.1732 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1733 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.1734 = private unnamed_addr constant [142 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common/print_results.c: print_results :: line No: 10\00"
@.str.1735 = private unnamed_addr constant [10 x i8] c"name.addr\00"
@.str.1736 = private unnamed_addr constant [11 x i8] c"class.addr\00"
@.str.1737 = private unnamed_addr constant [8 x i8] c"n2.addr\00"
@.str.1738 = private unnamed_addr constant [8 x i8] c"n3.addr\00"
@.str.1739 = private unnamed_addr constant [10 x i8] c"name.addr\00"
@.str.1740 = private unnamed_addr constant [10 x i8] c"name.addr\00"
@.str.1741 = private unnamed_addr constant [10 x i8] c"name.addr\00"
@.str.1742 = private unnamed_addr constant [10 x i8] c"name.addr\00"
@.str.1743 = private unnamed_addr constant [8 x i8] c"n1.addr\00"
@.str.1744 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.1745 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.1746 = private unnamed_addr constant [5 x i8] c"size\00"
@.str.1747 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.1748 = private unnamed_addr constant [5 x i8] c"size\00"
@.str.1749 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.1750 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.1751 = private unnamed_addr constant [2 x i8] c"j\00"
@.str.1752 = private unnamed_addr constant [5 x i8] c"size\00"
@.str.1753 = private unnamed_addr constant [8 x i8] c"n1.addr\00"
@.str.1754 = private unnamed_addr constant [8 x i8] c"n1.addr\00"
@.str.1755 = private unnamed_addr constant [8 x i8] c"n2.addr\00"
@.str.1756 = private unnamed_addr constant [8 x i8] c"n3.addr\00"
@.str.1757 = private unnamed_addr constant [11 x i8] c"niter.addr\00"
@.str.1758 = private unnamed_addr constant [7 x i8] c"t.addr\00"
@.str.1759 = private unnamed_addr constant [12 x i8] c"num_threads\00"
@.str.1760 = private unnamed_addr constant [12 x i8] c"max_threads\00"
@.str.1761 = private unnamed_addr constant [12 x i8] c"num_threads\00"
@.str.1762 = private unnamed_addr constant [12 x i8] c"max_threads\00"
@.str.1763 = private unnamed_addr constant [10 x i8] c"mops.addr\00"
@.str.1764 = private unnamed_addr constant [10 x i8] c"mops.addr\00"
@.str.1765 = private unnamed_addr constant [12 x i8] c"num_threads\00"
@.str.1766 = private unnamed_addr constant [12 x i8] c"optype.addr\00"
@.str.1767 = private unnamed_addr constant [14 x i8] c"verified.addr\00"
@.str.1768 = private unnamed_addr constant [16 x i8] c"npbversion.addr\00"
@.str.1769 = private unnamed_addr constant [17 x i8] c"compiletime.addr\00"
@.str.1770 = private unnamed_addr constant [9 x i8] c"cs1.addr\00"
@.str.1771 = private unnamed_addr constant [9 x i8] c"cs2.addr\00"
@.str.1772 = private unnamed_addr constant [9 x i8] c"cs3.addr\00"
@.str.1773 = private unnamed_addr constant [9 x i8] c"cs4.addr\00"
@.str.1774 = private unnamed_addr constant [9 x i8] c"cs5.addr\00"
@.str.1775 = private unnamed_addr constant [9 x i8] c"cs6.addr\00"
@.str.1776 = private unnamed_addr constant [9 x i8] c"cs7.addr\00"
@.str.1777 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.1778 = private unnamed_addr constant [146 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common/print_results.c: .omp_outlined..10 :: line No: 26\00"
@.str.1779 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.1780 = private unnamed_addr constant [17 x i8] c".bound_tid..addr\00"
@.str.1781 = private unnamed_addr constant [17 x i8] c"num_threads.addr\00"
@.str.1782 = private unnamed_addr constant [17 x i8] c"num_threads.addr\00"
@.str.1783 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1784 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.1785 = private unnamed_addr constant [18 x i8] c".global_tid..addr\00"
@.str.1786 = private unnamed_addr constant [12 x i8] c"Main Thread\00"
@.str.1787 = private unnamed_addr constant [146 x i8] c"/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common/print_results.c: .omp_outlined..10 :: line No: 26\00"
@.str.1788 = private unnamed_addr constant [17 x i8] c"num_threads.addr\00"
@.str.1789 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.1790 = private unnamed_addr constant [7 x i8] c"a.addr\00"
@.str.1791 = private unnamed_addr constant [4 x i8] c"r23\00"
@.str.1792 = private unnamed_addr constant [4 x i8] c"r46\00"
@.str.1793 = private unnamed_addr constant [4 x i8] c"t23\00"
@.str.1794 = private unnamed_addr constant [4 x i8] c"t46\00"
@.str.1795 = private unnamed_addr constant [7 x i8] c"a.addr\00"
@.str.1796 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.1797 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.1798 = private unnamed_addr constant [3 x i8] c"a1\00"
@.str.1799 = private unnamed_addr constant [7 x i8] c"a.addr\00"
@.str.1800 = private unnamed_addr constant [3 x i8] c"a1\00"
@.str.1801 = private unnamed_addr constant [3 x i8] c"a2\00"
@.str.1802 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.1803 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.1804 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.1805 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.1806 = private unnamed_addr constant [3 x i8] c"x1\00"
@.str.1807 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.1808 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.1809 = private unnamed_addr constant [3 x i8] c"x1\00"
@.str.1810 = private unnamed_addr constant [3 x i8] c"x2\00"
@.str.1811 = private unnamed_addr constant [3 x i8] c"a1\00"
@.str.1812 = private unnamed_addr constant [3 x i8] c"x2\00"
@.str.1813 = private unnamed_addr constant [3 x i8] c"a2\00"
@.str.1814 = private unnamed_addr constant [3 x i8] c"x1\00"
@.str.1815 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.1816 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.1817 = private unnamed_addr constant [3 x i8] c"t2\00"
@.str.1818 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.1819 = private unnamed_addr constant [3 x i8] c"t2\00"
@.str.1820 = private unnamed_addr constant [2 x i8] c"z\00"
@.str.1821 = private unnamed_addr constant [2 x i8] c"z\00"
@.str.1822 = private unnamed_addr constant [3 x i8] c"a2\00"
@.str.1823 = private unnamed_addr constant [3 x i8] c"x2\00"
@.str.1824 = private unnamed_addr constant [3 x i8] c"t3\00"
@.str.1825 = private unnamed_addr constant [3 x i8] c"t3\00"
@.str.1826 = private unnamed_addr constant [3 x i8] c"t4\00"
@.str.1827 = private unnamed_addr constant [3 x i8] c"t3\00"
@.str.1828 = private unnamed_addr constant [3 x i8] c"t4\00"
@.str.1829 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.1830 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.1831 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.1832 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.1833 = private unnamed_addr constant [2 x i8] c"r\00"
@.str.1834 = private unnamed_addr constant [2 x i8] c"r\00"
@.str.1835 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.1836 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.1837 = private unnamed_addr constant [7 x i8] c"a.addr\00"
@.str.1838 = private unnamed_addr constant [7 x i8] c"y.addr\00"
@.str.1839 = private unnamed_addr constant [4 x i8] c"r23\00"
@.str.1840 = private unnamed_addr constant [4 x i8] c"r46\00"
@.str.1841 = private unnamed_addr constant [4 x i8] c"t23\00"
@.str.1842 = private unnamed_addr constant [4 x i8] c"t46\00"
@.str.1843 = private unnamed_addr constant [7 x i8] c"a.addr\00"
@.str.1844 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.1845 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.1846 = private unnamed_addr constant [3 x i8] c"a1\00"
@.str.1847 = private unnamed_addr constant [7 x i8] c"a.addr\00"
@.str.1848 = private unnamed_addr constant [3 x i8] c"a1\00"
@.str.1849 = private unnamed_addr constant [3 x i8] c"a2\00"
@.str.1850 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1851 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1852 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.1853 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.1854 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.1855 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.1856 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.1857 = private unnamed_addr constant [3 x i8] c"x1\00"
@.str.1858 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.1859 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.1860 = private unnamed_addr constant [3 x i8] c"x1\00"
@.str.1861 = private unnamed_addr constant [3 x i8] c"x2\00"
@.str.1862 = private unnamed_addr constant [3 x i8] c"a1\00"
@.str.1863 = private unnamed_addr constant [3 x i8] c"x2\00"
@.str.1864 = private unnamed_addr constant [3 x i8] c"a2\00"
@.str.1865 = private unnamed_addr constant [3 x i8] c"x1\00"
@.str.1866 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.1867 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.1868 = private unnamed_addr constant [3 x i8] c"t2\00"
@.str.1869 = private unnamed_addr constant [3 x i8] c"t1\00"
@.str.1870 = private unnamed_addr constant [3 x i8] c"t2\00"
@.str.1871 = private unnamed_addr constant [2 x i8] c"z\00"
@.str.1872 = private unnamed_addr constant [2 x i8] c"z\00"
@.str.1873 = private unnamed_addr constant [3 x i8] c"a2\00"
@.str.1874 = private unnamed_addr constant [3 x i8] c"x2\00"
@.str.1875 = private unnamed_addr constant [3 x i8] c"t3\00"
@.str.1876 = private unnamed_addr constant [3 x i8] c"t3\00"
@.str.1877 = private unnamed_addr constant [3 x i8] c"t4\00"
@.str.1878 = private unnamed_addr constant [3 x i8] c"t3\00"
@.str.1879 = private unnamed_addr constant [3 x i8] c"t4\00"
@.str.1880 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.1881 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.1882 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.1883 = private unnamed_addr constant [7 x i8] c"x.addr\00"
@.str.1884 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1885 = private unnamed_addr constant [7 x i8] c"y.addr\00"
@.str.1886 = private unnamed_addr constant [7 x i8] c"y.addr\00"
@.str.1887 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1888 = private unnamed_addr constant [2 x i8] c"i\00"
@.str.1889 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.1890 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.1891 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1892 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.1893 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1894 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.1895 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.1896 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1897 = private unnamed_addr constant [2 x i8] c"t\00"
@.str.1898 = private unnamed_addr constant [2 x i8] c"t\00"
@.str.1899 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.1900 = private unnamed_addr constant [4 x i8] c"now\00"
@.str.1901 = private unnamed_addr constant [4 x i8] c"now\00"
@.str.1902 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.1903 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1904 = private unnamed_addr constant [2 x i8] c"t\00"
@.str.1905 = private unnamed_addr constant [2 x i8] c"t\00"
@.str.1906 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.1907 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1908 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1909 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.1910 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1911 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1912 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.1913 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.1914 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1915 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.1916 = private unnamed_addr constant [7 x i8] c"n.addr\00"
@.str.1917 = private unnamed_addr constant [20 x i8] c"NO VARNAME ATTACHED\00"
@.str.1918 = private unnamed_addr constant [7 x i8] c"t.addr\00"
@.str.1919 = private unnamed_addr constant [11 x i8] c"wtime_.sec\00"
@.str.1920 = private unnamed_addr constant [3 x i8] c"tv\00"
@.str.1921 = private unnamed_addr constant [11 x i8] c"wtime_.sec\00"
@.str.1922 = private unnamed_addr constant [3 x i8] c"tv\00"
@.str.1923 = private unnamed_addr constant [11 x i8] c"wtime_.sec\00"
@.str.1924 = private unnamed_addr constant [3 x i8] c"tv\00"
@.str.1925 = private unnamed_addr constant [7 x i8] c"t.addr\00"
@.str.1926 = private unnamed_addr constant [7 x i8] c"t.addr\00"

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 !dbg !91 {
entry:
  call void @__DiscoPoPOpenMPInitialize()
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %i = alloca i32, align 4
  %iter = alloca i32, align 4
  %total_time = alloca double, align 8
  %mflops = alloca double, align 8
  %verified = alloca i32, align 4
  %Class = alloca i8, align 1
  store i32 0, i32* %retval, align 4
  %0 = ptrtoint i32* %argc.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.29, i32 0, i32 0))
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !97, metadata !98), !dbg !99
  %1 = ptrtoint i8*** %argv.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.30, i32 0, i32 0))
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !100, metadata !98), !dbg !101
  call void @llvm.dbg.declare(metadata i32* %i, metadata !102, metadata !98), !dbg !103
  call void @llvm.dbg.declare(metadata i32* %iter, metadata !104, metadata !98), !dbg !105
  call void @llvm.dbg.declare(metadata double* %total_time, metadata !106, metadata !98), !dbg !107
  call void @llvm.dbg.declare(metadata double* %mflops, metadata !108, metadata !98), !dbg !109
  call void @llvm.dbg.declare(metadata i32* %verified, metadata !110, metadata !98), !dbg !111
  call void @llvm.dbg.declare(metadata i8* %Class, metadata !112, metadata !98), !dbg !113
  %2 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.31, i32 0, i32 0))
  store i32 1, i32* %i, align 4, !dbg !114
  br label %for.cond, !dbg !116

for.cond:                                         ; preds = %for.inc, %entry
  %3 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %3, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i32 0, i32 0))
  %4 = load i32, i32* %i, align 4, !dbg !117
  %cmp = icmp sle i32 %4, 8, !dbg !120
  br i1 %cmp, label %for.body, label %for.end, !dbg !121

for.body:                                         ; preds = %for.cond
  %5 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %5, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.37, i32 0, i32 0))
  %6 = load i32, i32* %i, align 4, !dbg !122
  call void @timer_clear(i32 %6), !dbg !124
  br label %for.inc, !dbg !125

for.inc:                                          ; preds = %for.body
  %7 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %7, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i32 0, i32 0))
  %8 = load i32, i32* %i, align 4, !dbg !126
  %inc = add nsw i32 %8, 1, !dbg !126
  %9 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.39, i32 0, i32 0))
  store i32 %inc, i32* %i, align 4, !dbg !126
  br label %for.cond, !dbg !128

for.end:                                          ; preds = %for.cond
  call void @setup(), !dbg !129
  %10 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 0) to i64
  call void @__DiscoPoPOpenMPRead(i64 %10, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.40, i32 0, i32 0))
  %11 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 0), align 4, !dbg !130
  %12 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 1) to i64
  call void @__DiscoPoPOpenMPRead(i64 %12, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.41, i32 0, i32 0))
  %13 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 1), align 4, !dbg !131
  %14 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2) to i64
  call void @__DiscoPoPOpenMPRead(i64 %14, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.42, i32 0, i32 0))
  %15 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2), align 4, !dbg !132
  call void @init_ui(i8* bitcast ([266240 x %struct.dcomplex]* @u0 to i8*), i8* bitcast ([266240 x %struct.dcomplex]* @u1 to i8*), i8* bitcast ([266240 x double]* @twiddle to i8*), i32 %11, i32 %13, i32 %15), !dbg !133
  %16 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 0) to i64
  call void @__DiscoPoPOpenMPRead(i64 %16, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.43, i32 0, i32 0))
  %17 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 0), align 4, !dbg !134
  %18 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 1) to i64
  call void @__DiscoPoPOpenMPRead(i64 %18, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.44, i32 0, i32 0))
  %19 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 1), align 4, !dbg !135
  %20 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2) to i64
  call void @__DiscoPoPOpenMPRead(i64 %20, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.45, i32 0, i32 0))
  %21 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2), align 4, !dbg !136
  call void @compute_indexmap(i8* bitcast ([266240 x double]* @twiddle to i8*), i32 %17, i32 %19, i32 %21), !dbg !137
  %22 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 0) to i64
  call void @__DiscoPoPOpenMPRead(i64 %22, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.46, i32 0, i32 0))
  %23 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 0), align 4, !dbg !138
  %24 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 1) to i64
  call void @__DiscoPoPOpenMPRead(i64 %24, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.47, i32 0, i32 0))
  %25 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 1), align 4, !dbg !139
  %26 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2) to i64
  call void @__DiscoPoPOpenMPRead(i64 %26, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.48, i32 0, i32 0))
  %27 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2), align 4, !dbg !140
  call void @compute_initial_conditions(i8* bitcast ([266240 x %struct.dcomplex]* @u1 to i8*), i32 %23, i32 %25, i32 %27), !dbg !141
  %28 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 0) to i64
  call void @__DiscoPoPOpenMPRead(i64 %28, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.49, i32 0, i32 0))
  %29 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 0), align 4, !dbg !142
  call void @fft_init(i32 %29), !dbg !143
  call void @fft(i32 1, %struct.dcomplex* getelementptr inbounds ([266240 x %struct.dcomplex], [266240 x %struct.dcomplex]* @u1, i32 0, i32 0), %struct.dcomplex* getelementptr inbounds ([266240 x %struct.dcomplex], [266240 x %struct.dcomplex]* @u0, i32 0, i32 0)), !dbg !144
  %30 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %30, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.50, i32 0, i32 0))
  store i32 1, i32* %i, align 4, !dbg !145
  br label %for.cond1, !dbg !147

for.cond1:                                        ; preds = %for.inc4, %for.end
  %31 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %31, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.51, i32 0, i32 0))
  %32 = load i32, i32* %i, align 4, !dbg !148
  %cmp2 = icmp sle i32 %32, 8, !dbg !151
  br i1 %cmp2, label %for.body3, label %for.end6, !dbg !152

for.body3:                                        ; preds = %for.cond1
  %33 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %33, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.52, i32 0, i32 0))
  %34 = load i32, i32* %i, align 4, !dbg !153
  call void @timer_clear(i32 %34), !dbg !155
  br label %for.inc4, !dbg !156

for.inc4:                                         ; preds = %for.body3
  %35 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %35, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.53, i32 0, i32 0))
  %36 = load i32, i32* %i, align 4, !dbg !157
  %inc5 = add nsw i32 %36, 1, !dbg !157
  %37 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %37, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.54, i32 0, i32 0))
  store i32 %inc5, i32* %i, align 4, !dbg !157
  br label %for.cond1, !dbg !159

for.end6:                                         ; preds = %for.cond1
  call void @timer_start(i32 1), !dbg !160
  %38 = ptrtoint i32* @timers_enabled to i64
  call void @__DiscoPoPOpenMPRead(i64 %38, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.55, i32 0, i32 0))
  %39 = load i32, i32* @timers_enabled, align 4, !dbg !161
  %tobool = icmp ne i32 %39, 0, !dbg !161
  br i1 %tobool, label %if.then, label %if.end, !dbg !163

if.then:                                          ; preds = %for.end6
  call void @timer_start(i32 2), !dbg !164
  br label %if.end, !dbg !164

if.end:                                           ; preds = %if.then, %for.end6
  %40 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 0) to i64
  call void @__DiscoPoPOpenMPRead(i64 %40, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.56, i32 0, i32 0))
  %41 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 0), align 4, !dbg !166
  %42 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 1) to i64
  call void @__DiscoPoPOpenMPRead(i64 %42, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.57, i32 0, i32 0))
  %43 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 1), align 4, !dbg !167
  %44 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2) to i64
  call void @__DiscoPoPOpenMPRead(i64 %44, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.58, i32 0, i32 0))
  %45 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2), align 4, !dbg !168
  call void @compute_indexmap(i8* bitcast ([266240 x double]* @twiddle to i8*), i32 %41, i32 %43, i32 %45), !dbg !169
  %46 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 0) to i64
  call void @__DiscoPoPOpenMPRead(i64 %46, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.59, i32 0, i32 0))
  %47 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 0), align 4, !dbg !170
  %48 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 1) to i64
  call void @__DiscoPoPOpenMPRead(i64 %48, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.60, i32 0, i32 0))
  %49 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 1), align 4, !dbg !171
  %50 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2) to i64
  call void @__DiscoPoPOpenMPRead(i64 %50, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.61, i32 0, i32 0))
  %51 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2), align 4, !dbg !172
  call void @compute_initial_conditions(i8* bitcast ([266240 x %struct.dcomplex]* @u1 to i8*), i32 %47, i32 %49, i32 %51), !dbg !173
  %52 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 0) to i64
  call void @__DiscoPoPOpenMPRead(i64 %52, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.62, i32 0, i32 0))
  %53 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 0), align 4, !dbg !174
  call void @fft_init(i32 %53), !dbg !175
  %54 = ptrtoint i32* @timers_enabled to i64
  call void @__DiscoPoPOpenMPRead(i64 %54, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.63, i32 0, i32 0))
  %55 = load i32, i32* @timers_enabled, align 4, !dbg !176
  %tobool7 = icmp ne i32 %55, 0, !dbg !176
  br i1 %tobool7, label %if.then8, label %if.end9, !dbg !178

if.then8:                                         ; preds = %if.end
  call void @timer_stop(i32 2), !dbg !179
  br label %if.end9, !dbg !179

if.end9:                                          ; preds = %if.then8, %if.end
  %56 = ptrtoint i32* @timers_enabled to i64
  call void @__DiscoPoPOpenMPRead(i64 %56, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.64, i32 0, i32 0))
  %57 = load i32, i32* @timers_enabled, align 4, !dbg !181
  %tobool10 = icmp ne i32 %57, 0, !dbg !181
  br i1 %tobool10, label %if.then11, label %if.end12, !dbg !183

if.then11:                                        ; preds = %if.end9
  call void @timer_start(i32 3), !dbg !184
  br label %if.end12, !dbg !184

if.end12:                                         ; preds = %if.then11, %if.end9
  call void @fft(i32 1, %struct.dcomplex* getelementptr inbounds ([266240 x %struct.dcomplex], [266240 x %struct.dcomplex]* @u1, i32 0, i32 0), %struct.dcomplex* getelementptr inbounds ([266240 x %struct.dcomplex], [266240 x %struct.dcomplex]* @u0, i32 0, i32 0)), !dbg !186
  %58 = ptrtoint i32* @timers_enabled to i64
  call void @__DiscoPoPOpenMPRead(i64 %58, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.65, i32 0, i32 0))
  %59 = load i32, i32* @timers_enabled, align 4, !dbg !187
  %tobool13 = icmp ne i32 %59, 0, !dbg !187
  br i1 %tobool13, label %if.then14, label %if.end15, !dbg !189

if.then14:                                        ; preds = %if.end12
  call void @timer_stop(i32 3), !dbg !190
  br label %if.end15, !dbg !190

if.end15:                                         ; preds = %if.then14, %if.end12
  %60 = ptrtoint i32* %iter to i64
  call void @__DiscoPoPOpenMPWrite(i64 %60, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.66, i32 0, i32 0))
  store i32 1, i32* %iter, align 4, !dbg !192
  br label %for.cond16, !dbg !194

for.cond16:                                       ; preds = %for.inc37, %if.end15
  %61 = ptrtoint i32* %iter to i64
  call void @__DiscoPoPOpenMPRead(i64 %61, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.67, i32 0, i32 0))
  %62 = load i32, i32* %iter, align 4, !dbg !195
  %63 = ptrtoint i32* @niter to i64
  call void @__DiscoPoPOpenMPRead(i64 %63, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.68, i32 0, i32 0))
  %64 = load i32, i32* @niter, align 4, !dbg !198
  %cmp17 = icmp sle i32 %62, %64, !dbg !199
  br i1 %cmp17, label %for.body18, label %for.end39, !dbg !200

for.body18:                                       ; preds = %for.cond16
  %65 = ptrtoint i32* @timers_enabled to i64
  call void @__DiscoPoPOpenMPRead(i64 %65, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.69, i32 0, i32 0))
  %66 = load i32, i32* @timers_enabled, align 4, !dbg !201
  %tobool19 = icmp ne i32 %66, 0, !dbg !201
  br i1 %tobool19, label %if.then20, label %if.end21, !dbg !204

if.then20:                                        ; preds = %for.body18
  call void @timer_start(i32 4), !dbg !205
  br label %if.end21, !dbg !205

if.end21:                                         ; preds = %if.then20, %for.body18
  %67 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 0) to i64
  call void @__DiscoPoPOpenMPRead(i64 %67, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.70, i32 0, i32 0))
  %68 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 0), align 4, !dbg !207
  %69 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 1) to i64
  call void @__DiscoPoPOpenMPRead(i64 %69, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.71, i32 0, i32 0))
  %70 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 1), align 4, !dbg !208
  %71 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2) to i64
  call void @__DiscoPoPOpenMPRead(i64 %71, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.72, i32 0, i32 0))
  %72 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2), align 4, !dbg !209
  call void @evolve(i8* bitcast ([266240 x %struct.dcomplex]* @u0 to i8*), i8* bitcast ([266240 x %struct.dcomplex]* @u1 to i8*), i8* bitcast ([266240 x double]* @twiddle to i8*), i32 %68, i32 %70, i32 %72), !dbg !210
  %73 = ptrtoint i32* @timers_enabled to i64
  call void @__DiscoPoPOpenMPRead(i64 %73, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.73, i32 0, i32 0))
  %74 = load i32, i32* @timers_enabled, align 4, !dbg !211
  %tobool22 = icmp ne i32 %74, 0, !dbg !211
  br i1 %tobool22, label %if.then23, label %if.end24, !dbg !213

if.then23:                                        ; preds = %if.end21
  call void @timer_stop(i32 4), !dbg !214
  br label %if.end24, !dbg !214

if.end24:                                         ; preds = %if.then23, %if.end21
  %75 = ptrtoint i32* @timers_enabled to i64
  call void @__DiscoPoPOpenMPRead(i64 %75, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.74, i32 0, i32 0))
  %76 = load i32, i32* @timers_enabled, align 4, !dbg !216
  %tobool25 = icmp ne i32 %76, 0, !dbg !216
  br i1 %tobool25, label %if.then26, label %if.end27, !dbg !218

if.then26:                                        ; preds = %if.end24
  call void @timer_start(i32 3), !dbg !219
  br label %if.end27, !dbg !219

if.end27:                                         ; preds = %if.then26, %if.end24
  call void @fft(i32 -1, %struct.dcomplex* getelementptr inbounds ([266240 x %struct.dcomplex], [266240 x %struct.dcomplex]* @u1, i32 0, i32 0), %struct.dcomplex* getelementptr inbounds ([266240 x %struct.dcomplex], [266240 x %struct.dcomplex]* @u1, i32 0, i32 0)), !dbg !221
  %77 = ptrtoint i32* @timers_enabled to i64
  call void @__DiscoPoPOpenMPRead(i64 %77, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.75, i32 0, i32 0))
  %78 = load i32, i32* @timers_enabled, align 4, !dbg !222
  %tobool28 = icmp ne i32 %78, 0, !dbg !222
  br i1 %tobool28, label %if.then29, label %if.end30, !dbg !224

if.then29:                                        ; preds = %if.end27
  call void @timer_stop(i32 3), !dbg !225
  br label %if.end30, !dbg !225

if.end30:                                         ; preds = %if.then29, %if.end27
  %79 = ptrtoint i32* @timers_enabled to i64
  call void @__DiscoPoPOpenMPRead(i64 %79, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.76, i32 0, i32 0))
  %80 = load i32, i32* @timers_enabled, align 4, !dbg !227
  %tobool31 = icmp ne i32 %80, 0, !dbg !227
  br i1 %tobool31, label %if.then32, label %if.end33, !dbg !229

if.then32:                                        ; preds = %if.end30
  call void @timer_start(i32 5), !dbg !230
  br label %if.end33, !dbg !230

if.end33:                                         ; preds = %if.then32, %if.end30
  %81 = ptrtoint i32* %iter to i64
  call void @__DiscoPoPOpenMPRead(i64 %81, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.77, i32 0, i32 0))
  %82 = load i32, i32* %iter, align 4, !dbg !232
  %83 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 0) to i64
  call void @__DiscoPoPOpenMPRead(i64 %83, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.78, i32 0, i32 0))
  %84 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 0), align 4, !dbg !233
  %85 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 1) to i64
  call void @__DiscoPoPOpenMPRead(i64 %85, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.79, i32 0, i32 0))
  %86 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 1), align 4, !dbg !234
  %87 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2) to i64
  call void @__DiscoPoPOpenMPRead(i64 %87, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.80, i32 0, i32 0))
  %88 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2), align 4, !dbg !235
  call void @checksum(i32 %82, i8* bitcast ([266240 x %struct.dcomplex]* @u1 to i8*), i32 %84, i32 %86, i32 %88), !dbg !236
  %89 = ptrtoint i32* @timers_enabled to i64
  call void @__DiscoPoPOpenMPRead(i64 %89, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.81, i32 0, i32 0))
  %90 = load i32, i32* @timers_enabled, align 4, !dbg !237
  %tobool34 = icmp ne i32 %90, 0, !dbg !237
  br i1 %tobool34, label %if.then35, label %if.end36, !dbg !239

if.then35:                                        ; preds = %if.end33
  call void @timer_stop(i32 5), !dbg !240
  br label %if.end36, !dbg !240

if.end36:                                         ; preds = %if.then35, %if.end33
  br label %for.inc37, !dbg !242

for.inc37:                                        ; preds = %if.end36
  %91 = ptrtoint i32* %iter to i64
  call void @__DiscoPoPOpenMPRead(i64 %91, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.82, i32 0, i32 0))
  %92 = load i32, i32* %iter, align 4, !dbg !243
  %inc38 = add nsw i32 %92, 1, !dbg !243
  %93 = ptrtoint i32* %iter to i64
  call void @__DiscoPoPOpenMPWrite(i64 %93, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.83, i32 0, i32 0))
  store i32 %inc38, i32* %iter, align 4, !dbg !243
  br label %for.cond16, !dbg !245

for.end39:                                        ; preds = %for.cond16
  %94 = ptrtoint i32* @niter to i64
  call void @__DiscoPoPOpenMPRead(i64 %94, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.84, i32 0, i32 0))
  %95 = load i32, i32* @niter, align 4, !dbg !246
  call void @verify(i32 64, i32 64, i32 64, i32 %95, i32* %verified, i8* %Class), !dbg !247
  call void @timer_stop(i32 1), !dbg !248
  %call = call double @timer_read(i32 1), !dbg !249
  %96 = ptrtoint double* %total_time to i64
  call void @__DiscoPoPOpenMPWrite(i64 %96, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.85, i32 0, i32 0))
  store double %call, double* %total_time, align 8, !dbg !250
  %97 = ptrtoint double* %total_time to i64
  call void @__DiscoPoPOpenMPRead(i64 %97, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.86, i32 0, i32 0))
  %98 = load double, double* %total_time, align 8, !dbg !251
  %cmp40 = fcmp une double %98, 0.000000e+00, !dbg !253
  br i1 %cmp40, label %if.then41, label %if.else, !dbg !254

if.then41:                                        ; preds = %for.end39
  %call42 = call double @log(double 2.621440e+05) #7, !dbg !255
  %mul = fmul double 7.196410e+00, %call42, !dbg !257
  %add = fadd double 1.481570e+01, %mul, !dbg !258
  %call43 = call double @log(double 2.621440e+05) #7, !dbg !259
  %mul44 = fmul double 7.211130e+00, %call43, !dbg !260
  %add45 = fadd double 5.235180e+00, %mul44, !dbg !261
  %99 = ptrtoint i32* @niter to i64
  call void @__DiscoPoPOpenMPRead(i64 %99, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.87, i32 0, i32 0))
  %100 = load i32, i32* @niter, align 4, !dbg !262
  %conv = sitofp i32 %100 to double, !dbg !262
  %mul46 = fmul double %add45, %conv, !dbg !263
  %add47 = fadd double %add, %mul46, !dbg !264
  %mul48 = fmul double 2.621440e-01, %add47, !dbg !265
  %101 = ptrtoint double* %total_time to i64
  call void @__DiscoPoPOpenMPRead(i64 %101, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.88, i32 0, i32 0))
  %102 = load double, double* %total_time, align 8, !dbg !266
  %div = fdiv double %mul48, %102, !dbg !267
  %103 = ptrtoint double* %mflops to i64
  call void @__DiscoPoPOpenMPWrite(i64 %103, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.89, i32 0, i32 0))
  store double %div, double* %mflops, align 8, !dbg !268
  br label %if.end49, !dbg !269

if.else:                                          ; preds = %for.end39
  %104 = ptrtoint double* %mflops to i64
  call void @__DiscoPoPOpenMPWrite(i64 %104, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.90, i32 0, i32 0))
  store double 0.000000e+00, double* %mflops, align 8, !dbg !270
  br label %if.end49

if.end49:                                         ; preds = %if.else, %if.then41
  %105 = ptrtoint i8* %Class to i64
  call void @__DiscoPoPOpenMPRead(i64 %105, i32 1, i32 0, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.91, i32 0, i32 0))
  %106 = load i8, i8* %Class, align 1, !dbg !272
  %107 = ptrtoint i32* @niter to i64
  call void @__DiscoPoPOpenMPRead(i64 %107, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.92, i32 0, i32 0))
  %108 = load i32, i32* @niter, align 4, !dbg !273
  %109 = ptrtoint double* %total_time to i64
  call void @__DiscoPoPOpenMPRead(i64 %109, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.93, i32 0, i32 0))
  %110 = load double, double* %total_time, align 8, !dbg !274
  %111 = ptrtoint double* %mflops to i64
  call void @__DiscoPoPOpenMPRead(i64 %111, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.94, i32 0, i32 0))
  %112 = load double, double* %mflops, align 8, !dbg !275
  %113 = ptrtoint i32* %verified to i64
  call void @__DiscoPoPOpenMPRead(i64 %113, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.95, i32 0, i32 0))
  %114 = load i32, i32* %verified, align 4, !dbg !276
  call void @print_results(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8 signext %106, i32 64, i32 64, i32 64, i32 %108, double %110, double %112, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i32 0, i32 0), i32 %114, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0)), !dbg !277
  %115 = ptrtoint i32* @timers_enabled to i64
  call void @__DiscoPoPOpenMPRead(i64 %115, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.96, i32 0, i32 0))
  %116 = load i32, i32* @timers_enabled, align 4, !dbg !278
  %tobool50 = icmp ne i32 %116, 0, !dbg !278
  br i1 %tobool50, label %if.then51, label %if.end52, !dbg !280

if.then51:                                        ; preds = %if.end49
  call void @print_timers(), !dbg !281
  br label %if.end52, !dbg !281

if.end52:                                         ; preds = %if.then51, %if.end49
  call void @__DiscoPoPOpenMPFinalize()
  ret i32 0, !dbg !283
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind uwtable
define internal void @setup() #0 !dbg !284 {
entry:
  %fp = alloca %struct._IO_FILE*, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %fp, metadata !287, metadata !98), !dbg !347
  %0 = ptrtoint i32* @debug to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.97, i32 0, i32 0))
  store i32 0, i32* @debug, align 4, !dbg !348
  %call = call %struct._IO_FILE* @fopen(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i32 0, i32 0)), !dbg !349
  %1 = ptrtoint %struct._IO_FILE** %fp to i64
  call void @__DiscoPoPOpenMPWrite(i64 %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.98, i32 0, i32 0))
  store %struct._IO_FILE* %call, %struct._IO_FILE** %fp, align 8, !dbg !351
  %cmp = icmp ne %struct._IO_FILE* %call, null, !dbg !352
  br i1 %cmp, label %if.then, label %if.else, !dbg !353

if.then:                                          ; preds = %entry
  %2 = ptrtoint i32* @timers_enabled to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.99, i32 0, i32 0))
  store i32 1, i32* @timers_enabled, align 4, !dbg !354
  %3 = ptrtoint %struct._IO_FILE** %fp to i64
  call void @__DiscoPoPOpenMPRead(i64 %3, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.100, i32 0, i32 0))
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !356
  %call1 = call i32 @fclose(%struct._IO_FILE* %4), !dbg !357
  br label %if.end, !dbg !358

if.else:                                          ; preds = %entry
  %5 = ptrtoint i32* @timers_enabled to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.101, i32 0, i32 0))
  store i32 0, i32* @timers_enabled, align 4, !dbg !359
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = ptrtoint i32* @niter to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.102, i32 0, i32 0))
  store i32 6, i32* @niter, align 4, !dbg !361
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.12, i32 0, i32 0)), !dbg !362
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.13, i32 0, i32 0), i32 64, i32 64, i32 64), !dbg !363
  %7 = ptrtoint i32* @niter to i64
  call void @__DiscoPoPOpenMPRead(i64 %7, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.103, i32 0, i32 0))
  %8 = load i32, i32* @niter, align 4, !dbg !364
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.14, i32 0, i32 0), i32 %8), !dbg !365
  %call5 = call i32 @omp_get_max_threads(), !dbg !366
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.15, i32 0, i32 0), i32 %call5), !dbg !367
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i32 0, i32 0)), !dbg !369
  %9 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 0) to i64
  call void @__DiscoPoPOpenMPWrite(i64 %9, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.104, i32 0, i32 0))
  store i32 64, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 0), align 4, !dbg !370
  %10 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 1) to i64
  call void @__DiscoPoPOpenMPWrite(i64 %10, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.105, i32 0, i32 0))
  store i32 64, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 1), align 4, !dbg !371
  %11 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2) to i64
  call void @__DiscoPoPOpenMPWrite(i64 %11, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.106, i32 0, i32 0))
  store i32 64, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2), align 4, !dbg !372
  %12 = ptrtoint i32* @fftblock to i64
  call void @__DiscoPoPOpenMPWrite(i64 %12, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.107, i32 0, i32 0))
  store i32 32, i32* @fftblock, align 4, !dbg !373
  %13 = ptrtoint i32* @fftblockpad to i64
  call void @__DiscoPoPOpenMPWrite(i64 %13, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.108, i32 0, i32 0))
  store i32 33, i32* @fftblockpad, align 4, !dbg !374
  %14 = ptrtoint i32* @fftblock to i64
  call void @__DiscoPoPOpenMPRead(i64 %14, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.109, i32 0, i32 0))
  %15 = load i32, i32* @fftblock, align 4, !dbg !375
  %cmp8 = icmp ne i32 %15, 32, !dbg !377
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !378

if.then9:                                         ; preds = %if.end
  %16 = ptrtoint i32* @fftblock to i64
  call void @__DiscoPoPOpenMPRead(i64 %16, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.110, i32 0, i32 0))
  %17 = load i32, i32* @fftblock, align 4, !dbg !379
  %add = add nsw i32 %17, 3, !dbg !381
  %18 = ptrtoint i32* @fftblockpad to i64
  call void @__DiscoPoPOpenMPWrite(i64 %18, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.111, i32 0, i32 0))
  store i32 %add, i32* @fftblockpad, align 4, !dbg !382
  br label %if.end10, !dbg !383

if.end10:                                         ; preds = %if.then9, %if.end
  ret void, !dbg !384
}

declare %struct._IO_FILE* @fopen(i8*, i8*) #2

declare i32 @fclose(%struct._IO_FILE*) #2

declare i32 @printf(i8*, ...) #2

declare i32 @omp_get_max_threads() #2

; Function Attrs: nounwind uwtable
define internal void @init_ui(i8* %ou0, i8* %ou1, i8* %ot, i32 %d1, i32 %d2, i32 %d3) #0 !dbg !385 {
entry:
  %ou0.addr = alloca i8*, align 8
  %ou1.addr = alloca i8*, align 8
  %ot.addr = alloca i8*, align 8
  %d1.addr = alloca i32, align 4
  %d2.addr = alloca i32, align 4
  %d3.addr = alloca i32, align 4
  %u0 = alloca %struct.dcomplex*, align 8
  %u1 = alloca %struct.dcomplex*, align 8
  %twiddle = alloca double*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  %2 = ptrtoint i8** %ou0.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.112, i32 0, i32 0))
  store i8* %ou0, i8** %ou0.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ou0.addr, metadata !388, metadata !98), !dbg !389
  %3 = ptrtoint i8** %ou1.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.113, i32 0, i32 0))
  store i8* %ou1, i8** %ou1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ou1.addr, metadata !390, metadata !98), !dbg !391
  %4 = ptrtoint i8** %ot.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.114, i32 0, i32 0))
  store i8* %ot, i8** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ot.addr, metadata !392, metadata !98), !dbg !393
  %5 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.115, i32 0, i32 0))
  store i32 %d1, i32* %d1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %d1.addr, metadata !394, metadata !98), !dbg !395
  %6 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.116, i32 0, i32 0))
  store i32 %d2, i32* %d2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %d2.addr, metadata !396, metadata !98), !dbg !397
  %7 = ptrtoint i32* %d3.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %7, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.117, i32 0, i32 0))
  store i32 %d3, i32* %d3.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %d3.addr, metadata !398, metadata !98), !dbg !399
  %8 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %8, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.118, i32 0, i32 0))
  %9 = load i32, i32* %d2.addr, align 4, !dbg !400
  %10 = zext i32 %9 to i64, !dbg !401
  %11 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %11, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.119, i32 0, i32 0))
  %12 = load i32, i32* %d1.addr, align 4, !dbg !402
  %add = add nsw i32 %12, 1, !dbg !403
  %13 = zext i32 %add to i64, !dbg !401
  call void @llvm.dbg.declare(metadata %struct.dcomplex** %u0, metadata !404, metadata !98), !dbg !405
  %14 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %14, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.120, i32 0, i32 0))
  %15 = load i32, i32* %d2.addr, align 4, !dbg !406
  %16 = zext i32 %15 to i64, !dbg !407
  %17 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %17, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.121, i32 0, i32 0))
  %18 = load i32, i32* %d1.addr, align 4, !dbg !408
  %add1 = add nsw i32 %18, 1, !dbg !409
  %19 = zext i32 %add1 to i64, !dbg !407
  %20 = ptrtoint i8** %ou0.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %20, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.122, i32 0, i32 0))
  %21 = load i8*, i8** %ou0.addr, align 8, !dbg !410
  %22 = bitcast i8* %21 to %struct.dcomplex*, !dbg !407
  %23 = ptrtoint %struct.dcomplex** %u0 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %23, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.123, i32 0, i32 0))
  store %struct.dcomplex* %22, %struct.dcomplex** %u0, align 8, !dbg !405
  %24 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %24, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.124, i32 0, i32 0))
  %25 = load i32, i32* %d2.addr, align 4, !dbg !411
  %26 = zext i32 %25 to i64, !dbg !412
  %27 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %27, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.125, i32 0, i32 0))
  %28 = load i32, i32* %d1.addr, align 4, !dbg !413
  %add2 = add nsw i32 %28, 1, !dbg !414
  %29 = zext i32 %add2 to i64, !dbg !412
  call void @llvm.dbg.declare(metadata %struct.dcomplex** %u1, metadata !415, metadata !98), !dbg !416
  %30 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %30, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.126, i32 0, i32 0))
  %31 = load i32, i32* %d2.addr, align 4, !dbg !417
  %32 = zext i32 %31 to i64, !dbg !418
  %33 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %33, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.127, i32 0, i32 0))
  %34 = load i32, i32* %d1.addr, align 4, !dbg !419
  %add3 = add nsw i32 %34, 1, !dbg !420
  %35 = zext i32 %add3 to i64, !dbg !418
  %36 = ptrtoint i8** %ou1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %36, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.128, i32 0, i32 0))
  %37 = load i8*, i8** %ou1.addr, align 8, !dbg !421
  %38 = bitcast i8* %37 to %struct.dcomplex*, !dbg !418
  %39 = ptrtoint %struct.dcomplex** %u1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %39, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.129, i32 0, i32 0))
  store %struct.dcomplex* %38, %struct.dcomplex** %u1, align 8, !dbg !416
  %40 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %40, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.130, i32 0, i32 0))
  %41 = load i32, i32* %d2.addr, align 4, !dbg !422
  %42 = zext i32 %41 to i64, !dbg !423
  %43 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %43, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.131, i32 0, i32 0))
  %44 = load i32, i32* %d1.addr, align 4, !dbg !424
  %add4 = add nsw i32 %44, 1, !dbg !425
  %45 = zext i32 %add4 to i64, !dbg !423
  call void @llvm.dbg.declare(metadata double** %twiddle, metadata !426, metadata !98), !dbg !427
  %46 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %46, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.132, i32 0, i32 0))
  %47 = load i32, i32* %d2.addr, align 4, !dbg !428
  %48 = zext i32 %47 to i64, !dbg !429
  %49 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %49, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.133, i32 0, i32 0))
  %50 = load i32, i32* %d1.addr, align 4, !dbg !430
  %add5 = add nsw i32 %50, 1, !dbg !431
  %51 = zext i32 %add5 to i64, !dbg !429
  %52 = ptrtoint i8** %ot.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %52, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.134, i32 0, i32 0))
  %53 = load i8*, i8** %ot.addr, align 8, !dbg !432
  %54 = bitcast i8* %53 to double*, !dbg !429
  %55 = ptrtoint double** %twiddle to i64
  call void @__DiscoPoPOpenMPWrite(i64 %55, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.135, i32 0, i32 0))
  store double* %54, double** %twiddle, align 8, !dbg !427
  call void @llvm.dbg.declare(metadata i32* %i, metadata !433, metadata !98), !dbg !434
  call void @llvm.dbg.declare(metadata i32* %j, metadata !435, metadata !98), !dbg !436
  call void @llvm.dbg.declare(metadata i32* %k, metadata !437, metadata !98), !dbg !438
  %56 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !439
  %57 = ptrtoint i8** %56 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %57, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.136, i32 0, i32 0))
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @1, i32 0, i32 0), i8** %56, align 8, !dbg !439
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.138, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* %.kmpc_loc.addr, i32 12, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, i32*, i32*, i64, i64, %struct.dcomplex**, i64, i64, %struct.dcomplex**, i64, i64, double**)* @.omp_outlined. to void (i32*, i32*, ...)*), i32* %d3.addr, i32* %d2.addr, i32* %d1.addr, i64 %10, i64 %13, %struct.dcomplex** %u0, i64 %26, i64 %29, %struct.dcomplex** %u1, i64 %42, i64 %45, double** %twiddle), !dbg !439
  ret void, !dbg !440
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #3

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined.(i32* noalias %.global_tid., i32* noalias %.bound_tid., i32* dereferenceable(4) %d3, i32* dereferenceable(4) %d2, i32* dereferenceable(4) %d1, i64 %vla, i64 %vla1, %struct.dcomplex** dereferenceable(8) %u0, i64 %vla3, i64 %vla5, %struct.dcomplex** dereferenceable(8) %u1, i64 %vla7, i64 %vla9, double** dereferenceable(8) %twiddle) #0 !dbg !441 {
entry:
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.140, i32 0, i32 0))
  %.global_tid..addr = alloca i32*, align 8
  %.bound_tid..addr = alloca i32*, align 8
  %d3.addr = alloca i32*, align 8
  %d2.addr = alloca i32*, align 8
  %d1.addr = alloca i32*, align 8
  %vla.addr = alloca i64, align 8
  %vla.addr2 = alloca i64, align 8
  %u0.addr = alloca %struct.dcomplex**, align 8
  %vla.addr4 = alloca i64, align 8
  %vla.addr6 = alloca i64, align 8
  %u1.addr = alloca %struct.dcomplex**, align 8
  %vla.addr8 = alloca i64, align 8
  %vla.addr10 = alloca i64, align 8
  %twiddle.addr = alloca double**, align 8
  %.omp.iv = alloca i32, align 4
  %.omp.last.iteration = alloca i32, align 4
  %k = alloca i32, align 4
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k13 = alloca i32, align 4
  %k14 = alloca i32, align 4
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  %.compoundliteral = alloca %struct.dcomplex, align 8
  %.compoundliteral32 = alloca %struct.dcomplex, align 8
  %2 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.141, i32 0, i32 0))
  store i32* %.global_tid., i32** %.global_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.global_tid..addr, metadata !450, metadata !98), !dbg !451
  %3 = ptrtoint i32** %.bound_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.142, i32 0, i32 0))
  store i32* %.bound_tid., i32** %.bound_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.bound_tid..addr, metadata !452, metadata !98), !dbg !451
  %4 = ptrtoint i32** %d3.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.143, i32 0, i32 0))
  store i32* %d3, i32** %d3.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %d3.addr, metadata !453, metadata !98), !dbg !451
  %5 = ptrtoint i32** %d2.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.144, i32 0, i32 0))
  store i32* %d2, i32** %d2.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %d2.addr, metadata !454, metadata !98), !dbg !451
  %6 = ptrtoint i32** %d1.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.145, i32 0, i32 0))
  store i32* %d1, i32** %d1.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %d1.addr, metadata !455, metadata !98), !dbg !451
  %7 = ptrtoint i64* %vla.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %7, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.146, i32 0, i32 0))
  store i64 %vla, i64* %vla.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %vla.addr, metadata !456, metadata !98), !dbg !451
  %8 = ptrtoint i64* %vla.addr2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %8, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.147, i32 0, i32 0))
  store i64 %vla1, i64* %vla.addr2, align 8
  call void @llvm.dbg.declare(metadata i64* %vla.addr2, metadata !457, metadata !98), !dbg !451
  %9 = ptrtoint %struct.dcomplex*** %u0.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.148, i32 0, i32 0))
  store %struct.dcomplex** %u0, %struct.dcomplex*** %u0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dcomplex*** %u0.addr, metadata !458, metadata !98), !dbg !451
  %10 = ptrtoint i64* %vla.addr4 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %10, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.149, i32 0, i32 0))
  store i64 %vla3, i64* %vla.addr4, align 8
  call void @llvm.dbg.declare(metadata i64* %vla.addr4, metadata !459, metadata !98), !dbg !451
  %11 = ptrtoint i64* %vla.addr6 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %11, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.150, i32 0, i32 0))
  store i64 %vla5, i64* %vla.addr6, align 8
  call void @llvm.dbg.declare(metadata i64* %vla.addr6, metadata !460, metadata !98), !dbg !451
  %12 = ptrtoint %struct.dcomplex*** %u1.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %12, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.151, i32 0, i32 0))
  store %struct.dcomplex** %u1, %struct.dcomplex*** %u1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dcomplex*** %u1.addr, metadata !461, metadata !98), !dbg !451
  %13 = ptrtoint i64* %vla.addr8 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %13, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.152, i32 0, i32 0))
  store i64 %vla7, i64* %vla.addr8, align 8
  call void @llvm.dbg.declare(metadata i64* %vla.addr8, metadata !462, metadata !98), !dbg !451
  %14 = ptrtoint i64* %vla.addr10 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %14, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.153, i32 0, i32 0))
  store i64 %vla9, i64* %vla.addr10, align 8
  call void @llvm.dbg.declare(metadata i64* %vla.addr10, metadata !463, metadata !98), !dbg !451
  %15 = ptrtoint double*** %twiddle.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %15, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.154, i32 0, i32 0))
  store double** %twiddle, double*** %twiddle.addr, align 8
  call void @llvm.dbg.declare(metadata double*** %twiddle.addr, metadata !464, metadata !98), !dbg !451
  %16 = ptrtoint i32** %d3.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %16, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.155, i32 0, i32 0))
  %17 = load i32*, i32** %d3.addr, align 8, !dbg !465
  %18 = ptrtoint i32** %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %18, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.156, i32 0, i32 0))
  %19 = load i32*, i32** %d2.addr, align 8, !dbg !465
  %20 = ptrtoint i32** %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %20, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.157, i32 0, i32 0))
  %21 = load i32*, i32** %d1.addr, align 8, !dbg !465
  %22 = ptrtoint i64* %vla.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %22, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.158, i32 0, i32 0))
  %23 = load i64, i64* %vla.addr, align 8, !dbg !465
  %24 = ptrtoint i64* %vla.addr2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %24, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.159, i32 0, i32 0))
  %25 = load i64, i64* %vla.addr2, align 8, !dbg !465
  %26 = ptrtoint %struct.dcomplex*** %u0.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %26, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.160, i32 0, i32 0))
  %27 = load %struct.dcomplex**, %struct.dcomplex*** %u0.addr, align 8, !dbg !465
  %28 = ptrtoint i64* %vla.addr4 to i64
  call void @__DiscoPoPOpenMPRead(i64 %28, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.161, i32 0, i32 0))
  %29 = load i64, i64* %vla.addr4, align 8, !dbg !465
  %30 = ptrtoint i64* %vla.addr6 to i64
  call void @__DiscoPoPOpenMPRead(i64 %30, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.162, i32 0, i32 0))
  %31 = load i64, i64* %vla.addr6, align 8, !dbg !465
  %32 = ptrtoint %struct.dcomplex*** %u1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %32, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.163, i32 0, i32 0))
  %33 = load %struct.dcomplex**, %struct.dcomplex*** %u1.addr, align 8, !dbg !465
  %34 = ptrtoint i64* %vla.addr8 to i64
  call void @__DiscoPoPOpenMPRead(i64 %34, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.164, i32 0, i32 0))
  %35 = load i64, i64* %vla.addr8, align 8, !dbg !465
  %36 = ptrtoint i64* %vla.addr10 to i64
  call void @__DiscoPoPOpenMPRead(i64 %36, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.165, i32 0, i32 0))
  %37 = load i64, i64* %vla.addr10, align 8, !dbg !465
  %38 = ptrtoint double*** %twiddle.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %38, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.166, i32 0, i32 0))
  %39 = load double**, double*** %twiddle.addr, align 8, !dbg !465
  call void @llvm.dbg.declare(metadata i32* %.omp.iv, metadata !466, metadata !98), !dbg !451
  call void @llvm.dbg.declare(metadata i32* %.omp.last.iteration, metadata !467, metadata !98), !dbg !451
  %40 = ptrtoint i32* %17 to i64
  call void @__DiscoPoPOpenMPRead(i64 %40, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.167, i32 0, i32 0))
  %41 = load i32, i32* %17, align 4, !dbg !468
  %sub = sub nsw i32 %41, 0, !dbg !465
  %sub11 = sub nsw i32 %sub, 1, !dbg !465
  %add = add nsw i32 %sub11, 1, !dbg !465
  %div = sdiv i32 %add, 1, !dbg !465
  %sub12 = sub nsw i32 %div, 1, !dbg !451
  %42 = ptrtoint i32* %.omp.last.iteration to i64
  call void @__DiscoPoPOpenMPWrite(i64 %42, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.168, i32 0, i32 0))
  store i32 %sub12, i32* %.omp.last.iteration, align 4, !dbg !451
  call void @llvm.dbg.declare(metadata i32* %k, metadata !469, metadata !98), !dbg !451
  %43 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPWrite(i64 %43, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.169, i32 0, i32 0))
  store i32 0, i32* %k, align 4, !dbg !470
  %44 = ptrtoint i32* %17 to i64
  call void @__DiscoPoPOpenMPRead(i64 %44, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.170, i32 0, i32 0))
  %45 = load i32, i32* %17, align 4, !dbg !468
  %cmp = icmp slt i32 0, %45, !dbg !465
  br i1 %cmp, label %omp.precond.then, label %omp.precond.end, !dbg !465

omp.precond.then:                                 ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %.omp.lb, metadata !471, metadata !98), !dbg !451
  %46 = ptrtoint i32* %.omp.lb to i64
  call void @__DiscoPoPOpenMPWrite(i64 %46, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.171, i32 0, i32 0))
  store i32 0, i32* %.omp.lb, align 4, !dbg !472
  call void @llvm.dbg.declare(metadata i32* %.omp.ub, metadata !474, metadata !98), !dbg !451
  %47 = ptrtoint i32* %.omp.last.iteration to i64
  call void @__DiscoPoPOpenMPRead(i64 %47, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.172, i32 0, i32 0))
  %48 = load i32, i32* %.omp.last.iteration, align 4, !dbg !475
  %49 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPWrite(i64 %49, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.173, i32 0, i32 0))
  store i32 %48, i32* %.omp.ub, align 4, !dbg !472
  call void @llvm.dbg.declare(metadata i32* %.omp.stride, metadata !476, metadata !98), !dbg !451
  %50 = ptrtoint i32* %.omp.stride to i64
  call void @__DiscoPoPOpenMPWrite(i64 %50, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.174, i32 0, i32 0))
  store i32 1, i32* %.omp.stride, align 4, !dbg !472
  call void @llvm.dbg.declare(metadata i32* %.omp.is_last, metadata !477, metadata !98), !dbg !451
  %51 = ptrtoint i32* %.omp.is_last to i64
  call void @__DiscoPoPOpenMPWrite(i64 %51, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.175, i32 0, i32 0))
  store i32 0, i32* %.omp.is_last, align 4, !dbg !472
  call void @llvm.dbg.declare(metadata i32* %i, metadata !478, metadata !98), !dbg !451
  call void @llvm.dbg.declare(metadata i32* %j, metadata !479, metadata !98), !dbg !451
  call void @llvm.dbg.declare(metadata i32* %k13, metadata !469, metadata !98), !dbg !451
  call void @llvm.dbg.declare(metadata i32* %k14, metadata !469, metadata !98), !dbg !451
  %52 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !480
  %53 = ptrtoint i8** %52 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %53, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.176, i32 0, i32 0))
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @1, i32 0, i32 0), i8** %52, align 8, !dbg !480
  %54 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %54, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.177, i32 0, i32 0))
  %55 = load i32*, i32** %.global_tid..addr, align 8, !dbg !480
  %56 = ptrtoint i32* %55 to i64
  call void @__DiscoPoPOpenMPRead(i64 %56, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.178, i32 0, i32 0))
  %57 = load i32, i32* %55, align 4, !dbg !480
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.180, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_for_static_init_4(%ident_t* %.kmpc_loc.addr, i32 %57, i32 34, i32* %.omp.is_last, i32* %.omp.lb, i32* %.omp.ub, i32* %.omp.stride, i32 1, i32 1), !dbg !480
  %58 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %58, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.181, i32 0, i32 0))
  %59 = load i32, i32* %.omp.ub, align 4, !dbg !472
  %60 = ptrtoint i32* %.omp.last.iteration to i64
  call void @__DiscoPoPOpenMPRead(i64 %60, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.182, i32 0, i32 0))
  %61 = load i32, i32* %.omp.last.iteration, align 4, !dbg !475
  %cmp15 = icmp sgt i32 %59, %61, !dbg !472
  br i1 %cmp15, label %cond.true, label %cond.false, !dbg !472

cond.true:                                        ; preds = %omp.precond.then
  %62 = ptrtoint i32* %.omp.last.iteration to i64
  call void @__DiscoPoPOpenMPRead(i64 %62, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.183, i32 0, i32 0))
  %63 = load i32, i32* %.omp.last.iteration, align 4, !dbg !481
  br label %cond.end, !dbg !483

cond.false:                                       ; preds = %omp.precond.then
  %64 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %64, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.184, i32 0, i32 0))
  %65 = load i32, i32* %.omp.ub, align 4, !dbg !484
  br label %cond.end, !dbg !484

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %63, %cond.true ], [ %65, %cond.false ], !dbg !486
  %66 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPWrite(i64 %66, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.185, i32 0, i32 0))
  store i32 %cond, i32* %.omp.ub, align 4, !dbg !486
  %67 = ptrtoint i32* %.omp.lb to i64
  call void @__DiscoPoPOpenMPRead(i64 %67, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.186, i32 0, i32 0))
  %68 = load i32, i32* %.omp.lb, align 4, !dbg !486
  %69 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPWrite(i64 %69, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.187, i32 0, i32 0))
  store i32 %68, i32* %.omp.iv, align 4, !dbg !486
  br label %omp.inner.for.cond, !dbg !488

omp.inner.for.cond:                               ; preds = %omp.inner.for.inc, %cond.end
  %70 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %70, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.188, i32 0, i32 0))
  %71 = load i32, i32* %.omp.iv, align 4, !dbg !489
  %72 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %72, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.189, i32 0, i32 0))
  %73 = load i32, i32* %.omp.ub, align 4, !dbg !489
  %cmp16 = icmp sle i32 %71, %73, !dbg !491
  br i1 %cmp16, label %omp.inner.for.body, label %omp.inner.for.end, !dbg !492

omp.inner.for.body:                               ; preds = %omp.inner.for.cond
  %74 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %74, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.190, i32 0, i32 0))
  %75 = load i32, i32* %.omp.iv, align 4, !dbg !493
  %mul = mul nsw i32 %75, 1, !dbg !495
  %add17 = add nsw i32 0, %mul, !dbg !495
  %76 = ptrtoint i32* %k13 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %76, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.191, i32 0, i32 0))
  store i32 %add17, i32* %k13, align 4, !dbg !495
  %77 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %77, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.192, i32 0, i32 0))
  store i32 0, i32* %j, align 4, !dbg !496
  br label %for.cond, !dbg !499

for.cond:                                         ; preds = %for.inc41, %omp.inner.for.body
  %78 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %78, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.193, i32 0, i32 0))
  %79 = load i32, i32* %j, align 4, !dbg !500
  %80 = ptrtoint i32* %19 to i64
  call void @__DiscoPoPOpenMPRead(i64 %80, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.194, i32 0, i32 0))
  %81 = load i32, i32* %19, align 4, !dbg !503
  %cmp18 = icmp slt i32 %79, %81, !dbg !504
  br i1 %cmp18, label %for.body, label %for.end43, !dbg !505

for.body:                                         ; preds = %for.cond
  %82 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %82, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.195, i32 0, i32 0))
  store i32 0, i32* %i, align 4, !dbg !506
  br label %for.cond19, !dbg !509

for.cond19:                                       ; preds = %for.inc, %for.body
  %83 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %83, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.196, i32 0, i32 0))
  %84 = load i32, i32* %i, align 4, !dbg !510
  %85 = ptrtoint i32* %21 to i64
  call void @__DiscoPoPOpenMPRead(i64 %85, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.197, i32 0, i32 0))
  %86 = load i32, i32* %21, align 4, !dbg !513
  %cmp20 = icmp slt i32 %84, %86, !dbg !514
  br i1 %cmp20, label %for.body21, label %for.end, !dbg !515

for.body21:                                       ; preds = %for.cond19
  %87 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %87, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.198, i32 0, i32 0))
  %88 = load i32, i32* %i, align 4, !dbg !516
  %idxprom = sext i32 %88 to i64, !dbg !518
  %89 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %89, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.199, i32 0, i32 0))
  %90 = load i32, i32* %j, align 4, !dbg !519
  %idxprom22 = sext i32 %90 to i64, !dbg !518
  %91 = ptrtoint i32* %k13 to i64
  call void @__DiscoPoPOpenMPRead(i64 %91, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.200, i32 0, i32 0))
  %92 = load i32, i32* %k13, align 4, !dbg !520
  %idxprom23 = sext i32 %92 to i64, !dbg !518
  %93 = ptrtoint %struct.dcomplex** %27 to i64
  call void @__DiscoPoPOpenMPRead(i64 %93, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.201, i32 0, i32 0))
  %94 = load %struct.dcomplex*, %struct.dcomplex** %27, align 8, !dbg !518
  %95 = mul nuw i64 %23, %25, !dbg !518
  %96 = mul nsw i64 %idxprom23, %95, !dbg !518
  %arrayidx = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %94, i64 %96, !dbg !518
  %97 = mul nsw i64 %idxprom22, %25, !dbg !518
  %arrayidx24 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx, i64 %97, !dbg !518
  %arrayidx25 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx24, i64 %idxprom, !dbg !518
  %real = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral, i32 0, i32 0, !dbg !521
  %98 = ptrtoint double* %real to i64
  call void @__DiscoPoPOpenMPWrite(i64 %98, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.202, i32 0, i32 0))
  store double 0.000000e+00, double* %real, align 8, !dbg !521
  %imag = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral, i32 0, i32 1, !dbg !521
  %99 = ptrtoint double* %imag to i64
  call void @__DiscoPoPOpenMPWrite(i64 %99, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.203, i32 0, i32 0))
  store double 0.000000e+00, double* %imag, align 8, !dbg !521
  %100 = bitcast %struct.dcomplex* %arrayidx25 to i8*, !dbg !521
  %101 = bitcast %struct.dcomplex* %.compoundliteral to i8*, !dbg !521
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %100, i8* %101, i64 16, i32 8, i1 false), !dbg !521
  %102 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %102, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.204, i32 0, i32 0))
  %103 = load i32, i32* %i, align 4, !dbg !522
  %idxprom26 = sext i32 %103 to i64, !dbg !523
  %104 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %104, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.205, i32 0, i32 0))
  %105 = load i32, i32* %j, align 4, !dbg !524
  %idxprom27 = sext i32 %105 to i64, !dbg !523
  %106 = ptrtoint i32* %k13 to i64
  call void @__DiscoPoPOpenMPRead(i64 %106, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.206, i32 0, i32 0))
  %107 = load i32, i32* %k13, align 4, !dbg !525
  %idxprom28 = sext i32 %107 to i64, !dbg !523
  %108 = ptrtoint %struct.dcomplex** %33 to i64
  call void @__DiscoPoPOpenMPRead(i64 %108, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.207, i32 0, i32 0))
  %109 = load %struct.dcomplex*, %struct.dcomplex** %33, align 8, !dbg !523
  %110 = mul nuw i64 %29, %31, !dbg !523
  %111 = mul nsw i64 %idxprom28, %110, !dbg !523
  %arrayidx29 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %109, i64 %111, !dbg !523
  %112 = mul nsw i64 %idxprom27, %31, !dbg !523
  %arrayidx30 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx29, i64 %112, !dbg !523
  %arrayidx31 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx30, i64 %idxprom26, !dbg !523
  %real33 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral32, i32 0, i32 0, !dbg !526
  %113 = ptrtoint double* %real33 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %113, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.208, i32 0, i32 0))
  store double 0.000000e+00, double* %real33, align 8, !dbg !526
  %imag34 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral32, i32 0, i32 1, !dbg !526
  %114 = ptrtoint double* %imag34 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %114, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.209, i32 0, i32 0))
  store double 0.000000e+00, double* %imag34, align 8, !dbg !526
  %115 = bitcast %struct.dcomplex* %arrayidx31 to i8*, !dbg !526
  %116 = bitcast %struct.dcomplex* %.compoundliteral32 to i8*, !dbg !526
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %115, i8* %116, i64 16, i32 8, i1 false), !dbg !526
  %117 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %117, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.210, i32 0, i32 0))
  %118 = load i32, i32* %i, align 4, !dbg !527
  %idxprom35 = sext i32 %118 to i64, !dbg !528
  %119 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %119, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.211, i32 0, i32 0))
  %120 = load i32, i32* %j, align 4, !dbg !529
  %idxprom36 = sext i32 %120 to i64, !dbg !528
  %121 = ptrtoint i32* %k13 to i64
  call void @__DiscoPoPOpenMPRead(i64 %121, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.212, i32 0, i32 0))
  %122 = load i32, i32* %k13, align 4, !dbg !530
  %idxprom37 = sext i32 %122 to i64, !dbg !528
  %123 = ptrtoint double** %39 to i64
  call void @__DiscoPoPOpenMPRead(i64 %123, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.213, i32 0, i32 0))
  %124 = load double*, double** %39, align 8, !dbg !528
  %125 = mul nuw i64 %35, %37, !dbg !528
  %126 = mul nsw i64 %idxprom37, %125, !dbg !528
  %arrayidx38 = getelementptr inbounds double, double* %124, i64 %126, !dbg !528
  %127 = mul nsw i64 %idxprom36, %37, !dbg !528
  %arrayidx39 = getelementptr inbounds double, double* %arrayidx38, i64 %127, !dbg !528
  %arrayidx40 = getelementptr inbounds double, double* %arrayidx39, i64 %idxprom35, !dbg !528
  %128 = ptrtoint double* %arrayidx40 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %128, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.214, i32 0, i32 0))
  store double 0.000000e+00, double* %arrayidx40, align 8, !dbg !531
  br label %for.inc, !dbg !532

for.inc:                                          ; preds = %for.body21
  %129 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %129, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.215, i32 0, i32 0))
  %130 = load i32, i32* %i, align 4, !dbg !533
  %inc = add nsw i32 %130, 1, !dbg !533
  %131 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %131, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.216, i32 0, i32 0))
  store i32 %inc, i32* %i, align 4, !dbg !533
  br label %for.cond19, !dbg !535

for.end:                                          ; preds = %for.cond19
  br label %for.inc41, !dbg !536

for.inc41:                                        ; preds = %for.end
  %132 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %132, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.217, i32 0, i32 0))
  %133 = load i32, i32* %j, align 4, !dbg !537
  %inc42 = add nsw i32 %133, 1, !dbg !537
  %134 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %134, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.218, i32 0, i32 0))
  store i32 %inc42, i32* %j, align 4, !dbg !537
  br label %for.cond, !dbg !539

for.end43:                                        ; preds = %for.cond
  br label %omp.body.continue, !dbg !540

omp.body.continue:                                ; preds = %for.end43
  br label %omp.inner.for.inc, !dbg !541

omp.inner.for.inc:                                ; preds = %omp.body.continue
  %135 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %135, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.219, i32 0, i32 0))
  %136 = load i32, i32* %.omp.iv, align 4, !dbg !542
  %add44 = add nsw i32 %136, 1, !dbg !544
  %137 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPWrite(i64 %137, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.220, i32 0, i32 0))
  store i32 %add44, i32* %.omp.iv, align 4, !dbg !544
  br label %omp.inner.for.cond, !dbg !545

omp.inner.for.end:                                ; preds = %omp.inner.for.cond
  br label %omp.loop.exit, !dbg !546

omp.loop.exit:                                    ; preds = %omp.inner.for.end
  %138 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !547
  %139 = ptrtoint i8** %138 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %139, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.221, i32 0, i32 0))
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @1, i32 0, i32 0), i8** %138, align 8, !dbg !547
  %140 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %140, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.222, i32 0, i32 0))
  %141 = load i32*, i32** %.global_tid..addr, align 8, !dbg !547
  %142 = ptrtoint i32* %141 to i64
  call void @__DiscoPoPOpenMPRead(i64 %142, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.223, i32 0, i32 0))
  %143 = load i32, i32* %141, align 4, !dbg !547
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.225, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_for_static_fini(%ident_t* %.kmpc_loc.addr, i32 %143), !dbg !547
  br label %omp.precond.end, !dbg !547

omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
  call void @__DiscoPoPOpenMPAfterCall()
  ret void, !dbg !548
}

declare void @__kmpc_for_static_init_4(%ident_t*, i32, i32, i32*, i32*, i32*, i32*, i32, i32)

declare void @__kmpc_for_static_fini(%ident_t*, i32)

declare void @__kmpc_fork_call(%ident_t*, i32, void (i32*, i32*, ...)*, ...)

; Function Attrs: nounwind uwtable
define internal void @compute_indexmap(i8* %ot, i32 %d1, i32 %d2, i32 %d3) #0 !dbg !549 {
entry:
  %ot.addr = alloca i8*, align 8
  %d1.addr = alloca i32, align 4
  %d2.addr = alloca i32, align 4
  %d3.addr = alloca i32, align 4
  %twiddle = alloca double*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %kk = alloca i32, align 4
  %kk2 = alloca i32, align 4
  %jj = alloca i32, align 4
  %kj2 = alloca i32, align 4
  %ii = alloca i32, align 4
  %ap = alloca double, align 8
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  %2 = ptrtoint i8** %ot.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.226, i32 0, i32 0))
  store i8* %ot, i8** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ot.addr, metadata !552, metadata !98), !dbg !553
  %3 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.227, i32 0, i32 0))
  store i32 %d1, i32* %d1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %d1.addr, metadata !554, metadata !98), !dbg !555
  %4 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.228, i32 0, i32 0))
  store i32 %d2, i32* %d2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %d2.addr, metadata !556, metadata !98), !dbg !557
  %5 = ptrtoint i32* %d3.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.229, i32 0, i32 0))
  store i32 %d3, i32* %d3.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %d3.addr, metadata !558, metadata !98), !dbg !559
  %6 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %6, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.230, i32 0, i32 0))
  %7 = load i32, i32* %d2.addr, align 4, !dbg !560
  %8 = zext i32 %7 to i64, !dbg !561
  %9 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %9, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.231, i32 0, i32 0))
  %10 = load i32, i32* %d1.addr, align 4, !dbg !562
  %add = add nsw i32 %10, 1, !dbg !563
  %11 = zext i32 %add to i64, !dbg !561
  call void @llvm.dbg.declare(metadata double** %twiddle, metadata !564, metadata !98), !dbg !565
  %12 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %12, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.232, i32 0, i32 0))
  %13 = load i32, i32* %d2.addr, align 4, !dbg !566
  %14 = zext i32 %13 to i64, !dbg !567
  %15 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %15, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.233, i32 0, i32 0))
  %16 = load i32, i32* %d1.addr, align 4, !dbg !568
  %add1 = add nsw i32 %16, 1, !dbg !569
  %17 = zext i32 %add1 to i64, !dbg !567
  %18 = ptrtoint i8** %ot.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %18, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.234, i32 0, i32 0))
  %19 = load i8*, i8** %ot.addr, align 8, !dbg !570
  %20 = bitcast i8* %19 to double*, !dbg !567
  %21 = ptrtoint double** %twiddle to i64
  call void @__DiscoPoPOpenMPWrite(i64 %21, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.235, i32 0, i32 0))
  store double* %20, double** %twiddle, align 8, !dbg !565
  call void @llvm.dbg.declare(metadata i32* %i, metadata !571, metadata !98), !dbg !572
  call void @llvm.dbg.declare(metadata i32* %j, metadata !573, metadata !98), !dbg !574
  call void @llvm.dbg.declare(metadata i32* %k, metadata !575, metadata !98), !dbg !576
  call void @llvm.dbg.declare(metadata i32* %kk, metadata !577, metadata !98), !dbg !578
  call void @llvm.dbg.declare(metadata i32* %kk2, metadata !579, metadata !98), !dbg !580
  call void @llvm.dbg.declare(metadata i32* %jj, metadata !581, metadata !98), !dbg !582
  call void @llvm.dbg.declare(metadata i32* %kj2, metadata !583, metadata !98), !dbg !584
  call void @llvm.dbg.declare(metadata i32* %ii, metadata !585, metadata !98), !dbg !586
  call void @llvm.dbg.declare(metadata double* %ap, metadata !587, metadata !98), !dbg !588
  %22 = ptrtoint double* %ap to i64
  call void @__DiscoPoPOpenMPWrite(i64 %22, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.236, i32 0, i32 0))
  store double 0xBF04B2B4199E149A, double* %ap, align 8, !dbg !589
  %23 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !590
  %24 = ptrtoint i8** %23 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %24, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.237, i32 0, i32 0))
  store i8* getelementptr inbounds ([32 x i8], [32 x i8]* @2, i32 0, i32 0), i8** %23, align 8, !dbg !590
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.239, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* %.kmpc_loc.addr, i32 4, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, i64, double**, double*)* @.omp_outlined..17 to void (i32*, i32*, ...)*), i64 %8, i64 %11, double** %twiddle, double* %ap), !dbg !590
  ret void, !dbg !591
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..17(i32* noalias %.global_tid., i32* noalias %.bound_tid., i64 %vla, i64 %vla1, double** dereferenceable(8) %twiddle, double* dereferenceable(8) %ap) #0 !dbg !592 {
entry:
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([132 x i8], [132 x i8]* @.str.241, i32 0, i32 0))
  %.global_tid..addr = alloca i32*, align 8
  %.bound_tid..addr = alloca i32*, align 8
  %vla.addr = alloca i64, align 8
  %vla.addr2 = alloca i64, align 8
  %twiddle.addr = alloca double**, align 8
  %ap.addr = alloca double*, align 8
  %.omp.iv = alloca i32, align 4
  %.omp.last.iteration = alloca i32, align 4
  %k = alloca i32, align 4
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k5 = alloca i32, align 4
  %kk = alloca i32, align 4
  %kk2 = alloca i32, align 4
  %jj = alloca i32, align 4
  %kj2 = alloca i32, align 4
  %ii = alloca i32, align 4
  %k6 = alloca i32, align 4
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  %2 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.242, i32 0, i32 0))
  store i32* %.global_tid., i32** %.global_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.global_tid..addr, metadata !596, metadata !98), !dbg !597
  %3 = ptrtoint i32** %.bound_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.243, i32 0, i32 0))
  store i32* %.bound_tid., i32** %.bound_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.bound_tid..addr, metadata !598, metadata !98), !dbg !597
  %4 = ptrtoint i64* %vla.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.244, i32 0, i32 0))
  store i64 %vla, i64* %vla.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %vla.addr, metadata !599, metadata !98), !dbg !597
  %5 = ptrtoint i64* %vla.addr2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.245, i32 0, i32 0))
  store i64 %vla1, i64* %vla.addr2, align 8
  call void @llvm.dbg.declare(metadata i64* %vla.addr2, metadata !600, metadata !98), !dbg !597
  %6 = ptrtoint double*** %twiddle.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.246, i32 0, i32 0))
  store double** %twiddle, double*** %twiddle.addr, align 8
  call void @llvm.dbg.declare(metadata double*** %twiddle.addr, metadata !601, metadata !98), !dbg !597
  %7 = ptrtoint double** %ap.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %7, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.247, i32 0, i32 0))
  store double* %ap, double** %ap.addr, align 8
  call void @llvm.dbg.declare(metadata double** %ap.addr, metadata !602, metadata !98), !dbg !597
  %8 = ptrtoint i64* %vla.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %8, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.248, i32 0, i32 0))
  %9 = load i64, i64* %vla.addr, align 8, !dbg !603
  %10 = ptrtoint i64* %vla.addr2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %10, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.249, i32 0, i32 0))
  %11 = load i64, i64* %vla.addr2, align 8, !dbg !603
  %12 = ptrtoint double*** %twiddle.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %12, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.250, i32 0, i32 0))
  %13 = load double**, double*** %twiddle.addr, align 8, !dbg !603
  %14 = ptrtoint double** %ap.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %14, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.251, i32 0, i32 0))
  %15 = load double*, double** %ap.addr, align 8, !dbg !603
  call void @llvm.dbg.declare(metadata i32* %.omp.iv, metadata !604, metadata !98), !dbg !597
  call void @llvm.dbg.declare(metadata i32* %.omp.last.iteration, metadata !605, metadata !98), !dbg !597
  %16 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2) to i64
  call void @__DiscoPoPOpenMPRead(i64 %16, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.252, i32 0, i32 0))
  %17 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2), align 4, !dbg !606
  %sub = sub nsw i32 %17, 0, !dbg !603
  %sub3 = sub nsw i32 %sub, 1, !dbg !603
  %add = add nsw i32 %sub3, 1, !dbg !603
  %div = sdiv i32 %add, 1, !dbg !603
  %sub4 = sub nsw i32 %div, 1, !dbg !597
  %18 = ptrtoint i32* %.omp.last.iteration to i64
  call void @__DiscoPoPOpenMPWrite(i64 %18, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.253, i32 0, i32 0))
  store i32 %sub4, i32* %.omp.last.iteration, align 4, !dbg !597
  call void @llvm.dbg.declare(metadata i32* %k, metadata !607, metadata !98), !dbg !597
  %19 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPWrite(i64 %19, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.254, i32 0, i32 0))
  store i32 0, i32* %k, align 4, !dbg !608
  %20 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2) to i64
  call void @__DiscoPoPOpenMPRead(i64 %20, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.255, i32 0, i32 0))
  %21 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2), align 4, !dbg !606
  %cmp = icmp slt i32 0, %21, !dbg !603
  br i1 %cmp, label %omp.precond.then, label %omp.precond.end, !dbg !603

omp.precond.then:                                 ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %.omp.lb, metadata !609, metadata !98), !dbg !597
  %22 = ptrtoint i32* %.omp.lb to i64
  call void @__DiscoPoPOpenMPWrite(i64 %22, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.256, i32 0, i32 0))
  store i32 0, i32* %.omp.lb, align 4, !dbg !610
  call void @llvm.dbg.declare(metadata i32* %.omp.ub, metadata !612, metadata !98), !dbg !597
  %23 = ptrtoint i32* %.omp.last.iteration to i64
  call void @__DiscoPoPOpenMPRead(i64 %23, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.257, i32 0, i32 0))
  %24 = load i32, i32* %.omp.last.iteration, align 4, !dbg !613
  %25 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPWrite(i64 %25, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.258, i32 0, i32 0))
  store i32 %24, i32* %.omp.ub, align 4, !dbg !610
  call void @llvm.dbg.declare(metadata i32* %.omp.stride, metadata !615, metadata !98), !dbg !597
  %26 = ptrtoint i32* %.omp.stride to i64
  call void @__DiscoPoPOpenMPWrite(i64 %26, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.259, i32 0, i32 0))
  store i32 1, i32* %.omp.stride, align 4, !dbg !610
  call void @llvm.dbg.declare(metadata i32* %.omp.is_last, metadata !616, metadata !98), !dbg !597
  %27 = ptrtoint i32* %.omp.is_last to i64
  call void @__DiscoPoPOpenMPWrite(i64 %27, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.260, i32 0, i32 0))
  store i32 0, i32* %.omp.is_last, align 4, !dbg !610
  call void @llvm.dbg.declare(metadata i32* %i, metadata !617, metadata !98), !dbg !597
  call void @llvm.dbg.declare(metadata i32* %j, metadata !618, metadata !98), !dbg !597
  call void @llvm.dbg.declare(metadata i32* %k5, metadata !607, metadata !98), !dbg !597
  call void @llvm.dbg.declare(metadata i32* %kk, metadata !619, metadata !98), !dbg !597
  call void @llvm.dbg.declare(metadata i32* %kk2, metadata !620, metadata !98), !dbg !597
  call void @llvm.dbg.declare(metadata i32* %jj, metadata !621, metadata !98), !dbg !597
  call void @llvm.dbg.declare(metadata i32* %kj2, metadata !622, metadata !98), !dbg !597
  call void @llvm.dbg.declare(metadata i32* %ii, metadata !623, metadata !98), !dbg !597
  call void @llvm.dbg.declare(metadata i32* %k6, metadata !607, metadata !98), !dbg !597
  %28 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !624
  %29 = ptrtoint i8** %28 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %29, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.261, i32 0, i32 0))
  store i8* getelementptr inbounds ([32 x i8], [32 x i8]* @2, i32 0, i32 0), i8** %28, align 8, !dbg !624
  %30 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %30, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.262, i32 0, i32 0))
  %31 = load i32*, i32** %.global_tid..addr, align 8, !dbg !624
  %32 = ptrtoint i32* %31 to i64
  call void @__DiscoPoPOpenMPRead(i64 %32, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.263, i32 0, i32 0))
  %33 = load i32, i32* %31, align 4, !dbg !624
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([132 x i8], [132 x i8]* @.str.265, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_for_static_init_4(%ident_t* %.kmpc_loc.addr, i32 %33, i32 34, i32* %.omp.is_last, i32* %.omp.lb, i32* %.omp.ub, i32* %.omp.stride, i32 1, i32 1), !dbg !624
  %34 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %34, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.266, i32 0, i32 0))
  %35 = load i32, i32* %.omp.ub, align 4, !dbg !610
  %36 = ptrtoint i32* %.omp.last.iteration to i64
  call void @__DiscoPoPOpenMPRead(i64 %36, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.267, i32 0, i32 0))
  %37 = load i32, i32* %.omp.last.iteration, align 4, !dbg !613
  %cmp7 = icmp sgt i32 %35, %37, !dbg !610
  br i1 %cmp7, label %cond.true, label %cond.false, !dbg !610

cond.true:                                        ; preds = %omp.precond.then
  %38 = ptrtoint i32* %.omp.last.iteration to i64
  call void @__DiscoPoPOpenMPRead(i64 %38, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.268, i32 0, i32 0))
  %39 = load i32, i32* %.omp.last.iteration, align 4, !dbg !625
  br label %cond.end, !dbg !627

cond.false:                                       ; preds = %omp.precond.then
  %40 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %40, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.269, i32 0, i32 0))
  %41 = load i32, i32* %.omp.ub, align 4, !dbg !629
  br label %cond.end, !dbg !629

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %39, %cond.true ], [ %41, %cond.false ], !dbg !631
  %42 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPWrite(i64 %42, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.270, i32 0, i32 0))
  store i32 %cond, i32* %.omp.ub, align 4, !dbg !631
  %43 = ptrtoint i32* %.omp.lb to i64
  call void @__DiscoPoPOpenMPRead(i64 %43, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.271, i32 0, i32 0))
  %44 = load i32, i32* %.omp.lb, align 4, !dbg !631
  %45 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPWrite(i64 %45, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.272, i32 0, i32 0))
  store i32 %44, i32* %.omp.iv, align 4, !dbg !631
  br label %omp.inner.for.cond, !dbg !633

omp.inner.for.cond:                               ; preds = %omp.inner.for.inc, %cond.end
  %46 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %46, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.273, i32 0, i32 0))
  %47 = load i32, i32* %.omp.iv, align 4, !dbg !634
  %48 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %48, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.274, i32 0, i32 0))
  %49 = load i32, i32* %.omp.ub, align 4, !dbg !634
  %cmp8 = icmp sle i32 %47, %49, !dbg !636
  br i1 %cmp8, label %omp.inner.for.body, label %omp.inner.for.end, !dbg !638

omp.inner.for.body:                               ; preds = %omp.inner.for.cond
  %50 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %50, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.275, i32 0, i32 0))
  %51 = load i32, i32* %.omp.iv, align 4, !dbg !639
  %mul = mul nsw i32 %51, 1, !dbg !641
  %add9 = add nsw i32 0, %mul, !dbg !641
  %52 = ptrtoint i32* %k5 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %52, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.276, i32 0, i32 0))
  store i32 %add9, i32* %k5, align 4, !dbg !641
  %53 = ptrtoint i32* %k5 to i64
  call void @__DiscoPoPOpenMPRead(i64 %53, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.277, i32 0, i32 0))
  %54 = load i32, i32* %k5, align 4, !dbg !642
  %add10 = add nsw i32 %54, 32, !dbg !644
  %rem = srem i32 %add10, 64, !dbg !645
  %sub11 = sub nsw i32 %rem, 32, !dbg !646
  %55 = ptrtoint i32* %kk to i64
  call void @__DiscoPoPOpenMPWrite(i64 %55, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.278, i32 0, i32 0))
  store i32 %sub11, i32* %kk, align 4, !dbg !647
  %56 = ptrtoint i32* %kk to i64
  call void @__DiscoPoPOpenMPRead(i64 %56, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.279, i32 0, i32 0))
  %57 = load i32, i32* %kk, align 4, !dbg !648
  %58 = ptrtoint i32* %kk to i64
  call void @__DiscoPoPOpenMPRead(i64 %58, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.280, i32 0, i32 0))
  %59 = load i32, i32* %kk, align 4, !dbg !649
  %mul12 = mul nsw i32 %57, %59, !dbg !650
  %60 = ptrtoint i32* %kk2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %60, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.281, i32 0, i32 0))
  store i32 %mul12, i32* %kk2, align 4, !dbg !651
  %61 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %61, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.282, i32 0, i32 0))
  store i32 0, i32* %j, align 4, !dbg !652
  br label %for.cond, !dbg !654

for.cond:                                         ; preds = %for.inc32, %omp.inner.for.body
  %62 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %62, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.283, i32 0, i32 0))
  %63 = load i32, i32* %j, align 4, !dbg !655
  %64 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 1) to i64
  call void @__DiscoPoPOpenMPRead(i64 %64, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.284, i32 0, i32 0))
  %65 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 1), align 4, !dbg !658
  %cmp13 = icmp slt i32 %63, %65, !dbg !659
  br i1 %cmp13, label %for.body, label %for.end34, !dbg !660

for.body:                                         ; preds = %for.cond
  %66 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %66, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.285, i32 0, i32 0))
  %67 = load i32, i32* %j, align 4, !dbg !661
  %add14 = add nsw i32 %67, 32, !dbg !663
  %rem15 = srem i32 %add14, 64, !dbg !664
  %sub16 = sub nsw i32 %rem15, 32, !dbg !665
  %68 = ptrtoint i32* %jj to i64
  call void @__DiscoPoPOpenMPWrite(i64 %68, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.286, i32 0, i32 0))
  store i32 %sub16, i32* %jj, align 4, !dbg !666
  %69 = ptrtoint i32* %jj to i64
  call void @__DiscoPoPOpenMPRead(i64 %69, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.287, i32 0, i32 0))
  %70 = load i32, i32* %jj, align 4, !dbg !667
  %71 = ptrtoint i32* %jj to i64
  call void @__DiscoPoPOpenMPRead(i64 %71, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.288, i32 0, i32 0))
  %72 = load i32, i32* %jj, align 4, !dbg !668
  %mul17 = mul nsw i32 %70, %72, !dbg !669
  %73 = ptrtoint i32* %kk2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %73, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.289, i32 0, i32 0))
  %74 = load i32, i32* %kk2, align 4, !dbg !670
  %add18 = add nsw i32 %mul17, %74, !dbg !671
  %75 = ptrtoint i32* %kj2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %75, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.290, i32 0, i32 0))
  store i32 %add18, i32* %kj2, align 4, !dbg !672
  %76 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %76, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.291, i32 0, i32 0))
  store i32 0, i32* %i, align 4, !dbg !673
  br label %for.cond19, !dbg !675

for.cond19:                                       ; preds = %for.inc, %for.body
  %77 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %77, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.292, i32 0, i32 0))
  %78 = load i32, i32* %i, align 4, !dbg !676
  %79 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 0) to i64
  call void @__DiscoPoPOpenMPRead(i64 %79, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.293, i32 0, i32 0))
  %80 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 0), align 4, !dbg !679
  %cmp20 = icmp slt i32 %78, %80, !dbg !680
  br i1 %cmp20, label %for.body21, label %for.end, !dbg !681

for.body21:                                       ; preds = %for.cond19
  %81 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %81, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.294, i32 0, i32 0))
  %82 = load i32, i32* %i, align 4, !dbg !682
  %add22 = add nsw i32 %82, 32, !dbg !684
  %rem23 = srem i32 %add22, 64, !dbg !685
  %sub24 = sub nsw i32 %rem23, 32, !dbg !686
  %83 = ptrtoint i32* %ii to i64
  call void @__DiscoPoPOpenMPWrite(i64 %83, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.295, i32 0, i32 0))
  store i32 %sub24, i32* %ii, align 4, !dbg !687
  %84 = ptrtoint double* %15 to i64
  call void @__DiscoPoPOpenMPRead(i64 %84, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.296, i32 0, i32 0))
  %85 = load double, double* %15, align 8, !dbg !688
  %86 = ptrtoint i32* %ii to i64
  call void @__DiscoPoPOpenMPRead(i64 %86, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.297, i32 0, i32 0))
  %87 = load i32, i32* %ii, align 4, !dbg !689
  %88 = ptrtoint i32* %ii to i64
  call void @__DiscoPoPOpenMPRead(i64 %88, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.298, i32 0, i32 0))
  %89 = load i32, i32* %ii, align 4, !dbg !690
  %mul25 = mul nsw i32 %87, %89, !dbg !691
  %90 = ptrtoint i32* %kj2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %90, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.299, i32 0, i32 0))
  %91 = load i32, i32* %kj2, align 4, !dbg !692
  %add26 = add nsw i32 %mul25, %91, !dbg !693
  %conv = sitofp i32 %add26 to double, !dbg !694
  %mul27 = fmul double %85, %conv, !dbg !695
  %call = call double @exp(double %mul27) #7, !dbg !696
  %92 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %92, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.300, i32 0, i32 0))
  %93 = load i32, i32* %i, align 4, !dbg !697
  %idxprom = sext i32 %93 to i64, !dbg !698
  %94 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %94, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.301, i32 0, i32 0))
  %95 = load i32, i32* %j, align 4, !dbg !699
  %idxprom28 = sext i32 %95 to i64, !dbg !698
  %96 = ptrtoint i32* %k5 to i64
  call void @__DiscoPoPOpenMPRead(i64 %96, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.302, i32 0, i32 0))
  %97 = load i32, i32* %k5, align 4, !dbg !700
  %idxprom29 = sext i32 %97 to i64, !dbg !698
  %98 = ptrtoint double** %13 to i64
  call void @__DiscoPoPOpenMPRead(i64 %98, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.303, i32 0, i32 0))
  %99 = load double*, double** %13, align 8, !dbg !698
  %100 = mul nuw i64 %9, %11, !dbg !698
  %101 = mul nsw i64 %idxprom29, %100, !dbg !698
  %arrayidx = getelementptr inbounds double, double* %99, i64 %101, !dbg !698
  %102 = mul nsw i64 %idxprom28, %11, !dbg !698
  %arrayidx30 = getelementptr inbounds double, double* %arrayidx, i64 %102, !dbg !698
  %arrayidx31 = getelementptr inbounds double, double* %arrayidx30, i64 %idxprom, !dbg !698
  %103 = ptrtoint double* %arrayidx31 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %103, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.304, i32 0, i32 0))
  store double %call, double* %arrayidx31, align 8, !dbg !701
  br label %for.inc, !dbg !702

for.inc:                                          ; preds = %for.body21
  %104 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %104, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.305, i32 0, i32 0))
  %105 = load i32, i32* %i, align 4, !dbg !703
  %inc = add nsw i32 %105, 1, !dbg !703
  %106 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %106, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.306, i32 0, i32 0))
  store i32 %inc, i32* %i, align 4, !dbg !703
  br label %for.cond19, !dbg !705

for.end:                                          ; preds = %for.cond19
  br label %for.inc32, !dbg !706

for.inc32:                                        ; preds = %for.end
  %107 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %107, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.307, i32 0, i32 0))
  %108 = load i32, i32* %j, align 4, !dbg !707
  %inc33 = add nsw i32 %108, 1, !dbg !707
  %109 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %109, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.308, i32 0, i32 0))
  store i32 %inc33, i32* %j, align 4, !dbg !707
  br label %for.cond, !dbg !709

for.end34:                                        ; preds = %for.cond
  br label %omp.body.continue, !dbg !710

omp.body.continue:                                ; preds = %for.end34
  br label %omp.inner.for.inc, !dbg !711

omp.inner.for.inc:                                ; preds = %omp.body.continue
  %110 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %110, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.309, i32 0, i32 0))
  %111 = load i32, i32* %.omp.iv, align 4, !dbg !712
  %add35 = add nsw i32 %111, 1, !dbg !714
  %112 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPWrite(i64 %112, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.310, i32 0, i32 0))
  store i32 %add35, i32* %.omp.iv, align 4, !dbg !714
  br label %omp.inner.for.cond, !dbg !716

omp.inner.for.end:                                ; preds = %omp.inner.for.cond
  br label %omp.loop.exit, !dbg !717

omp.loop.exit:                                    ; preds = %omp.inner.for.end
  %113 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !718
  %114 = ptrtoint i8** %113 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %114, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.311, i32 0, i32 0))
  store i8* getelementptr inbounds ([32 x i8], [32 x i8]* @2, i32 0, i32 0), i8** %113, align 8, !dbg !718
  %115 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %115, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.312, i32 0, i32 0))
  %116 = load i32*, i32** %.global_tid..addr, align 8, !dbg !718
  %117 = ptrtoint i32* %116 to i64
  call void @__DiscoPoPOpenMPRead(i64 %117, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.313, i32 0, i32 0))
  %118 = load i32, i32* %116, align 4, !dbg !718
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([132 x i8], [132 x i8]* @.str.315, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_for_static_fini(%ident_t* %.kmpc_loc.addr, i32 %118), !dbg !718
  br label %omp.precond.end, !dbg !718

omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
  call void @__DiscoPoPOpenMPAfterCall()
  ret void, !dbg !719
}

; Function Attrs: nounwind
declare double @exp(double) #4

; Function Attrs: nounwind uwtable
define internal void @compute_initial_conditions(i8* %ou0, i32 %d1, i32 %d2, i32 %d3) #0 !dbg !720 {
entry:
  %ou0.addr = alloca i8*, align 8
  %d1.addr = alloca i32, align 4
  %d2.addr = alloca i32, align 4
  %d3.addr = alloca i32, align 4
  %u0 = alloca %struct.dcomplex*, align 8
  %k = alloca i32, align 4
  %j = alloca i32, align 4
  %x0 = alloca double, align 8
  %start = alloca double, align 8
  %an = alloca double, align 8
  %dummy = alloca double, align 8
  %starts = alloca [64 x double], align 16
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  %2 = ptrtoint i8** %ou0.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.316, i32 0, i32 0))
  store i8* %ou0, i8** %ou0.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ou0.addr, metadata !721, metadata !98), !dbg !722
  %3 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.317, i32 0, i32 0))
  store i32 %d1, i32* %d1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %d1.addr, metadata !723, metadata !98), !dbg !724
  %4 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.318, i32 0, i32 0))
  store i32 %d2, i32* %d2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %d2.addr, metadata !725, metadata !98), !dbg !726
  %5 = ptrtoint i32* %d3.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.319, i32 0, i32 0))
  store i32 %d3, i32* %d3.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %d3.addr, metadata !727, metadata !98), !dbg !728
  %6 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %6, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.320, i32 0, i32 0))
  %7 = load i32, i32* %d2.addr, align 4, !dbg !729
  %8 = zext i32 %7 to i64, !dbg !730
  %9 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %9, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.321, i32 0, i32 0))
  %10 = load i32, i32* %d1.addr, align 4, !dbg !731
  %add = add nsw i32 %10, 1, !dbg !732
  %11 = zext i32 %add to i64, !dbg !730
  call void @llvm.dbg.declare(metadata %struct.dcomplex** %u0, metadata !733, metadata !98), !dbg !734
  %12 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %12, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.322, i32 0, i32 0))
  %13 = load i32, i32* %d2.addr, align 4, !dbg !735
  %14 = zext i32 %13 to i64, !dbg !736
  %15 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %15, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.323, i32 0, i32 0))
  %16 = load i32, i32* %d1.addr, align 4, !dbg !737
  %add1 = add nsw i32 %16, 1, !dbg !738
  %17 = zext i32 %add1 to i64, !dbg !736
  %18 = ptrtoint i8** %ou0.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %18, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.324, i32 0, i32 0))
  %19 = load i8*, i8** %ou0.addr, align 8, !dbg !739
  %20 = bitcast i8* %19 to %struct.dcomplex*, !dbg !736
  %21 = ptrtoint %struct.dcomplex** %u0 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %21, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.325, i32 0, i32 0))
  store %struct.dcomplex* %20, %struct.dcomplex** %u0, align 8, !dbg !734
  call void @llvm.dbg.declare(metadata i32* %k, metadata !740, metadata !98), !dbg !741
  call void @llvm.dbg.declare(metadata i32* %j, metadata !742, metadata !98), !dbg !743
  call void @llvm.dbg.declare(metadata double* %x0, metadata !744, metadata !98), !dbg !745
  call void @llvm.dbg.declare(metadata double* %start, metadata !746, metadata !98), !dbg !747
  call void @llvm.dbg.declare(metadata double* %an, metadata !748, metadata !98), !dbg !749
  call void @llvm.dbg.declare(metadata double* %dummy, metadata !750, metadata !98), !dbg !751
  call void @llvm.dbg.declare(metadata [64 x double]* %starts, metadata !752, metadata !98), !dbg !753
  %22 = ptrtoint double* %start to i64
  call void @__DiscoPoPOpenMPWrite(i64 %22, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.326, i32 0, i32 0))
  store double 0x41B2B9B0A1000000, double* %start, align 8, !dbg !754
  %call = call double @ipow46(double 0x41D2309CE5400000, i32 0), !dbg !755
  %23 = ptrtoint double* %an to i64
  call void @__DiscoPoPOpenMPWrite(i64 %23, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.327, i32 0, i32 0))
  store double %call, double* %an, align 8, !dbg !756
  %24 = ptrtoint double* %an to i64
  call void @__DiscoPoPOpenMPRead(i64 %24, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.328, i32 0, i32 0))
  %25 = load double, double* %an, align 8, !dbg !757
  %call2 = call double @randlc(double* %start, double %25), !dbg !758
  %26 = ptrtoint double* %dummy to i64
  call void @__DiscoPoPOpenMPWrite(i64 %26, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.329, i32 0, i32 0))
  store double %call2, double* %dummy, align 8, !dbg !759
  %call3 = call double @ipow46(double 0x41D2309CE5400000, i32 8192), !dbg !760
  %27 = ptrtoint double* %an to i64
  call void @__DiscoPoPOpenMPWrite(i64 %27, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.330, i32 0, i32 0))
  store double %call3, double* %an, align 8, !dbg !761
  %28 = ptrtoint double* %start to i64
  call void @__DiscoPoPOpenMPRead(i64 %28, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.331, i32 0, i32 0))
  %29 = load double, double* %start, align 8, !dbg !762
  %arrayidx = getelementptr inbounds [64 x double], [64 x double]* %starts, i64 0, i64 0, !dbg !763
  %30 = ptrtoint double* %arrayidx to i64
  call void @__DiscoPoPOpenMPWrite(i64 %30, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.332, i32 0, i32 0))
  store double %29, double* %arrayidx, align 16, !dbg !764
  %31 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPWrite(i64 %31, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.333, i32 0, i32 0))
  store i32 1, i32* %k, align 4, !dbg !765
  br label %for.cond, !dbg !767

for.cond:                                         ; preds = %for.inc, %entry
  %32 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %32, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.334, i32 0, i32 0))
  %33 = load i32, i32* %k, align 4, !dbg !768
  %34 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2) to i64
  call void @__DiscoPoPOpenMPRead(i64 %34, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.335, i32 0, i32 0))
  %35 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2), align 4, !dbg !771
  %cmp = icmp slt i32 %33, %35, !dbg !772
  br i1 %cmp, label %for.body, label %for.end, !dbg !773

for.body:                                         ; preds = %for.cond
  %36 = ptrtoint double* %an to i64
  call void @__DiscoPoPOpenMPRead(i64 %36, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.336, i32 0, i32 0))
  %37 = load double, double* %an, align 8, !dbg !774
  %call4 = call double @randlc(double* %start, double %37), !dbg !776
  %38 = ptrtoint double* %dummy to i64
  call void @__DiscoPoPOpenMPWrite(i64 %38, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.337, i32 0, i32 0))
  store double %call4, double* %dummy, align 8, !dbg !777
  %39 = ptrtoint double* %start to i64
  call void @__DiscoPoPOpenMPRead(i64 %39, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.338, i32 0, i32 0))
  %40 = load double, double* %start, align 8, !dbg !778
  %41 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %41, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.339, i32 0, i32 0))
  %42 = load i32, i32* %k, align 4, !dbg !779
  %idxprom = sext i32 %42 to i64, !dbg !780
  %arrayidx5 = getelementptr inbounds [64 x double], [64 x double]* %starts, i64 0, i64 %idxprom, !dbg !780
  %43 = ptrtoint double* %arrayidx5 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %43, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.340, i32 0, i32 0))
  store double %40, double* %arrayidx5, align 8, !dbg !781
  br label %for.inc, !dbg !782

for.inc:                                          ; preds = %for.body
  %44 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %44, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.341, i32 0, i32 0))
  %45 = load i32, i32* %k, align 4, !dbg !783
  %inc = add nsw i32 %45, 1, !dbg !783
  %46 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPWrite(i64 %46, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.342, i32 0, i32 0))
  store i32 %inc, i32* %k, align 4, !dbg !783
  br label %for.cond, !dbg !785

for.end:                                          ; preds = %for.cond
  %47 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !786
  %48 = ptrtoint i8** %47 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %48, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.343, i32 0, i32 0))
  store i8* getelementptr inbounds ([42 x i8], [42 x i8]* @3, i32 0, i32 0), i8** %47, align 8, !dbg !786
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([141 x i8], [141 x i8]* @.str.345, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* %.kmpc_loc.addr, i32 4, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, [64 x double]*, i64, i64, %struct.dcomplex**)* @.omp_outlined..9 to void (i32*, i32*, ...)*), [64 x double]* %starts, i64 %8, i64 %11, %struct.dcomplex** %u0), !dbg !786
  ret void, !dbg !787
}

; Function Attrs: nounwind uwtable
define internal double @ipow46(double %a, i32 %exponent) #0 !dbg !788 {
entry:
  %retval = alloca double, align 8
  %a.addr = alloca double, align 8
  %exponent.addr = alloca i32, align 4
  %result = alloca double, align 8
  %dummy = alloca double, align 8
  %q = alloca double, align 8
  %r = alloca double, align 8
  %n = alloca i32, align 4
  %n2 = alloca i32, align 4
  %0 = ptrtoint double* %a.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.346, i32 0, i32 0))
  store double %a, double* %a.addr, align 8
  call void @llvm.dbg.declare(metadata double* %a.addr, metadata !791, metadata !98), !dbg !792
  %1 = ptrtoint i32* %exponent.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.347, i32 0, i32 0))
  store i32 %exponent, i32* %exponent.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %exponent.addr, metadata !793, metadata !98), !dbg !794
  call void @llvm.dbg.declare(metadata double* %result, metadata !795, metadata !98), !dbg !796
  call void @llvm.dbg.declare(metadata double* %dummy, metadata !797, metadata !98), !dbg !798
  call void @llvm.dbg.declare(metadata double* %q, metadata !799, metadata !98), !dbg !800
  call void @llvm.dbg.declare(metadata double* %r, metadata !801, metadata !98), !dbg !802
  call void @llvm.dbg.declare(metadata i32* %n, metadata !803, metadata !98), !dbg !804
  call void @llvm.dbg.declare(metadata i32* %n2, metadata !805, metadata !98), !dbg !806
  %2 = ptrtoint double* %result to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.348, i32 0, i32 0))
  store double 1.000000e+00, double* %result, align 8, !dbg !807
  %3 = ptrtoint i32* %exponent.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %3, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.349, i32 0, i32 0))
  %4 = load i32, i32* %exponent.addr, align 4, !dbg !808
  %cmp = icmp eq i32 %4, 0, !dbg !810
  br i1 %cmp, label %if.then, label %if.end, !dbg !811

if.then:                                          ; preds = %entry
  %5 = ptrtoint double* %result to i64
  call void @__DiscoPoPOpenMPRead(i64 %5, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.350, i32 0, i32 0))
  %6 = load double, double* %result, align 8, !dbg !812
  store double %6, double* %retval, align 8, !dbg !814
  br label %return, !dbg !814

if.end:                                           ; preds = %entry
  %7 = ptrtoint double* %a.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %7, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.351, i32 0, i32 0))
  %8 = load double, double* %a.addr, align 8, !dbg !815
  %9 = ptrtoint double* %q to i64
  call void @__DiscoPoPOpenMPWrite(i64 %9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.352, i32 0, i32 0))
  store double %8, double* %q, align 8, !dbg !816
  %10 = ptrtoint double* %r to i64
  call void @__DiscoPoPOpenMPWrite(i64 %10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.353, i32 0, i32 0))
  store double 1.000000e+00, double* %r, align 8, !dbg !817
  %11 = ptrtoint i32* %exponent.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %11, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.354, i32 0, i32 0))
  %12 = load i32, i32* %exponent.addr, align 4, !dbg !818
  %13 = ptrtoint i32* %n to i64
  call void @__DiscoPoPOpenMPWrite(i64 %13, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.355, i32 0, i32 0))
  store i32 %12, i32* %n, align 4, !dbg !819
  br label %while.cond, !dbg !820

while.cond:                                       ; preds = %if.end5, %if.end
  %14 = ptrtoint i32* %n to i64
  call void @__DiscoPoPOpenMPRead(i64 %14, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.356, i32 0, i32 0))
  %15 = load i32, i32* %n, align 4, !dbg !821
  %cmp1 = icmp sgt i32 %15, 1, !dbg !823
  br i1 %cmp1, label %while.body, label %while.end, !dbg !824

while.body:                                       ; preds = %while.cond
  %16 = ptrtoint i32* %n to i64
  call void @__DiscoPoPOpenMPRead(i64 %16, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.357, i32 0, i32 0))
  %17 = load i32, i32* %n, align 4, !dbg !825
  %div = sdiv i32 %17, 2, !dbg !827
  %18 = ptrtoint i32* %n2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %18, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.358, i32 0, i32 0))
  store i32 %div, i32* %n2, align 4, !dbg !828
  %19 = ptrtoint i32* %n2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %19, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.359, i32 0, i32 0))
  %20 = load i32, i32* %n2, align 4, !dbg !829
  %mul = mul nsw i32 %20, 2, !dbg !831
  %21 = ptrtoint i32* %n to i64
  call void @__DiscoPoPOpenMPRead(i64 %21, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.360, i32 0, i32 0))
  %22 = load i32, i32* %n, align 4, !dbg !832
  %cmp2 = icmp eq i32 %mul, %22, !dbg !833
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !834

if.then3:                                         ; preds = %while.body
  %23 = ptrtoint double* %q to i64
  call void @__DiscoPoPOpenMPRead(i64 %23, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.361, i32 0, i32 0))
  %24 = load double, double* %q, align 8, !dbg !835
  %call = call double @randlc(double* %q, double %24), !dbg !837
  %25 = ptrtoint double* %dummy to i64
  call void @__DiscoPoPOpenMPWrite(i64 %25, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.362, i32 0, i32 0))
  store double %call, double* %dummy, align 8, !dbg !838
  %26 = ptrtoint i32* %n2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %26, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.363, i32 0, i32 0))
  %27 = load i32, i32* %n2, align 4, !dbg !839
  %28 = ptrtoint i32* %n to i64
  call void @__DiscoPoPOpenMPWrite(i64 %28, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.364, i32 0, i32 0))
  store i32 %27, i32* %n, align 4, !dbg !840
  br label %if.end5, !dbg !841

if.else:                                          ; preds = %while.body
  %29 = ptrtoint double* %q to i64
  call void @__DiscoPoPOpenMPRead(i64 %29, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.365, i32 0, i32 0))
  %30 = load double, double* %q, align 8, !dbg !842
  %call4 = call double @randlc(double* %r, double %30), !dbg !844
  %31 = ptrtoint double* %dummy to i64
  call void @__DiscoPoPOpenMPWrite(i64 %31, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.366, i32 0, i32 0))
  store double %call4, double* %dummy, align 8, !dbg !845
  %32 = ptrtoint i32* %n to i64
  call void @__DiscoPoPOpenMPRead(i64 %32, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.367, i32 0, i32 0))
  %33 = load i32, i32* %n, align 4, !dbg !846
  %sub = sub nsw i32 %33, 1, !dbg !847
  %34 = ptrtoint i32* %n to i64
  call void @__DiscoPoPOpenMPWrite(i64 %34, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.368, i32 0, i32 0))
  store i32 %sub, i32* %n, align 4, !dbg !848
  br label %if.end5

if.end5:                                          ; preds = %if.else, %if.then3
  br label %while.cond, !dbg !849

while.end:                                        ; preds = %while.cond
  %35 = ptrtoint double* %q to i64
  call void @__DiscoPoPOpenMPRead(i64 %35, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.369, i32 0, i32 0))
  %36 = load double, double* %q, align 8, !dbg !851
  %call6 = call double @randlc(double* %r, double %36), !dbg !852
  %37 = ptrtoint double* %dummy to i64
  call void @__DiscoPoPOpenMPWrite(i64 %37, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.370, i32 0, i32 0))
  store double %call6, double* %dummy, align 8, !dbg !853
  %38 = ptrtoint double* %r to i64
  call void @__DiscoPoPOpenMPRead(i64 %38, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.371, i32 0, i32 0))
  %39 = load double, double* %r, align 8, !dbg !854
  %40 = ptrtoint double* %result to i64
  call void @__DiscoPoPOpenMPWrite(i64 %40, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.372, i32 0, i32 0))
  store double %39, double* %result, align 8, !dbg !855
  %41 = ptrtoint double* %result to i64
  call void @__DiscoPoPOpenMPRead(i64 %41, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.373, i32 0, i32 0))
  %42 = load double, double* %result, align 8, !dbg !856
  store double %42, double* %retval, align 8, !dbg !857
  br label %return, !dbg !857

return:                                           ; preds = %while.end, %if.then
  %43 = ptrtoint double* %retval to i64
  call void @__DiscoPoPOpenMPRead(i64 %43, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.374, i32 0, i32 0))
  %44 = load double, double* %retval, align 8, !dbg !858
  ret double %44, !dbg !858
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..9(i32* noalias %.global_tid., i32* noalias %.bound_tid., [64 x double]* dereferenceable(512) %starts, i64 %vla, i64 %vla1, %struct.dcomplex** dereferenceable(8) %u0) #0 !dbg !859 {
entry:
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.376, i32 0, i32 0))
  %.global_tid..addr = alloca i32*, align 8
  %.bound_tid..addr = alloca i32*, align 8
  %starts.addr = alloca [64 x double]*, align 8
  %vla.addr = alloca i64, align 8
  %vla.addr2 = alloca i64, align 8
  %u0.addr = alloca %struct.dcomplex**, align 8
  %.omp.iv = alloca i32, align 4
  %.omp.last.iteration = alloca i32, align 4
  %k = alloca i32, align 4
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %k5 = alloca i32, align 4
  %j = alloca i32, align 4
  %x0 = alloca double, align 8
  %k6 = alloca i32, align 4
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  %2 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.377, i32 0, i32 0))
  store i32* %.global_tid., i32** %.global_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.global_tid..addr, metadata !863, metadata !98), !dbg !864
  %3 = ptrtoint i32** %.bound_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.378, i32 0, i32 0))
  store i32* %.bound_tid., i32** %.bound_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.bound_tid..addr, metadata !865, metadata !98), !dbg !864
  %4 = ptrtoint [64 x double]** %starts.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.379, i32 0, i32 0))
  store [64 x double]* %starts, [64 x double]** %starts.addr, align 8
  call void @llvm.dbg.declare(metadata [64 x double]** %starts.addr, metadata !866, metadata !98), !dbg !864
  %5 = ptrtoint i64* %vla.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.380, i32 0, i32 0))
  store i64 %vla, i64* %vla.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %vla.addr, metadata !867, metadata !98), !dbg !864
  %6 = ptrtoint i64* %vla.addr2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.381, i32 0, i32 0))
  store i64 %vla1, i64* %vla.addr2, align 8
  call void @llvm.dbg.declare(metadata i64* %vla.addr2, metadata !868, metadata !98), !dbg !864
  %7 = ptrtoint %struct.dcomplex*** %u0.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %7, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.382, i32 0, i32 0))
  store %struct.dcomplex** %u0, %struct.dcomplex*** %u0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dcomplex*** %u0.addr, metadata !869, metadata !98), !dbg !864
  %8 = ptrtoint [64 x double]** %starts.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %8, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.383, i32 0, i32 0))
  %9 = load [64 x double]*, [64 x double]** %starts.addr, align 8, !dbg !870
  %10 = ptrtoint i64* %vla.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %10, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.384, i32 0, i32 0))
  %11 = load i64, i64* %vla.addr, align 8, !dbg !870
  %12 = ptrtoint i64* %vla.addr2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %12, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.385, i32 0, i32 0))
  %13 = load i64, i64* %vla.addr2, align 8, !dbg !870
  %14 = ptrtoint %struct.dcomplex*** %u0.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %14, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.386, i32 0, i32 0))
  %15 = load %struct.dcomplex**, %struct.dcomplex*** %u0.addr, align 8, !dbg !870
  call void @llvm.dbg.declare(metadata i32* %.omp.iv, metadata !871, metadata !98), !dbg !864
  call void @llvm.dbg.declare(metadata i32* %.omp.last.iteration, metadata !872, metadata !98), !dbg !864
  %16 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2) to i64
  call void @__DiscoPoPOpenMPRead(i64 %16, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.387, i32 0, i32 0))
  %17 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2), align 4, !dbg !873
  %sub = sub nsw i32 %17, 0, !dbg !870
  %sub3 = sub nsw i32 %sub, 1, !dbg !870
  %add = add nsw i32 %sub3, 1, !dbg !870
  %div = sdiv i32 %add, 1, !dbg !870
  %sub4 = sub nsw i32 %div, 1, !dbg !864
  %18 = ptrtoint i32* %.omp.last.iteration to i64
  call void @__DiscoPoPOpenMPWrite(i64 %18, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.388, i32 0, i32 0))
  store i32 %sub4, i32* %.omp.last.iteration, align 4, !dbg !864
  call void @llvm.dbg.declare(metadata i32* %k, metadata !874, metadata !98), !dbg !864
  %19 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPWrite(i64 %19, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.389, i32 0, i32 0))
  store i32 0, i32* %k, align 4, !dbg !875
  %20 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2) to i64
  call void @__DiscoPoPOpenMPRead(i64 %20, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.390, i32 0, i32 0))
  %21 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2), align 4, !dbg !873
  %cmp = icmp slt i32 0, %21, !dbg !870
  br i1 %cmp, label %omp.precond.then, label %omp.precond.end, !dbg !870

omp.precond.then:                                 ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %.omp.lb, metadata !876, metadata !98), !dbg !864
  %22 = ptrtoint i32* %.omp.lb to i64
  call void @__DiscoPoPOpenMPWrite(i64 %22, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.391, i32 0, i32 0))
  store i32 0, i32* %.omp.lb, align 4, !dbg !877
  call void @llvm.dbg.declare(metadata i32* %.omp.ub, metadata !879, metadata !98), !dbg !864
  %23 = ptrtoint i32* %.omp.last.iteration to i64
  call void @__DiscoPoPOpenMPRead(i64 %23, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.392, i32 0, i32 0))
  %24 = load i32, i32* %.omp.last.iteration, align 4, !dbg !880
  %25 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPWrite(i64 %25, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.393, i32 0, i32 0))
  store i32 %24, i32* %.omp.ub, align 4, !dbg !877
  call void @llvm.dbg.declare(metadata i32* %.omp.stride, metadata !882, metadata !98), !dbg !864
  %26 = ptrtoint i32* %.omp.stride to i64
  call void @__DiscoPoPOpenMPWrite(i64 %26, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.394, i32 0, i32 0))
  store i32 1, i32* %.omp.stride, align 4, !dbg !877
  call void @llvm.dbg.declare(metadata i32* %.omp.is_last, metadata !883, metadata !98), !dbg !864
  %27 = ptrtoint i32* %.omp.is_last to i64
  call void @__DiscoPoPOpenMPWrite(i64 %27, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.395, i32 0, i32 0))
  store i32 0, i32* %.omp.is_last, align 4, !dbg !877
  call void @llvm.dbg.declare(metadata i32* %k5, metadata !874, metadata !98), !dbg !864
  call void @llvm.dbg.declare(metadata i32* %j, metadata !884, metadata !98), !dbg !864
  call void @llvm.dbg.declare(metadata double* %x0, metadata !885, metadata !98), !dbg !864
  call void @llvm.dbg.declare(metadata i32* %k6, metadata !874, metadata !98), !dbg !864
  %28 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !886
  %29 = ptrtoint i8** %28 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %29, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.396, i32 0, i32 0))
  store i8* getelementptr inbounds ([42 x i8], [42 x i8]* @3, i32 0, i32 0), i8** %28, align 8, !dbg !886
  %30 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %30, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.397, i32 0, i32 0))
  %31 = load i32*, i32** %.global_tid..addr, align 8, !dbg !886
  %32 = ptrtoint i32* %31 to i64
  call void @__DiscoPoPOpenMPRead(i64 %32, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.398, i32 0, i32 0))
  %33 = load i32, i32* %31, align 4, !dbg !886
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.400, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_for_static_init_4(%ident_t* %.kmpc_loc.addr, i32 %33, i32 34, i32* %.omp.is_last, i32* %.omp.lb, i32* %.omp.ub, i32* %.omp.stride, i32 1, i32 1), !dbg !886
  %34 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %34, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.401, i32 0, i32 0))
  %35 = load i32, i32* %.omp.ub, align 4, !dbg !877
  %36 = ptrtoint i32* %.omp.last.iteration to i64
  call void @__DiscoPoPOpenMPRead(i64 %36, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.402, i32 0, i32 0))
  %37 = load i32, i32* %.omp.last.iteration, align 4, !dbg !880
  %cmp7 = icmp sgt i32 %35, %37, !dbg !877
  br i1 %cmp7, label %cond.true, label %cond.false, !dbg !877

cond.true:                                        ; preds = %omp.precond.then
  %38 = ptrtoint i32* %.omp.last.iteration to i64
  call void @__DiscoPoPOpenMPRead(i64 %38, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.403, i32 0, i32 0))
  %39 = load i32, i32* %.omp.last.iteration, align 4, !dbg !887
  br label %cond.end, !dbg !889

cond.false:                                       ; preds = %omp.precond.then
  %40 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %40, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.404, i32 0, i32 0))
  %41 = load i32, i32* %.omp.ub, align 4, !dbg !891
  br label %cond.end, !dbg !891

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %39, %cond.true ], [ %41, %cond.false ], !dbg !893
  %42 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPWrite(i64 %42, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.405, i32 0, i32 0))
  store i32 %cond, i32* %.omp.ub, align 4, !dbg !893
  %43 = ptrtoint i32* %.omp.lb to i64
  call void @__DiscoPoPOpenMPRead(i64 %43, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.406, i32 0, i32 0))
  %44 = load i32, i32* %.omp.lb, align 4, !dbg !893
  %45 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPWrite(i64 %45, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.407, i32 0, i32 0))
  store i32 %44, i32* %.omp.iv, align 4, !dbg !893
  br label %omp.inner.for.cond, !dbg !895

omp.inner.for.cond:                               ; preds = %omp.inner.for.inc, %cond.end
  %46 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %46, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.408, i32 0, i32 0))
  %47 = load i32, i32* %.omp.iv, align 4, !dbg !896
  %48 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %48, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.409, i32 0, i32 0))
  %49 = load i32, i32* %.omp.ub, align 4, !dbg !896
  %cmp8 = icmp sle i32 %47, %49, !dbg !898
  br i1 %cmp8, label %omp.inner.for.body, label %omp.inner.for.end, !dbg !900

omp.inner.for.body:                               ; preds = %omp.inner.for.cond
  %50 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %50, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.410, i32 0, i32 0))
  %51 = load i32, i32* %.omp.iv, align 4, !dbg !901
  %mul = mul nsw i32 %51, 1, !dbg !903
  %add9 = add nsw i32 0, %mul, !dbg !903
  %52 = ptrtoint i32* %k5 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %52, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.411, i32 0, i32 0))
  store i32 %add9, i32* %k5, align 4, !dbg !903
  %53 = ptrtoint i32* %k5 to i64
  call void @__DiscoPoPOpenMPRead(i64 %53, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.412, i32 0, i32 0))
  %54 = load i32, i32* %k5, align 4, !dbg !904
  %idxprom = sext i32 %54 to i64, !dbg !906
  %arrayidx = getelementptr inbounds [64 x double], [64 x double]* %9, i64 0, i64 %idxprom, !dbg !906
  %55 = ptrtoint double* %arrayidx to i64
  call void @__DiscoPoPOpenMPRead(i64 %55, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.413, i32 0, i32 0))
  %56 = load double, double* %arrayidx, align 8, !dbg !906
  %57 = ptrtoint double* %x0 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %57, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.414, i32 0, i32 0))
  store double %56, double* %x0, align 8, !dbg !907
  %58 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %58, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.415, i32 0, i32 0))
  store i32 0, i32* %j, align 4, !dbg !908
  br label %for.cond, !dbg !910

for.cond:                                         ; preds = %for.inc, %omp.inner.for.body
  %59 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %59, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.416, i32 0, i32 0))
  %60 = load i32, i32* %j, align 4, !dbg !911
  %61 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 1) to i64
  call void @__DiscoPoPOpenMPRead(i64 %61, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.417, i32 0, i32 0))
  %62 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 1), align 4, !dbg !914
  %cmp10 = icmp slt i32 %60, %62, !dbg !915
  br i1 %cmp10, label %for.body, label %for.end, !dbg !916

for.body:                                         ; preds = %for.cond
  %63 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %63, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.418, i32 0, i32 0))
  %64 = load i32, i32* %j, align 4, !dbg !917
  %idxprom11 = sext i32 %64 to i64, !dbg !919
  %65 = ptrtoint i32* %k5 to i64
  call void @__DiscoPoPOpenMPRead(i64 %65, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.419, i32 0, i32 0))
  %66 = load i32, i32* %k5, align 4, !dbg !920
  %idxprom12 = sext i32 %66 to i64, !dbg !919
  %67 = ptrtoint %struct.dcomplex** %15 to i64
  call void @__DiscoPoPOpenMPRead(i64 %67, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.420, i32 0, i32 0))
  %68 = load %struct.dcomplex*, %struct.dcomplex** %15, align 8, !dbg !919
  %69 = mul nuw i64 %11, %13, !dbg !919
  %70 = mul nsw i64 %idxprom12, %69, !dbg !919
  %arrayidx13 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %68, i64 %70, !dbg !919
  %71 = mul nsw i64 %idxprom11, %13, !dbg !919
  %arrayidx14 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx13, i64 %71, !dbg !919
  %arrayidx15 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx14, i64 0, !dbg !919
  %72 = bitcast %struct.dcomplex* %arrayidx15 to double*, !dbg !921
  call void @vranlc(i32 128, double* %x0, double 0x41D2309CE5400000, double* %72), !dbg !922
  br label %for.inc, !dbg !923

for.inc:                                          ; preds = %for.body
  %73 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %73, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.421, i32 0, i32 0))
  %74 = load i32, i32* %j, align 4, !dbg !924
  %inc = add nsw i32 %74, 1, !dbg !924
  %75 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %75, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.422, i32 0, i32 0))
  store i32 %inc, i32* %j, align 4, !dbg !924
  br label %for.cond, !dbg !926

for.end:                                          ; preds = %for.cond
  br label %omp.body.continue, !dbg !927

omp.body.continue:                                ; preds = %for.end
  br label %omp.inner.for.inc, !dbg !928

omp.inner.for.inc:                                ; preds = %omp.body.continue
  %76 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %76, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.423, i32 0, i32 0))
  %77 = load i32, i32* %.omp.iv, align 4, !dbg !929
  %add16 = add nsw i32 %77, 1, !dbg !931
  %78 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPWrite(i64 %78, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.424, i32 0, i32 0))
  store i32 %add16, i32* %.omp.iv, align 4, !dbg !931
  br label %omp.inner.for.cond, !dbg !933

omp.inner.for.end:                                ; preds = %omp.inner.for.cond
  br label %omp.loop.exit, !dbg !934

omp.loop.exit:                                    ; preds = %omp.inner.for.end
  %79 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !935
  %80 = ptrtoint i8** %79 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %80, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.425, i32 0, i32 0))
  store i8* getelementptr inbounds ([42 x i8], [42 x i8]* @3, i32 0, i32 0), i8** %79, align 8, !dbg !935
  %81 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %81, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.426, i32 0, i32 0))
  %82 = load i32*, i32** %.global_tid..addr, align 8, !dbg !935
  %83 = ptrtoint i32* %82 to i64
  call void @__DiscoPoPOpenMPRead(i64 %83, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.427, i32 0, i32 0))
  %84 = load i32, i32* %82, align 4, !dbg !935
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.429, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_for_static_fini(%ident_t* %.kmpc_loc.addr, i32 %84), !dbg !935
  br label %omp.precond.end, !dbg !935

omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
  call void @__DiscoPoPOpenMPAfterCall()
  ret void, !dbg !936
}

; Function Attrs: nounwind uwtable
define internal void @fft_init(i32 %n) #0 !dbg !937 {
entry:
  %n.addr = alloca i32, align 4
  %m = alloca i32, align 4
  %nu = alloca i32, align 4
  %ku = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %ln = alloca i32, align 4
  %t = alloca double, align 8
  %ti = alloca double, align 8
  %.compoundliteral = alloca %struct.dcomplex, align 8
  %.compoundliteral9 = alloca %struct.dcomplex, align 8
  %0 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.430, i32 0, i32 0))
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !940, metadata !98), !dbg !941
  call void @llvm.dbg.declare(metadata i32* %m, metadata !942, metadata !98), !dbg !943
  call void @llvm.dbg.declare(metadata i32* %nu, metadata !944, metadata !98), !dbg !945
  call void @llvm.dbg.declare(metadata i32* %ku, metadata !946, metadata !98), !dbg !947
  call void @llvm.dbg.declare(metadata i32* %i, metadata !948, metadata !98), !dbg !949
  call void @llvm.dbg.declare(metadata i32* %j, metadata !950, metadata !98), !dbg !951
  call void @llvm.dbg.declare(metadata i32* %ln, metadata !952, metadata !98), !dbg !953
  call void @llvm.dbg.declare(metadata double* %t, metadata !954, metadata !98), !dbg !955
  call void @llvm.dbg.declare(metadata double* %ti, metadata !956, metadata !98), !dbg !957
  %1 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %1, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.431, i32 0, i32 0))
  %2 = load i32, i32* %n.addr, align 4, !dbg !958
  %3 = ptrtoint i32* %nu to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.432, i32 0, i32 0))
  store i32 %2, i32* %nu, align 4, !dbg !959
  %4 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %4, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.433, i32 0, i32 0))
  %5 = load i32, i32* %n.addr, align 4, !dbg !960
  %call = call i32 @ilog2(i32 %5), !dbg !961
  %6 = ptrtoint i32* %m to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.434, i32 0, i32 0))
  store i32 %call, i32* %m, align 4, !dbg !962
  %real = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral, i32 0, i32 0, !dbg !963
  %7 = ptrtoint i32* %m to i64
  call void @__DiscoPoPOpenMPRead(i64 %7, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.435, i32 0, i32 0))
  %8 = load i32, i32* %m, align 4, !dbg !963
  %conv = sitofp i32 %8 to double, !dbg !963
  %9 = ptrtoint double* %real to i64
  call void @__DiscoPoPOpenMPWrite(i64 %9, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.436, i32 0, i32 0))
  store double %conv, double* %real, align 8, !dbg !963
  %imag = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral, i32 0, i32 1, !dbg !963
  %10 = ptrtoint double* %imag to i64
  call void @__DiscoPoPOpenMPWrite(i64 %10, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.437, i32 0, i32 0))
  store double 0.000000e+00, double* %imag, align 8, !dbg !963
  %11 = bitcast %struct.dcomplex* %.compoundliteral to i8*, !dbg !963
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast ([65 x %struct.dcomplex]* @u to i8*), i8* %11, i64 16, i32 8, i1 false), !dbg !963
  %12 = ptrtoint i32* %ku to i64
  call void @__DiscoPoPOpenMPWrite(i64 %12, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.438, i32 0, i32 0))
  store i32 2, i32* %ku, align 4, !dbg !964
  %13 = ptrtoint i32* %ln to i64
  call void @__DiscoPoPOpenMPWrite(i64 %13, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.439, i32 0, i32 0))
  store i32 1, i32* %ln, align 4, !dbg !965
  %14 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %14, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.440, i32 0, i32 0))
  store i32 1, i32* %j, align 4, !dbg !966
  br label %for.cond, !dbg !968

for.cond:                                         ; preds = %for.inc16, %entry
  %15 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %15, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.441, i32 0, i32 0))
  %16 = load i32, i32* %j, align 4, !dbg !969
  %17 = ptrtoint i32* %m to i64
  call void @__DiscoPoPOpenMPRead(i64 %17, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.442, i32 0, i32 0))
  %18 = load i32, i32* %m, align 4, !dbg !972
  %cmp = icmp sle i32 %16, %18, !dbg !973
  br i1 %cmp, label %for.body, label %for.end18, !dbg !974

for.body:                                         ; preds = %for.cond
  %19 = ptrtoint i32* %ln to i64
  call void @__DiscoPoPOpenMPRead(i64 %19, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.443, i32 0, i32 0))
  %20 = load i32, i32* %ln, align 4, !dbg !975
  %conv2 = sitofp i32 %20 to double, !dbg !975
  %div = fdiv double 0x400921FB54442D18, %conv2, !dbg !977
  %21 = ptrtoint double* %t to i64
  call void @__DiscoPoPOpenMPWrite(i64 %21, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.444, i32 0, i32 0))
  store double %div, double* %t, align 8, !dbg !978
  %22 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %22, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.445, i32 0, i32 0))
  store i32 0, i32* %i, align 4, !dbg !979
  br label %for.cond3, !dbg !981

for.cond3:                                        ; preds = %for.inc, %for.body
  %23 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %23, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.446, i32 0, i32 0))
  %24 = load i32, i32* %i, align 4, !dbg !982
  %25 = ptrtoint i32* %ln to i64
  call void @__DiscoPoPOpenMPRead(i64 %25, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.447, i32 0, i32 0))
  %26 = load i32, i32* %ln, align 4, !dbg !985
  %sub = sub nsw i32 %26, 1, !dbg !986
  %cmp4 = icmp sle i32 %24, %sub, !dbg !987
  br i1 %cmp4, label %for.body6, label %for.end, !dbg !988

for.body6:                                        ; preds = %for.cond3
  %27 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %27, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.448, i32 0, i32 0))
  %28 = load i32, i32* %i, align 4, !dbg !989
  %conv7 = sitofp i32 %28 to double, !dbg !989
  %29 = ptrtoint double* %t to i64
  call void @__DiscoPoPOpenMPRead(i64 %29, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.449, i32 0, i32 0))
  %30 = load double, double* %t, align 8, !dbg !991
  %mul = fmul double %conv7, %30, !dbg !992
  %31 = ptrtoint double* %ti to i64
  call void @__DiscoPoPOpenMPWrite(i64 %31, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.450, i32 0, i32 0))
  store double %mul, double* %ti, align 8, !dbg !993
  %32 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %32, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.451, i32 0, i32 0))
  %33 = load i32, i32* %i, align 4, !dbg !994
  %34 = ptrtoint i32* %ku to i64
  call void @__DiscoPoPOpenMPRead(i64 %34, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.452, i32 0, i32 0))
  %35 = load i32, i32* %ku, align 4, !dbg !995
  %add = add nsw i32 %33, %35, !dbg !996
  %sub8 = sub nsw i32 %add, 1, !dbg !997
  %idxprom = sext i32 %sub8 to i64, !dbg !998
  %arrayidx = getelementptr inbounds [65 x %struct.dcomplex], [65 x %struct.dcomplex]* @u, i64 0, i64 %idxprom, !dbg !998
  %real10 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral9, i32 0, i32 0, !dbg !999
  %36 = ptrtoint double* %ti to i64
  call void @__DiscoPoPOpenMPRead(i64 %36, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.453, i32 0, i32 0))
  %37 = load double, double* %ti, align 8, !dbg !999
  %call11 = call double @cos(double %37) #7, !dbg !999
  %38 = ptrtoint double* %real10 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %38, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.454, i32 0, i32 0))
  store double %call11, double* %real10, align 8, !dbg !999
  %imag12 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral9, i32 0, i32 1, !dbg !999
  %39 = ptrtoint double* %ti to i64
  call void @__DiscoPoPOpenMPRead(i64 %39, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.455, i32 0, i32 0))
  %40 = load double, double* %ti, align 8, !dbg !999
  %call13 = call double @sin(double %40) #7, !dbg !1000
  %41 = ptrtoint double* %imag12 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %41, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.456, i32 0, i32 0))
  store double %call13, double* %imag12, align 8, !dbg !999
  %42 = bitcast %struct.dcomplex* %arrayidx to i8*, !dbg !999
  %43 = bitcast %struct.dcomplex* %.compoundliteral9 to i8*, !dbg !999
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %42, i8* %43, i64 16, i32 8, i1 false), !dbg !1002
  br label %for.inc, !dbg !1004

for.inc:                                          ; preds = %for.body6
  %44 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %44, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.457, i32 0, i32 0))
  %45 = load i32, i32* %i, align 4, !dbg !1005
  %inc = add nsw i32 %45, 1, !dbg !1005
  %46 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %46, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.458, i32 0, i32 0))
  store i32 %inc, i32* %i, align 4, !dbg !1005
  br label %for.cond3, !dbg !1007

for.end:                                          ; preds = %for.cond3
  %47 = ptrtoint i32* %ku to i64
  call void @__DiscoPoPOpenMPRead(i64 %47, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.459, i32 0, i32 0))
  %48 = load i32, i32* %ku, align 4, !dbg !1008
  %49 = ptrtoint i32* %ln to i64
  call void @__DiscoPoPOpenMPRead(i64 %49, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.460, i32 0, i32 0))
  %50 = load i32, i32* %ln, align 4, !dbg !1009
  %add14 = add nsw i32 %48, %50, !dbg !1010
  %51 = ptrtoint i32* %ku to i64
  call void @__DiscoPoPOpenMPWrite(i64 %51, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.461, i32 0, i32 0))
  store i32 %add14, i32* %ku, align 4, !dbg !1011
  %52 = ptrtoint i32* %ln to i64
  call void @__DiscoPoPOpenMPRead(i64 %52, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.462, i32 0, i32 0))
  %53 = load i32, i32* %ln, align 4, !dbg !1012
  %mul15 = mul nsw i32 2, %53, !dbg !1013
  %54 = ptrtoint i32* %ln to i64
  call void @__DiscoPoPOpenMPWrite(i64 %54, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.463, i32 0, i32 0))
  store i32 %mul15, i32* %ln, align 4, !dbg !1014
  br label %for.inc16, !dbg !1015

for.inc16:                                        ; preds = %for.end
  %55 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %55, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.464, i32 0, i32 0))
  %56 = load i32, i32* %j, align 4, !dbg !1016
  %inc17 = add nsw i32 %56, 1, !dbg !1016
  %57 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %57, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.465, i32 0, i32 0))
  store i32 %inc17, i32* %j, align 4, !dbg !1016
  br label %for.cond, !dbg !1018

for.end18:                                        ; preds = %for.cond
  ret void, !dbg !1019
}

; Function Attrs: nounwind uwtable
define internal i32 @ilog2(i32 %n) #0 !dbg !1020 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %nn = alloca i32, align 4
  %lg = alloca i32, align 4
  %0 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.466, i32 0, i32 0))
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !1023, metadata !98), !dbg !1024
  call void @llvm.dbg.declare(metadata i32* %nn, metadata !1025, metadata !98), !dbg !1026
  call void @llvm.dbg.declare(metadata i32* %lg, metadata !1027, metadata !98), !dbg !1028
  %1 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %1, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.467, i32 0, i32 0))
  %2 = load i32, i32* %n.addr, align 4, !dbg !1029
  %cmp = icmp eq i32 %2, 1, !dbg !1031
  br i1 %cmp, label %if.then, label %if.end, !dbg !1032

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !1033
  br label %return, !dbg !1033

if.end:                                           ; preds = %entry
  %3 = ptrtoint i32* %lg to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.468, i32 0, i32 0))
  store i32 1, i32* %lg, align 4, !dbg !1035
  %4 = ptrtoint i32* %nn to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.469, i32 0, i32 0))
  store i32 2, i32* %nn, align 4, !dbg !1036
  br label %while.cond, !dbg !1037

while.cond:                                       ; preds = %while.body, %if.end
  %5 = ptrtoint i32* %nn to i64
  call void @__DiscoPoPOpenMPRead(i64 %5, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.470, i32 0, i32 0))
  %6 = load i32, i32* %nn, align 4, !dbg !1038
  %7 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %7, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.471, i32 0, i32 0))
  %8 = load i32, i32* %n.addr, align 4, !dbg !1040
  %cmp1 = icmp slt i32 %6, %8, !dbg !1041
  br i1 %cmp1, label %while.body, label %while.end, !dbg !1042

while.body:                                       ; preds = %while.cond
  %9 = ptrtoint i32* %nn to i64
  call void @__DiscoPoPOpenMPRead(i64 %9, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.472, i32 0, i32 0))
  %10 = load i32, i32* %nn, align 4, !dbg !1043
  %mul = mul nsw i32 %10, 2, !dbg !1045
  %11 = ptrtoint i32* %nn to i64
  call void @__DiscoPoPOpenMPWrite(i64 %11, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.473, i32 0, i32 0))
  store i32 %mul, i32* %nn, align 4, !dbg !1046
  %12 = ptrtoint i32* %lg to i64
  call void @__DiscoPoPOpenMPRead(i64 %12, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.474, i32 0, i32 0))
  %13 = load i32, i32* %lg, align 4, !dbg !1047
  %add = add nsw i32 %13, 1, !dbg !1048
  %14 = ptrtoint i32* %lg to i64
  call void @__DiscoPoPOpenMPWrite(i64 %14, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.475, i32 0, i32 0))
  store i32 %add, i32* %lg, align 4, !dbg !1049
  br label %while.cond, !dbg !1050

while.end:                                        ; preds = %while.cond
  %15 = ptrtoint i32* %lg to i64
  call void @__DiscoPoPOpenMPRead(i64 %15, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.476, i32 0, i32 0))
  %16 = load i32, i32* %lg, align 4, !dbg !1052
  store i32 %16, i32* %retval, align 4, !dbg !1053
  br label %return, !dbg !1053

return:                                           ; preds = %while.end, %if.then
  %17 = ptrtoint i32* %retval to i64
  call void @__DiscoPoPOpenMPRead(i64 %17, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.477, i32 0, i32 0))
  %18 = load i32, i32* %retval, align 4, !dbg !1054
  ret i32 %18, !dbg !1054
}

; Function Attrs: nounwind
declare double @cos(double) #4

; Function Attrs: nounwind
declare double @sin(double) #4

; Function Attrs: nounwind uwtable
define internal void @fft(i32 %dir, %struct.dcomplex* %x1, %struct.dcomplex* %x2) #0 !dbg !1055 {
entry:
  %dir.addr = alloca i32, align 4
  %x1.addr = alloca %struct.dcomplex*, align 8
  %x2.addr = alloca %struct.dcomplex*, align 8
  %0 = ptrtoint i32* %dir.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.478, i32 0, i32 0))
  store i32 %dir, i32* %dir.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dir.addr, metadata !1059, metadata !98), !dbg !1060
  %1 = ptrtoint %struct.dcomplex** %x1.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.479, i32 0, i32 0))
  store %struct.dcomplex* %x1, %struct.dcomplex** %x1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dcomplex** %x1.addr, metadata !1061, metadata !98), !dbg !1062
  %2 = ptrtoint %struct.dcomplex** %x2.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.480, i32 0, i32 0))
  store %struct.dcomplex* %x2, %struct.dcomplex** %x2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dcomplex** %x2.addr, metadata !1063, metadata !98), !dbg !1064
  %3 = ptrtoint i32* %dir.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %3, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.481, i32 0, i32 0))
  %4 = load i32, i32* %dir.addr, align 4, !dbg !1065
  %cmp = icmp eq i32 %4, 1, !dbg !1067
  br i1 %cmp, label %if.then, label %if.else, !dbg !1068

if.then:                                          ; preds = %entry
  %5 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 0) to i64
  call void @__DiscoPoPOpenMPRead(i64 %5, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.482, i32 0, i32 0))
  %6 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 0), align 4, !dbg !1069
  %7 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 1) to i64
  call void @__DiscoPoPOpenMPRead(i64 %7, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.483, i32 0, i32 0))
  %8 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 1), align 4, !dbg !1071
  %9 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2) to i64
  call void @__DiscoPoPOpenMPRead(i64 %9, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.484, i32 0, i32 0))
  %10 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2), align 4, !dbg !1072
  %11 = ptrtoint %struct.dcomplex** %x1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %11, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.485, i32 0, i32 0))
  %12 = load %struct.dcomplex*, %struct.dcomplex** %x1.addr, align 8, !dbg !1073
  %13 = bitcast %struct.dcomplex* %12 to i8*, !dbg !1073
  %14 = ptrtoint %struct.dcomplex** %x1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %14, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.486, i32 0, i32 0))
  %15 = load %struct.dcomplex*, %struct.dcomplex** %x1.addr, align 8, !dbg !1074
  %16 = bitcast %struct.dcomplex* %15 to i8*, !dbg !1074
  call void @cffts1(i32 1, i32 %6, i32 %8, i32 %10, i8* %13, i8* %16), !dbg !1075
  %17 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 0) to i64
  call void @__DiscoPoPOpenMPRead(i64 %17, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.487, i32 0, i32 0))
  %18 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 0), align 4, !dbg !1076
  %19 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 1) to i64
  call void @__DiscoPoPOpenMPRead(i64 %19, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.488, i32 0, i32 0))
  %20 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 1), align 4, !dbg !1077
  %21 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2) to i64
  call void @__DiscoPoPOpenMPRead(i64 %21, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.489, i32 0, i32 0))
  %22 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2), align 4, !dbg !1078
  %23 = ptrtoint %struct.dcomplex** %x1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %23, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.490, i32 0, i32 0))
  %24 = load %struct.dcomplex*, %struct.dcomplex** %x1.addr, align 8, !dbg !1079
  %25 = bitcast %struct.dcomplex* %24 to i8*, !dbg !1079
  %26 = ptrtoint %struct.dcomplex** %x1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %26, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.491, i32 0, i32 0))
  %27 = load %struct.dcomplex*, %struct.dcomplex** %x1.addr, align 8, !dbg !1080
  %28 = bitcast %struct.dcomplex* %27 to i8*, !dbg !1080
  call void @cffts2(i32 1, i32 %18, i32 %20, i32 %22, i8* %25, i8* %28), !dbg !1081
  %29 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 0) to i64
  call void @__DiscoPoPOpenMPRead(i64 %29, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.492, i32 0, i32 0))
  %30 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 0), align 4, !dbg !1082
  %31 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 1) to i64
  call void @__DiscoPoPOpenMPRead(i64 %31, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.493, i32 0, i32 0))
  %32 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 1), align 4, !dbg !1083
  %33 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2) to i64
  call void @__DiscoPoPOpenMPRead(i64 %33, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.494, i32 0, i32 0))
  %34 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2), align 4, !dbg !1084
  %35 = ptrtoint %struct.dcomplex** %x1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %35, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.495, i32 0, i32 0))
  %36 = load %struct.dcomplex*, %struct.dcomplex** %x1.addr, align 8, !dbg !1085
  %37 = bitcast %struct.dcomplex* %36 to i8*, !dbg !1085
  %38 = ptrtoint %struct.dcomplex** %x2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %38, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.496, i32 0, i32 0))
  %39 = load %struct.dcomplex*, %struct.dcomplex** %x2.addr, align 8, !dbg !1086
  %40 = bitcast %struct.dcomplex* %39 to i8*, !dbg !1086
  call void @cffts3(i32 1, i32 %30, i32 %32, i32 %34, i8* %37, i8* %40), !dbg !1087
  br label %if.end, !dbg !1088

if.else:                                          ; preds = %entry
  %41 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 0) to i64
  call void @__DiscoPoPOpenMPRead(i64 %41, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.497, i32 0, i32 0))
  %42 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 0), align 4, !dbg !1089
  %43 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 1) to i64
  call void @__DiscoPoPOpenMPRead(i64 %43, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.498, i32 0, i32 0))
  %44 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 1), align 4, !dbg !1091
  %45 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2) to i64
  call void @__DiscoPoPOpenMPRead(i64 %45, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.499, i32 0, i32 0))
  %46 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2), align 4, !dbg !1092
  %47 = ptrtoint %struct.dcomplex** %x1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %47, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.500, i32 0, i32 0))
  %48 = load %struct.dcomplex*, %struct.dcomplex** %x1.addr, align 8, !dbg !1093
  %49 = bitcast %struct.dcomplex* %48 to i8*, !dbg !1093
  %50 = ptrtoint %struct.dcomplex** %x1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %50, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.501, i32 0, i32 0))
  %51 = load %struct.dcomplex*, %struct.dcomplex** %x1.addr, align 8, !dbg !1094
  %52 = bitcast %struct.dcomplex* %51 to i8*, !dbg !1094
  call void @cffts3(i32 -1, i32 %42, i32 %44, i32 %46, i8* %49, i8* %52), !dbg !1095
  %53 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 0) to i64
  call void @__DiscoPoPOpenMPRead(i64 %53, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.502, i32 0, i32 0))
  %54 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 0), align 4, !dbg !1096
  %55 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 1) to i64
  call void @__DiscoPoPOpenMPRead(i64 %55, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.503, i32 0, i32 0))
  %56 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 1), align 4, !dbg !1097
  %57 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2) to i64
  call void @__DiscoPoPOpenMPRead(i64 %57, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.504, i32 0, i32 0))
  %58 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2), align 4, !dbg !1098
  %59 = ptrtoint %struct.dcomplex** %x1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %59, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.505, i32 0, i32 0))
  %60 = load %struct.dcomplex*, %struct.dcomplex** %x1.addr, align 8, !dbg !1099
  %61 = bitcast %struct.dcomplex* %60 to i8*, !dbg !1099
  %62 = ptrtoint %struct.dcomplex** %x1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %62, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.506, i32 0, i32 0))
  %63 = load %struct.dcomplex*, %struct.dcomplex** %x1.addr, align 8, !dbg !1100
  %64 = bitcast %struct.dcomplex* %63 to i8*, !dbg !1100
  call void @cffts2(i32 -1, i32 %54, i32 %56, i32 %58, i8* %61, i8* %64), !dbg !1101
  %65 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 0) to i64
  call void @__DiscoPoPOpenMPRead(i64 %65, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.507, i32 0, i32 0))
  %66 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 0), align 4, !dbg !1102
  %67 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 1) to i64
  call void @__DiscoPoPOpenMPRead(i64 %67, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.508, i32 0, i32 0))
  %68 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 1), align 4, !dbg !1103
  %69 = ptrtoint i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2) to i64
  call void @__DiscoPoPOpenMPRead(i64 %69, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.509, i32 0, i32 0))
  %70 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @dims, i64 0, i64 2), align 4, !dbg !1104
  %71 = ptrtoint %struct.dcomplex** %x1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %71, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.510, i32 0, i32 0))
  %72 = load %struct.dcomplex*, %struct.dcomplex** %x1.addr, align 8, !dbg !1105
  %73 = bitcast %struct.dcomplex* %72 to i8*, !dbg !1105
  %74 = ptrtoint %struct.dcomplex** %x2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %74, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.511, i32 0, i32 0))
  %75 = load %struct.dcomplex*, %struct.dcomplex** %x2.addr, align 8, !dbg !1106
  %76 = bitcast %struct.dcomplex* %75 to i8*, !dbg !1106
  call void @cffts1(i32 -1, i32 %66, i32 %68, i32 %70, i8* %73, i8* %76), !dbg !1107
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !1108
}

; Function Attrs: nounwind uwtable
define internal void @cffts1(i32 %is, i32 %d1, i32 %d2, i32 %d3, i8* %ox, i8* %oxout) #0 !dbg !1109 {
entry:
  %is.addr = alloca i32, align 4
  %d1.addr = alloca i32, align 4
  %d2.addr = alloca i32, align 4
  %d3.addr = alloca i32, align 4
  %ox.addr = alloca i8*, align 8
  %oxout.addr = alloca i8*, align 8
  %x = alloca %struct.dcomplex*, align 8
  %xout = alloca %struct.dcomplex*, align 8
  %logd1 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %jj = alloca i32, align 4
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  %2 = ptrtoint i32* %is.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.512, i32 0, i32 0))
  store i32 %is, i32* %is.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %is.addr, metadata !1112, metadata !98), !dbg !1113
  %3 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.513, i32 0, i32 0))
  store i32 %d1, i32* %d1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %d1.addr, metadata !1114, metadata !98), !dbg !1115
  %4 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.514, i32 0, i32 0))
  store i32 %d2, i32* %d2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %d2.addr, metadata !1116, metadata !98), !dbg !1117
  %5 = ptrtoint i32* %d3.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.515, i32 0, i32 0))
  store i32 %d3, i32* %d3.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %d3.addr, metadata !1118, metadata !98), !dbg !1119
  %6 = ptrtoint i8** %ox.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.516, i32 0, i32 0))
  store i8* %ox, i8** %ox.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ox.addr, metadata !1120, metadata !98), !dbg !1121
  %7 = ptrtoint i8** %oxout.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %7, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.517, i32 0, i32 0))
  store i8* %oxout, i8** %oxout.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %oxout.addr, metadata !1122, metadata !98), !dbg !1123
  %8 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %8, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.518, i32 0, i32 0))
  %9 = load i32, i32* %d2.addr, align 4, !dbg !1124
  %10 = zext i32 %9 to i64, !dbg !1125
  %11 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %11, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.519, i32 0, i32 0))
  %12 = load i32, i32* %d1.addr, align 4, !dbg !1126
  %add = add nsw i32 %12, 1, !dbg !1127
  %13 = zext i32 %add to i64, !dbg !1125
  call void @llvm.dbg.declare(metadata %struct.dcomplex** %x, metadata !1128, metadata !98), !dbg !1129
  %14 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %14, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.520, i32 0, i32 0))
  %15 = load i32, i32* %d2.addr, align 4, !dbg !1130
  %16 = zext i32 %15 to i64, !dbg !1131
  %17 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %17, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.521, i32 0, i32 0))
  %18 = load i32, i32* %d1.addr, align 4, !dbg !1132
  %add1 = add nsw i32 %18, 1, !dbg !1133
  %19 = zext i32 %add1 to i64, !dbg !1131
  %20 = ptrtoint i8** %ox.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %20, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.522, i32 0, i32 0))
  %21 = load i8*, i8** %ox.addr, align 8, !dbg !1134
  %22 = bitcast i8* %21 to %struct.dcomplex*, !dbg !1131
  %23 = ptrtoint %struct.dcomplex** %x to i64
  call void @__DiscoPoPOpenMPWrite(i64 %23, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.523, i32 0, i32 0))
  store %struct.dcomplex* %22, %struct.dcomplex** %x, align 8, !dbg !1129
  %24 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %24, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.524, i32 0, i32 0))
  %25 = load i32, i32* %d2.addr, align 4, !dbg !1135
  %26 = zext i32 %25 to i64, !dbg !1136
  %27 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %27, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.525, i32 0, i32 0))
  %28 = load i32, i32* %d1.addr, align 4, !dbg !1137
  %add2 = add nsw i32 %28, 1, !dbg !1138
  %29 = zext i32 %add2 to i64, !dbg !1136
  call void @llvm.dbg.declare(metadata %struct.dcomplex** %xout, metadata !1139, metadata !98), !dbg !1140
  %30 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %30, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.526, i32 0, i32 0))
  %31 = load i32, i32* %d2.addr, align 4, !dbg !1141
  %32 = zext i32 %31 to i64, !dbg !1142
  %33 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %33, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.527, i32 0, i32 0))
  %34 = load i32, i32* %d1.addr, align 4, !dbg !1143
  %add3 = add nsw i32 %34, 1, !dbg !1144
  %35 = zext i32 %add3 to i64, !dbg !1142
  %36 = ptrtoint i8** %oxout.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %36, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.528, i32 0, i32 0))
  %37 = load i8*, i8** %oxout.addr, align 8, !dbg !1145
  %38 = bitcast i8* %37 to %struct.dcomplex*, !dbg !1142
  %39 = ptrtoint %struct.dcomplex** %xout to i64
  call void @__DiscoPoPOpenMPWrite(i64 %39, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.529, i32 0, i32 0))
  store %struct.dcomplex* %38, %struct.dcomplex** %xout, align 8, !dbg !1140
  call void @llvm.dbg.declare(metadata i32* %logd1, metadata !1146, metadata !98), !dbg !1147
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1148, metadata !98), !dbg !1149
  call void @llvm.dbg.declare(metadata i32* %j, metadata !1150, metadata !98), !dbg !1151
  call void @llvm.dbg.declare(metadata i32* %k, metadata !1152, metadata !98), !dbg !1153
  call void @llvm.dbg.declare(metadata i32* %jj, metadata !1154, metadata !98), !dbg !1155
  %40 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %40, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.530, i32 0, i32 0))
  %41 = load i32, i32* %d1.addr, align 4, !dbg !1156
  %call = call i32 @ilog2(i32 %41), !dbg !1157
  %42 = ptrtoint i32* %logd1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %42, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.531, i32 0, i32 0))
  store i32 %call, i32* %logd1, align 4, !dbg !1158
  %43 = ptrtoint i32* @timers_enabled to i64
  call void @__DiscoPoPOpenMPRead(i64 %43, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.532, i32 0, i32 0))
  %44 = load i32, i32* @timers_enabled, align 4, !dbg !1159
  %tobool = icmp ne i32 %44, 0, !dbg !1159
  br i1 %tobool, label %if.then, label %if.end, !dbg !1161

if.then:                                          ; preds = %entry
  call void @timer_start(i32 6), !dbg !1162
  br label %if.end, !dbg !1162

if.end:                                           ; preds = %if.then, %entry
  %45 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !1164
  %46 = ptrtoint i8** %45 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %46, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.533, i32 0, i32 0))
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @4, i32 0, i32 0), i8** %45, align 8, !dbg !1164
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([121 x i8], [121 x i8]* @.str.535, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* %.kmpc_loc.addr, i32 11, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, i32*, i32*, i64, i64, %struct.dcomplex**, i32*, i32*, i64, i64, %struct.dcomplex**)* @.omp_outlined..27 to void (i32*, i32*, ...)*), i32* %d3.addr, i32* %d2.addr, i32* %d1.addr, i64 %10, i64 %13, %struct.dcomplex** %x, i32* %is.addr, i32* %logd1, i64 %26, i64 %29, %struct.dcomplex** %xout), !dbg !1164
  %47 = ptrtoint i32* @timers_enabled to i64
  call void @__DiscoPoPOpenMPRead(i64 %47, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.536, i32 0, i32 0))
  %48 = load i32, i32* @timers_enabled, align 4, !dbg !1165
  %tobool4 = icmp ne i32 %48, 0, !dbg !1165
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !1167

if.then5:                                         ; preds = %if.end
  call void @timer_stop(i32 6), !dbg !1168
  br label %if.end6, !dbg !1168

if.end6:                                          ; preds = %if.then5, %if.end
  ret void, !dbg !1170
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..27(i32* noalias %.global_tid., i32* noalias %.bound_tid., i32* dereferenceable(4) %d3, i32* dereferenceable(4) %d2, i32* dereferenceable(4) %d1, i64 %vla, i64 %vla1, %struct.dcomplex** dereferenceable(8) %x, i32* dereferenceable(4) %is, i32* dereferenceable(4) %logd1, i64 %vla3, i64 %vla5, %struct.dcomplex** dereferenceable(8) %xout) #0 !dbg !1171 {
entry:
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([132 x i8], [132 x i8]* @.str.538, i32 0, i32 0))
  %.global_tid..addr = alloca i32*, align 8
  %.bound_tid..addr = alloca i32*, align 8
  %d3.addr = alloca i32*, align 8
  %d2.addr = alloca i32*, align 8
  %d1.addr = alloca i32*, align 8
  %vla.addr = alloca i64, align 8
  %vla.addr2 = alloca i64, align 8
  %x.addr = alloca %struct.dcomplex**, align 8
  %is.addr = alloca i32*, align 8
  %logd1.addr = alloca i32*, align 8
  %vla.addr4 = alloca i64, align 8
  %vla.addr6 = alloca i64, align 8
  %xout.addr = alloca %struct.dcomplex**, align 8
  %.omp.iv = alloca i32, align 4
  %.omp.last.iteration = alloca i32, align 4
  %k = alloca i32, align 4
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k9 = alloca i32, align 4
  %jj = alloca i32, align 4
  %k10 = alloca i32, align 4
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  %2 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.539, i32 0, i32 0))
  store i32* %.global_tid., i32** %.global_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.global_tid..addr, metadata !1174, metadata !98), !dbg !1175
  %3 = ptrtoint i32** %.bound_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.540, i32 0, i32 0))
  store i32* %.bound_tid., i32** %.bound_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.bound_tid..addr, metadata !1176, metadata !98), !dbg !1175
  %4 = ptrtoint i32** %d3.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.541, i32 0, i32 0))
  store i32* %d3, i32** %d3.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %d3.addr, metadata !1177, metadata !98), !dbg !1175
  %5 = ptrtoint i32** %d2.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.542, i32 0, i32 0))
  store i32* %d2, i32** %d2.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %d2.addr, metadata !1178, metadata !98), !dbg !1175
  %6 = ptrtoint i32** %d1.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.543, i32 0, i32 0))
  store i32* %d1, i32** %d1.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %d1.addr, metadata !1179, metadata !98), !dbg !1175
  %7 = ptrtoint i64* %vla.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %7, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.544, i32 0, i32 0))
  store i64 %vla, i64* %vla.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %vla.addr, metadata !1180, metadata !98), !dbg !1175
  %8 = ptrtoint i64* %vla.addr2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %8, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.545, i32 0, i32 0))
  store i64 %vla1, i64* %vla.addr2, align 8
  call void @llvm.dbg.declare(metadata i64* %vla.addr2, metadata !1181, metadata !98), !dbg !1175
  %9 = ptrtoint %struct.dcomplex*** %x.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %9, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.546, i32 0, i32 0))
  store %struct.dcomplex** %x, %struct.dcomplex*** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dcomplex*** %x.addr, metadata !1182, metadata !98), !dbg !1175
  %10 = ptrtoint i32** %is.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %10, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.547, i32 0, i32 0))
  store i32* %is, i32** %is.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %is.addr, metadata !1183, metadata !98), !dbg !1175
  %11 = ptrtoint i32** %logd1.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %11, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.548, i32 0, i32 0))
  store i32* %logd1, i32** %logd1.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %logd1.addr, metadata !1184, metadata !98), !dbg !1175
  %12 = ptrtoint i64* %vla.addr4 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %12, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.549, i32 0, i32 0))
  store i64 %vla3, i64* %vla.addr4, align 8
  call void @llvm.dbg.declare(metadata i64* %vla.addr4, metadata !1185, metadata !98), !dbg !1175
  %13 = ptrtoint i64* %vla.addr6 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %13, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.550, i32 0, i32 0))
  store i64 %vla5, i64* %vla.addr6, align 8
  call void @llvm.dbg.declare(metadata i64* %vla.addr6, metadata !1186, metadata !98), !dbg !1175
  %14 = ptrtoint %struct.dcomplex*** %xout.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %14, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.551, i32 0, i32 0))
  store %struct.dcomplex** %xout, %struct.dcomplex*** %xout.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dcomplex*** %xout.addr, metadata !1187, metadata !98), !dbg !1175
  %15 = ptrtoint i32** %d3.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %15, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.552, i32 0, i32 0))
  %16 = load i32*, i32** %d3.addr, align 8, !dbg !1188
  %17 = ptrtoint i32** %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %17, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.553, i32 0, i32 0))
  %18 = load i32*, i32** %d2.addr, align 8, !dbg !1188
  %19 = ptrtoint i32** %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %19, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.554, i32 0, i32 0))
  %20 = load i32*, i32** %d1.addr, align 8, !dbg !1188
  %21 = ptrtoint i64* %vla.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %21, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.555, i32 0, i32 0))
  %22 = load i64, i64* %vla.addr, align 8, !dbg !1188
  %23 = ptrtoint i64* %vla.addr2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %23, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.556, i32 0, i32 0))
  %24 = load i64, i64* %vla.addr2, align 8, !dbg !1188
  %25 = ptrtoint %struct.dcomplex*** %x.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %25, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.557, i32 0, i32 0))
  %26 = load %struct.dcomplex**, %struct.dcomplex*** %x.addr, align 8, !dbg !1188
  %27 = ptrtoint i32** %is.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %27, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.558, i32 0, i32 0))
  %28 = load i32*, i32** %is.addr, align 8, !dbg !1188
  %29 = ptrtoint i32** %logd1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %29, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.559, i32 0, i32 0))
  %30 = load i32*, i32** %logd1.addr, align 8, !dbg !1188
  %31 = ptrtoint i64* %vla.addr4 to i64
  call void @__DiscoPoPOpenMPRead(i64 %31, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.560, i32 0, i32 0))
  %32 = load i64, i64* %vla.addr4, align 8, !dbg !1188
  %33 = ptrtoint i64* %vla.addr6 to i64
  call void @__DiscoPoPOpenMPRead(i64 %33, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.561, i32 0, i32 0))
  %34 = load i64, i64* %vla.addr6, align 8, !dbg !1188
  %35 = ptrtoint %struct.dcomplex*** %xout.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %35, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.562, i32 0, i32 0))
  %36 = load %struct.dcomplex**, %struct.dcomplex*** %xout.addr, align 8, !dbg !1188
  call void @llvm.dbg.declare(metadata i32* %.omp.iv, metadata !1189, metadata !98), !dbg !1175
  call void @llvm.dbg.declare(metadata i32* %.omp.last.iteration, metadata !1190, metadata !98), !dbg !1175
  %37 = ptrtoint i32* %16 to i64
  call void @__DiscoPoPOpenMPRead(i64 %37, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.563, i32 0, i32 0))
  %38 = load i32, i32* %16, align 4, !dbg !1191
  %sub = sub nsw i32 %38, 0, !dbg !1188
  %sub7 = sub nsw i32 %sub, 1, !dbg !1188
  %add = add nsw i32 %sub7, 1, !dbg !1188
  %div = sdiv i32 %add, 1, !dbg !1188
  %sub8 = sub nsw i32 %div, 1, !dbg !1175
  %39 = ptrtoint i32* %.omp.last.iteration to i64
  call void @__DiscoPoPOpenMPWrite(i64 %39, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.564, i32 0, i32 0))
  store i32 %sub8, i32* %.omp.last.iteration, align 4, !dbg !1175
  call void @llvm.dbg.declare(metadata i32* %k, metadata !1192, metadata !98), !dbg !1175
  %40 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPWrite(i64 %40, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.565, i32 0, i32 0))
  store i32 0, i32* %k, align 4, !dbg !1193
  %41 = ptrtoint i32* %16 to i64
  call void @__DiscoPoPOpenMPRead(i64 %41, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.566, i32 0, i32 0))
  %42 = load i32, i32* %16, align 4, !dbg !1191
  %cmp = icmp slt i32 0, %42, !dbg !1188
  br i1 %cmp, label %omp.precond.then, label %omp.precond.end, !dbg !1188

omp.precond.then:                                 ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %.omp.lb, metadata !1194, metadata !98), !dbg !1175
  %43 = ptrtoint i32* %.omp.lb to i64
  call void @__DiscoPoPOpenMPWrite(i64 %43, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.567, i32 0, i32 0))
  store i32 0, i32* %.omp.lb, align 4, !dbg !1195
  call void @llvm.dbg.declare(metadata i32* %.omp.ub, metadata !1197, metadata !98), !dbg !1175
  %44 = ptrtoint i32* %.omp.last.iteration to i64
  call void @__DiscoPoPOpenMPRead(i64 %44, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.568, i32 0, i32 0))
  %45 = load i32, i32* %.omp.last.iteration, align 4, !dbg !1198
  %46 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPWrite(i64 %46, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.569, i32 0, i32 0))
  store i32 %45, i32* %.omp.ub, align 4, !dbg !1195
  call void @llvm.dbg.declare(metadata i32* %.omp.stride, metadata !1200, metadata !98), !dbg !1175
  %47 = ptrtoint i32* %.omp.stride to i64
  call void @__DiscoPoPOpenMPWrite(i64 %47, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.570, i32 0, i32 0))
  store i32 1, i32* %.omp.stride, align 4, !dbg !1195
  call void @llvm.dbg.declare(metadata i32* %.omp.is_last, metadata !1201, metadata !98), !dbg !1175
  %48 = ptrtoint i32* %.omp.is_last to i64
  call void @__DiscoPoPOpenMPWrite(i64 %48, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.571, i32 0, i32 0))
  store i32 0, i32* %.omp.is_last, align 4, !dbg !1195
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1202, metadata !98), !dbg !1175
  call void @llvm.dbg.declare(metadata i32* %j, metadata !1203, metadata !98), !dbg !1175
  call void @llvm.dbg.declare(metadata i32* %k9, metadata !1192, metadata !98), !dbg !1175
  call void @llvm.dbg.declare(metadata i32* %jj, metadata !1204, metadata !98), !dbg !1175
  call void @llvm.dbg.declare(metadata i32* %k10, metadata !1192, metadata !98), !dbg !1175
  %49 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !1205
  %50 = ptrtoint i8** %49 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %50, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.572, i32 0, i32 0))
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @4, i32 0, i32 0), i8** %49, align 8, !dbg !1205
  %51 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %51, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.573, i32 0, i32 0))
  %52 = load i32*, i32** %.global_tid..addr, align 8, !dbg !1205
  %53 = ptrtoint i32* %52 to i64
  call void @__DiscoPoPOpenMPRead(i64 %53, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.574, i32 0, i32 0))
  %54 = load i32, i32* %52, align 4, !dbg !1205
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([132 x i8], [132 x i8]* @.str.576, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_for_static_init_4(%ident_t* %.kmpc_loc.addr, i32 %54, i32 34, i32* %.omp.is_last, i32* %.omp.lb, i32* %.omp.ub, i32* %.omp.stride, i32 1, i32 1), !dbg !1205
  %55 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %55, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.577, i32 0, i32 0))
  %56 = load i32, i32* %.omp.ub, align 4, !dbg !1195
  %57 = ptrtoint i32* %.omp.last.iteration to i64
  call void @__DiscoPoPOpenMPRead(i64 %57, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.578, i32 0, i32 0))
  %58 = load i32, i32* %.omp.last.iteration, align 4, !dbg !1198
  %cmp11 = icmp sgt i32 %56, %58, !dbg !1195
  br i1 %cmp11, label %cond.true, label %cond.false, !dbg !1195

cond.true:                                        ; preds = %omp.precond.then
  %59 = ptrtoint i32* %.omp.last.iteration to i64
  call void @__DiscoPoPOpenMPRead(i64 %59, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.579, i32 0, i32 0))
  %60 = load i32, i32* %.omp.last.iteration, align 4, !dbg !1206
  br label %cond.end, !dbg !1208

cond.false:                                       ; preds = %omp.precond.then
  %61 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %61, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.580, i32 0, i32 0))
  %62 = load i32, i32* %.omp.ub, align 4, !dbg !1210
  br label %cond.end, !dbg !1210

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %60, %cond.true ], [ %62, %cond.false ], !dbg !1212
  %63 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPWrite(i64 %63, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.581, i32 0, i32 0))
  store i32 %cond, i32* %.omp.ub, align 4, !dbg !1212
  %64 = ptrtoint i32* %.omp.lb to i64
  call void @__DiscoPoPOpenMPRead(i64 %64, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.582, i32 0, i32 0))
  %65 = load i32, i32* %.omp.lb, align 4, !dbg !1212
  %66 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPWrite(i64 %66, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.583, i32 0, i32 0))
  store i32 %65, i32* %.omp.iv, align 4, !dbg !1212
  br label %omp.inner.for.cond, !dbg !1214

omp.inner.for.cond:                               ; preds = %omp.inner.for.inc, %cond.end
  %67 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %67, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.584, i32 0, i32 0))
  %68 = load i32, i32* %.omp.iv, align 4, !dbg !1215
  %69 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %69, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.585, i32 0, i32 0))
  %70 = load i32, i32* %.omp.ub, align 4, !dbg !1215
  %cmp12 = icmp sle i32 %68, %70, !dbg !1217
  br i1 %cmp12, label %omp.inner.for.body, label %omp.inner.for.end, !dbg !1219

omp.inner.for.body:                               ; preds = %omp.inner.for.cond
  %71 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %71, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.586, i32 0, i32 0))
  %72 = load i32, i32* %.omp.iv, align 4, !dbg !1220
  %mul = mul nsw i32 %72, 1, !dbg !1222
  %add13 = add nsw i32 0, %mul, !dbg !1222
  %73 = ptrtoint i32* %k9 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %73, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.587, i32 0, i32 0))
  store i32 %add13, i32* %k9, align 4, !dbg !1222
  %74 = ptrtoint i32* %jj to i64
  call void @__DiscoPoPOpenMPWrite(i64 %74, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.588, i32 0, i32 0))
  store i32 0, i32* %jj, align 4, !dbg !1223
  br label %for.cond, !dbg !1226

for.cond:                                         ; preds = %for.inc58, %omp.inner.for.body
  %75 = ptrtoint i32* %jj to i64
  call void @__DiscoPoPOpenMPRead(i64 %75, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.589, i32 0, i32 0))
  %76 = load i32, i32* %jj, align 4, !dbg !1227
  %77 = ptrtoint i32* %18 to i64
  call void @__DiscoPoPOpenMPRead(i64 %77, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.590, i32 0, i32 0))
  %78 = load i32, i32* %18, align 4, !dbg !1230
  %79 = ptrtoint i32* @fftblock to i64
  call void @__DiscoPoPOpenMPRead(i64 %79, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.591, i32 0, i32 0))
  %80 = load i32, i32* @fftblock, align 4, !dbg !1231
  %sub14 = sub nsw i32 %78, %80, !dbg !1232
  %cmp15 = icmp sle i32 %76, %sub14, !dbg !1233
  br i1 %cmp15, label %for.body, label %for.end60, !dbg !1234

for.body:                                         ; preds = %for.cond
  %81 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %81, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.592, i32 0, i32 0))
  store i32 0, i32* %j, align 4, !dbg !1235
  br label %for.cond16, !dbg !1238

for.cond16:                                       ; preds = %for.inc31, %for.body
  %82 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %82, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.593, i32 0, i32 0))
  %83 = load i32, i32* %j, align 4, !dbg !1239
  %84 = ptrtoint i32* @fftblock to i64
  call void @__DiscoPoPOpenMPRead(i64 %84, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.594, i32 0, i32 0))
  %85 = load i32, i32* @fftblock, align 4, !dbg !1242
  %cmp17 = icmp slt i32 %83, %85, !dbg !1243
  br i1 %cmp17, label %for.body18, label %for.end33, !dbg !1244

for.body18:                                       ; preds = %for.cond16
  %86 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %86, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.595, i32 0, i32 0))
  store i32 0, i32* %i, align 4, !dbg !1245
  br label %for.cond19, !dbg !1248

for.cond19:                                       ; preds = %for.inc, %for.body18
  %87 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %87, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.596, i32 0, i32 0))
  %88 = load i32, i32* %i, align 4, !dbg !1249
  %89 = ptrtoint i32* %20 to i64
  call void @__DiscoPoPOpenMPRead(i64 %89, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.597, i32 0, i32 0))
  %90 = load i32, i32* %20, align 4, !dbg !1252
  %cmp20 = icmp slt i32 %88, %90, !dbg !1253
  br i1 %cmp20, label %for.body21, label %for.end, !dbg !1254

for.body21:                                       ; preds = %for.cond19
  %91 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %91, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.598, i32 0, i32 0))
  %92 = load i32, i32* %j, align 4, !dbg !1255
  %idxprom = sext i32 %92 to i64, !dbg !1257
  %93 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %93, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.599, i32 0, i32 0))
  %94 = load i32, i32* %i, align 4, !dbg !1258
  %idxprom22 = sext i32 %94 to i64, !dbg !1257
  %95 = call [64 x [33 x %struct.dcomplex]]* @_ZTWL3ty1(), !dbg !1257
  %arrayidx = getelementptr inbounds [64 x [33 x %struct.dcomplex]], [64 x [33 x %struct.dcomplex]]* %95, i64 0, i64 %idxprom22, !dbg !1257
  %arrayidx23 = getelementptr inbounds [33 x %struct.dcomplex], [33 x %struct.dcomplex]* %arrayidx, i64 0, i64 %idxprom, !dbg !1257
  %96 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %96, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.600, i32 0, i32 0))
  %97 = load i32, i32* %i, align 4, !dbg !1259
  %idxprom24 = sext i32 %97 to i64, !dbg !1260
  %98 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %98, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.601, i32 0, i32 0))
  %99 = load i32, i32* %j, align 4, !dbg !1261
  %100 = ptrtoint i32* %jj to i64
  call void @__DiscoPoPOpenMPRead(i64 %100, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.602, i32 0, i32 0))
  %101 = load i32, i32* %jj, align 4, !dbg !1262
  %add25 = add nsw i32 %99, %101, !dbg !1263
  %idxprom26 = sext i32 %add25 to i64, !dbg !1260
  %102 = ptrtoint i32* %k9 to i64
  call void @__DiscoPoPOpenMPRead(i64 %102, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.603, i32 0, i32 0))
  %103 = load i32, i32* %k9, align 4, !dbg !1264
  %idxprom27 = sext i32 %103 to i64, !dbg !1260
  %104 = ptrtoint %struct.dcomplex** %26 to i64
  call void @__DiscoPoPOpenMPRead(i64 %104, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.604, i32 0, i32 0))
  %105 = load %struct.dcomplex*, %struct.dcomplex** %26, align 8, !dbg !1260
  %106 = mul nuw i64 %22, %24, !dbg !1260
  %107 = mul nsw i64 %idxprom27, %106, !dbg !1260
  %arrayidx28 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %105, i64 %107, !dbg !1260
  %108 = mul nsw i64 %idxprom26, %24, !dbg !1260
  %arrayidx29 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx28, i64 %108, !dbg !1260
  %arrayidx30 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx29, i64 %idxprom24, !dbg !1260
  %109 = bitcast %struct.dcomplex* %arrayidx23 to i8*, !dbg !1260
  %110 = bitcast %struct.dcomplex* %arrayidx30 to i8*, !dbg !1260
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %109, i8* %110, i64 16, i32 8, i1 false), !dbg !1265
  br label %for.inc, !dbg !1267

for.inc:                                          ; preds = %for.body21
  %111 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %111, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.605, i32 0, i32 0))
  %112 = load i32, i32* %i, align 4, !dbg !1268
  %inc = add nsw i32 %112, 1, !dbg !1268
  %113 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %113, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.606, i32 0, i32 0))
  store i32 %inc, i32* %i, align 4, !dbg !1268
  br label %for.cond19, !dbg !1270

for.end:                                          ; preds = %for.cond19
  br label %for.inc31, !dbg !1271

for.inc31:                                        ; preds = %for.end
  %114 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %114, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.607, i32 0, i32 0))
  %115 = load i32, i32* %j, align 4, !dbg !1272
  %inc32 = add nsw i32 %115, 1, !dbg !1272
  %116 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %116, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.608, i32 0, i32 0))
  store i32 %inc32, i32* %j, align 4, !dbg !1272
  br label %for.cond16, !dbg !1274

for.end33:                                        ; preds = %for.cond16
  %117 = ptrtoint i32* %28 to i64
  call void @__DiscoPoPOpenMPRead(i64 %117, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.609, i32 0, i32 0))
  %118 = load i32, i32* %28, align 4, !dbg !1275
  %119 = ptrtoint i32* %30 to i64
  call void @__DiscoPoPOpenMPRead(i64 %119, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.610, i32 0, i32 0))
  %120 = load i32, i32* %30, align 4, !dbg !1276
  %121 = ptrtoint i32* %20 to i64
  call void @__DiscoPoPOpenMPRead(i64 %121, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.611, i32 0, i32 0))
  %122 = load i32, i32* %20, align 4, !dbg !1277
  %123 = call [64 x [33 x %struct.dcomplex]]* @_ZTWL3ty1(), !dbg !1278
  %arraydecay = getelementptr inbounds [64 x [33 x %struct.dcomplex]], [64 x [33 x %struct.dcomplex]]* %123, i32 0, i32 0, !dbg !1278
  %124 = bitcast [33 x %struct.dcomplex]* %arraydecay to %struct.dcomplex*, !dbg !1278
  %125 = call [64 x [33 x %struct.dcomplex]]* @_ZTWL3ty2(), !dbg !1279
  %arraydecay34 = getelementptr inbounds [64 x [33 x %struct.dcomplex]], [64 x [33 x %struct.dcomplex]]* %125, i32 0, i32 0, !dbg !1281
  %126 = bitcast [33 x %struct.dcomplex]* %arraydecay34 to %struct.dcomplex*, !dbg !1281
  call void @cfftz(i32 %118, i32 %120, i32 %122, %struct.dcomplex* %124, %struct.dcomplex* %126), !dbg !1282
  %127 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %127, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.612, i32 0, i32 0))
  store i32 0, i32* %j, align 4, !dbg !1284
  br label %for.cond35, !dbg !1286

for.cond35:                                       ; preds = %for.inc55, %for.end33
  %128 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %128, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.613, i32 0, i32 0))
  %129 = load i32, i32* %j, align 4, !dbg !1287
  %130 = ptrtoint i32* @fftblock to i64
  call void @__DiscoPoPOpenMPRead(i64 %130, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.614, i32 0, i32 0))
  %131 = load i32, i32* @fftblock, align 4, !dbg !1290
  %cmp36 = icmp slt i32 %129, %131, !dbg !1291
  br i1 %cmp36, label %for.body37, label %for.end57, !dbg !1292

for.body37:                                       ; preds = %for.cond35
  %132 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %132, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.615, i32 0, i32 0))
  store i32 0, i32* %i, align 4, !dbg !1293
  br label %for.cond38, !dbg !1296

for.cond38:                                       ; preds = %for.inc52, %for.body37
  %133 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %133, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.616, i32 0, i32 0))
  %134 = load i32, i32* %i, align 4, !dbg !1297
  %135 = ptrtoint i32* %20 to i64
  call void @__DiscoPoPOpenMPRead(i64 %135, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.617, i32 0, i32 0))
  %136 = load i32, i32* %20, align 4, !dbg !1300
  %cmp39 = icmp slt i32 %134, %136, !dbg !1301
  br i1 %cmp39, label %for.body40, label %for.end54, !dbg !1302

for.body40:                                       ; preds = %for.cond38
  %137 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %137, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.618, i32 0, i32 0))
  %138 = load i32, i32* %i, align 4, !dbg !1303
  %idxprom41 = sext i32 %138 to i64, !dbg !1305
  %139 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %139, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.619, i32 0, i32 0))
  %140 = load i32, i32* %j, align 4, !dbg !1306
  %141 = ptrtoint i32* %jj to i64
  call void @__DiscoPoPOpenMPRead(i64 %141, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.620, i32 0, i32 0))
  %142 = load i32, i32* %jj, align 4, !dbg !1307
  %add42 = add nsw i32 %140, %142, !dbg !1308
  %idxprom43 = sext i32 %add42 to i64, !dbg !1305
  %143 = ptrtoint i32* %k9 to i64
  call void @__DiscoPoPOpenMPRead(i64 %143, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.621, i32 0, i32 0))
  %144 = load i32, i32* %k9, align 4, !dbg !1309
  %idxprom44 = sext i32 %144 to i64, !dbg !1305
  %145 = ptrtoint %struct.dcomplex** %36 to i64
  call void @__DiscoPoPOpenMPRead(i64 %145, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.622, i32 0, i32 0))
  %146 = load %struct.dcomplex*, %struct.dcomplex** %36, align 8, !dbg !1305
  %147 = mul nuw i64 %32, %34, !dbg !1305
  %148 = mul nsw i64 %idxprom44, %147, !dbg !1305
  %arrayidx45 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %146, i64 %148, !dbg !1305
  %149 = mul nsw i64 %idxprom43, %34, !dbg !1305
  %arrayidx46 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx45, i64 %149, !dbg !1305
  %arrayidx47 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx46, i64 %idxprom41, !dbg !1305
  %150 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %150, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.623, i32 0, i32 0))
  %151 = load i32, i32* %j, align 4, !dbg !1310
  %idxprom48 = sext i32 %151 to i64, !dbg !1311
  %152 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %152, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.624, i32 0, i32 0))
  %153 = load i32, i32* %i, align 4, !dbg !1312
  %idxprom49 = sext i32 %153 to i64, !dbg !1311
  %154 = call [64 x [33 x %struct.dcomplex]]* @_ZTWL3ty1(), !dbg !1311
  %arrayidx50 = getelementptr inbounds [64 x [33 x %struct.dcomplex]], [64 x [33 x %struct.dcomplex]]* %154, i64 0, i64 %idxprom49, !dbg !1311
  %arrayidx51 = getelementptr inbounds [33 x %struct.dcomplex], [33 x %struct.dcomplex]* %arrayidx50, i64 0, i64 %idxprom48, !dbg !1311
  %155 = bitcast %struct.dcomplex* %arrayidx47 to i8*, !dbg !1311
  %156 = bitcast %struct.dcomplex* %arrayidx51 to i8*, !dbg !1311
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %155, i8* %156, i64 16, i32 8, i1 false), !dbg !1313
  br label %for.inc52, !dbg !1315

for.inc52:                                        ; preds = %for.body40
  %157 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %157, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.625, i32 0, i32 0))
  %158 = load i32, i32* %i, align 4, !dbg !1316
  %inc53 = add nsw i32 %158, 1, !dbg !1316
  %159 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %159, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.626, i32 0, i32 0))
  store i32 %inc53, i32* %i, align 4, !dbg !1316
  br label %for.cond38, !dbg !1318

for.end54:                                        ; preds = %for.cond38
  br label %for.inc55, !dbg !1319

for.inc55:                                        ; preds = %for.end54
  %160 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %160, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.627, i32 0, i32 0))
  %161 = load i32, i32* %j, align 4, !dbg !1320
  %inc56 = add nsw i32 %161, 1, !dbg !1320
  %162 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %162, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.628, i32 0, i32 0))
  store i32 %inc56, i32* %j, align 4, !dbg !1320
  br label %for.cond35, !dbg !1322

for.end57:                                        ; preds = %for.cond35
  br label %for.inc58, !dbg !1323

for.inc58:                                        ; preds = %for.end57
  %163 = ptrtoint i32* @fftblock to i64
  call void @__DiscoPoPOpenMPRead(i64 %163, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.629, i32 0, i32 0))
  %164 = load i32, i32* @fftblock, align 4, !dbg !1324
  %165 = ptrtoint i32* %jj to i64
  call void @__DiscoPoPOpenMPRead(i64 %165, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.630, i32 0, i32 0))
  %166 = load i32, i32* %jj, align 4, !dbg !1326
  %add59 = add nsw i32 %166, %164, !dbg !1326
  %167 = ptrtoint i32* %jj to i64
  call void @__DiscoPoPOpenMPWrite(i64 %167, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.631, i32 0, i32 0))
  store i32 %add59, i32* %jj, align 4, !dbg !1326
  br label %for.cond, !dbg !1327

for.end60:                                        ; preds = %for.cond
  br label %omp.body.continue, !dbg !1328

omp.body.continue:                                ; preds = %for.end60
  br label %omp.inner.for.inc, !dbg !1329

omp.inner.for.inc:                                ; preds = %omp.body.continue
  %168 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %168, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.632, i32 0, i32 0))
  %169 = load i32, i32* %.omp.iv, align 4, !dbg !1330
  %add61 = add nsw i32 %169, 1, !dbg !1332
  %170 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPWrite(i64 %170, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.633, i32 0, i32 0))
  store i32 %add61, i32* %.omp.iv, align 4, !dbg !1332
  br label %omp.inner.for.cond, !dbg !1334

omp.inner.for.end:                                ; preds = %omp.inner.for.cond
  br label %omp.loop.exit, !dbg !1335

omp.loop.exit:                                    ; preds = %omp.inner.for.end
  %171 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !1336
  %172 = ptrtoint i8** %171 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %172, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.634, i32 0, i32 0))
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @4, i32 0, i32 0), i8** %171, align 8, !dbg !1336
  %173 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %173, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.635, i32 0, i32 0))
  %174 = load i32*, i32** %.global_tid..addr, align 8, !dbg !1336
  %175 = ptrtoint i32* %174 to i64
  call void @__DiscoPoPOpenMPRead(i64 %175, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.636, i32 0, i32 0))
  %176 = load i32, i32* %174, align 4, !dbg !1336
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([132 x i8], [132 x i8]* @.str.638, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_for_static_fini(%ident_t* %.kmpc_loc.addr, i32 %176), !dbg !1336
  br label %omp.precond.end, !dbg !1336

omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
  call void @__DiscoPoPOpenMPAfterCall()
  ret void, !dbg !1337
}

; Function Attrs: nounwind uwtable
define internal [64 x [33 x %struct.dcomplex]]* @_ZTWL3ty1() #0 {
  ret [64 x [33 x %struct.dcomplex]]* @ty1
}

; Function Attrs: nounwind uwtable
define internal [64 x [33 x %struct.dcomplex]]* @_ZTWL3ty2() #0 {
  ret [64 x [33 x %struct.dcomplex]]* @ty2
}

; Function Attrs: nounwind uwtable
define internal void @cfftz(i32 %is, i32 %m, i32 %n, %struct.dcomplex* %x, %struct.dcomplex* %y) #0 !dbg !1338 {
entry:
  %is.addr = alloca i32, align 4
  %m.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %x.addr = alloca %struct.dcomplex*, align 8
  %y.addr = alloca %struct.dcomplex*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %l = alloca i32, align 4
  %mx = alloca i32, align 4
  %0 = ptrtoint i32* %is.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.639, i32 0, i32 0))
  store i32 %is, i32* %is.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %is.addr, metadata !1344, metadata !98), !dbg !1345
  %1 = ptrtoint i32* %m.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.640, i32 0, i32 0))
  store i32 %m, i32* %m.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %m.addr, metadata !1346, metadata !98), !dbg !1347
  %2 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.641, i32 0, i32 0))
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !1348, metadata !98), !dbg !1349
  %3 = ptrtoint %struct.dcomplex** %x.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.642, i32 0, i32 0))
  store %struct.dcomplex* %x, %struct.dcomplex** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dcomplex** %x.addr, metadata !1350, metadata !98), !dbg !1351
  %4 = ptrtoint %struct.dcomplex** %y.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.643, i32 0, i32 0))
  store %struct.dcomplex* %y, %struct.dcomplex** %y.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dcomplex** %y.addr, metadata !1352, metadata !98), !dbg !1353
  %5 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %5, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.644, i32 0, i32 0))
  %6 = load i32, i32* %n.addr, align 4, !dbg !1354
  %7 = zext i32 %6 to i64
  %8 = ptrtoint i32* @fftblockpad to i64
  call void @__DiscoPoPOpenMPRead(i64 %8, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.645, i32 0, i32 0))
  %9 = load i32, i32* @fftblockpad, align 4, !dbg !1355
  %10 = zext i32 %9 to i64
  %11 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %11, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.646, i32 0, i32 0))
  %12 = load i32, i32* %n.addr, align 4, !dbg !1356
  %13 = zext i32 %12 to i64
  %14 = ptrtoint i32* @fftblockpad to i64
  call void @__DiscoPoPOpenMPRead(i64 %14, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.647, i32 0, i32 0))
  %15 = load i32, i32* @fftblockpad, align 4, !dbg !1357
  %16 = zext i32 %15 to i64
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1358, metadata !98), !dbg !1359
  call void @llvm.dbg.declare(metadata i32* %j, metadata !1360, metadata !98), !dbg !1361
  call void @llvm.dbg.declare(metadata i32* %l, metadata !1362, metadata !98), !dbg !1363
  call void @llvm.dbg.declare(metadata i32* %mx, metadata !1364, metadata !98), !dbg !1365
  %17 = ptrtoint double* getelementptr inbounds ([65 x %struct.dcomplex], [65 x %struct.dcomplex]* @u, i64 0, i64 0, i32 0) to i64
  call void @__DiscoPoPOpenMPRead(i64 %17, i32 16, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.648, i32 0, i32 0))
  %18 = load double, double* getelementptr inbounds ([65 x %struct.dcomplex], [65 x %struct.dcomplex]* @u, i64 0, i64 0, i32 0), align 16, !dbg !1366
  %conv = fptosi double %18 to i32, !dbg !1367
  %19 = ptrtoint i32* %mx to i64
  call void @__DiscoPoPOpenMPWrite(i64 %19, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.649, i32 0, i32 0))
  store i32 %conv, i32* %mx, align 4, !dbg !1368
  %20 = ptrtoint i32* %is.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %20, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.650, i32 0, i32 0))
  %21 = load i32, i32* %is.addr, align 4, !dbg !1369
  %cmp = icmp ne i32 %21, 1, !dbg !1371
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !1372

land.lhs.true:                                    ; preds = %entry
  %22 = ptrtoint i32* %is.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %22, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.651, i32 0, i32 0))
  %23 = load i32, i32* %is.addr, align 4, !dbg !1373
  %cmp2 = icmp ne i32 %23, -1, !dbg !1375
  br i1 %cmp2, label %if.then, label %lor.lhs.false, !dbg !1376

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %24 = ptrtoint i32* %m.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %24, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.652, i32 0, i32 0))
  %25 = load i32, i32* %m.addr, align 4, !dbg !1377
  %cmp4 = icmp slt i32 %25, 1, !dbg !1379
  br i1 %cmp4, label %if.then, label %lor.lhs.false6, !dbg !1380

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %26 = ptrtoint i32* %m.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %26, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.653, i32 0, i32 0))
  %27 = load i32, i32* %m.addr, align 4, !dbg !1381
  %28 = ptrtoint i32* %mx to i64
  call void @__DiscoPoPOpenMPRead(i64 %28, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.654, i32 0, i32 0))
  %29 = load i32, i32* %mx, align 4, !dbg !1383
  %cmp7 = icmp sgt i32 %27, %29, !dbg !1384
  br i1 %cmp7, label %if.then, label %if.end, !dbg !1385

if.then:                                          ; preds = %lor.lhs.false6, %lor.lhs.false, %land.lhs.true
  %30 = ptrtoint i32* %is.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %30, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.655, i32 0, i32 0))
  %31 = load i32, i32* %is.addr, align 4, !dbg !1386
  %32 = ptrtoint i32* %m.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %32, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.656, i32 0, i32 0))
  %33 = load i32, i32* %m.addr, align 4, !dbg !1388
  %34 = ptrtoint i32* %mx to i64
  call void @__DiscoPoPOpenMPRead(i64 %34, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.657, i32 0, i32 0))
  %35 = load i32, i32* %mx, align 4, !dbg !1389
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([99 x i8], [99 x i8]* @.str.28, i32 0, i32 0), i32 %31, i32 %33, i32 %35), !dbg !1390
  call void @exit(i32 1) #8, !dbg !1391
  unreachable, !dbg !1391

if.end:                                           ; preds = %lor.lhs.false6
  %36 = ptrtoint i32* %l to i64
  call void @__DiscoPoPOpenMPWrite(i64 %36, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.658, i32 0, i32 0))
  store i32 1, i32* %l, align 4, !dbg !1392
  br label %for.cond, !dbg !1394

for.cond:                                         ; preds = %for.inc32, %if.end
  %37 = ptrtoint i32* %l to i64
  call void @__DiscoPoPOpenMPRead(i64 %37, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.659, i32 0, i32 0))
  %38 = load i32, i32* %l, align 4, !dbg !1395
  %39 = ptrtoint i32* %m.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %39, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.660, i32 0, i32 0))
  %40 = load i32, i32* %m.addr, align 4, !dbg !1398
  %cmp9 = icmp sle i32 %38, %40, !dbg !1399
  br i1 %cmp9, label %for.body, label %for.end34, !dbg !1400

for.body:                                         ; preds = %for.cond
  %41 = ptrtoint i32* %is.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %41, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.661, i32 0, i32 0))
  %42 = load i32, i32* %is.addr, align 4, !dbg !1401
  %43 = ptrtoint i32* %l to i64
  call void @__DiscoPoPOpenMPRead(i64 %43, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.662, i32 0, i32 0))
  %44 = load i32, i32* %l, align 4, !dbg !1403
  %45 = ptrtoint i32* %m.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %45, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.663, i32 0, i32 0))
  %46 = load i32, i32* %m.addr, align 4, !dbg !1404
  %47 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %47, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.664, i32 0, i32 0))
  %48 = load i32, i32* %n.addr, align 4, !dbg !1405
  %49 = ptrtoint i32* @fftblock to i64
  call void @__DiscoPoPOpenMPRead(i64 %49, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.665, i32 0, i32 0))
  %50 = load i32, i32* @fftblock, align 4, !dbg !1406
  %51 = ptrtoint i32* @fftblockpad to i64
  call void @__DiscoPoPOpenMPRead(i64 %51, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.666, i32 0, i32 0))
  %52 = load i32, i32* @fftblockpad, align 4, !dbg !1407
  %53 = ptrtoint %struct.dcomplex** %x.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %53, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.667, i32 0, i32 0))
  %54 = load %struct.dcomplex*, %struct.dcomplex** %x.addr, align 8, !dbg !1408
  %55 = ptrtoint %struct.dcomplex** %y.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %55, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.668, i32 0, i32 0))
  %56 = load %struct.dcomplex*, %struct.dcomplex** %y.addr, align 8, !dbg !1409
  call void @fftz2(i32 %42, i32 %44, i32 %46, i32 %48, i32 %50, i32 %52, %struct.dcomplex* getelementptr inbounds ([65 x %struct.dcomplex], [65 x %struct.dcomplex]* @u, i32 0, i32 0), %struct.dcomplex* %54, %struct.dcomplex* %56), !dbg !1410
  %57 = ptrtoint i32* %l to i64
  call void @__DiscoPoPOpenMPRead(i64 %57, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.669, i32 0, i32 0))
  %58 = load i32, i32* %l, align 4, !dbg !1411
  %59 = ptrtoint i32* %m.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %59, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.670, i32 0, i32 0))
  %60 = load i32, i32* %m.addr, align 4, !dbg !1413
  %cmp11 = icmp eq i32 %58, %60, !dbg !1414
  br i1 %cmp11, label %if.then13, label %if.end31, !dbg !1415

if.then13:                                        ; preds = %for.body
  %61 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %61, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.671, i32 0, i32 0))
  store i32 0, i32* %j, align 4, !dbg !1416
  br label %for.cond14, !dbg !1419

for.cond14:                                       ; preds = %for.inc28, %if.then13
  %62 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %62, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.672, i32 0, i32 0))
  %63 = load i32, i32* %j, align 4, !dbg !1420
  %64 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %64, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.673, i32 0, i32 0))
  %65 = load i32, i32* %n.addr, align 4, !dbg !1423
  %cmp15 = icmp slt i32 %63, %65, !dbg !1424
  br i1 %cmp15, label %for.body17, label %for.end30, !dbg !1425

for.body17:                                       ; preds = %for.cond14
  %66 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %66, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.674, i32 0, i32 0))
  store i32 0, i32* %i, align 4, !dbg !1426
  br label %for.cond18, !dbg !1429

for.cond18:                                       ; preds = %for.inc, %for.body17
  %67 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %67, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.675, i32 0, i32 0))
  %68 = load i32, i32* %i, align 4, !dbg !1430
  %69 = ptrtoint i32* @fftblock to i64
  call void @__DiscoPoPOpenMPRead(i64 %69, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.676, i32 0, i32 0))
  %70 = load i32, i32* @fftblock, align 4, !dbg !1433
  %cmp19 = icmp slt i32 %68, %70, !dbg !1434
  br i1 %cmp19, label %for.body21, label %for.end, !dbg !1435

for.body21:                                       ; preds = %for.cond18
  %71 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %71, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.677, i32 0, i32 0))
  %72 = load i32, i32* %i, align 4, !dbg !1436
  %idxprom = sext i32 %72 to i64, !dbg !1438
  %73 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %73, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.678, i32 0, i32 0))
  %74 = load i32, i32* %j, align 4, !dbg !1439
  %idxprom22 = sext i32 %74 to i64, !dbg !1438
  %75 = ptrtoint %struct.dcomplex** %x.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %75, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.679, i32 0, i32 0))
  %76 = load %struct.dcomplex*, %struct.dcomplex** %x.addr, align 8, !dbg !1438
  %77 = mul nsw i64 %idxprom22, %10, !dbg !1438
  %arrayidx = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %76, i64 %77, !dbg !1438
  %arrayidx23 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx, i64 %idxprom, !dbg !1438
  %78 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %78, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.680, i32 0, i32 0))
  %79 = load i32, i32* %i, align 4, !dbg !1440
  %idxprom24 = sext i32 %79 to i64, !dbg !1441
  %80 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %80, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.681, i32 0, i32 0))
  %81 = load i32, i32* %j, align 4, !dbg !1442
  %idxprom25 = sext i32 %81 to i64, !dbg !1441
  %82 = ptrtoint %struct.dcomplex** %y.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %82, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.682, i32 0, i32 0))
  %83 = load %struct.dcomplex*, %struct.dcomplex** %y.addr, align 8, !dbg !1441
  %84 = mul nsw i64 %idxprom25, %16, !dbg !1441
  %arrayidx26 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %83, i64 %84, !dbg !1441
  %arrayidx27 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx26, i64 %idxprom24, !dbg !1441
  %85 = bitcast %struct.dcomplex* %arrayidx23 to i8*, !dbg !1441
  %86 = bitcast %struct.dcomplex* %arrayidx27 to i8*, !dbg !1441
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %85, i8* %86, i64 16, i32 8, i1 false), !dbg !1441
  br label %for.inc, !dbg !1443

for.inc:                                          ; preds = %for.body21
  %87 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %87, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.683, i32 0, i32 0))
  %88 = load i32, i32* %i, align 4, !dbg !1444
  %inc = add nsw i32 %88, 1, !dbg !1444
  %89 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %89, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.684, i32 0, i32 0))
  store i32 %inc, i32* %i, align 4, !dbg !1444
  br label %for.cond18, !dbg !1446

for.end:                                          ; preds = %for.cond18
  br label %for.inc28, !dbg !1447

for.inc28:                                        ; preds = %for.end
  %90 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %90, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.685, i32 0, i32 0))
  %91 = load i32, i32* %j, align 4, !dbg !1448
  %inc29 = add nsw i32 %91, 1, !dbg !1448
  %92 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %92, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.686, i32 0, i32 0))
  store i32 %inc29, i32* %j, align 4, !dbg !1448
  br label %for.cond14, !dbg !1450

for.end30:                                        ; preds = %for.cond14
  br label %for.end34, !dbg !1451

if.end31:                                         ; preds = %for.body
  %93 = ptrtoint i32* %is.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %93, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.687, i32 0, i32 0))
  %94 = load i32, i32* %is.addr, align 4, !dbg !1452
  %95 = ptrtoint i32* %l to i64
  call void @__DiscoPoPOpenMPRead(i64 %95, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.688, i32 0, i32 0))
  %96 = load i32, i32* %l, align 4, !dbg !1453
  %add = add nsw i32 %96, 1, !dbg !1454
  %97 = ptrtoint i32* %m.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %97, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.689, i32 0, i32 0))
  %98 = load i32, i32* %m.addr, align 4, !dbg !1455
  %99 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %99, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.690, i32 0, i32 0))
  %100 = load i32, i32* %n.addr, align 4, !dbg !1456
  %101 = ptrtoint i32* @fftblock to i64
  call void @__DiscoPoPOpenMPRead(i64 %101, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.691, i32 0, i32 0))
  %102 = load i32, i32* @fftblock, align 4, !dbg !1457
  %103 = ptrtoint i32* @fftblockpad to i64
  call void @__DiscoPoPOpenMPRead(i64 %103, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.692, i32 0, i32 0))
  %104 = load i32, i32* @fftblockpad, align 4, !dbg !1458
  %105 = ptrtoint %struct.dcomplex** %y.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %105, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.693, i32 0, i32 0))
  %106 = load %struct.dcomplex*, %struct.dcomplex** %y.addr, align 8, !dbg !1459
  %107 = ptrtoint %struct.dcomplex** %x.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %107, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.694, i32 0, i32 0))
  %108 = load %struct.dcomplex*, %struct.dcomplex** %x.addr, align 8, !dbg !1460
  call void @fftz2(i32 %94, i32 %add, i32 %98, i32 %100, i32 %102, i32 %104, %struct.dcomplex* getelementptr inbounds ([65 x %struct.dcomplex], [65 x %struct.dcomplex]* @u, i32 0, i32 0), %struct.dcomplex* %106, %struct.dcomplex* %108), !dbg !1461
  br label %for.inc32, !dbg !1462

for.inc32:                                        ; preds = %if.end31
  %109 = ptrtoint i32* %l to i64
  call void @__DiscoPoPOpenMPRead(i64 %109, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.695, i32 0, i32 0))
  %110 = load i32, i32* %l, align 4, !dbg !1463
  %add33 = add nsw i32 %110, 2, !dbg !1463
  %111 = ptrtoint i32* %l to i64
  call void @__DiscoPoPOpenMPWrite(i64 %111, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.696, i32 0, i32 0))
  store i32 %add33, i32* %l, align 4, !dbg !1463
  br label %for.cond, !dbg !1465

for.end34:                                        ; preds = %for.end30, %for.cond
  ret void, !dbg !1466
}

; Function Attrs: noreturn nounwind
declare void @exit(i32) #5

; Function Attrs: nounwind uwtable
define internal void @fftz2(i32 %is, i32 %l, i32 %m, i32 %n, i32 %ny, i32 %ny1, %struct.dcomplex* %u, %struct.dcomplex* %x, %struct.dcomplex* %y) #0 !dbg !1467 {
entry:
  %is.addr = alloca i32, align 4
  %l.addr = alloca i32, align 4
  %m.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %ny.addr = alloca i32, align 4
  %ny1.addr = alloca i32, align 4
  %u.addr = alloca %struct.dcomplex*, align 8
  %x.addr = alloca %struct.dcomplex*, align 8
  %y.addr = alloca %struct.dcomplex*, align 8
  %k = alloca i32, align 4
  %n1 = alloca i32, align 4
  %li = alloca i32, align 4
  %lj = alloca i32, align 4
  %lk = alloca i32, align 4
  %ku = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i11 = alloca i32, align 4
  %i12 = alloca i32, align 4
  %i21 = alloca i32, align 4
  %i22 = alloca i32, align 4
  %u1 = alloca %struct.dcomplex, align 8
  %x11 = alloca %struct.dcomplex, align 8
  %x21 = alloca %struct.dcomplex, align 8
  %.compoundliteral = alloca %struct.dcomplex, align 8
  %.compoundliteral40 = alloca %struct.dcomplex, align 8
  %.compoundliteral54 = alloca %struct.dcomplex, align 8
  %.compoundliteral57 = alloca %struct.dcomplex, align 8
  %.compoundliteral69 = alloca %struct.dcomplex, align 8
  %.compoundliteral83 = alloca %struct.dcomplex, align 8
  %.compoundliteral95 = alloca %struct.dcomplex, align 8
  %0 = ptrtoint i32* %is.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.697, i32 0, i32 0))
  store i32 %is, i32* %is.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %is.addr, metadata !1470, metadata !98), !dbg !1471
  %1 = ptrtoint i32* %l.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.698, i32 0, i32 0))
  store i32 %l, i32* %l.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %l.addr, metadata !1472, metadata !98), !dbg !1473
  %2 = ptrtoint i32* %m.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.699, i32 0, i32 0))
  store i32 %m, i32* %m.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %m.addr, metadata !1474, metadata !98), !dbg !1475
  %3 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.700, i32 0, i32 0))
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !1476, metadata !98), !dbg !1477
  %4 = ptrtoint i32* %ny.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.701, i32 0, i32 0))
  store i32 %ny, i32* %ny.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ny.addr, metadata !1478, metadata !98), !dbg !1479
  %5 = ptrtoint i32* %ny1.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.702, i32 0, i32 0))
  store i32 %ny1, i32* %ny1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ny1.addr, metadata !1480, metadata !98), !dbg !1481
  %6 = ptrtoint %struct.dcomplex** %u.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.703, i32 0, i32 0))
  store %struct.dcomplex* %u, %struct.dcomplex** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dcomplex** %u.addr, metadata !1482, metadata !98), !dbg !1483
  %7 = ptrtoint %struct.dcomplex** %x.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %7, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.704, i32 0, i32 0))
  store %struct.dcomplex* %x, %struct.dcomplex** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dcomplex** %x.addr, metadata !1484, metadata !98), !dbg !1485
  %8 = ptrtoint %struct.dcomplex** %y.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.705, i32 0, i32 0))
  store %struct.dcomplex* %y, %struct.dcomplex** %y.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dcomplex** %y.addr, metadata !1486, metadata !98), !dbg !1487
  %9 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %9, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.706, i32 0, i32 0))
  %10 = load i32, i32* %n.addr, align 4, !dbg !1488
  %11 = zext i32 %10 to i64
  %12 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %12, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.707, i32 0, i32 0))
  %13 = load i32, i32* %n.addr, align 4, !dbg !1489
  %14 = zext i32 %13 to i64
  %15 = ptrtoint i32* %ny1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %15, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.708, i32 0, i32 0))
  %16 = load i32, i32* %ny1.addr, align 4, !dbg !1490
  %17 = zext i32 %16 to i64
  %18 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %18, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.709, i32 0, i32 0))
  %19 = load i32, i32* %n.addr, align 4, !dbg !1491
  %20 = zext i32 %19 to i64
  %21 = ptrtoint i32* %ny1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %21, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.710, i32 0, i32 0))
  %22 = load i32, i32* %ny1.addr, align 4, !dbg !1492
  %23 = zext i32 %22 to i64
  call void @llvm.dbg.declare(metadata i32* %k, metadata !1493, metadata !98), !dbg !1494
  call void @llvm.dbg.declare(metadata i32* %n1, metadata !1495, metadata !98), !dbg !1496
  call void @llvm.dbg.declare(metadata i32* %li, metadata !1497, metadata !98), !dbg !1498
  call void @llvm.dbg.declare(metadata i32* %lj, metadata !1499, metadata !98), !dbg !1500
  call void @llvm.dbg.declare(metadata i32* %lk, metadata !1501, metadata !98), !dbg !1502
  call void @llvm.dbg.declare(metadata i32* %ku, metadata !1503, metadata !98), !dbg !1504
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1505, metadata !98), !dbg !1506
  call void @llvm.dbg.declare(metadata i32* %j, metadata !1507, metadata !98), !dbg !1508
  call void @llvm.dbg.declare(metadata i32* %i11, metadata !1509, metadata !98), !dbg !1510
  call void @llvm.dbg.declare(metadata i32* %i12, metadata !1511, metadata !98), !dbg !1512
  call void @llvm.dbg.declare(metadata i32* %i21, metadata !1513, metadata !98), !dbg !1514
  call void @llvm.dbg.declare(metadata i32* %i22, metadata !1515, metadata !98), !dbg !1516
  call void @llvm.dbg.declare(metadata %struct.dcomplex* %u1, metadata !1517, metadata !98), !dbg !1518
  call void @llvm.dbg.declare(metadata %struct.dcomplex* %x11, metadata !1519, metadata !98), !dbg !1520
  call void @llvm.dbg.declare(metadata %struct.dcomplex* %x21, metadata !1521, metadata !98), !dbg !1522
  %24 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %24, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.711, i32 0, i32 0))
  %25 = load i32, i32* %n.addr, align 4, !dbg !1523
  %div = sdiv i32 %25, 2, !dbg !1524
  %26 = ptrtoint i32* %n1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %26, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.712, i32 0, i32 0))
  store i32 %div, i32* %n1, align 4, !dbg !1525
  %27 = ptrtoint i32* %l.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %27, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.713, i32 0, i32 0))
  %28 = load i32, i32* %l.addr, align 4, !dbg !1526
  %sub = sub nsw i32 %28, 1, !dbg !1527
  %shl = shl i32 1, %sub, !dbg !1528
  %29 = ptrtoint i32* %lk to i64
  call void @__DiscoPoPOpenMPWrite(i64 %29, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.714, i32 0, i32 0))
  store i32 %shl, i32* %lk, align 4, !dbg !1529
  %30 = ptrtoint i32* %m.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %30, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.715, i32 0, i32 0))
  %31 = load i32, i32* %m.addr, align 4, !dbg !1530
  %32 = ptrtoint i32* %l.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %32, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.716, i32 0, i32 0))
  %33 = load i32, i32* %l.addr, align 4, !dbg !1531
  %sub1 = sub nsw i32 %31, %33, !dbg !1532
  %shl2 = shl i32 1, %sub1, !dbg !1533
  %34 = ptrtoint i32* %li to i64
  call void @__DiscoPoPOpenMPWrite(i64 %34, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.717, i32 0, i32 0))
  store i32 %shl2, i32* %li, align 4, !dbg !1534
  %35 = ptrtoint i32* %lk to i64
  call void @__DiscoPoPOpenMPRead(i64 %35, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.718, i32 0, i32 0))
  %36 = load i32, i32* %lk, align 4, !dbg !1535
  %mul = mul nsw i32 2, %36, !dbg !1536
  %37 = ptrtoint i32* %lj to i64
  call void @__DiscoPoPOpenMPWrite(i64 %37, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.719, i32 0, i32 0))
  store i32 %mul, i32* %lj, align 4, !dbg !1537
  %38 = ptrtoint i32* %li to i64
  call void @__DiscoPoPOpenMPRead(i64 %38, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.720, i32 0, i32 0))
  %39 = load i32, i32* %li, align 4, !dbg !1538
  %40 = ptrtoint i32* %ku to i64
  call void @__DiscoPoPOpenMPWrite(i64 %40, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.721, i32 0, i32 0))
  store i32 %39, i32* %ku, align 4, !dbg !1539
  %41 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %41, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.722, i32 0, i32 0))
  store i32 0, i32* %i, align 4, !dbg !1540
  br label %for.cond, !dbg !1542

for.cond:                                         ; preds = %for.inc110, %entry
  %42 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %42, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.723, i32 0, i32 0))
  %43 = load i32, i32* %i, align 4, !dbg !1543
  %44 = ptrtoint i32* %li to i64
  call void @__DiscoPoPOpenMPRead(i64 %44, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.724, i32 0, i32 0))
  %45 = load i32, i32* %li, align 4, !dbg !1546
  %sub3 = sub nsw i32 %45, 1, !dbg !1547
  %cmp = icmp sle i32 %43, %sub3, !dbg !1548
  br i1 %cmp, label %for.body, label %for.end112, !dbg !1549

for.body:                                         ; preds = %for.cond
  %46 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %46, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.725, i32 0, i32 0))
  %47 = load i32, i32* %i, align 4, !dbg !1550
  %48 = ptrtoint i32* %lk to i64
  call void @__DiscoPoPOpenMPRead(i64 %48, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.726, i32 0, i32 0))
  %49 = load i32, i32* %lk, align 4, !dbg !1552
  %mul4 = mul nsw i32 %47, %49, !dbg !1553
  %50 = ptrtoint i32* %i11 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %50, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.727, i32 0, i32 0))
  store i32 %mul4, i32* %i11, align 4, !dbg !1554
  %51 = ptrtoint i32* %i11 to i64
  call void @__DiscoPoPOpenMPRead(i64 %51, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.728, i32 0, i32 0))
  %52 = load i32, i32* %i11, align 4, !dbg !1555
  %53 = ptrtoint i32* %n1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %53, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.729, i32 0, i32 0))
  %54 = load i32, i32* %n1, align 4, !dbg !1556
  %add = add nsw i32 %52, %54, !dbg !1557
  %55 = ptrtoint i32* %i12 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %55, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.730, i32 0, i32 0))
  store i32 %add, i32* %i12, align 4, !dbg !1558
  %56 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %56, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.731, i32 0, i32 0))
  %57 = load i32, i32* %i, align 4, !dbg !1559
  %58 = ptrtoint i32* %lj to i64
  call void @__DiscoPoPOpenMPRead(i64 %58, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.732, i32 0, i32 0))
  %59 = load i32, i32* %lj, align 4, !dbg !1560
  %mul5 = mul nsw i32 %57, %59, !dbg !1561
  %60 = ptrtoint i32* %i21 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %60, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.733, i32 0, i32 0))
  store i32 %mul5, i32* %i21, align 4, !dbg !1562
  %61 = ptrtoint i32* %i21 to i64
  call void @__DiscoPoPOpenMPRead(i64 %61, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.734, i32 0, i32 0))
  %62 = load i32, i32* %i21, align 4, !dbg !1563
  %63 = ptrtoint i32* %lk to i64
  call void @__DiscoPoPOpenMPRead(i64 %63, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.735, i32 0, i32 0))
  %64 = load i32, i32* %lk, align 4, !dbg !1564
  %add6 = add nsw i32 %62, %64, !dbg !1565
  %65 = ptrtoint i32* %i22 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %65, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.736, i32 0, i32 0))
  store i32 %add6, i32* %i22, align 4, !dbg !1566
  %66 = ptrtoint i32* %is.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %66, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.737, i32 0, i32 0))
  %67 = load i32, i32* %is.addr, align 4, !dbg !1567
  %cmp7 = icmp sge i32 %67, 1, !dbg !1569
  br i1 %cmp7, label %if.then, label %if.else, !dbg !1570

if.then:                                          ; preds = %for.body
  %68 = ptrtoint i32* %ku to i64
  call void @__DiscoPoPOpenMPRead(i64 %68, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.738, i32 0, i32 0))
  %69 = load i32, i32* %ku, align 4, !dbg !1571
  %70 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %70, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.739, i32 0, i32 0))
  %71 = load i32, i32* %i, align 4, !dbg !1573
  %add8 = add nsw i32 %69, %71, !dbg !1574
  %idxprom = sext i32 %add8 to i64, !dbg !1575
  %72 = ptrtoint %struct.dcomplex** %u.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %72, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.740, i32 0, i32 0))
  %73 = load %struct.dcomplex*, %struct.dcomplex** %u.addr, align 8, !dbg !1575
  %arrayidx = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %73, i64 %idxprom, !dbg !1575
  %74 = bitcast %struct.dcomplex* %u1 to i8*, !dbg !1575
  %75 = bitcast %struct.dcomplex* %arrayidx to i8*, !dbg !1575
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %74, i8* %75, i64 16, i32 8, i1 false), !dbg !1575
  br label %if.end, !dbg !1576

if.else:                                          ; preds = %for.body
  %real = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral, i32 0, i32 0, !dbg !1577
  %76 = ptrtoint i32* %ku to i64
  call void @__DiscoPoPOpenMPRead(i64 %76, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.741, i32 0, i32 0))
  %77 = load i32, i32* %ku, align 4, !dbg !1577
  %78 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %78, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.742, i32 0, i32 0))
  %79 = load i32, i32* %i, align 4, !dbg !1577
  %add9 = add nsw i32 %77, %79, !dbg !1577
  %idxprom10 = sext i32 %add9 to i64, !dbg !1577
  %80 = ptrtoint %struct.dcomplex** %u.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %80, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.743, i32 0, i32 0))
  %81 = load %struct.dcomplex*, %struct.dcomplex** %u.addr, align 8, !dbg !1577
  %arrayidx11 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %81, i64 %idxprom10, !dbg !1577
  %real12 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx11, i32 0, i32 0, !dbg !1577
  %82 = ptrtoint double* %real12 to i64
  call void @__DiscoPoPOpenMPRead(i64 %82, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.744, i32 0, i32 0))
  %83 = load double, double* %real12, align 8, !dbg !1577
  %84 = ptrtoint double* %real to i64
  call void @__DiscoPoPOpenMPWrite(i64 %84, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.745, i32 0, i32 0))
  store double %83, double* %real, align 8, !dbg !1577
  %imag = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral, i32 0, i32 1, !dbg !1577
  %85 = ptrtoint i32* %ku to i64
  call void @__DiscoPoPOpenMPRead(i64 %85, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.746, i32 0, i32 0))
  %86 = load i32, i32* %ku, align 4, !dbg !1577
  %87 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %87, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.747, i32 0, i32 0))
  %88 = load i32, i32* %i, align 4, !dbg !1577
  %add13 = add nsw i32 %86, %88, !dbg !1577
  %idxprom14 = sext i32 %add13 to i64, !dbg !1577
  %89 = ptrtoint %struct.dcomplex** %u.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %89, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.748, i32 0, i32 0))
  %90 = load %struct.dcomplex*, %struct.dcomplex** %u.addr, align 8, !dbg !1577
  %arrayidx15 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %90, i64 %idxprom14, !dbg !1577
  %imag16 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx15, i32 0, i32 1, !dbg !1577
  %91 = ptrtoint double* %imag16 to i64
  call void @__DiscoPoPOpenMPRead(i64 %91, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.749, i32 0, i32 0))
  %92 = load double, double* %imag16, align 8, !dbg !1577
  %mul17 = fmul double -1.000000e+00, %92, !dbg !1577
  %93 = ptrtoint double* %imag to i64
  call void @__DiscoPoPOpenMPWrite(i64 %93, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.750, i32 0, i32 0))
  store double %mul17, double* %imag, align 8, !dbg !1577
  %94 = bitcast %struct.dcomplex* %u1 to i8*, !dbg !1577
  %95 = bitcast %struct.dcomplex* %.compoundliteral to i8*, !dbg !1577
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %95, i64 16, i32 8, i1 false), !dbg !1577
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %96 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPWrite(i64 %96, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.751, i32 0, i32 0))
  store i32 0, i32* %k, align 4, !dbg !1579
  br label %for.cond18, !dbg !1581

for.cond18:                                       ; preds = %for.inc107, %if.end
  %97 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %97, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.752, i32 0, i32 0))
  %98 = load i32, i32* %k, align 4, !dbg !1582
  %99 = ptrtoint i32* %lk to i64
  call void @__DiscoPoPOpenMPRead(i64 %99, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.753, i32 0, i32 0))
  %100 = load i32, i32* %lk, align 4, !dbg !1585
  %sub19 = sub nsw i32 %100, 1, !dbg !1586
  %cmp20 = icmp sle i32 %98, %sub19, !dbg !1587
  br i1 %cmp20, label %for.body21, label %for.end109, !dbg !1588

for.body21:                                       ; preds = %for.cond18
  %101 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %101, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.754, i32 0, i32 0))
  store i32 0, i32* %j, align 4, !dbg !1589
  br label %for.cond22, !dbg !1592

for.cond22:                                       ; preds = %for.inc, %for.body21
  %102 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %102, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.755, i32 0, i32 0))
  %103 = load i32, i32* %j, align 4, !dbg !1593
  %104 = ptrtoint i32* %ny.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %104, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.756, i32 0, i32 0))
  %105 = load i32, i32* %ny.addr, align 4, !dbg !1596
  %cmp23 = icmp slt i32 %103, %105, !dbg !1597
  br i1 %cmp23, label %for.body24, label %for.end, !dbg !1598

for.body24:                                       ; preds = %for.cond22
  %106 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %106, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.757, i32 0, i32 0))
  %107 = load i32, i32* %j, align 4, !dbg !1599
  %idxprom25 = sext i32 %107 to i64, !dbg !1601
  %108 = ptrtoint i32* %i11 to i64
  call void @__DiscoPoPOpenMPRead(i64 %108, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.758, i32 0, i32 0))
  %109 = load i32, i32* %i11, align 4, !dbg !1602
  %110 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %110, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.759, i32 0, i32 0))
  %111 = load i32, i32* %k, align 4, !dbg !1603
  %add26 = add nsw i32 %109, %111, !dbg !1604
  %idxprom27 = sext i32 %add26 to i64, !dbg !1601
  %112 = ptrtoint %struct.dcomplex** %x.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %112, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.760, i32 0, i32 0))
  %113 = load %struct.dcomplex*, %struct.dcomplex** %x.addr, align 8, !dbg !1601
  %114 = mul nsw i64 %idxprom27, %17, !dbg !1601
  %arrayidx28 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %113, i64 %114, !dbg !1601
  %arrayidx29 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx28, i64 %idxprom25, !dbg !1601
  %115 = bitcast %struct.dcomplex* %x11 to i8*, !dbg !1601
  %116 = bitcast %struct.dcomplex* %arrayidx29 to i8*, !dbg !1601
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %115, i8* %116, i64 16, i32 8, i1 false), !dbg !1601
  %117 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %117, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.761, i32 0, i32 0))
  %118 = load i32, i32* %j, align 4, !dbg !1605
  %idxprom30 = sext i32 %118 to i64, !dbg !1606
  %119 = ptrtoint i32* %i12 to i64
  call void @__DiscoPoPOpenMPRead(i64 %119, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.762, i32 0, i32 0))
  %120 = load i32, i32* %i12, align 4, !dbg !1607
  %121 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %121, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.763, i32 0, i32 0))
  %122 = load i32, i32* %k, align 4, !dbg !1608
  %add31 = add nsw i32 %120, %122, !dbg !1609
  %idxprom32 = sext i32 %add31 to i64, !dbg !1606
  %123 = ptrtoint %struct.dcomplex** %x.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %123, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.764, i32 0, i32 0))
  %124 = load %struct.dcomplex*, %struct.dcomplex** %x.addr, align 8, !dbg !1606
  %125 = mul nsw i64 %idxprom32, %17, !dbg !1606
  %arrayidx33 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %124, i64 %125, !dbg !1606
  %arrayidx34 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx33, i64 %idxprom30, !dbg !1606
  %126 = bitcast %struct.dcomplex* %x21 to i8*, !dbg !1606
  %127 = bitcast %struct.dcomplex* %arrayidx34 to i8*, !dbg !1606
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %126, i8* %127, i64 16, i32 8, i1 false), !dbg !1606
  %128 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %128, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.765, i32 0, i32 0))
  %129 = load i32, i32* %j, align 4, !dbg !1610
  %idxprom35 = sext i32 %129 to i64, !dbg !1611
  %130 = ptrtoint i32* %i21 to i64
  call void @__DiscoPoPOpenMPRead(i64 %130, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.766, i32 0, i32 0))
  %131 = load i32, i32* %i21, align 4, !dbg !1612
  %132 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %132, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.767, i32 0, i32 0))
  %133 = load i32, i32* %k, align 4, !dbg !1613
  %add36 = add nsw i32 %131, %133, !dbg !1614
  %idxprom37 = sext i32 %add36 to i64, !dbg !1611
  %134 = ptrtoint %struct.dcomplex** %y.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %134, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.768, i32 0, i32 0))
  %135 = load %struct.dcomplex*, %struct.dcomplex** %y.addr, align 8, !dbg !1611
  %136 = mul nsw i64 %idxprom37, %23, !dbg !1611
  %arrayidx38 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %135, i64 %136, !dbg !1611
  %arrayidx39 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx38, i64 %idxprom35, !dbg !1611
  %real41 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral40, i32 0, i32 0, !dbg !1615
  %real42 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %x11, i32 0, i32 0, !dbg !1615
  %137 = ptrtoint double* %real42 to i64
  call void @__DiscoPoPOpenMPRead(i64 %137, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.769, i32 0, i32 0))
  %138 = load double, double* %real42, align 8, !dbg !1615
  %real43 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %x21, i32 0, i32 0, !dbg !1615
  %139 = ptrtoint double* %real43 to i64
  call void @__DiscoPoPOpenMPRead(i64 %139, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.770, i32 0, i32 0))
  %140 = load double, double* %real43, align 8, !dbg !1615
  %add44 = fadd double %138, %140, !dbg !1615
  %141 = ptrtoint double* %real41 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %141, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.771, i32 0, i32 0))
  store double %add44, double* %real41, align 8, !dbg !1615
  %imag45 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral40, i32 0, i32 1, !dbg !1615
  %imag46 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %x11, i32 0, i32 1, !dbg !1615
  %142 = ptrtoint double* %imag46 to i64
  call void @__DiscoPoPOpenMPRead(i64 %142, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.772, i32 0, i32 0))
  %143 = load double, double* %imag46, align 8, !dbg !1615
  %imag47 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %x21, i32 0, i32 1, !dbg !1615
  %144 = ptrtoint double* %imag47 to i64
  call void @__DiscoPoPOpenMPRead(i64 %144, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.773, i32 0, i32 0))
  %145 = load double, double* %imag47, align 8, !dbg !1615
  %add48 = fadd double %143, %145, !dbg !1615
  %146 = ptrtoint double* %imag45 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %146, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.774, i32 0, i32 0))
  store double %add48, double* %imag45, align 8, !dbg !1615
  %147 = bitcast %struct.dcomplex* %arrayidx39 to i8*, !dbg !1615
  %148 = bitcast %struct.dcomplex* %.compoundliteral40 to i8*, !dbg !1615
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %147, i8* %148, i64 16, i32 8, i1 false), !dbg !1615
  %149 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %149, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.775, i32 0, i32 0))
  %150 = load i32, i32* %j, align 4, !dbg !1616
  %idxprom49 = sext i32 %150 to i64, !dbg !1617
  %151 = ptrtoint i32* %i22 to i64
  call void @__DiscoPoPOpenMPRead(i64 %151, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.776, i32 0, i32 0))
  %152 = load i32, i32* %i22, align 4, !dbg !1618
  %153 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %153, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.777, i32 0, i32 0))
  %154 = load i32, i32* %k, align 4, !dbg !1619
  %add50 = add nsw i32 %152, %154, !dbg !1620
  %idxprom51 = sext i32 %add50 to i64, !dbg !1617
  %155 = ptrtoint %struct.dcomplex** %y.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %155, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.778, i32 0, i32 0))
  %156 = load %struct.dcomplex*, %struct.dcomplex** %y.addr, align 8, !dbg !1617
  %157 = mul nsw i64 %idxprom51, %23, !dbg !1617
  %arrayidx52 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %156, i64 %157, !dbg !1617
  %arrayidx53 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx52, i64 %idxprom49, !dbg !1617
  %real55 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral54, i32 0, i32 0, !dbg !1621
  %real56 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %u1, i32 0, i32 0, !dbg !1621
  %158 = ptrtoint double* %real56 to i64
  call void @__DiscoPoPOpenMPRead(i64 %158, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.779, i32 0, i32 0))
  %159 = load double, double* %real56, align 8, !dbg !1621
  %real58 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral57, i32 0, i32 0, !dbg !1621
  %real59 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %x11, i32 0, i32 0, !dbg !1621
  %160 = ptrtoint double* %real59 to i64
  call void @__DiscoPoPOpenMPRead(i64 %160, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.780, i32 0, i32 0))
  %161 = load double, double* %real59, align 8, !dbg !1621
  %real60 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %x21, i32 0, i32 0, !dbg !1621
  %162 = ptrtoint double* %real60 to i64
  call void @__DiscoPoPOpenMPRead(i64 %162, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.781, i32 0, i32 0))
  %163 = load double, double* %real60, align 8, !dbg !1621
  %sub61 = fsub double %161, %163, !dbg !1621
  %164 = ptrtoint double* %real58 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %164, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.782, i32 0, i32 0))
  store double %sub61, double* %real58, align 8, !dbg !1621
  %imag62 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral57, i32 0, i32 1, !dbg !1621
  %imag63 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %x11, i32 0, i32 1, !dbg !1621
  %165 = ptrtoint double* %imag63 to i64
  call void @__DiscoPoPOpenMPRead(i64 %165, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.783, i32 0, i32 0))
  %166 = load double, double* %imag63, align 8, !dbg !1621
  %imag64 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %x21, i32 0, i32 1, !dbg !1621
  %167 = ptrtoint double* %imag64 to i64
  call void @__DiscoPoPOpenMPRead(i64 %167, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.784, i32 0, i32 0))
  %168 = load double, double* %imag64, align 8, !dbg !1621
  %sub65 = fsub double %166, %168, !dbg !1621
  %169 = ptrtoint double* %imag62 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %169, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.785, i32 0, i32 0))
  store double %sub65, double* %imag62, align 8, !dbg !1621
  %real66 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral57, i32 0, i32 0, !dbg !1621
  %170 = ptrtoint double* %real66 to i64
  call void @__DiscoPoPOpenMPRead(i64 %170, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.786, i32 0, i32 0))
  %171 = load double, double* %real66, align 8, !dbg !1621
  %mul67 = fmul double %159, %171, !dbg !1621
  %imag68 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %u1, i32 0, i32 1, !dbg !1621
  %172 = ptrtoint double* %imag68 to i64
  call void @__DiscoPoPOpenMPRead(i64 %172, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.787, i32 0, i32 0))
  %173 = load double, double* %imag68, align 8, !dbg !1621
  %real70 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral69, i32 0, i32 0, !dbg !1621
  %real71 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %x11, i32 0, i32 0, !dbg !1621
  %174 = ptrtoint double* %real71 to i64
  call void @__DiscoPoPOpenMPRead(i64 %174, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.788, i32 0, i32 0))
  %175 = load double, double* %real71, align 8, !dbg !1621
  %real72 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %x21, i32 0, i32 0, !dbg !1621
  %176 = ptrtoint double* %real72 to i64
  call void @__DiscoPoPOpenMPRead(i64 %176, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.789, i32 0, i32 0))
  %177 = load double, double* %real72, align 8, !dbg !1621
  %sub73 = fsub double %175, %177, !dbg !1621
  %178 = ptrtoint double* %real70 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %178, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.790, i32 0, i32 0))
  store double %sub73, double* %real70, align 8, !dbg !1621
  %imag74 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral69, i32 0, i32 1, !dbg !1621
  %imag75 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %x11, i32 0, i32 1, !dbg !1621
  %179 = ptrtoint double* %imag75 to i64
  call void @__DiscoPoPOpenMPRead(i64 %179, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.791, i32 0, i32 0))
  %180 = load double, double* %imag75, align 8, !dbg !1621
  %imag76 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %x21, i32 0, i32 1, !dbg !1621
  %181 = ptrtoint double* %imag76 to i64
  call void @__DiscoPoPOpenMPRead(i64 %181, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.792, i32 0, i32 0))
  %182 = load double, double* %imag76, align 8, !dbg !1621
  %sub77 = fsub double %180, %182, !dbg !1621
  %183 = ptrtoint double* %imag74 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %183, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.793, i32 0, i32 0))
  store double %sub77, double* %imag74, align 8, !dbg !1621
  %imag78 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral69, i32 0, i32 1, !dbg !1621
  %184 = ptrtoint double* %imag78 to i64
  call void @__DiscoPoPOpenMPRead(i64 %184, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.794, i32 0, i32 0))
  %185 = load double, double* %imag78, align 8, !dbg !1621
  %mul79 = fmul double %173, %185, !dbg !1621
  %sub80 = fsub double %mul67, %mul79, !dbg !1621
  %186 = ptrtoint double* %real55 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %186, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.795, i32 0, i32 0))
  store double %sub80, double* %real55, align 8, !dbg !1621
  %imag81 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral54, i32 0, i32 1, !dbg !1621
  %real82 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %u1, i32 0, i32 0, !dbg !1621
  %187 = ptrtoint double* %real82 to i64
  call void @__DiscoPoPOpenMPRead(i64 %187, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.796, i32 0, i32 0))
  %188 = load double, double* %real82, align 8, !dbg !1621
  %real84 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral83, i32 0, i32 0, !dbg !1621
  %real85 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %x11, i32 0, i32 0, !dbg !1621
  %189 = ptrtoint double* %real85 to i64
  call void @__DiscoPoPOpenMPRead(i64 %189, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.797, i32 0, i32 0))
  %190 = load double, double* %real85, align 8, !dbg !1621
  %real86 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %x21, i32 0, i32 0, !dbg !1621
  %191 = ptrtoint double* %real86 to i64
  call void @__DiscoPoPOpenMPRead(i64 %191, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.798, i32 0, i32 0))
  %192 = load double, double* %real86, align 8, !dbg !1621
  %sub87 = fsub double %190, %192, !dbg !1621
  %193 = ptrtoint double* %real84 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %193, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.799, i32 0, i32 0))
  store double %sub87, double* %real84, align 8, !dbg !1621
  %imag88 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral83, i32 0, i32 1, !dbg !1621
  %imag89 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %x11, i32 0, i32 1, !dbg !1621
  %194 = ptrtoint double* %imag89 to i64
  call void @__DiscoPoPOpenMPRead(i64 %194, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.800, i32 0, i32 0))
  %195 = load double, double* %imag89, align 8, !dbg !1621
  %imag90 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %x21, i32 0, i32 1, !dbg !1621
  %196 = ptrtoint double* %imag90 to i64
  call void @__DiscoPoPOpenMPRead(i64 %196, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.801, i32 0, i32 0))
  %197 = load double, double* %imag90, align 8, !dbg !1621
  %sub91 = fsub double %195, %197, !dbg !1621
  %198 = ptrtoint double* %imag88 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %198, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.802, i32 0, i32 0))
  store double %sub91, double* %imag88, align 8, !dbg !1621
  %imag92 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral83, i32 0, i32 1, !dbg !1621
  %199 = ptrtoint double* %imag92 to i64
  call void @__DiscoPoPOpenMPRead(i64 %199, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.803, i32 0, i32 0))
  %200 = load double, double* %imag92, align 8, !dbg !1621
  %mul93 = fmul double %188, %200, !dbg !1621
  %imag94 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %u1, i32 0, i32 1, !dbg !1621
  %201 = ptrtoint double* %imag94 to i64
  call void @__DiscoPoPOpenMPRead(i64 %201, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.804, i32 0, i32 0))
  %202 = load double, double* %imag94, align 8, !dbg !1621
  %real96 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral95, i32 0, i32 0, !dbg !1621
  %real97 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %x11, i32 0, i32 0, !dbg !1621
  %203 = ptrtoint double* %real97 to i64
  call void @__DiscoPoPOpenMPRead(i64 %203, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.805, i32 0, i32 0))
  %204 = load double, double* %real97, align 8, !dbg !1621
  %real98 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %x21, i32 0, i32 0, !dbg !1621
  %205 = ptrtoint double* %real98 to i64
  call void @__DiscoPoPOpenMPRead(i64 %205, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.806, i32 0, i32 0))
  %206 = load double, double* %real98, align 8, !dbg !1621
  %sub99 = fsub double %204, %206, !dbg !1621
  %207 = ptrtoint double* %real96 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %207, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.807, i32 0, i32 0))
  store double %sub99, double* %real96, align 8, !dbg !1621
  %imag100 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral95, i32 0, i32 1, !dbg !1621
  %imag101 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %x11, i32 0, i32 1, !dbg !1621
  %208 = ptrtoint double* %imag101 to i64
  call void @__DiscoPoPOpenMPRead(i64 %208, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.808, i32 0, i32 0))
  %209 = load double, double* %imag101, align 8, !dbg !1621
  %imag102 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %x21, i32 0, i32 1, !dbg !1621
  %210 = ptrtoint double* %imag102 to i64
  call void @__DiscoPoPOpenMPRead(i64 %210, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.809, i32 0, i32 0))
  %211 = load double, double* %imag102, align 8, !dbg !1621
  %sub103 = fsub double %209, %211, !dbg !1621
  %212 = ptrtoint double* %imag100 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %212, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.810, i32 0, i32 0))
  store double %sub103, double* %imag100, align 8, !dbg !1621
  %real104 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral95, i32 0, i32 0, !dbg !1621
  %213 = ptrtoint double* %real104 to i64
  call void @__DiscoPoPOpenMPRead(i64 %213, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.811, i32 0, i32 0))
  %214 = load double, double* %real104, align 8, !dbg !1621
  %mul105 = fmul double %202, %214, !dbg !1621
  %add106 = fadd double %mul93, %mul105, !dbg !1621
  %215 = ptrtoint double* %imag81 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %215, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.812, i32 0, i32 0))
  store double %add106, double* %imag81, align 8, !dbg !1621
  %216 = bitcast %struct.dcomplex* %arrayidx53 to i8*, !dbg !1621
  %217 = bitcast %struct.dcomplex* %.compoundliteral54 to i8*, !dbg !1621
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %216, i8* %217, i64 16, i32 8, i1 false), !dbg !1621
  br label %for.inc, !dbg !1622

for.inc:                                          ; preds = %for.body24
  %218 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %218, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.813, i32 0, i32 0))
  %219 = load i32, i32* %j, align 4, !dbg !1623
  %inc = add nsw i32 %219, 1, !dbg !1623
  %220 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %220, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.814, i32 0, i32 0))
  store i32 %inc, i32* %j, align 4, !dbg !1623
  br label %for.cond22, !dbg !1625

for.end:                                          ; preds = %for.cond22
  br label %for.inc107, !dbg !1626

for.inc107:                                       ; preds = %for.end
  %221 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %221, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.815, i32 0, i32 0))
  %222 = load i32, i32* %k, align 4, !dbg !1627
  %inc108 = add nsw i32 %222, 1, !dbg !1627
  %223 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPWrite(i64 %223, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.816, i32 0, i32 0))
  store i32 %inc108, i32* %k, align 4, !dbg !1627
  br label %for.cond18, !dbg !1629

for.end109:                                       ; preds = %for.cond18
  br label %for.inc110, !dbg !1630

for.inc110:                                       ; preds = %for.end109
  %224 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %224, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.817, i32 0, i32 0))
  %225 = load i32, i32* %i, align 4, !dbg !1631
  %inc111 = add nsw i32 %225, 1, !dbg !1631
  %226 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %226, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.818, i32 0, i32 0))
  store i32 %inc111, i32* %i, align 4, !dbg !1631
  br label %for.cond, !dbg !1633

for.end112:                                       ; preds = %for.cond
  ret void, !dbg !1634
}

; Function Attrs: nounwind uwtable
define internal void @cffts2(i32 %is, i32 %d1, i32 %d2, i32 %d3, i8* %ox, i8* %oxout) #0 !dbg !1635 {
entry:
  %is.addr = alloca i32, align 4
  %d1.addr = alloca i32, align 4
  %d2.addr = alloca i32, align 4
  %d3.addr = alloca i32, align 4
  %ox.addr = alloca i8*, align 8
  %oxout.addr = alloca i8*, align 8
  %x = alloca %struct.dcomplex*, align 8
  %xout = alloca %struct.dcomplex*, align 8
  %logd2 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %ii = alloca i32, align 4
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  %2 = ptrtoint i32* %is.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.819, i32 0, i32 0))
  store i32 %is, i32* %is.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %is.addr, metadata !1636, metadata !98), !dbg !1637
  %3 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.820, i32 0, i32 0))
  store i32 %d1, i32* %d1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %d1.addr, metadata !1638, metadata !98), !dbg !1639
  %4 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.821, i32 0, i32 0))
  store i32 %d2, i32* %d2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %d2.addr, metadata !1640, metadata !98), !dbg !1641
  %5 = ptrtoint i32* %d3.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.822, i32 0, i32 0))
  store i32 %d3, i32* %d3.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %d3.addr, metadata !1642, metadata !98), !dbg !1643
  %6 = ptrtoint i8** %ox.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.823, i32 0, i32 0))
  store i8* %ox, i8** %ox.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ox.addr, metadata !1644, metadata !98), !dbg !1645
  %7 = ptrtoint i8** %oxout.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %7, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.824, i32 0, i32 0))
  store i8* %oxout, i8** %oxout.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %oxout.addr, metadata !1646, metadata !98), !dbg !1647
  %8 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %8, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.825, i32 0, i32 0))
  %9 = load i32, i32* %d2.addr, align 4, !dbg !1648
  %10 = zext i32 %9 to i64, !dbg !1649
  %11 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %11, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.826, i32 0, i32 0))
  %12 = load i32, i32* %d1.addr, align 4, !dbg !1650
  %add = add nsw i32 %12, 1, !dbg !1651
  %13 = zext i32 %add to i64, !dbg !1649
  call void @llvm.dbg.declare(metadata %struct.dcomplex** %x, metadata !1652, metadata !98), !dbg !1653
  %14 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %14, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.827, i32 0, i32 0))
  %15 = load i32, i32* %d2.addr, align 4, !dbg !1654
  %16 = zext i32 %15 to i64, !dbg !1655
  %17 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %17, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.828, i32 0, i32 0))
  %18 = load i32, i32* %d1.addr, align 4, !dbg !1656
  %add1 = add nsw i32 %18, 1, !dbg !1657
  %19 = zext i32 %add1 to i64, !dbg !1655
  %20 = ptrtoint i8** %ox.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %20, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.829, i32 0, i32 0))
  %21 = load i8*, i8** %ox.addr, align 8, !dbg !1658
  %22 = bitcast i8* %21 to %struct.dcomplex*, !dbg !1655
  %23 = ptrtoint %struct.dcomplex** %x to i64
  call void @__DiscoPoPOpenMPWrite(i64 %23, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.830, i32 0, i32 0))
  store %struct.dcomplex* %22, %struct.dcomplex** %x, align 8, !dbg !1653
  %24 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %24, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.831, i32 0, i32 0))
  %25 = load i32, i32* %d2.addr, align 4, !dbg !1659
  %26 = zext i32 %25 to i64, !dbg !1660
  %27 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %27, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.832, i32 0, i32 0))
  %28 = load i32, i32* %d1.addr, align 4, !dbg !1661
  %add2 = add nsw i32 %28, 1, !dbg !1662
  %29 = zext i32 %add2 to i64, !dbg !1660
  call void @llvm.dbg.declare(metadata %struct.dcomplex** %xout, metadata !1663, metadata !98), !dbg !1664
  %30 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %30, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.833, i32 0, i32 0))
  %31 = load i32, i32* %d2.addr, align 4, !dbg !1665
  %32 = zext i32 %31 to i64, !dbg !1666
  %33 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %33, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.834, i32 0, i32 0))
  %34 = load i32, i32* %d1.addr, align 4, !dbg !1667
  %add3 = add nsw i32 %34, 1, !dbg !1668
  %35 = zext i32 %add3 to i64, !dbg !1666
  %36 = ptrtoint i8** %oxout.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %36, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.835, i32 0, i32 0))
  %37 = load i8*, i8** %oxout.addr, align 8, !dbg !1669
  %38 = bitcast i8* %37 to %struct.dcomplex*, !dbg !1666
  %39 = ptrtoint %struct.dcomplex** %xout to i64
  call void @__DiscoPoPOpenMPWrite(i64 %39, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.836, i32 0, i32 0))
  store %struct.dcomplex* %38, %struct.dcomplex** %xout, align 8, !dbg !1664
  call void @llvm.dbg.declare(metadata i32* %logd2, metadata !1670, metadata !98), !dbg !1671
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1672, metadata !98), !dbg !1673
  call void @llvm.dbg.declare(metadata i32* %j, metadata !1674, metadata !98), !dbg !1675
  call void @llvm.dbg.declare(metadata i32* %k, metadata !1676, metadata !98), !dbg !1677
  call void @llvm.dbg.declare(metadata i32* %ii, metadata !1678, metadata !98), !dbg !1679
  %40 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %40, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.837, i32 0, i32 0))
  %41 = load i32, i32* %d2.addr, align 4, !dbg !1680
  %call = call i32 @ilog2(i32 %41), !dbg !1681
  %42 = ptrtoint i32* %logd2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %42, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.838, i32 0, i32 0))
  store i32 %call, i32* %logd2, align 4, !dbg !1682
  %43 = ptrtoint i32* @timers_enabled to i64
  call void @__DiscoPoPOpenMPRead(i64 %43, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.839, i32 0, i32 0))
  %44 = load i32, i32* @timers_enabled, align 4, !dbg !1683
  %tobool = icmp ne i32 %44, 0, !dbg !1683
  br i1 %tobool, label %if.then, label %if.end, !dbg !1685

if.then:                                          ; preds = %entry
  call void @timer_start(i32 7), !dbg !1686
  br label %if.end, !dbg !1686

if.end:                                           ; preds = %if.then, %entry
  %45 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !1688
  %46 = ptrtoint i8** %45 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %46, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.840, i32 0, i32 0))
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @5, i32 0, i32 0), i8** %45, align 8, !dbg !1688
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([121 x i8], [121 x i8]* @.str.842, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* %.kmpc_loc.addr, i32 11, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, i32*, i32*, i64, i64, %struct.dcomplex**, i32*, i32*, i64, i64, %struct.dcomplex**)* @.omp_outlined..29 to void (i32*, i32*, ...)*), i32* %d3.addr, i32* %d1.addr, i32* %d2.addr, i64 %10, i64 %13, %struct.dcomplex** %x, i32* %is.addr, i32* %logd2, i64 %26, i64 %29, %struct.dcomplex** %xout), !dbg !1688
  %47 = ptrtoint i32* @timers_enabled to i64
  call void @__DiscoPoPOpenMPRead(i64 %47, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.843, i32 0, i32 0))
  %48 = load i32, i32* @timers_enabled, align 4, !dbg !1689
  %tobool4 = icmp ne i32 %48, 0, !dbg !1689
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !1691

if.then5:                                         ; preds = %if.end
  call void @timer_stop(i32 7), !dbg !1692
  br label %if.end6, !dbg !1692

if.end6:                                          ; preds = %if.then5, %if.end
  ret void, !dbg !1694
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..29(i32* noalias %.global_tid., i32* noalias %.bound_tid., i32* dereferenceable(4) %d3, i32* dereferenceable(4) %d1, i32* dereferenceable(4) %d2, i64 %vla, i64 %vla1, %struct.dcomplex** dereferenceable(8) %x, i32* dereferenceable(4) %is, i32* dereferenceable(4) %logd2, i64 %vla3, i64 %vla5, %struct.dcomplex** dereferenceable(8) %xout) #0 !dbg !1695 {
entry:
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([132 x i8], [132 x i8]* @.str.845, i32 0, i32 0))
  %.global_tid..addr = alloca i32*, align 8
  %.bound_tid..addr = alloca i32*, align 8
  %d3.addr = alloca i32*, align 8
  %d1.addr = alloca i32*, align 8
  %d2.addr = alloca i32*, align 8
  %vla.addr = alloca i64, align 8
  %vla.addr2 = alloca i64, align 8
  %x.addr = alloca %struct.dcomplex**, align 8
  %is.addr = alloca i32*, align 8
  %logd2.addr = alloca i32*, align 8
  %vla.addr4 = alloca i64, align 8
  %vla.addr6 = alloca i64, align 8
  %xout.addr = alloca %struct.dcomplex**, align 8
  %.omp.iv = alloca i32, align 4
  %.omp.last.iteration = alloca i32, align 4
  %k = alloca i32, align 4
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k9 = alloca i32, align 4
  %ii = alloca i32, align 4
  %k10 = alloca i32, align 4
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  %2 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.846, i32 0, i32 0))
  store i32* %.global_tid., i32** %.global_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.global_tid..addr, metadata !1696, metadata !98), !dbg !1697
  %3 = ptrtoint i32** %.bound_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.847, i32 0, i32 0))
  store i32* %.bound_tid., i32** %.bound_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.bound_tid..addr, metadata !1698, metadata !98), !dbg !1697
  %4 = ptrtoint i32** %d3.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.848, i32 0, i32 0))
  store i32* %d3, i32** %d3.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %d3.addr, metadata !1699, metadata !98), !dbg !1697
  %5 = ptrtoint i32** %d1.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.849, i32 0, i32 0))
  store i32* %d1, i32** %d1.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %d1.addr, metadata !1700, metadata !98), !dbg !1697
  %6 = ptrtoint i32** %d2.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.850, i32 0, i32 0))
  store i32* %d2, i32** %d2.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %d2.addr, metadata !1701, metadata !98), !dbg !1697
  %7 = ptrtoint i64* %vla.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %7, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.851, i32 0, i32 0))
  store i64 %vla, i64* %vla.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %vla.addr, metadata !1702, metadata !98), !dbg !1697
  %8 = ptrtoint i64* %vla.addr2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %8, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.852, i32 0, i32 0))
  store i64 %vla1, i64* %vla.addr2, align 8
  call void @llvm.dbg.declare(metadata i64* %vla.addr2, metadata !1703, metadata !98), !dbg !1697
  %9 = ptrtoint %struct.dcomplex*** %x.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %9, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.853, i32 0, i32 0))
  store %struct.dcomplex** %x, %struct.dcomplex*** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dcomplex*** %x.addr, metadata !1704, metadata !98), !dbg !1697
  %10 = ptrtoint i32** %is.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %10, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.854, i32 0, i32 0))
  store i32* %is, i32** %is.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %is.addr, metadata !1705, metadata !98), !dbg !1697
  %11 = ptrtoint i32** %logd2.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %11, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.855, i32 0, i32 0))
  store i32* %logd2, i32** %logd2.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %logd2.addr, metadata !1706, metadata !98), !dbg !1697
  %12 = ptrtoint i64* %vla.addr4 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %12, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.856, i32 0, i32 0))
  store i64 %vla3, i64* %vla.addr4, align 8
  call void @llvm.dbg.declare(metadata i64* %vla.addr4, metadata !1707, metadata !98), !dbg !1697
  %13 = ptrtoint i64* %vla.addr6 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %13, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.857, i32 0, i32 0))
  store i64 %vla5, i64* %vla.addr6, align 8
  call void @llvm.dbg.declare(metadata i64* %vla.addr6, metadata !1708, metadata !98), !dbg !1697
  %14 = ptrtoint %struct.dcomplex*** %xout.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %14, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.858, i32 0, i32 0))
  store %struct.dcomplex** %xout, %struct.dcomplex*** %xout.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dcomplex*** %xout.addr, metadata !1709, metadata !98), !dbg !1697
  %15 = ptrtoint i32** %d3.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %15, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.859, i32 0, i32 0))
  %16 = load i32*, i32** %d3.addr, align 8, !dbg !1710
  %17 = ptrtoint i32** %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %17, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.860, i32 0, i32 0))
  %18 = load i32*, i32** %d1.addr, align 8, !dbg !1710
  %19 = ptrtoint i32** %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %19, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.861, i32 0, i32 0))
  %20 = load i32*, i32** %d2.addr, align 8, !dbg !1710
  %21 = ptrtoint i64* %vla.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %21, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.862, i32 0, i32 0))
  %22 = load i64, i64* %vla.addr, align 8, !dbg !1710
  %23 = ptrtoint i64* %vla.addr2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %23, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.863, i32 0, i32 0))
  %24 = load i64, i64* %vla.addr2, align 8, !dbg !1710
  %25 = ptrtoint %struct.dcomplex*** %x.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %25, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.864, i32 0, i32 0))
  %26 = load %struct.dcomplex**, %struct.dcomplex*** %x.addr, align 8, !dbg !1710
  %27 = ptrtoint i32** %is.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %27, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.865, i32 0, i32 0))
  %28 = load i32*, i32** %is.addr, align 8, !dbg !1710
  %29 = ptrtoint i32** %logd2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %29, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.866, i32 0, i32 0))
  %30 = load i32*, i32** %logd2.addr, align 8, !dbg !1710
  %31 = ptrtoint i64* %vla.addr4 to i64
  call void @__DiscoPoPOpenMPRead(i64 %31, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.867, i32 0, i32 0))
  %32 = load i64, i64* %vla.addr4, align 8, !dbg !1710
  %33 = ptrtoint i64* %vla.addr6 to i64
  call void @__DiscoPoPOpenMPRead(i64 %33, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.868, i32 0, i32 0))
  %34 = load i64, i64* %vla.addr6, align 8, !dbg !1710
  %35 = ptrtoint %struct.dcomplex*** %xout.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %35, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.869, i32 0, i32 0))
  %36 = load %struct.dcomplex**, %struct.dcomplex*** %xout.addr, align 8, !dbg !1710
  call void @llvm.dbg.declare(metadata i32* %.omp.iv, metadata !1711, metadata !98), !dbg !1697
  call void @llvm.dbg.declare(metadata i32* %.omp.last.iteration, metadata !1712, metadata !98), !dbg !1697
  %37 = ptrtoint i32* %16 to i64
  call void @__DiscoPoPOpenMPRead(i64 %37, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.870, i32 0, i32 0))
  %38 = load i32, i32* %16, align 4, !dbg !1713
  %sub = sub nsw i32 %38, 0, !dbg !1710
  %sub7 = sub nsw i32 %sub, 1, !dbg !1710
  %add = add nsw i32 %sub7, 1, !dbg !1710
  %div = sdiv i32 %add, 1, !dbg !1710
  %sub8 = sub nsw i32 %div, 1, !dbg !1697
  %39 = ptrtoint i32* %.omp.last.iteration to i64
  call void @__DiscoPoPOpenMPWrite(i64 %39, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.871, i32 0, i32 0))
  store i32 %sub8, i32* %.omp.last.iteration, align 4, !dbg !1697
  call void @llvm.dbg.declare(metadata i32* %k, metadata !1714, metadata !98), !dbg !1697
  %40 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPWrite(i64 %40, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.872, i32 0, i32 0))
  store i32 0, i32* %k, align 4, !dbg !1715
  %41 = ptrtoint i32* %16 to i64
  call void @__DiscoPoPOpenMPRead(i64 %41, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.873, i32 0, i32 0))
  %42 = load i32, i32* %16, align 4, !dbg !1713
  %cmp = icmp slt i32 0, %42, !dbg !1710
  br i1 %cmp, label %omp.precond.then, label %omp.precond.end, !dbg !1710

omp.precond.then:                                 ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %.omp.lb, metadata !1716, metadata !98), !dbg !1697
  %43 = ptrtoint i32* %.omp.lb to i64
  call void @__DiscoPoPOpenMPWrite(i64 %43, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.874, i32 0, i32 0))
  store i32 0, i32* %.omp.lb, align 4, !dbg !1717
  call void @llvm.dbg.declare(metadata i32* %.omp.ub, metadata !1719, metadata !98), !dbg !1697
  %44 = ptrtoint i32* %.omp.last.iteration to i64
  call void @__DiscoPoPOpenMPRead(i64 %44, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.875, i32 0, i32 0))
  %45 = load i32, i32* %.omp.last.iteration, align 4, !dbg !1720
  %46 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPWrite(i64 %46, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.876, i32 0, i32 0))
  store i32 %45, i32* %.omp.ub, align 4, !dbg !1717
  call void @llvm.dbg.declare(metadata i32* %.omp.stride, metadata !1722, metadata !98), !dbg !1697
  %47 = ptrtoint i32* %.omp.stride to i64
  call void @__DiscoPoPOpenMPWrite(i64 %47, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.877, i32 0, i32 0))
  store i32 1, i32* %.omp.stride, align 4, !dbg !1717
  call void @llvm.dbg.declare(metadata i32* %.omp.is_last, metadata !1723, metadata !98), !dbg !1697
  %48 = ptrtoint i32* %.omp.is_last to i64
  call void @__DiscoPoPOpenMPWrite(i64 %48, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.878, i32 0, i32 0))
  store i32 0, i32* %.omp.is_last, align 4, !dbg !1717
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1724, metadata !98), !dbg !1697
  call void @llvm.dbg.declare(metadata i32* %j, metadata !1725, metadata !98), !dbg !1697
  call void @llvm.dbg.declare(metadata i32* %k9, metadata !1714, metadata !98), !dbg !1697
  call void @llvm.dbg.declare(metadata i32* %ii, metadata !1726, metadata !98), !dbg !1697
  call void @llvm.dbg.declare(metadata i32* %k10, metadata !1714, metadata !98), !dbg !1697
  %49 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !1727
  %50 = ptrtoint i8** %49 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %50, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.879, i32 0, i32 0))
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @5, i32 0, i32 0), i8** %49, align 8, !dbg !1727
  %51 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %51, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.880, i32 0, i32 0))
  %52 = load i32*, i32** %.global_tid..addr, align 8, !dbg !1727
  %53 = ptrtoint i32* %52 to i64
  call void @__DiscoPoPOpenMPRead(i64 %53, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.881, i32 0, i32 0))
  %54 = load i32, i32* %52, align 4, !dbg !1727
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([132 x i8], [132 x i8]* @.str.883, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_for_static_init_4(%ident_t* %.kmpc_loc.addr, i32 %54, i32 34, i32* %.omp.is_last, i32* %.omp.lb, i32* %.omp.ub, i32* %.omp.stride, i32 1, i32 1), !dbg !1727
  %55 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %55, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.884, i32 0, i32 0))
  %56 = load i32, i32* %.omp.ub, align 4, !dbg !1717
  %57 = ptrtoint i32* %.omp.last.iteration to i64
  call void @__DiscoPoPOpenMPRead(i64 %57, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.885, i32 0, i32 0))
  %58 = load i32, i32* %.omp.last.iteration, align 4, !dbg !1720
  %cmp11 = icmp sgt i32 %56, %58, !dbg !1717
  br i1 %cmp11, label %cond.true, label %cond.false, !dbg !1717

cond.true:                                        ; preds = %omp.precond.then
  %59 = ptrtoint i32* %.omp.last.iteration to i64
  call void @__DiscoPoPOpenMPRead(i64 %59, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.886, i32 0, i32 0))
  %60 = load i32, i32* %.omp.last.iteration, align 4, !dbg !1728
  br label %cond.end, !dbg !1730

cond.false:                                       ; preds = %omp.precond.then
  %61 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %61, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.887, i32 0, i32 0))
  %62 = load i32, i32* %.omp.ub, align 4, !dbg !1732
  br label %cond.end, !dbg !1732

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %60, %cond.true ], [ %62, %cond.false ], !dbg !1734
  %63 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPWrite(i64 %63, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.888, i32 0, i32 0))
  store i32 %cond, i32* %.omp.ub, align 4, !dbg !1734
  %64 = ptrtoint i32* %.omp.lb to i64
  call void @__DiscoPoPOpenMPRead(i64 %64, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.889, i32 0, i32 0))
  %65 = load i32, i32* %.omp.lb, align 4, !dbg !1734
  %66 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPWrite(i64 %66, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.890, i32 0, i32 0))
  store i32 %65, i32* %.omp.iv, align 4, !dbg !1734
  br label %omp.inner.for.cond, !dbg !1736

omp.inner.for.cond:                               ; preds = %omp.inner.for.inc, %cond.end
  %67 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %67, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.891, i32 0, i32 0))
  %68 = load i32, i32* %.omp.iv, align 4, !dbg !1737
  %69 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %69, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.892, i32 0, i32 0))
  %70 = load i32, i32* %.omp.ub, align 4, !dbg !1737
  %cmp12 = icmp sle i32 %68, %70, !dbg !1739
  br i1 %cmp12, label %omp.inner.for.body, label %omp.inner.for.end, !dbg !1741

omp.inner.for.body:                               ; preds = %omp.inner.for.cond
  %71 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %71, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.893, i32 0, i32 0))
  %72 = load i32, i32* %.omp.iv, align 4, !dbg !1742
  %mul = mul nsw i32 %72, 1, !dbg !1744
  %add13 = add nsw i32 0, %mul, !dbg !1744
  %73 = ptrtoint i32* %k9 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %73, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.894, i32 0, i32 0))
  store i32 %add13, i32* %k9, align 4, !dbg !1744
  %74 = ptrtoint i32* %ii to i64
  call void @__DiscoPoPOpenMPWrite(i64 %74, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.895, i32 0, i32 0))
  store i32 0, i32* %ii, align 4, !dbg !1745
  br label %for.cond, !dbg !1748

for.cond:                                         ; preds = %for.inc58, %omp.inner.for.body
  %75 = ptrtoint i32* %ii to i64
  call void @__DiscoPoPOpenMPRead(i64 %75, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.896, i32 0, i32 0))
  %76 = load i32, i32* %ii, align 4, !dbg !1749
  %77 = ptrtoint i32* %18 to i64
  call void @__DiscoPoPOpenMPRead(i64 %77, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.897, i32 0, i32 0))
  %78 = load i32, i32* %18, align 4, !dbg !1752
  %79 = ptrtoint i32* @fftblock to i64
  call void @__DiscoPoPOpenMPRead(i64 %79, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.898, i32 0, i32 0))
  %80 = load i32, i32* @fftblock, align 4, !dbg !1753
  %sub14 = sub nsw i32 %78, %80, !dbg !1754
  %cmp15 = icmp sle i32 %76, %sub14, !dbg !1755
  br i1 %cmp15, label %for.body, label %for.end60, !dbg !1756

for.body:                                         ; preds = %for.cond
  %81 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %81, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.899, i32 0, i32 0))
  store i32 0, i32* %j, align 4, !dbg !1757
  br label %for.cond16, !dbg !1760

for.cond16:                                       ; preds = %for.inc31, %for.body
  %82 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %82, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.900, i32 0, i32 0))
  %83 = load i32, i32* %j, align 4, !dbg !1761
  %84 = ptrtoint i32* %20 to i64
  call void @__DiscoPoPOpenMPRead(i64 %84, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.901, i32 0, i32 0))
  %85 = load i32, i32* %20, align 4, !dbg !1764
  %cmp17 = icmp slt i32 %83, %85, !dbg !1765
  br i1 %cmp17, label %for.body18, label %for.end33, !dbg !1766

for.body18:                                       ; preds = %for.cond16
  %86 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %86, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.902, i32 0, i32 0))
  store i32 0, i32* %i, align 4, !dbg !1767
  br label %for.cond19, !dbg !1770

for.cond19:                                       ; preds = %for.inc, %for.body18
  %87 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %87, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.903, i32 0, i32 0))
  %88 = load i32, i32* %i, align 4, !dbg !1771
  %89 = ptrtoint i32* @fftblock to i64
  call void @__DiscoPoPOpenMPRead(i64 %89, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.904, i32 0, i32 0))
  %90 = load i32, i32* @fftblock, align 4, !dbg !1774
  %cmp20 = icmp slt i32 %88, %90, !dbg !1775
  br i1 %cmp20, label %for.body21, label %for.end, !dbg !1776

for.body21:                                       ; preds = %for.cond19
  %91 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %91, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.905, i32 0, i32 0))
  %92 = load i32, i32* %i, align 4, !dbg !1777
  %idxprom = sext i32 %92 to i64, !dbg !1779
  %93 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %93, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.906, i32 0, i32 0))
  %94 = load i32, i32* %j, align 4, !dbg !1780
  %idxprom22 = sext i32 %94 to i64, !dbg !1779
  %95 = call [64 x [33 x %struct.dcomplex]]* @_ZTWL3ty1(), !dbg !1779
  %arrayidx = getelementptr inbounds [64 x [33 x %struct.dcomplex]], [64 x [33 x %struct.dcomplex]]* %95, i64 0, i64 %idxprom22, !dbg !1779
  %arrayidx23 = getelementptr inbounds [33 x %struct.dcomplex], [33 x %struct.dcomplex]* %arrayidx, i64 0, i64 %idxprom, !dbg !1779
  %96 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %96, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.907, i32 0, i32 0))
  %97 = load i32, i32* %i, align 4, !dbg !1781
  %98 = ptrtoint i32* %ii to i64
  call void @__DiscoPoPOpenMPRead(i64 %98, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.908, i32 0, i32 0))
  %99 = load i32, i32* %ii, align 4, !dbg !1782
  %add24 = add nsw i32 %97, %99, !dbg !1783
  %idxprom25 = sext i32 %add24 to i64, !dbg !1784
  %100 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %100, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.909, i32 0, i32 0))
  %101 = load i32, i32* %j, align 4, !dbg !1785
  %idxprom26 = sext i32 %101 to i64, !dbg !1784
  %102 = ptrtoint i32* %k9 to i64
  call void @__DiscoPoPOpenMPRead(i64 %102, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.910, i32 0, i32 0))
  %103 = load i32, i32* %k9, align 4, !dbg !1786
  %idxprom27 = sext i32 %103 to i64, !dbg !1784
  %104 = ptrtoint %struct.dcomplex** %26 to i64
  call void @__DiscoPoPOpenMPRead(i64 %104, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.911, i32 0, i32 0))
  %105 = load %struct.dcomplex*, %struct.dcomplex** %26, align 8, !dbg !1784
  %106 = mul nuw i64 %22, %24, !dbg !1784
  %107 = mul nsw i64 %idxprom27, %106, !dbg !1784
  %arrayidx28 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %105, i64 %107, !dbg !1784
  %108 = mul nsw i64 %idxprom26, %24, !dbg !1784
  %arrayidx29 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx28, i64 %108, !dbg !1784
  %arrayidx30 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx29, i64 %idxprom25, !dbg !1784
  %109 = bitcast %struct.dcomplex* %arrayidx23 to i8*, !dbg !1784
  %110 = bitcast %struct.dcomplex* %arrayidx30 to i8*, !dbg !1784
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %109, i8* %110, i64 16, i32 8, i1 false), !dbg !1787
  br label %for.inc, !dbg !1789

for.inc:                                          ; preds = %for.body21
  %111 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %111, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.912, i32 0, i32 0))
  %112 = load i32, i32* %i, align 4, !dbg !1790
  %inc = add nsw i32 %112, 1, !dbg !1790
  %113 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %113, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.913, i32 0, i32 0))
  store i32 %inc, i32* %i, align 4, !dbg !1790
  br label %for.cond19, !dbg !1792

for.end:                                          ; preds = %for.cond19
  br label %for.inc31, !dbg !1793

for.inc31:                                        ; preds = %for.end
  %114 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %114, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.914, i32 0, i32 0))
  %115 = load i32, i32* %j, align 4, !dbg !1794
  %inc32 = add nsw i32 %115, 1, !dbg !1794
  %116 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %116, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.915, i32 0, i32 0))
  store i32 %inc32, i32* %j, align 4, !dbg !1794
  br label %for.cond16, !dbg !1796

for.end33:                                        ; preds = %for.cond16
  %117 = ptrtoint i32* %28 to i64
  call void @__DiscoPoPOpenMPRead(i64 %117, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.916, i32 0, i32 0))
  %118 = load i32, i32* %28, align 4, !dbg !1797
  %119 = ptrtoint i32* %30 to i64
  call void @__DiscoPoPOpenMPRead(i64 %119, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.917, i32 0, i32 0))
  %120 = load i32, i32* %30, align 4, !dbg !1798
  %121 = ptrtoint i32* %20 to i64
  call void @__DiscoPoPOpenMPRead(i64 %121, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.918, i32 0, i32 0))
  %122 = load i32, i32* %20, align 4, !dbg !1799
  %123 = call [64 x [33 x %struct.dcomplex]]* @_ZTWL3ty1(), !dbg !1800
  %arraydecay = getelementptr inbounds [64 x [33 x %struct.dcomplex]], [64 x [33 x %struct.dcomplex]]* %123, i32 0, i32 0, !dbg !1800
  %124 = bitcast [33 x %struct.dcomplex]* %arraydecay to %struct.dcomplex*, !dbg !1800
  %125 = call [64 x [33 x %struct.dcomplex]]* @_ZTWL3ty2(), !dbg !1801
  %arraydecay34 = getelementptr inbounds [64 x [33 x %struct.dcomplex]], [64 x [33 x %struct.dcomplex]]* %125, i32 0, i32 0, !dbg !1803
  %126 = bitcast [33 x %struct.dcomplex]* %arraydecay34 to %struct.dcomplex*, !dbg !1803
  call void @cfftz(i32 %118, i32 %120, i32 %122, %struct.dcomplex* %124, %struct.dcomplex* %126), !dbg !1804
  %127 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %127, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.919, i32 0, i32 0))
  store i32 0, i32* %j, align 4, !dbg !1806
  br label %for.cond35, !dbg !1808

for.cond35:                                       ; preds = %for.inc55, %for.end33
  %128 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %128, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.920, i32 0, i32 0))
  %129 = load i32, i32* %j, align 4, !dbg !1809
  %130 = ptrtoint i32* %20 to i64
  call void @__DiscoPoPOpenMPRead(i64 %130, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.921, i32 0, i32 0))
  %131 = load i32, i32* %20, align 4, !dbg !1812
  %cmp36 = icmp slt i32 %129, %131, !dbg !1813
  br i1 %cmp36, label %for.body37, label %for.end57, !dbg !1814

for.body37:                                       ; preds = %for.cond35
  %132 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %132, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.922, i32 0, i32 0))
  store i32 0, i32* %i, align 4, !dbg !1815
  br label %for.cond38, !dbg !1818

for.cond38:                                       ; preds = %for.inc52, %for.body37
  %133 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %133, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.923, i32 0, i32 0))
  %134 = load i32, i32* %i, align 4, !dbg !1819
  %135 = ptrtoint i32* @fftblock to i64
  call void @__DiscoPoPOpenMPRead(i64 %135, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.924, i32 0, i32 0))
  %136 = load i32, i32* @fftblock, align 4, !dbg !1822
  %cmp39 = icmp slt i32 %134, %136, !dbg !1823
  br i1 %cmp39, label %for.body40, label %for.end54, !dbg !1824

for.body40:                                       ; preds = %for.cond38
  %137 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %137, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.925, i32 0, i32 0))
  %138 = load i32, i32* %i, align 4, !dbg !1825
  %139 = ptrtoint i32* %ii to i64
  call void @__DiscoPoPOpenMPRead(i64 %139, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.926, i32 0, i32 0))
  %140 = load i32, i32* %ii, align 4, !dbg !1827
  %add41 = add nsw i32 %138, %140, !dbg !1828
  %idxprom42 = sext i32 %add41 to i64, !dbg !1829
  %141 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %141, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.927, i32 0, i32 0))
  %142 = load i32, i32* %j, align 4, !dbg !1830
  %idxprom43 = sext i32 %142 to i64, !dbg !1829
  %143 = ptrtoint i32* %k9 to i64
  call void @__DiscoPoPOpenMPRead(i64 %143, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.928, i32 0, i32 0))
  %144 = load i32, i32* %k9, align 4, !dbg !1831
  %idxprom44 = sext i32 %144 to i64, !dbg !1829
  %145 = ptrtoint %struct.dcomplex** %36 to i64
  call void @__DiscoPoPOpenMPRead(i64 %145, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.929, i32 0, i32 0))
  %146 = load %struct.dcomplex*, %struct.dcomplex** %36, align 8, !dbg !1829
  %147 = mul nuw i64 %32, %34, !dbg !1829
  %148 = mul nsw i64 %idxprom44, %147, !dbg !1829
  %arrayidx45 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %146, i64 %148, !dbg !1829
  %149 = mul nsw i64 %idxprom43, %34, !dbg !1829
  %arrayidx46 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx45, i64 %149, !dbg !1829
  %arrayidx47 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx46, i64 %idxprom42, !dbg !1829
  %150 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %150, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.930, i32 0, i32 0))
  %151 = load i32, i32* %i, align 4, !dbg !1832
  %idxprom48 = sext i32 %151 to i64, !dbg !1833
  %152 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %152, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.931, i32 0, i32 0))
  %153 = load i32, i32* %j, align 4, !dbg !1834
  %idxprom49 = sext i32 %153 to i64, !dbg !1833
  %154 = call [64 x [33 x %struct.dcomplex]]* @_ZTWL3ty1(), !dbg !1833
  %arrayidx50 = getelementptr inbounds [64 x [33 x %struct.dcomplex]], [64 x [33 x %struct.dcomplex]]* %154, i64 0, i64 %idxprom49, !dbg !1833
  %arrayidx51 = getelementptr inbounds [33 x %struct.dcomplex], [33 x %struct.dcomplex]* %arrayidx50, i64 0, i64 %idxprom48, !dbg !1833
  %155 = bitcast %struct.dcomplex* %arrayidx47 to i8*, !dbg !1833
  %156 = bitcast %struct.dcomplex* %arrayidx51 to i8*, !dbg !1833
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %155, i8* %156, i64 16, i32 8, i1 false), !dbg !1835
  br label %for.inc52, !dbg !1837

for.inc52:                                        ; preds = %for.body40
  %157 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %157, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.932, i32 0, i32 0))
  %158 = load i32, i32* %i, align 4, !dbg !1838
  %inc53 = add nsw i32 %158, 1, !dbg !1838
  %159 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %159, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.933, i32 0, i32 0))
  store i32 %inc53, i32* %i, align 4, !dbg !1838
  br label %for.cond38, !dbg !1840

for.end54:                                        ; preds = %for.cond38
  br label %for.inc55, !dbg !1841

for.inc55:                                        ; preds = %for.end54
  %160 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %160, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.934, i32 0, i32 0))
  %161 = load i32, i32* %j, align 4, !dbg !1842
  %inc56 = add nsw i32 %161, 1, !dbg !1842
  %162 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %162, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.935, i32 0, i32 0))
  store i32 %inc56, i32* %j, align 4, !dbg !1842
  br label %for.cond35, !dbg !1844

for.end57:                                        ; preds = %for.cond35
  br label %for.inc58, !dbg !1845

for.inc58:                                        ; preds = %for.end57
  %163 = ptrtoint i32* @fftblock to i64
  call void @__DiscoPoPOpenMPRead(i64 %163, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.936, i32 0, i32 0))
  %164 = load i32, i32* @fftblock, align 4, !dbg !1846
  %165 = ptrtoint i32* %ii to i64
  call void @__DiscoPoPOpenMPRead(i64 %165, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.937, i32 0, i32 0))
  %166 = load i32, i32* %ii, align 4, !dbg !1848
  %add59 = add nsw i32 %166, %164, !dbg !1848
  %167 = ptrtoint i32* %ii to i64
  call void @__DiscoPoPOpenMPWrite(i64 %167, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.938, i32 0, i32 0))
  store i32 %add59, i32* %ii, align 4, !dbg !1848
  br label %for.cond, !dbg !1849

for.end60:                                        ; preds = %for.cond
  br label %omp.body.continue, !dbg !1850

omp.body.continue:                                ; preds = %for.end60
  br label %omp.inner.for.inc, !dbg !1851

omp.inner.for.inc:                                ; preds = %omp.body.continue
  %168 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %168, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.939, i32 0, i32 0))
  %169 = load i32, i32* %.omp.iv, align 4, !dbg !1852
  %add61 = add nsw i32 %169, 1, !dbg !1854
  %170 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPWrite(i64 %170, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.940, i32 0, i32 0))
  store i32 %add61, i32* %.omp.iv, align 4, !dbg !1854
  br label %omp.inner.for.cond, !dbg !1856

omp.inner.for.end:                                ; preds = %omp.inner.for.cond
  br label %omp.loop.exit, !dbg !1857

omp.loop.exit:                                    ; preds = %omp.inner.for.end
  %171 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !1858
  %172 = ptrtoint i8** %171 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %172, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.941, i32 0, i32 0))
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @5, i32 0, i32 0), i8** %171, align 8, !dbg !1858
  %173 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %173, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.942, i32 0, i32 0))
  %174 = load i32*, i32** %.global_tid..addr, align 8, !dbg !1858
  %175 = ptrtoint i32* %174 to i64
  call void @__DiscoPoPOpenMPRead(i64 %175, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.943, i32 0, i32 0))
  %176 = load i32, i32* %174, align 4, !dbg !1858
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([132 x i8], [132 x i8]* @.str.945, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_for_static_fini(%ident_t* %.kmpc_loc.addr, i32 %176), !dbg !1858
  br label %omp.precond.end, !dbg !1858

omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
  call void @__DiscoPoPOpenMPAfterCall()
  ret void, !dbg !1859
}

; Function Attrs: nounwind uwtable
define internal void @cffts3(i32 %is, i32 %d1, i32 %d2, i32 %d3, i8* %ox, i8* %oxout) #0 !dbg !1860 {
entry:
  %is.addr = alloca i32, align 4
  %d1.addr = alloca i32, align 4
  %d2.addr = alloca i32, align 4
  %d3.addr = alloca i32, align 4
  %ox.addr = alloca i8*, align 8
  %oxout.addr = alloca i8*, align 8
  %x = alloca %struct.dcomplex*, align 8
  %xout = alloca %struct.dcomplex*, align 8
  %logd3 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %ii = alloca i32, align 4
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  %2 = ptrtoint i32* %is.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.946, i32 0, i32 0))
  store i32 %is, i32* %is.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %is.addr, metadata !1861, metadata !98), !dbg !1862
  %3 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.947, i32 0, i32 0))
  store i32 %d1, i32* %d1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %d1.addr, metadata !1863, metadata !98), !dbg !1864
  %4 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.948, i32 0, i32 0))
  store i32 %d2, i32* %d2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %d2.addr, metadata !1865, metadata !98), !dbg !1866
  %5 = ptrtoint i32* %d3.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.949, i32 0, i32 0))
  store i32 %d3, i32* %d3.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %d3.addr, metadata !1867, metadata !98), !dbg !1868
  %6 = ptrtoint i8** %ox.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.950, i32 0, i32 0))
  store i8* %ox, i8** %ox.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ox.addr, metadata !1869, metadata !98), !dbg !1870
  %7 = ptrtoint i8** %oxout.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %7, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.951, i32 0, i32 0))
  store i8* %oxout, i8** %oxout.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %oxout.addr, metadata !1871, metadata !98), !dbg !1872
  %8 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %8, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.952, i32 0, i32 0))
  %9 = load i32, i32* %d2.addr, align 4, !dbg !1873
  %10 = zext i32 %9 to i64, !dbg !1874
  %11 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %11, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.953, i32 0, i32 0))
  %12 = load i32, i32* %d1.addr, align 4, !dbg !1875
  %add = add nsw i32 %12, 1, !dbg !1876
  %13 = zext i32 %add to i64, !dbg !1874
  call void @llvm.dbg.declare(metadata %struct.dcomplex** %x, metadata !1877, metadata !98), !dbg !1878
  %14 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %14, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.954, i32 0, i32 0))
  %15 = load i32, i32* %d2.addr, align 4, !dbg !1879
  %16 = zext i32 %15 to i64, !dbg !1880
  %17 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %17, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.955, i32 0, i32 0))
  %18 = load i32, i32* %d1.addr, align 4, !dbg !1881
  %add1 = add nsw i32 %18, 1, !dbg !1882
  %19 = zext i32 %add1 to i64, !dbg !1880
  %20 = ptrtoint i8** %ox.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %20, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.956, i32 0, i32 0))
  %21 = load i8*, i8** %ox.addr, align 8, !dbg !1883
  %22 = bitcast i8* %21 to %struct.dcomplex*, !dbg !1880
  %23 = ptrtoint %struct.dcomplex** %x to i64
  call void @__DiscoPoPOpenMPWrite(i64 %23, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.957, i32 0, i32 0))
  store %struct.dcomplex* %22, %struct.dcomplex** %x, align 8, !dbg !1878
  %24 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %24, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.958, i32 0, i32 0))
  %25 = load i32, i32* %d2.addr, align 4, !dbg !1884
  %26 = zext i32 %25 to i64, !dbg !1885
  %27 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %27, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.959, i32 0, i32 0))
  %28 = load i32, i32* %d1.addr, align 4, !dbg !1886
  %add2 = add nsw i32 %28, 1, !dbg !1887
  %29 = zext i32 %add2 to i64, !dbg !1885
  call void @llvm.dbg.declare(metadata %struct.dcomplex** %xout, metadata !1888, metadata !98), !dbg !1889
  %30 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %30, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.960, i32 0, i32 0))
  %31 = load i32, i32* %d2.addr, align 4, !dbg !1890
  %32 = zext i32 %31 to i64, !dbg !1891
  %33 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %33, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.961, i32 0, i32 0))
  %34 = load i32, i32* %d1.addr, align 4, !dbg !1892
  %add3 = add nsw i32 %34, 1, !dbg !1893
  %35 = zext i32 %add3 to i64, !dbg !1891
  %36 = ptrtoint i8** %oxout.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %36, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.962, i32 0, i32 0))
  %37 = load i8*, i8** %oxout.addr, align 8, !dbg !1894
  %38 = bitcast i8* %37 to %struct.dcomplex*, !dbg !1891
  %39 = ptrtoint %struct.dcomplex** %xout to i64
  call void @__DiscoPoPOpenMPWrite(i64 %39, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.963, i32 0, i32 0))
  store %struct.dcomplex* %38, %struct.dcomplex** %xout, align 8, !dbg !1889
  call void @llvm.dbg.declare(metadata i32* %logd3, metadata !1895, metadata !98), !dbg !1896
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1897, metadata !98), !dbg !1898
  call void @llvm.dbg.declare(metadata i32* %j, metadata !1899, metadata !98), !dbg !1900
  call void @llvm.dbg.declare(metadata i32* %k, metadata !1901, metadata !98), !dbg !1902
  call void @llvm.dbg.declare(metadata i32* %ii, metadata !1903, metadata !98), !dbg !1904
  %40 = ptrtoint i32* %d3.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %40, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.964, i32 0, i32 0))
  %41 = load i32, i32* %d3.addr, align 4, !dbg !1905
  %call = call i32 @ilog2(i32 %41), !dbg !1906
  %42 = ptrtoint i32* %logd3 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %42, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.965, i32 0, i32 0))
  store i32 %call, i32* %logd3, align 4, !dbg !1907
  %43 = ptrtoint i32* @timers_enabled to i64
  call void @__DiscoPoPOpenMPRead(i64 %43, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.966, i32 0, i32 0))
  %44 = load i32, i32* @timers_enabled, align 4, !dbg !1908
  %tobool = icmp ne i32 %44, 0, !dbg !1908
  br i1 %tobool, label %if.then, label %if.end, !dbg !1910

if.then:                                          ; preds = %entry
  call void @timer_start(i32 8), !dbg !1911
  br label %if.end, !dbg !1911

if.end:                                           ; preds = %if.then, %entry
  %45 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !1913
  %46 = ptrtoint i8** %45 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %46, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.967, i32 0, i32 0))
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @6, i32 0, i32 0), i8** %45, align 8, !dbg !1913
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([121 x i8], [121 x i8]* @.str.969, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* %.kmpc_loc.addr, i32 11, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, i32*, i32*, i64, i64, %struct.dcomplex**, i32*, i32*, i64, i64, %struct.dcomplex**)* @.omp_outlined..30 to void (i32*, i32*, ...)*), i32* %d2.addr, i32* %d1.addr, i32* %d3.addr, i64 %10, i64 %13, %struct.dcomplex** %x, i32* %is.addr, i32* %logd3, i64 %26, i64 %29, %struct.dcomplex** %xout), !dbg !1913
  %47 = ptrtoint i32* @timers_enabled to i64
  call void @__DiscoPoPOpenMPRead(i64 %47, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.970, i32 0, i32 0))
  %48 = load i32, i32* @timers_enabled, align 4, !dbg !1914
  %tobool4 = icmp ne i32 %48, 0, !dbg !1914
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !1916

if.then5:                                         ; preds = %if.end
  call void @timer_stop(i32 8), !dbg !1917
  br label %if.end6, !dbg !1917

if.end6:                                          ; preds = %if.then5, %if.end
  ret void, !dbg !1919
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..30(i32* noalias %.global_tid., i32* noalias %.bound_tid., i32* dereferenceable(4) %d2, i32* dereferenceable(4) %d1, i32* dereferenceable(4) %d3, i64 %vla, i64 %vla1, %struct.dcomplex** dereferenceable(8) %x, i32* dereferenceable(4) %is, i32* dereferenceable(4) %logd3, i64 %vla3, i64 %vla5, %struct.dcomplex** dereferenceable(8) %xout) #0 !dbg !1920 {
entry:
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([132 x i8], [132 x i8]* @.str.972, i32 0, i32 0))
  %.global_tid..addr = alloca i32*, align 8
  %.bound_tid..addr = alloca i32*, align 8
  %d2.addr = alloca i32*, align 8
  %d1.addr = alloca i32*, align 8
  %d3.addr = alloca i32*, align 8
  %vla.addr = alloca i64, align 8
  %vla.addr2 = alloca i64, align 8
  %x.addr = alloca %struct.dcomplex**, align 8
  %is.addr = alloca i32*, align 8
  %logd3.addr = alloca i32*, align 8
  %vla.addr4 = alloca i64, align 8
  %vla.addr6 = alloca i64, align 8
  %xout.addr = alloca %struct.dcomplex**, align 8
  %.omp.iv = alloca i32, align 4
  %.omp.last.iteration = alloca i32, align 4
  %j = alloca i32, align 4
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %i = alloca i32, align 4
  %j9 = alloca i32, align 4
  %k = alloca i32, align 4
  %ii = alloca i32, align 4
  %j10 = alloca i32, align 4
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  %2 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.973, i32 0, i32 0))
  store i32* %.global_tid., i32** %.global_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.global_tid..addr, metadata !1921, metadata !98), !dbg !1922
  %3 = ptrtoint i32** %.bound_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.974, i32 0, i32 0))
  store i32* %.bound_tid., i32** %.bound_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.bound_tid..addr, metadata !1923, metadata !98), !dbg !1922
  %4 = ptrtoint i32** %d2.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.975, i32 0, i32 0))
  store i32* %d2, i32** %d2.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %d2.addr, metadata !1924, metadata !98), !dbg !1922
  %5 = ptrtoint i32** %d1.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.976, i32 0, i32 0))
  store i32* %d1, i32** %d1.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %d1.addr, metadata !1925, metadata !98), !dbg !1922
  %6 = ptrtoint i32** %d3.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.977, i32 0, i32 0))
  store i32* %d3, i32** %d3.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %d3.addr, metadata !1926, metadata !98), !dbg !1922
  %7 = ptrtoint i64* %vla.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %7, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.978, i32 0, i32 0))
  store i64 %vla, i64* %vla.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %vla.addr, metadata !1927, metadata !98), !dbg !1922
  %8 = ptrtoint i64* %vla.addr2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %8, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.979, i32 0, i32 0))
  store i64 %vla1, i64* %vla.addr2, align 8
  call void @llvm.dbg.declare(metadata i64* %vla.addr2, metadata !1928, metadata !98), !dbg !1922
  %9 = ptrtoint %struct.dcomplex*** %x.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %9, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.980, i32 0, i32 0))
  store %struct.dcomplex** %x, %struct.dcomplex*** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dcomplex*** %x.addr, metadata !1929, metadata !98), !dbg !1922
  %10 = ptrtoint i32** %is.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %10, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.981, i32 0, i32 0))
  store i32* %is, i32** %is.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %is.addr, metadata !1930, metadata !98), !dbg !1922
  %11 = ptrtoint i32** %logd3.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %11, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.982, i32 0, i32 0))
  store i32* %logd3, i32** %logd3.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %logd3.addr, metadata !1931, metadata !98), !dbg !1922
  %12 = ptrtoint i64* %vla.addr4 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %12, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.983, i32 0, i32 0))
  store i64 %vla3, i64* %vla.addr4, align 8
  call void @llvm.dbg.declare(metadata i64* %vla.addr4, metadata !1932, metadata !98), !dbg !1922
  %13 = ptrtoint i64* %vla.addr6 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %13, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.984, i32 0, i32 0))
  store i64 %vla5, i64* %vla.addr6, align 8
  call void @llvm.dbg.declare(metadata i64* %vla.addr6, metadata !1933, metadata !98), !dbg !1922
  %14 = ptrtoint %struct.dcomplex*** %xout.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %14, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.985, i32 0, i32 0))
  store %struct.dcomplex** %xout, %struct.dcomplex*** %xout.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dcomplex*** %xout.addr, metadata !1934, metadata !98), !dbg !1922
  %15 = ptrtoint i32** %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %15, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.986, i32 0, i32 0))
  %16 = load i32*, i32** %d2.addr, align 8, !dbg !1935
  %17 = ptrtoint i32** %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %17, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.987, i32 0, i32 0))
  %18 = load i32*, i32** %d1.addr, align 8, !dbg !1935
  %19 = ptrtoint i32** %d3.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %19, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.988, i32 0, i32 0))
  %20 = load i32*, i32** %d3.addr, align 8, !dbg !1935
  %21 = ptrtoint i64* %vla.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %21, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.989, i32 0, i32 0))
  %22 = load i64, i64* %vla.addr, align 8, !dbg !1935
  %23 = ptrtoint i64* %vla.addr2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %23, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.990, i32 0, i32 0))
  %24 = load i64, i64* %vla.addr2, align 8, !dbg !1935
  %25 = ptrtoint %struct.dcomplex*** %x.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %25, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.991, i32 0, i32 0))
  %26 = load %struct.dcomplex**, %struct.dcomplex*** %x.addr, align 8, !dbg !1935
  %27 = ptrtoint i32** %is.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %27, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.992, i32 0, i32 0))
  %28 = load i32*, i32** %is.addr, align 8, !dbg !1935
  %29 = ptrtoint i32** %logd3.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %29, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.993, i32 0, i32 0))
  %30 = load i32*, i32** %logd3.addr, align 8, !dbg !1935
  %31 = ptrtoint i64* %vla.addr4 to i64
  call void @__DiscoPoPOpenMPRead(i64 %31, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.994, i32 0, i32 0))
  %32 = load i64, i64* %vla.addr4, align 8, !dbg !1935
  %33 = ptrtoint i64* %vla.addr6 to i64
  call void @__DiscoPoPOpenMPRead(i64 %33, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.995, i32 0, i32 0))
  %34 = load i64, i64* %vla.addr6, align 8, !dbg !1935
  %35 = ptrtoint %struct.dcomplex*** %xout.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %35, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.996, i32 0, i32 0))
  %36 = load %struct.dcomplex**, %struct.dcomplex*** %xout.addr, align 8, !dbg !1935
  call void @llvm.dbg.declare(metadata i32* %.omp.iv, metadata !1936, metadata !98), !dbg !1922
  call void @llvm.dbg.declare(metadata i32* %.omp.last.iteration, metadata !1937, metadata !98), !dbg !1922
  %37 = ptrtoint i32* %16 to i64
  call void @__DiscoPoPOpenMPRead(i64 %37, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.997, i32 0, i32 0))
  %38 = load i32, i32* %16, align 4, !dbg !1938
  %sub = sub nsw i32 %38, 0, !dbg !1935
  %sub7 = sub nsw i32 %sub, 1, !dbg !1935
  %add = add nsw i32 %sub7, 1, !dbg !1935
  %div = sdiv i32 %add, 1, !dbg !1935
  %sub8 = sub nsw i32 %div, 1, !dbg !1922
  %39 = ptrtoint i32* %.omp.last.iteration to i64
  call void @__DiscoPoPOpenMPWrite(i64 %39, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.998, i32 0, i32 0))
  store i32 %sub8, i32* %.omp.last.iteration, align 4, !dbg !1922
  call void @llvm.dbg.declare(metadata i32* %j, metadata !1939, metadata !98), !dbg !1922
  %40 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %40, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.999, i32 0, i32 0))
  store i32 0, i32* %j, align 4, !dbg !1940
  %41 = ptrtoint i32* %16 to i64
  call void @__DiscoPoPOpenMPRead(i64 %41, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1000, i32 0, i32 0))
  %42 = load i32, i32* %16, align 4, !dbg !1938
  %cmp = icmp slt i32 0, %42, !dbg !1935
  br i1 %cmp, label %omp.precond.then, label %omp.precond.end, !dbg !1935

omp.precond.then:                                 ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %.omp.lb, metadata !1941, metadata !98), !dbg !1922
  %43 = ptrtoint i32* %.omp.lb to i64
  call void @__DiscoPoPOpenMPWrite(i64 %43, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1001, i32 0, i32 0))
  store i32 0, i32* %.omp.lb, align 4, !dbg !1942
  call void @llvm.dbg.declare(metadata i32* %.omp.ub, metadata !1944, metadata !98), !dbg !1922
  %44 = ptrtoint i32* %.omp.last.iteration to i64
  call void @__DiscoPoPOpenMPRead(i64 %44, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1002, i32 0, i32 0))
  %45 = load i32, i32* %.omp.last.iteration, align 4, !dbg !1945
  %46 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPWrite(i64 %46, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1003, i32 0, i32 0))
  store i32 %45, i32* %.omp.ub, align 4, !dbg !1942
  call void @llvm.dbg.declare(metadata i32* %.omp.stride, metadata !1947, metadata !98), !dbg !1922
  %47 = ptrtoint i32* %.omp.stride to i64
  call void @__DiscoPoPOpenMPWrite(i64 %47, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1004, i32 0, i32 0))
  store i32 1, i32* %.omp.stride, align 4, !dbg !1942
  call void @llvm.dbg.declare(metadata i32* %.omp.is_last, metadata !1948, metadata !98), !dbg !1922
  %48 = ptrtoint i32* %.omp.is_last to i64
  call void @__DiscoPoPOpenMPWrite(i64 %48, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1005, i32 0, i32 0))
  store i32 0, i32* %.omp.is_last, align 4, !dbg !1942
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1949, metadata !98), !dbg !1922
  call void @llvm.dbg.declare(metadata i32* %j9, metadata !1939, metadata !98), !dbg !1922
  call void @llvm.dbg.declare(metadata i32* %k, metadata !1950, metadata !98), !dbg !1922
  call void @llvm.dbg.declare(metadata i32* %ii, metadata !1951, metadata !98), !dbg !1922
  call void @llvm.dbg.declare(metadata i32* %j10, metadata !1939, metadata !98), !dbg !1922
  %49 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !1952
  %50 = ptrtoint i8** %49 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %50, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1006, i32 0, i32 0))
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @6, i32 0, i32 0), i8** %49, align 8, !dbg !1952
  %51 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %51, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1007, i32 0, i32 0))
  %52 = load i32*, i32** %.global_tid..addr, align 8, !dbg !1952
  %53 = ptrtoint i32* %52 to i64
  call void @__DiscoPoPOpenMPRead(i64 %53, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1008, i32 0, i32 0))
  %54 = load i32, i32* %52, align 4, !dbg !1952
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([132 x i8], [132 x i8]* @.str.1010, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_for_static_init_4(%ident_t* %.kmpc_loc.addr, i32 %54, i32 34, i32* %.omp.is_last, i32* %.omp.lb, i32* %.omp.ub, i32* %.omp.stride, i32 1, i32 1), !dbg !1952
  %55 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %55, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1011, i32 0, i32 0))
  %56 = load i32, i32* %.omp.ub, align 4, !dbg !1942
  %57 = ptrtoint i32* %.omp.last.iteration to i64
  call void @__DiscoPoPOpenMPRead(i64 %57, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1012, i32 0, i32 0))
  %58 = load i32, i32* %.omp.last.iteration, align 4, !dbg !1945
  %cmp11 = icmp sgt i32 %56, %58, !dbg !1942
  br i1 %cmp11, label %cond.true, label %cond.false, !dbg !1942

cond.true:                                        ; preds = %omp.precond.then
  %59 = ptrtoint i32* %.omp.last.iteration to i64
  call void @__DiscoPoPOpenMPRead(i64 %59, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1013, i32 0, i32 0))
  %60 = load i32, i32* %.omp.last.iteration, align 4, !dbg !1953
  br label %cond.end, !dbg !1955

cond.false:                                       ; preds = %omp.precond.then
  %61 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %61, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1014, i32 0, i32 0))
  %62 = load i32, i32* %.omp.ub, align 4, !dbg !1957
  br label %cond.end, !dbg !1957

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %60, %cond.true ], [ %62, %cond.false ], !dbg !1959
  %63 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPWrite(i64 %63, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1015, i32 0, i32 0))
  store i32 %cond, i32* %.omp.ub, align 4, !dbg !1959
  %64 = ptrtoint i32* %.omp.lb to i64
  call void @__DiscoPoPOpenMPRead(i64 %64, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1016, i32 0, i32 0))
  %65 = load i32, i32* %.omp.lb, align 4, !dbg !1959
  %66 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPWrite(i64 %66, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1017, i32 0, i32 0))
  store i32 %65, i32* %.omp.iv, align 4, !dbg !1959
  br label %omp.inner.for.cond, !dbg !1961

omp.inner.for.cond:                               ; preds = %omp.inner.for.inc, %cond.end
  %67 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %67, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1018, i32 0, i32 0))
  %68 = load i32, i32* %.omp.iv, align 4, !dbg !1962
  %69 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %69, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1019, i32 0, i32 0))
  %70 = load i32, i32* %.omp.ub, align 4, !dbg !1962
  %cmp12 = icmp sle i32 %68, %70, !dbg !1964
  br i1 %cmp12, label %omp.inner.for.body, label %omp.inner.for.end, !dbg !1966

omp.inner.for.body:                               ; preds = %omp.inner.for.cond
  %71 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %71, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1020, i32 0, i32 0))
  %72 = load i32, i32* %.omp.iv, align 4, !dbg !1967
  %mul = mul nsw i32 %72, 1, !dbg !1969
  %add13 = add nsw i32 0, %mul, !dbg !1969
  %73 = ptrtoint i32* %j9 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %73, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1021, i32 0, i32 0))
  store i32 %add13, i32* %j9, align 4, !dbg !1969
  %74 = ptrtoint i32* %ii to i64
  call void @__DiscoPoPOpenMPWrite(i64 %74, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1022, i32 0, i32 0))
  store i32 0, i32* %ii, align 4, !dbg !1970
  br label %for.cond, !dbg !1973

for.cond:                                         ; preds = %for.inc58, %omp.inner.for.body
  %75 = ptrtoint i32* %ii to i64
  call void @__DiscoPoPOpenMPRead(i64 %75, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1023, i32 0, i32 0))
  %76 = load i32, i32* %ii, align 4, !dbg !1974
  %77 = ptrtoint i32* %18 to i64
  call void @__DiscoPoPOpenMPRead(i64 %77, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1024, i32 0, i32 0))
  %78 = load i32, i32* %18, align 4, !dbg !1977
  %79 = ptrtoint i32* @fftblock to i64
  call void @__DiscoPoPOpenMPRead(i64 %79, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1025, i32 0, i32 0))
  %80 = load i32, i32* @fftblock, align 4, !dbg !1978
  %sub14 = sub nsw i32 %78, %80, !dbg !1979
  %cmp15 = icmp sle i32 %76, %sub14, !dbg !1980
  br i1 %cmp15, label %for.body, label %for.end60, !dbg !1981

for.body:                                         ; preds = %for.cond
  %81 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPWrite(i64 %81, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1026, i32 0, i32 0))
  store i32 0, i32* %k, align 4, !dbg !1982
  br label %for.cond16, !dbg !1985

for.cond16:                                       ; preds = %for.inc31, %for.body
  %82 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %82, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1027, i32 0, i32 0))
  %83 = load i32, i32* %k, align 4, !dbg !1986
  %84 = ptrtoint i32* %20 to i64
  call void @__DiscoPoPOpenMPRead(i64 %84, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1028, i32 0, i32 0))
  %85 = load i32, i32* %20, align 4, !dbg !1989
  %cmp17 = icmp slt i32 %83, %85, !dbg !1990
  br i1 %cmp17, label %for.body18, label %for.end33, !dbg !1991

for.body18:                                       ; preds = %for.cond16
  %86 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %86, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1029, i32 0, i32 0))
  store i32 0, i32* %i, align 4, !dbg !1992
  br label %for.cond19, !dbg !1995

for.cond19:                                       ; preds = %for.inc, %for.body18
  %87 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %87, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1030, i32 0, i32 0))
  %88 = load i32, i32* %i, align 4, !dbg !1996
  %89 = ptrtoint i32* @fftblock to i64
  call void @__DiscoPoPOpenMPRead(i64 %89, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1031, i32 0, i32 0))
  %90 = load i32, i32* @fftblock, align 4, !dbg !1999
  %cmp20 = icmp slt i32 %88, %90, !dbg !2000
  br i1 %cmp20, label %for.body21, label %for.end, !dbg !2001

for.body21:                                       ; preds = %for.cond19
  %91 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %91, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1032, i32 0, i32 0))
  %92 = load i32, i32* %i, align 4, !dbg !2002
  %idxprom = sext i32 %92 to i64, !dbg !2004
  %93 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %93, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1033, i32 0, i32 0))
  %94 = load i32, i32* %k, align 4, !dbg !2005
  %idxprom22 = sext i32 %94 to i64, !dbg !2004
  %95 = call [64 x [33 x %struct.dcomplex]]* @_ZTWL3ty1(), !dbg !2004
  %arrayidx = getelementptr inbounds [64 x [33 x %struct.dcomplex]], [64 x [33 x %struct.dcomplex]]* %95, i64 0, i64 %idxprom22, !dbg !2004
  %arrayidx23 = getelementptr inbounds [33 x %struct.dcomplex], [33 x %struct.dcomplex]* %arrayidx, i64 0, i64 %idxprom, !dbg !2004
  %96 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %96, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1034, i32 0, i32 0))
  %97 = load i32, i32* %i, align 4, !dbg !2006
  %98 = ptrtoint i32* %ii to i64
  call void @__DiscoPoPOpenMPRead(i64 %98, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1035, i32 0, i32 0))
  %99 = load i32, i32* %ii, align 4, !dbg !2007
  %add24 = add nsw i32 %97, %99, !dbg !2008
  %idxprom25 = sext i32 %add24 to i64, !dbg !2009
  %100 = ptrtoint i32* %j9 to i64
  call void @__DiscoPoPOpenMPRead(i64 %100, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1036, i32 0, i32 0))
  %101 = load i32, i32* %j9, align 4, !dbg !2010
  %idxprom26 = sext i32 %101 to i64, !dbg !2009
  %102 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %102, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1037, i32 0, i32 0))
  %103 = load i32, i32* %k, align 4, !dbg !2011
  %idxprom27 = sext i32 %103 to i64, !dbg !2009
  %104 = ptrtoint %struct.dcomplex** %26 to i64
  call void @__DiscoPoPOpenMPRead(i64 %104, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1038, i32 0, i32 0))
  %105 = load %struct.dcomplex*, %struct.dcomplex** %26, align 8, !dbg !2009
  %106 = mul nuw i64 %22, %24, !dbg !2009
  %107 = mul nsw i64 %idxprom27, %106, !dbg !2009
  %arrayidx28 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %105, i64 %107, !dbg !2009
  %108 = mul nsw i64 %idxprom26, %24, !dbg !2009
  %arrayidx29 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx28, i64 %108, !dbg !2009
  %arrayidx30 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx29, i64 %idxprom25, !dbg !2009
  %109 = bitcast %struct.dcomplex* %arrayidx23 to i8*, !dbg !2009
  %110 = bitcast %struct.dcomplex* %arrayidx30 to i8*, !dbg !2009
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %109, i8* %110, i64 16, i32 8, i1 false), !dbg !2012
  br label %for.inc, !dbg !2014

for.inc:                                          ; preds = %for.body21
  %111 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %111, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1039, i32 0, i32 0))
  %112 = load i32, i32* %i, align 4, !dbg !2015
  %inc = add nsw i32 %112, 1, !dbg !2015
  %113 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %113, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1040, i32 0, i32 0))
  store i32 %inc, i32* %i, align 4, !dbg !2015
  br label %for.cond19, !dbg !2017

for.end:                                          ; preds = %for.cond19
  br label %for.inc31, !dbg !2018

for.inc31:                                        ; preds = %for.end
  %114 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %114, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1041, i32 0, i32 0))
  %115 = load i32, i32* %k, align 4, !dbg !2019
  %inc32 = add nsw i32 %115, 1, !dbg !2019
  %116 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPWrite(i64 %116, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1042, i32 0, i32 0))
  store i32 %inc32, i32* %k, align 4, !dbg !2019
  br label %for.cond16, !dbg !2021

for.end33:                                        ; preds = %for.cond16
  %117 = ptrtoint i32* %28 to i64
  call void @__DiscoPoPOpenMPRead(i64 %117, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1043, i32 0, i32 0))
  %118 = load i32, i32* %28, align 4, !dbg !2022
  %119 = ptrtoint i32* %30 to i64
  call void @__DiscoPoPOpenMPRead(i64 %119, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1044, i32 0, i32 0))
  %120 = load i32, i32* %30, align 4, !dbg !2023
  %121 = ptrtoint i32* %20 to i64
  call void @__DiscoPoPOpenMPRead(i64 %121, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1045, i32 0, i32 0))
  %122 = load i32, i32* %20, align 4, !dbg !2024
  %123 = call [64 x [33 x %struct.dcomplex]]* @_ZTWL3ty1(), !dbg !2025
  %arraydecay = getelementptr inbounds [64 x [33 x %struct.dcomplex]], [64 x [33 x %struct.dcomplex]]* %123, i32 0, i32 0, !dbg !2025
  %124 = bitcast [33 x %struct.dcomplex]* %arraydecay to %struct.dcomplex*, !dbg !2025
  %125 = call [64 x [33 x %struct.dcomplex]]* @_ZTWL3ty2(), !dbg !2026
  %arraydecay34 = getelementptr inbounds [64 x [33 x %struct.dcomplex]], [64 x [33 x %struct.dcomplex]]* %125, i32 0, i32 0, !dbg !2028
  %126 = bitcast [33 x %struct.dcomplex]* %arraydecay34 to %struct.dcomplex*, !dbg !2028
  call void @cfftz(i32 %118, i32 %120, i32 %122, %struct.dcomplex* %124, %struct.dcomplex* %126), !dbg !2029
  %127 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPWrite(i64 %127, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1046, i32 0, i32 0))
  store i32 0, i32* %k, align 4, !dbg !2031
  br label %for.cond35, !dbg !2033

for.cond35:                                       ; preds = %for.inc55, %for.end33
  %128 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %128, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1047, i32 0, i32 0))
  %129 = load i32, i32* %k, align 4, !dbg !2034
  %130 = ptrtoint i32* %20 to i64
  call void @__DiscoPoPOpenMPRead(i64 %130, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1048, i32 0, i32 0))
  %131 = load i32, i32* %20, align 4, !dbg !2037
  %cmp36 = icmp slt i32 %129, %131, !dbg !2038
  br i1 %cmp36, label %for.body37, label %for.end57, !dbg !2039

for.body37:                                       ; preds = %for.cond35
  %132 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %132, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1049, i32 0, i32 0))
  store i32 0, i32* %i, align 4, !dbg !2040
  br label %for.cond38, !dbg !2043

for.cond38:                                       ; preds = %for.inc52, %for.body37
  %133 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %133, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1050, i32 0, i32 0))
  %134 = load i32, i32* %i, align 4, !dbg !2044
  %135 = ptrtoint i32* @fftblock to i64
  call void @__DiscoPoPOpenMPRead(i64 %135, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1051, i32 0, i32 0))
  %136 = load i32, i32* @fftblock, align 4, !dbg !2047
  %cmp39 = icmp slt i32 %134, %136, !dbg !2048
  br i1 %cmp39, label %for.body40, label %for.end54, !dbg !2049

for.body40:                                       ; preds = %for.cond38
  %137 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %137, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1052, i32 0, i32 0))
  %138 = load i32, i32* %i, align 4, !dbg !2050
  %139 = ptrtoint i32* %ii to i64
  call void @__DiscoPoPOpenMPRead(i64 %139, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1053, i32 0, i32 0))
  %140 = load i32, i32* %ii, align 4, !dbg !2052
  %add41 = add nsw i32 %138, %140, !dbg !2053
  %idxprom42 = sext i32 %add41 to i64, !dbg !2054
  %141 = ptrtoint i32* %j9 to i64
  call void @__DiscoPoPOpenMPRead(i64 %141, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1054, i32 0, i32 0))
  %142 = load i32, i32* %j9, align 4, !dbg !2055
  %idxprom43 = sext i32 %142 to i64, !dbg !2054
  %143 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %143, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1055, i32 0, i32 0))
  %144 = load i32, i32* %k, align 4, !dbg !2056
  %idxprom44 = sext i32 %144 to i64, !dbg !2054
  %145 = ptrtoint %struct.dcomplex** %36 to i64
  call void @__DiscoPoPOpenMPRead(i64 %145, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1056, i32 0, i32 0))
  %146 = load %struct.dcomplex*, %struct.dcomplex** %36, align 8, !dbg !2054
  %147 = mul nuw i64 %32, %34, !dbg !2054
  %148 = mul nsw i64 %idxprom44, %147, !dbg !2054
  %arrayidx45 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %146, i64 %148, !dbg !2054
  %149 = mul nsw i64 %idxprom43, %34, !dbg !2054
  %arrayidx46 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx45, i64 %149, !dbg !2054
  %arrayidx47 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx46, i64 %idxprom42, !dbg !2054
  %150 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %150, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1057, i32 0, i32 0))
  %151 = load i32, i32* %i, align 4, !dbg !2057
  %idxprom48 = sext i32 %151 to i64, !dbg !2058
  %152 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %152, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1058, i32 0, i32 0))
  %153 = load i32, i32* %k, align 4, !dbg !2059
  %idxprom49 = sext i32 %153 to i64, !dbg !2058
  %154 = call [64 x [33 x %struct.dcomplex]]* @_ZTWL3ty1(), !dbg !2058
  %arrayidx50 = getelementptr inbounds [64 x [33 x %struct.dcomplex]], [64 x [33 x %struct.dcomplex]]* %154, i64 0, i64 %idxprom49, !dbg !2058
  %arrayidx51 = getelementptr inbounds [33 x %struct.dcomplex], [33 x %struct.dcomplex]* %arrayidx50, i64 0, i64 %idxprom48, !dbg !2058
  %155 = bitcast %struct.dcomplex* %arrayidx47 to i8*, !dbg !2058
  %156 = bitcast %struct.dcomplex* %arrayidx51 to i8*, !dbg !2058
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %155, i8* %156, i64 16, i32 8, i1 false), !dbg !2060
  br label %for.inc52, !dbg !2062

for.inc52:                                        ; preds = %for.body40
  %157 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %157, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1059, i32 0, i32 0))
  %158 = load i32, i32* %i, align 4, !dbg !2063
  %inc53 = add nsw i32 %158, 1, !dbg !2063
  %159 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %159, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1060, i32 0, i32 0))
  store i32 %inc53, i32* %i, align 4, !dbg !2063
  br label %for.cond38, !dbg !2065

for.end54:                                        ; preds = %for.cond38
  br label %for.inc55, !dbg !2066

for.inc55:                                        ; preds = %for.end54
  %160 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPRead(i64 %160, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1061, i32 0, i32 0))
  %161 = load i32, i32* %k, align 4, !dbg !2067
  %inc56 = add nsw i32 %161, 1, !dbg !2067
  %162 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPWrite(i64 %162, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1062, i32 0, i32 0))
  store i32 %inc56, i32* %k, align 4, !dbg !2067
  br label %for.cond35, !dbg !2069

for.end57:                                        ; preds = %for.cond35
  br label %for.inc58, !dbg !2070

for.inc58:                                        ; preds = %for.end57
  %163 = ptrtoint i32* @fftblock to i64
  call void @__DiscoPoPOpenMPRead(i64 %163, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1063, i32 0, i32 0))
  %164 = load i32, i32* @fftblock, align 4, !dbg !2071
  %165 = ptrtoint i32* %ii to i64
  call void @__DiscoPoPOpenMPRead(i64 %165, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1064, i32 0, i32 0))
  %166 = load i32, i32* %ii, align 4, !dbg !2073
  %add59 = add nsw i32 %166, %164, !dbg !2073
  %167 = ptrtoint i32* %ii to i64
  call void @__DiscoPoPOpenMPWrite(i64 %167, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1065, i32 0, i32 0))
  store i32 %add59, i32* %ii, align 4, !dbg !2073
  br label %for.cond, !dbg !2074

for.end60:                                        ; preds = %for.cond
  br label %omp.body.continue, !dbg !2075

omp.body.continue:                                ; preds = %for.end60
  br label %omp.inner.for.inc, !dbg !2076

omp.inner.for.inc:                                ; preds = %omp.body.continue
  %168 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %168, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1066, i32 0, i32 0))
  %169 = load i32, i32* %.omp.iv, align 4, !dbg !2077
  %add61 = add nsw i32 %169, 1, !dbg !2079
  %170 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPWrite(i64 %170, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1067, i32 0, i32 0))
  store i32 %add61, i32* %.omp.iv, align 4, !dbg !2079
  br label %omp.inner.for.cond, !dbg !2081

omp.inner.for.end:                                ; preds = %omp.inner.for.cond
  br label %omp.loop.exit, !dbg !2082

omp.loop.exit:                                    ; preds = %omp.inner.for.end
  %171 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !2083
  %172 = ptrtoint i8** %171 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %172, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1068, i32 0, i32 0))
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @6, i32 0, i32 0), i8** %171, align 8, !dbg !2083
  %173 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %173, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1069, i32 0, i32 0))
  %174 = load i32*, i32** %.global_tid..addr, align 8, !dbg !2083
  %175 = ptrtoint i32* %174 to i64
  call void @__DiscoPoPOpenMPRead(i64 %175, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1070, i32 0, i32 0))
  %176 = load i32, i32* %174, align 4, !dbg !2083
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([132 x i8], [132 x i8]* @.str.1072, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_for_static_fini(%ident_t* %.kmpc_loc.addr, i32 %176), !dbg !2083
  br label %omp.precond.end, !dbg !2083

omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
  call void @__DiscoPoPOpenMPAfterCall()
  ret void, !dbg !2084
}

; Function Attrs: nounwind uwtable
define internal void @evolve(i8* %ou0, i8* %ou1, i8* %ot, i32 %d1, i32 %d2, i32 %d3) #0 !dbg !2085 {
entry:
  %ou0.addr = alloca i8*, align 8
  %ou1.addr = alloca i8*, align 8
  %ot.addr = alloca i8*, align 8
  %d1.addr = alloca i32, align 4
  %d2.addr = alloca i32, align 4
  %d3.addr = alloca i32, align 4
  %u0 = alloca %struct.dcomplex*, align 8
  %u1 = alloca %struct.dcomplex*, align 8
  %twiddle = alloca double*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  %2 = ptrtoint i8** %ou0.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1073, i32 0, i32 0))
  store i8* %ou0, i8** %ou0.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ou0.addr, metadata !2086, metadata !98), !dbg !2087
  %3 = ptrtoint i8** %ou1.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1074, i32 0, i32 0))
  store i8* %ou1, i8** %ou1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ou1.addr, metadata !2088, metadata !98), !dbg !2089
  %4 = ptrtoint i8** %ot.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1075, i32 0, i32 0))
  store i8* %ot, i8** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ot.addr, metadata !2090, metadata !98), !dbg !2091
  %5 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1076, i32 0, i32 0))
  store i32 %d1, i32* %d1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %d1.addr, metadata !2092, metadata !98), !dbg !2093
  %6 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1077, i32 0, i32 0))
  store i32 %d2, i32* %d2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %d2.addr, metadata !2094, metadata !98), !dbg !2095
  %7 = ptrtoint i32* %d3.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %7, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1078, i32 0, i32 0))
  store i32 %d3, i32* %d3.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %d3.addr, metadata !2096, metadata !98), !dbg !2097
  %8 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %8, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1079, i32 0, i32 0))
  %9 = load i32, i32* %d2.addr, align 4, !dbg !2098
  %10 = zext i32 %9 to i64, !dbg !2099
  %11 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %11, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1080, i32 0, i32 0))
  %12 = load i32, i32* %d1.addr, align 4, !dbg !2100
  %add = add nsw i32 %12, 1, !dbg !2101
  %13 = zext i32 %add to i64, !dbg !2099
  call void @llvm.dbg.declare(metadata %struct.dcomplex** %u0, metadata !2102, metadata !98), !dbg !2103
  %14 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %14, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1081, i32 0, i32 0))
  %15 = load i32, i32* %d2.addr, align 4, !dbg !2104
  %16 = zext i32 %15 to i64, !dbg !2105
  %17 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %17, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1082, i32 0, i32 0))
  %18 = load i32, i32* %d1.addr, align 4, !dbg !2106
  %add1 = add nsw i32 %18, 1, !dbg !2107
  %19 = zext i32 %add1 to i64, !dbg !2105
  %20 = ptrtoint i8** %ou0.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %20, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1083, i32 0, i32 0))
  %21 = load i8*, i8** %ou0.addr, align 8, !dbg !2108
  %22 = bitcast i8* %21 to %struct.dcomplex*, !dbg !2105
  %23 = ptrtoint %struct.dcomplex** %u0 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %23, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1084, i32 0, i32 0))
  store %struct.dcomplex* %22, %struct.dcomplex** %u0, align 8, !dbg !2103
  %24 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %24, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1085, i32 0, i32 0))
  %25 = load i32, i32* %d2.addr, align 4, !dbg !2109
  %26 = zext i32 %25 to i64, !dbg !2110
  %27 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %27, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1086, i32 0, i32 0))
  %28 = load i32, i32* %d1.addr, align 4, !dbg !2111
  %add2 = add nsw i32 %28, 1, !dbg !2112
  %29 = zext i32 %add2 to i64, !dbg !2110
  call void @llvm.dbg.declare(metadata %struct.dcomplex** %u1, metadata !2113, metadata !98), !dbg !2114
  %30 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %30, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1087, i32 0, i32 0))
  %31 = load i32, i32* %d2.addr, align 4, !dbg !2115
  %32 = zext i32 %31 to i64, !dbg !2116
  %33 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %33, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1088, i32 0, i32 0))
  %34 = load i32, i32* %d1.addr, align 4, !dbg !2117
  %add3 = add nsw i32 %34, 1, !dbg !2118
  %35 = zext i32 %add3 to i64, !dbg !2116
  %36 = ptrtoint i8** %ou1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %36, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1089, i32 0, i32 0))
  %37 = load i8*, i8** %ou1.addr, align 8, !dbg !2119
  %38 = bitcast i8* %37 to %struct.dcomplex*, !dbg !2116
  %39 = ptrtoint %struct.dcomplex** %u1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %39, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1090, i32 0, i32 0))
  store %struct.dcomplex* %38, %struct.dcomplex** %u1, align 8, !dbg !2114
  %40 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %40, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1091, i32 0, i32 0))
  %41 = load i32, i32* %d2.addr, align 4, !dbg !2120
  %42 = zext i32 %41 to i64, !dbg !2121
  %43 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %43, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1092, i32 0, i32 0))
  %44 = load i32, i32* %d1.addr, align 4, !dbg !2122
  %add4 = add nsw i32 %44, 1, !dbg !2123
  %45 = zext i32 %add4 to i64, !dbg !2121
  call void @llvm.dbg.declare(metadata double** %twiddle, metadata !2124, metadata !98), !dbg !2125
  %46 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %46, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1093, i32 0, i32 0))
  %47 = load i32, i32* %d2.addr, align 4, !dbg !2126
  %48 = zext i32 %47 to i64, !dbg !2127
  %49 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %49, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1094, i32 0, i32 0))
  %50 = load i32, i32* %d1.addr, align 4, !dbg !2128
  %add5 = add nsw i32 %50, 1, !dbg !2129
  %51 = zext i32 %add5 to i64, !dbg !2127
  %52 = ptrtoint i8** %ot.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %52, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1095, i32 0, i32 0))
  %53 = load i8*, i8** %ot.addr, align 8, !dbg !2130
  %54 = bitcast i8* %53 to double*, !dbg !2127
  %55 = ptrtoint double** %twiddle to i64
  call void @__DiscoPoPOpenMPWrite(i64 %55, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1096, i32 0, i32 0))
  store double* %54, double** %twiddle, align 8, !dbg !2125
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2131, metadata !98), !dbg !2132
  call void @llvm.dbg.declare(metadata i32* %j, metadata !2133, metadata !98), !dbg !2134
  call void @llvm.dbg.declare(metadata i32* %k, metadata !2135, metadata !98), !dbg !2136
  %56 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !2137
  %57 = ptrtoint i8** %56 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %57, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1097, i32 0, i32 0))
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @7, i32 0, i32 0), i8** %56, align 8, !dbg !2137
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([121 x i8], [121 x i8]* @.str.1099, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* %.kmpc_loc.addr, i32 12, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, i32*, i32*, i64, i64, %struct.dcomplex**, i64, i64, double**, i64, i64, %struct.dcomplex**)* @.omp_outlined..8 to void (i32*, i32*, ...)*), i32* %d3.addr, i32* %d2.addr, i32* %d1.addr, i64 %10, i64 %13, %struct.dcomplex** %u0, i64 %42, i64 %45, double** %twiddle, i64 %26, i64 %29, %struct.dcomplex** %u1), !dbg !2137
  ret void, !dbg !2138
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..8(i32* noalias %.global_tid., i32* noalias %.bound_tid., i32* dereferenceable(4) %d3, i32* dereferenceable(4) %d2, i32* dereferenceable(4) %d1, i64 %vla, i64 %vla1, %struct.dcomplex** dereferenceable(8) %u0, i64 %vla3, i64 %vla5, double** dereferenceable(8) %twiddle, i64 %vla7, i64 %vla9, %struct.dcomplex** dereferenceable(8) %u1) #0 !dbg !2139 {
entry:
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.1101, i32 0, i32 0))
  %.global_tid..addr = alloca i32*, align 8
  %.bound_tid..addr = alloca i32*, align 8
  %d3.addr = alloca i32*, align 8
  %d2.addr = alloca i32*, align 8
  %d1.addr = alloca i32*, align 8
  %vla.addr = alloca i64, align 8
  %vla.addr2 = alloca i64, align 8
  %u0.addr = alloca %struct.dcomplex**, align 8
  %vla.addr4 = alloca i64, align 8
  %vla.addr6 = alloca i64, align 8
  %twiddle.addr = alloca double**, align 8
  %vla.addr8 = alloca i64, align 8
  %vla.addr10 = alloca i64, align 8
  %u1.addr = alloca %struct.dcomplex**, align 8
  %.omp.iv = alloca i32, align 4
  %.omp.last.iteration = alloca i32, align 4
  %k = alloca i32, align 4
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k13 = alloca i32, align 4
  %k14 = alloca i32, align 4
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  %.compoundliteral = alloca %struct.dcomplex, align 8
  %2 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1102, i32 0, i32 0))
  store i32* %.global_tid., i32** %.global_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.global_tid..addr, metadata !2142, metadata !98), !dbg !2143
  %3 = ptrtoint i32** %.bound_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1103, i32 0, i32 0))
  store i32* %.bound_tid., i32** %.bound_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.bound_tid..addr, metadata !2144, metadata !98), !dbg !2143
  %4 = ptrtoint i32** %d3.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1104, i32 0, i32 0))
  store i32* %d3, i32** %d3.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %d3.addr, metadata !2145, metadata !98), !dbg !2143
  %5 = ptrtoint i32** %d2.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1105, i32 0, i32 0))
  store i32* %d2, i32** %d2.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %d2.addr, metadata !2146, metadata !98), !dbg !2143
  %6 = ptrtoint i32** %d1.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1106, i32 0, i32 0))
  store i32* %d1, i32** %d1.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %d1.addr, metadata !2147, metadata !98), !dbg !2143
  %7 = ptrtoint i64* %vla.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %7, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1107, i32 0, i32 0))
  store i64 %vla, i64* %vla.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %vla.addr, metadata !2148, metadata !98), !dbg !2143
  %8 = ptrtoint i64* %vla.addr2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %8, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1108, i32 0, i32 0))
  store i64 %vla1, i64* %vla.addr2, align 8
  call void @llvm.dbg.declare(metadata i64* %vla.addr2, metadata !2149, metadata !98), !dbg !2143
  %9 = ptrtoint %struct.dcomplex*** %u0.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1109, i32 0, i32 0))
  store %struct.dcomplex** %u0, %struct.dcomplex*** %u0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dcomplex*** %u0.addr, metadata !2150, metadata !98), !dbg !2143
  %10 = ptrtoint i64* %vla.addr4 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %10, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1110, i32 0, i32 0))
  store i64 %vla3, i64* %vla.addr4, align 8
  call void @llvm.dbg.declare(metadata i64* %vla.addr4, metadata !2151, metadata !98), !dbg !2143
  %11 = ptrtoint i64* %vla.addr6 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %11, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1111, i32 0, i32 0))
  store i64 %vla5, i64* %vla.addr6, align 8
  call void @llvm.dbg.declare(metadata i64* %vla.addr6, metadata !2152, metadata !98), !dbg !2143
  %12 = ptrtoint double*** %twiddle.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %12, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1112, i32 0, i32 0))
  store double** %twiddle, double*** %twiddle.addr, align 8
  call void @llvm.dbg.declare(metadata double*** %twiddle.addr, metadata !2153, metadata !98), !dbg !2143
  %13 = ptrtoint i64* %vla.addr8 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %13, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1113, i32 0, i32 0))
  store i64 %vla7, i64* %vla.addr8, align 8
  call void @llvm.dbg.declare(metadata i64* %vla.addr8, metadata !2154, metadata !98), !dbg !2143
  %14 = ptrtoint i64* %vla.addr10 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %14, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1114, i32 0, i32 0))
  store i64 %vla9, i64* %vla.addr10, align 8
  call void @llvm.dbg.declare(metadata i64* %vla.addr10, metadata !2155, metadata !98), !dbg !2143
  %15 = ptrtoint %struct.dcomplex*** %u1.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %15, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1115, i32 0, i32 0))
  store %struct.dcomplex** %u1, %struct.dcomplex*** %u1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dcomplex*** %u1.addr, metadata !2156, metadata !98), !dbg !2143
  %16 = ptrtoint i32** %d3.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %16, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1116, i32 0, i32 0))
  %17 = load i32*, i32** %d3.addr, align 8, !dbg !2157
  %18 = ptrtoint i32** %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %18, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1117, i32 0, i32 0))
  %19 = load i32*, i32** %d2.addr, align 8, !dbg !2157
  %20 = ptrtoint i32** %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %20, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1118, i32 0, i32 0))
  %21 = load i32*, i32** %d1.addr, align 8, !dbg !2157
  %22 = ptrtoint i64* %vla.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %22, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1119, i32 0, i32 0))
  %23 = load i64, i64* %vla.addr, align 8, !dbg !2157
  %24 = ptrtoint i64* %vla.addr2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %24, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1120, i32 0, i32 0))
  %25 = load i64, i64* %vla.addr2, align 8, !dbg !2157
  %26 = ptrtoint %struct.dcomplex*** %u0.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %26, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1121, i32 0, i32 0))
  %27 = load %struct.dcomplex**, %struct.dcomplex*** %u0.addr, align 8, !dbg !2157
  %28 = ptrtoint i64* %vla.addr4 to i64
  call void @__DiscoPoPOpenMPRead(i64 %28, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1122, i32 0, i32 0))
  %29 = load i64, i64* %vla.addr4, align 8, !dbg !2157
  %30 = ptrtoint i64* %vla.addr6 to i64
  call void @__DiscoPoPOpenMPRead(i64 %30, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1123, i32 0, i32 0))
  %31 = load i64, i64* %vla.addr6, align 8, !dbg !2157
  %32 = ptrtoint double*** %twiddle.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %32, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1124, i32 0, i32 0))
  %33 = load double**, double*** %twiddle.addr, align 8, !dbg !2157
  %34 = ptrtoint i64* %vla.addr8 to i64
  call void @__DiscoPoPOpenMPRead(i64 %34, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1125, i32 0, i32 0))
  %35 = load i64, i64* %vla.addr8, align 8, !dbg !2157
  %36 = ptrtoint i64* %vla.addr10 to i64
  call void @__DiscoPoPOpenMPRead(i64 %36, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1126, i32 0, i32 0))
  %37 = load i64, i64* %vla.addr10, align 8, !dbg !2157
  %38 = ptrtoint %struct.dcomplex*** %u1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %38, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1127, i32 0, i32 0))
  %39 = load %struct.dcomplex**, %struct.dcomplex*** %u1.addr, align 8, !dbg !2157
  call void @llvm.dbg.declare(metadata i32* %.omp.iv, metadata !2158, metadata !98), !dbg !2143
  call void @llvm.dbg.declare(metadata i32* %.omp.last.iteration, metadata !2159, metadata !98), !dbg !2143
  %40 = ptrtoint i32* %17 to i64
  call void @__DiscoPoPOpenMPRead(i64 %40, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1128, i32 0, i32 0))
  %41 = load i32, i32* %17, align 4, !dbg !2160
  %sub = sub nsw i32 %41, 0, !dbg !2157
  %sub11 = sub nsw i32 %sub, 1, !dbg !2157
  %add = add nsw i32 %sub11, 1, !dbg !2157
  %div = sdiv i32 %add, 1, !dbg !2157
  %sub12 = sub nsw i32 %div, 1, !dbg !2143
  %42 = ptrtoint i32* %.omp.last.iteration to i64
  call void @__DiscoPoPOpenMPWrite(i64 %42, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1129, i32 0, i32 0))
  store i32 %sub12, i32* %.omp.last.iteration, align 4, !dbg !2143
  call void @llvm.dbg.declare(metadata i32* %k, metadata !2161, metadata !98), !dbg !2143
  %43 = ptrtoint i32* %k to i64
  call void @__DiscoPoPOpenMPWrite(i64 %43, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1130, i32 0, i32 0))
  store i32 0, i32* %k, align 4, !dbg !2162
  %44 = ptrtoint i32* %17 to i64
  call void @__DiscoPoPOpenMPRead(i64 %44, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1131, i32 0, i32 0))
  %45 = load i32, i32* %17, align 4, !dbg !2160
  %cmp = icmp slt i32 0, %45, !dbg !2157
  br i1 %cmp, label %omp.precond.then, label %omp.precond.end, !dbg !2157

omp.precond.then:                                 ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %.omp.lb, metadata !2163, metadata !98), !dbg !2143
  %46 = ptrtoint i32* %.omp.lb to i64
  call void @__DiscoPoPOpenMPWrite(i64 %46, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1132, i32 0, i32 0))
  store i32 0, i32* %.omp.lb, align 4, !dbg !2164
  call void @llvm.dbg.declare(metadata i32* %.omp.ub, metadata !2166, metadata !98), !dbg !2143
  %47 = ptrtoint i32* %.omp.last.iteration to i64
  call void @__DiscoPoPOpenMPRead(i64 %47, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1133, i32 0, i32 0))
  %48 = load i32, i32* %.omp.last.iteration, align 4, !dbg !2167
  %49 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPWrite(i64 %49, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1134, i32 0, i32 0))
  store i32 %48, i32* %.omp.ub, align 4, !dbg !2164
  call void @llvm.dbg.declare(metadata i32* %.omp.stride, metadata !2169, metadata !98), !dbg !2143
  %50 = ptrtoint i32* %.omp.stride to i64
  call void @__DiscoPoPOpenMPWrite(i64 %50, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1135, i32 0, i32 0))
  store i32 1, i32* %.omp.stride, align 4, !dbg !2164
  call void @llvm.dbg.declare(metadata i32* %.omp.is_last, metadata !2170, metadata !98), !dbg !2143
  %51 = ptrtoint i32* %.omp.is_last to i64
  call void @__DiscoPoPOpenMPWrite(i64 %51, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1136, i32 0, i32 0))
  store i32 0, i32* %.omp.is_last, align 4, !dbg !2164
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2171, metadata !98), !dbg !2143
  call void @llvm.dbg.declare(metadata i32* %j, metadata !2172, metadata !98), !dbg !2143
  call void @llvm.dbg.declare(metadata i32* %k13, metadata !2161, metadata !98), !dbg !2143
  call void @llvm.dbg.declare(metadata i32* %k14, metadata !2161, metadata !98), !dbg !2143
  %52 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !2173
  %53 = ptrtoint i8** %52 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %53, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1137, i32 0, i32 0))
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @7, i32 0, i32 0), i8** %52, align 8, !dbg !2173
  %54 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %54, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1138, i32 0, i32 0))
  %55 = load i32*, i32** %.global_tid..addr, align 8, !dbg !2173
  %56 = ptrtoint i32* %55 to i64
  call void @__DiscoPoPOpenMPRead(i64 %56, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1139, i32 0, i32 0))
  %57 = load i32, i32* %55, align 4, !dbg !2173
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.1141, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_for_static_init_4(%ident_t* %.kmpc_loc.addr, i32 %57, i32 34, i32* %.omp.is_last, i32* %.omp.lb, i32* %.omp.ub, i32* %.omp.stride, i32 1, i32 1), !dbg !2173
  %58 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %58, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1142, i32 0, i32 0))
  %59 = load i32, i32* %.omp.ub, align 4, !dbg !2164
  %60 = ptrtoint i32* %.omp.last.iteration to i64
  call void @__DiscoPoPOpenMPRead(i64 %60, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1143, i32 0, i32 0))
  %61 = load i32, i32* %.omp.last.iteration, align 4, !dbg !2167
  %cmp15 = icmp sgt i32 %59, %61, !dbg !2164
  br i1 %cmp15, label %cond.true, label %cond.false, !dbg !2164

cond.true:                                        ; preds = %omp.precond.then
  %62 = ptrtoint i32* %.omp.last.iteration to i64
  call void @__DiscoPoPOpenMPRead(i64 %62, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1144, i32 0, i32 0))
  %63 = load i32, i32* %.omp.last.iteration, align 4, !dbg !2174
  br label %cond.end, !dbg !2176

cond.false:                                       ; preds = %omp.precond.then
  %64 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %64, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1145, i32 0, i32 0))
  %65 = load i32, i32* %.omp.ub, align 4, !dbg !2178
  br label %cond.end, !dbg !2178

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %63, %cond.true ], [ %65, %cond.false ], !dbg !2180
  %66 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPWrite(i64 %66, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1146, i32 0, i32 0))
  store i32 %cond, i32* %.omp.ub, align 4, !dbg !2180
  %67 = ptrtoint i32* %.omp.lb to i64
  call void @__DiscoPoPOpenMPRead(i64 %67, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1147, i32 0, i32 0))
  %68 = load i32, i32* %.omp.lb, align 4, !dbg !2180
  %69 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPWrite(i64 %69, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1148, i32 0, i32 0))
  store i32 %68, i32* %.omp.iv, align 4, !dbg !2180
  br label %omp.inner.for.cond, !dbg !2182

omp.inner.for.cond:                               ; preds = %omp.inner.for.inc, %cond.end
  %70 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %70, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1149, i32 0, i32 0))
  %71 = load i32, i32* %.omp.iv, align 4, !dbg !2183
  %72 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %72, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1150, i32 0, i32 0))
  %73 = load i32, i32* %.omp.ub, align 4, !dbg !2183
  %cmp16 = icmp sle i32 %71, %73, !dbg !2184
  br i1 %cmp16, label %omp.inner.for.body, label %omp.inner.for.end, !dbg !2186

omp.inner.for.body:                               ; preds = %omp.inner.for.cond
  %74 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %74, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1151, i32 0, i32 0))
  %75 = load i32, i32* %.omp.iv, align 4, !dbg !2187
  %mul = mul nsw i32 %75, 1, !dbg !2188
  %add17 = add nsw i32 0, %mul, !dbg !2188
  %76 = ptrtoint i32* %k13 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %76, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1152, i32 0, i32 0))
  store i32 %add17, i32* %k13, align 4, !dbg !2188
  %77 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %77, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1153, i32 0, i32 0))
  store i32 0, i32* %j, align 4, !dbg !2189
  br label %for.cond, !dbg !2192

for.cond:                                         ; preds = %for.inc66, %omp.inner.for.body
  %78 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %78, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1154, i32 0, i32 0))
  %79 = load i32, i32* %j, align 4, !dbg !2193
  %80 = ptrtoint i32* %19 to i64
  call void @__DiscoPoPOpenMPRead(i64 %80, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1155, i32 0, i32 0))
  %81 = load i32, i32* %19, align 4, !dbg !2196
  %cmp18 = icmp slt i32 %79, %81, !dbg !2197
  br i1 %cmp18, label %for.body, label %for.end68, !dbg !2198

for.body:                                         ; preds = %for.cond
  %82 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %82, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1156, i32 0, i32 0))
  store i32 0, i32* %i, align 4, !dbg !2199
  br label %for.cond19, !dbg !2202

for.cond19:                                       ; preds = %for.inc, %for.body
  %83 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %83, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1157, i32 0, i32 0))
  %84 = load i32, i32* %i, align 4, !dbg !2203
  %85 = ptrtoint i32* %21 to i64
  call void @__DiscoPoPOpenMPRead(i64 %85, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1158, i32 0, i32 0))
  %86 = load i32, i32* %21, align 4, !dbg !2206
  %cmp20 = icmp slt i32 %84, %86, !dbg !2207
  br i1 %cmp20, label %for.body21, label %for.end, !dbg !2208

for.body21:                                       ; preds = %for.cond19
  %87 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %87, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1159, i32 0, i32 0))
  %88 = load i32, i32* %i, align 4, !dbg !2209
  %idxprom = sext i32 %88 to i64, !dbg !2211
  %89 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %89, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1160, i32 0, i32 0))
  %90 = load i32, i32* %j, align 4, !dbg !2212
  %idxprom22 = sext i32 %90 to i64, !dbg !2211
  %91 = ptrtoint i32* %k13 to i64
  call void @__DiscoPoPOpenMPRead(i64 %91, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1161, i32 0, i32 0))
  %92 = load i32, i32* %k13, align 4, !dbg !2213
  %idxprom23 = sext i32 %92 to i64, !dbg !2211
  %93 = ptrtoint %struct.dcomplex** %27 to i64
  call void @__DiscoPoPOpenMPRead(i64 %93, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1162, i32 0, i32 0))
  %94 = load %struct.dcomplex*, %struct.dcomplex** %27, align 8, !dbg !2211
  %95 = mul nuw i64 %23, %25, !dbg !2211
  %96 = mul nsw i64 %idxprom23, %95, !dbg !2211
  %arrayidx = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %94, i64 %96, !dbg !2211
  %97 = mul nsw i64 %idxprom22, %25, !dbg !2211
  %arrayidx24 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx, i64 %97, !dbg !2211
  %arrayidx25 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx24, i64 %idxprom, !dbg !2211
  %real = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral, i32 0, i32 0, !dbg !2214
  %98 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %98, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1163, i32 0, i32 0))
  %99 = load i32, i32* %i, align 4, !dbg !2214
  %idxprom26 = sext i32 %99 to i64, !dbg !2214
  %100 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %100, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1164, i32 0, i32 0))
  %101 = load i32, i32* %j, align 4, !dbg !2214
  %idxprom27 = sext i32 %101 to i64, !dbg !2214
  %102 = ptrtoint i32* %k13 to i64
  call void @__DiscoPoPOpenMPRead(i64 %102, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1165, i32 0, i32 0))
  %103 = load i32, i32* %k13, align 4, !dbg !2214
  %idxprom28 = sext i32 %103 to i64, !dbg !2214
  %104 = ptrtoint %struct.dcomplex** %27 to i64
  call void @__DiscoPoPOpenMPRead(i64 %104, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1166, i32 0, i32 0))
  %105 = load %struct.dcomplex*, %struct.dcomplex** %27, align 8, !dbg !2214
  %106 = mul nuw i64 %23, %25, !dbg !2214
  %107 = mul nsw i64 %idxprom28, %106, !dbg !2214
  %arrayidx29 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %105, i64 %107, !dbg !2214
  %108 = mul nsw i64 %idxprom27, %25, !dbg !2214
  %arrayidx30 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx29, i64 %108, !dbg !2214
  %arrayidx31 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx30, i64 %idxprom26, !dbg !2214
  %real32 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx31, i32 0, i32 0, !dbg !2214
  %109 = ptrtoint double* %real32 to i64
  call void @__DiscoPoPOpenMPRead(i64 %109, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1167, i32 0, i32 0))
  %110 = load double, double* %real32, align 8, !dbg !2214
  %111 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %111, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1168, i32 0, i32 0))
  %112 = load i32, i32* %i, align 4, !dbg !2214
  %idxprom33 = sext i32 %112 to i64, !dbg !2214
  %113 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %113, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1169, i32 0, i32 0))
  %114 = load i32, i32* %j, align 4, !dbg !2214
  %idxprom34 = sext i32 %114 to i64, !dbg !2214
  %115 = ptrtoint i32* %k13 to i64
  call void @__DiscoPoPOpenMPRead(i64 %115, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1170, i32 0, i32 0))
  %116 = load i32, i32* %k13, align 4, !dbg !2214
  %idxprom35 = sext i32 %116 to i64, !dbg !2214
  %117 = ptrtoint double** %33 to i64
  call void @__DiscoPoPOpenMPRead(i64 %117, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1171, i32 0, i32 0))
  %118 = load double*, double** %33, align 8, !dbg !2214
  %119 = mul nuw i64 %29, %31, !dbg !2214
  %120 = mul nsw i64 %idxprom35, %119, !dbg !2214
  %arrayidx36 = getelementptr inbounds double, double* %118, i64 %120, !dbg !2214
  %121 = mul nsw i64 %idxprom34, %31, !dbg !2214
  %arrayidx37 = getelementptr inbounds double, double* %arrayidx36, i64 %121, !dbg !2214
  %arrayidx38 = getelementptr inbounds double, double* %arrayidx37, i64 %idxprom33, !dbg !2214
  %122 = ptrtoint double* %arrayidx38 to i64
  call void @__DiscoPoPOpenMPRead(i64 %122, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1172, i32 0, i32 0))
  %123 = load double, double* %arrayidx38, align 8, !dbg !2214
  %mul39 = fmul double %110, %123, !dbg !2214
  %124 = ptrtoint double* %real to i64
  call void @__DiscoPoPOpenMPWrite(i64 %124, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1173, i32 0, i32 0))
  store double %mul39, double* %real, align 8, !dbg !2214
  %imag = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral, i32 0, i32 1, !dbg !2214
  %125 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %125, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1174, i32 0, i32 0))
  %126 = load i32, i32* %i, align 4, !dbg !2214
  %idxprom40 = sext i32 %126 to i64, !dbg !2214
  %127 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %127, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1175, i32 0, i32 0))
  %128 = load i32, i32* %j, align 4, !dbg !2214
  %idxprom41 = sext i32 %128 to i64, !dbg !2214
  %129 = ptrtoint i32* %k13 to i64
  call void @__DiscoPoPOpenMPRead(i64 %129, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1176, i32 0, i32 0))
  %130 = load i32, i32* %k13, align 4, !dbg !2214
  %idxprom42 = sext i32 %130 to i64, !dbg !2214
  %131 = ptrtoint %struct.dcomplex** %27 to i64
  call void @__DiscoPoPOpenMPRead(i64 %131, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1177, i32 0, i32 0))
  %132 = load %struct.dcomplex*, %struct.dcomplex** %27, align 8, !dbg !2214
  %133 = mul nuw i64 %23, %25, !dbg !2214
  %134 = mul nsw i64 %idxprom42, %133, !dbg !2214
  %arrayidx43 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %132, i64 %134, !dbg !2214
  %135 = mul nsw i64 %idxprom41, %25, !dbg !2214
  %arrayidx44 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx43, i64 %135, !dbg !2214
  %arrayidx45 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx44, i64 %idxprom40, !dbg !2214
  %imag46 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx45, i32 0, i32 1, !dbg !2214
  %136 = ptrtoint double* %imag46 to i64
  call void @__DiscoPoPOpenMPRead(i64 %136, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1178, i32 0, i32 0))
  %137 = load double, double* %imag46, align 8, !dbg !2214
  %138 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %138, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1179, i32 0, i32 0))
  %139 = load i32, i32* %i, align 4, !dbg !2214
  %idxprom47 = sext i32 %139 to i64, !dbg !2214
  %140 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %140, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1180, i32 0, i32 0))
  %141 = load i32, i32* %j, align 4, !dbg !2214
  %idxprom48 = sext i32 %141 to i64, !dbg !2214
  %142 = ptrtoint i32* %k13 to i64
  call void @__DiscoPoPOpenMPRead(i64 %142, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1181, i32 0, i32 0))
  %143 = load i32, i32* %k13, align 4, !dbg !2214
  %idxprom49 = sext i32 %143 to i64, !dbg !2214
  %144 = ptrtoint double** %33 to i64
  call void @__DiscoPoPOpenMPRead(i64 %144, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1182, i32 0, i32 0))
  %145 = load double*, double** %33, align 8, !dbg !2214
  %146 = mul nuw i64 %29, %31, !dbg !2214
  %147 = mul nsw i64 %idxprom49, %146, !dbg !2214
  %arrayidx50 = getelementptr inbounds double, double* %145, i64 %147, !dbg !2214
  %148 = mul nsw i64 %idxprom48, %31, !dbg !2214
  %arrayidx51 = getelementptr inbounds double, double* %arrayidx50, i64 %148, !dbg !2214
  %arrayidx52 = getelementptr inbounds double, double* %arrayidx51, i64 %idxprom47, !dbg !2214
  %149 = ptrtoint double* %arrayidx52 to i64
  call void @__DiscoPoPOpenMPRead(i64 %149, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1183, i32 0, i32 0))
  %150 = load double, double* %arrayidx52, align 8, !dbg !2214
  %mul53 = fmul double %137, %150, !dbg !2214
  %151 = ptrtoint double* %imag to i64
  call void @__DiscoPoPOpenMPWrite(i64 %151, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1184, i32 0, i32 0))
  store double %mul53, double* %imag, align 8, !dbg !2214
  %152 = bitcast %struct.dcomplex* %arrayidx25 to i8*, !dbg !2214
  %153 = bitcast %struct.dcomplex* %.compoundliteral to i8*, !dbg !2214
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %152, i8* %153, i64 16, i32 8, i1 false), !dbg !2214
  %154 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %154, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1185, i32 0, i32 0))
  %155 = load i32, i32* %i, align 4, !dbg !2215
  %idxprom54 = sext i32 %155 to i64, !dbg !2216
  %156 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %156, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1186, i32 0, i32 0))
  %157 = load i32, i32* %j, align 4, !dbg !2217
  %idxprom55 = sext i32 %157 to i64, !dbg !2216
  %158 = ptrtoint i32* %k13 to i64
  call void @__DiscoPoPOpenMPRead(i64 %158, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1187, i32 0, i32 0))
  %159 = load i32, i32* %k13, align 4, !dbg !2218
  %idxprom56 = sext i32 %159 to i64, !dbg !2216
  %160 = ptrtoint %struct.dcomplex** %39 to i64
  call void @__DiscoPoPOpenMPRead(i64 %160, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1188, i32 0, i32 0))
  %161 = load %struct.dcomplex*, %struct.dcomplex** %39, align 8, !dbg !2216
  %162 = mul nuw i64 %35, %37, !dbg !2216
  %163 = mul nsw i64 %idxprom56, %162, !dbg !2216
  %arrayidx57 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %161, i64 %163, !dbg !2216
  %164 = mul nsw i64 %idxprom55, %37, !dbg !2216
  %arrayidx58 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx57, i64 %164, !dbg !2216
  %arrayidx59 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx58, i64 %idxprom54, !dbg !2216
  %165 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %165, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1189, i32 0, i32 0))
  %166 = load i32, i32* %i, align 4, !dbg !2219
  %idxprom60 = sext i32 %166 to i64, !dbg !2220
  %167 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %167, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1190, i32 0, i32 0))
  %168 = load i32, i32* %j, align 4, !dbg !2221
  %idxprom61 = sext i32 %168 to i64, !dbg !2220
  %169 = ptrtoint i32* %k13 to i64
  call void @__DiscoPoPOpenMPRead(i64 %169, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1191, i32 0, i32 0))
  %170 = load i32, i32* %k13, align 4, !dbg !2222
  %idxprom62 = sext i32 %170 to i64, !dbg !2220
  %171 = ptrtoint %struct.dcomplex** %27 to i64
  call void @__DiscoPoPOpenMPRead(i64 %171, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1192, i32 0, i32 0))
  %172 = load %struct.dcomplex*, %struct.dcomplex** %27, align 8, !dbg !2220
  %173 = mul nuw i64 %23, %25, !dbg !2220
  %174 = mul nsw i64 %idxprom62, %173, !dbg !2220
  %arrayidx63 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %172, i64 %174, !dbg !2220
  %175 = mul nsw i64 %idxprom61, %25, !dbg !2220
  %arrayidx64 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx63, i64 %175, !dbg !2220
  %arrayidx65 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx64, i64 %idxprom60, !dbg !2220
  %176 = bitcast %struct.dcomplex* %arrayidx59 to i8*, !dbg !2220
  %177 = bitcast %struct.dcomplex* %arrayidx65 to i8*, !dbg !2220
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %176, i8* %177, i64 16, i32 8, i1 false), !dbg !2220
  br label %for.inc, !dbg !2223

for.inc:                                          ; preds = %for.body21
  %178 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %178, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1193, i32 0, i32 0))
  %179 = load i32, i32* %i, align 4, !dbg !2224
  %inc = add nsw i32 %179, 1, !dbg !2224
  %180 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %180, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1194, i32 0, i32 0))
  store i32 %inc, i32* %i, align 4, !dbg !2224
  br label %for.cond19, !dbg !2226

for.end:                                          ; preds = %for.cond19
  br label %for.inc66, !dbg !2227

for.inc66:                                        ; preds = %for.end
  %181 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %181, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1195, i32 0, i32 0))
  %182 = load i32, i32* %j, align 4, !dbg !2228
  %inc67 = add nsw i32 %182, 1, !dbg !2228
  %183 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %183, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1196, i32 0, i32 0))
  store i32 %inc67, i32* %j, align 4, !dbg !2228
  br label %for.cond, !dbg !2230

for.end68:                                        ; preds = %for.cond
  br label %omp.body.continue, !dbg !2231

omp.body.continue:                                ; preds = %for.end68
  br label %omp.inner.for.inc, !dbg !2232

omp.inner.for.inc:                                ; preds = %omp.body.continue
  %184 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %184, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1197, i32 0, i32 0))
  %185 = load i32, i32* %.omp.iv, align 4, !dbg !2233
  %add69 = add nsw i32 %185, 1, !dbg !2234
  %186 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPWrite(i64 %186, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1198, i32 0, i32 0))
  store i32 %add69, i32* %.omp.iv, align 4, !dbg !2234
  br label %omp.inner.for.cond, !dbg !2236

omp.inner.for.end:                                ; preds = %omp.inner.for.cond
  br label %omp.loop.exit, !dbg !2237

omp.loop.exit:                                    ; preds = %omp.inner.for.end
  %187 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !2238
  %188 = ptrtoint i8** %187 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %188, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1199, i32 0, i32 0))
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @7, i32 0, i32 0), i8** %187, align 8, !dbg !2238
  %189 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %189, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1200, i32 0, i32 0))
  %190 = load i32*, i32** %.global_tid..addr, align 8, !dbg !2238
  %191 = ptrtoint i32* %190 to i64
  call void @__DiscoPoPOpenMPRead(i64 %191, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1201, i32 0, i32 0))
  %192 = load i32, i32* %190, align 4, !dbg !2238
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.1203, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_for_static_fini(%ident_t* %.kmpc_loc.addr, i32 %192), !dbg !2238
  br label %omp.precond.end, !dbg !2238

omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
  call void @__DiscoPoPOpenMPAfterCall()
  ret void, !dbg !2239
}

; Function Attrs: nounwind uwtable
define internal void @checksum(i32 %i, i8* %ou1, i32 %d1, i32 %d2, i32 %d3) #0 !dbg !2240 {
entry:
  %i.addr = alloca i32, align 4
  %ou1.addr = alloca i8*, align 8
  %d1.addr = alloca i32, align 4
  %d2.addr = alloca i32, align 4
  %d3.addr = alloca i32, align 4
  %u1 = alloca %struct.dcomplex*, align 8
  %j = alloca i32, align 4
  %q = alloca i32, align 4
  %r = alloca i32, align 4
  %s = alloca i32, align 4
  %chk = alloca %struct.dcomplex, align 8
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  %.compoundliteral = alloca %struct.dcomplex, align 8
  %2 = ptrtoint i32* %i.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1204, i32 0, i32 0))
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !2243, metadata !98), !dbg !2244
  %3 = ptrtoint i8** %ou1.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1205, i32 0, i32 0))
  store i8* %ou1, i8** %ou1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ou1.addr, metadata !2245, metadata !98), !dbg !2246
  %4 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1206, i32 0, i32 0))
  store i32 %d1, i32* %d1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %d1.addr, metadata !2247, metadata !98), !dbg !2248
  %5 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1207, i32 0, i32 0))
  store i32 %d2, i32* %d2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %d2.addr, metadata !2249, metadata !98), !dbg !2250
  %6 = ptrtoint i32* %d3.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1208, i32 0, i32 0))
  store i32 %d3, i32* %d3.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %d3.addr, metadata !2251, metadata !98), !dbg !2252
  %7 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %7, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1209, i32 0, i32 0))
  %8 = load i32, i32* %d2.addr, align 4, !dbg !2253
  %9 = zext i32 %8 to i64, !dbg !2254
  %10 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %10, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1210, i32 0, i32 0))
  %11 = load i32, i32* %d1.addr, align 4, !dbg !2255
  %add = add nsw i32 %11, 1, !dbg !2256
  %12 = zext i32 %add to i64, !dbg !2254
  call void @llvm.dbg.declare(metadata %struct.dcomplex** %u1, metadata !2257, metadata !98), !dbg !2258
  %13 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %13, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1211, i32 0, i32 0))
  %14 = load i32, i32* %d2.addr, align 4, !dbg !2259
  %15 = zext i32 %14 to i64, !dbg !2260
  %16 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %16, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1212, i32 0, i32 0))
  %17 = load i32, i32* %d1.addr, align 4, !dbg !2261
  %add1 = add nsw i32 %17, 1, !dbg !2262
  %18 = zext i32 %add1 to i64, !dbg !2260
  %19 = ptrtoint i8** %ou1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %19, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1213, i32 0, i32 0))
  %20 = load i8*, i8** %ou1.addr, align 8, !dbg !2263
  %21 = bitcast i8* %20 to %struct.dcomplex*, !dbg !2260
  %22 = ptrtoint %struct.dcomplex** %u1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %22, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1214, i32 0, i32 0))
  store %struct.dcomplex* %21, %struct.dcomplex** %u1, align 8, !dbg !2258
  call void @llvm.dbg.declare(metadata i32* %j, metadata !2264, metadata !98), !dbg !2265
  call void @llvm.dbg.declare(metadata i32* %q, metadata !2266, metadata !98), !dbg !2267
  call void @llvm.dbg.declare(metadata i32* %r, metadata !2268, metadata !98), !dbg !2269
  call void @llvm.dbg.declare(metadata i32* %s, metadata !2270, metadata !98), !dbg !2271
  call void @llvm.dbg.declare(metadata %struct.dcomplex* %chk, metadata !2272, metadata !98), !dbg !2273
  %23 = bitcast %struct.dcomplex* %chk to i8*, !dbg !2273
  call void @llvm.memset.p0i8.i64(i8* %23, i8 0, i64 16, i32 8, i1 false), !dbg !2273
  %24 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !2274
  %25 = ptrtoint i8** %24 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %25, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1215, i32 0, i32 0))
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @8, i32 0, i32 0), i8** %24, align 8, !dbg !2274
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.1217, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* %.kmpc_loc.addr, i32 5, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, i64, i64, %struct.dcomplex**, %struct.dcomplex*)* @.omp_outlined..31 to void (i32*, i32*, ...)*), i32* %j, i64 %9, i64 %12, %struct.dcomplex** %u1, %struct.dcomplex* %chk), !dbg !2274
  %real = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral, i32 0, i32 0, !dbg !2275
  %real2 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %chk, i32 0, i32 0, !dbg !2275
  %26 = ptrtoint double* %real2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %26, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1218, i32 0, i32 0))
  %27 = load double, double* %real2, align 8, !dbg !2275
  %div = fdiv double %27, 2.621440e+05, !dbg !2275
  %28 = ptrtoint double* %real to i64
  call void @__DiscoPoPOpenMPWrite(i64 %28, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1219, i32 0, i32 0))
  store double %div, double* %real, align 8, !dbg !2275
  %imag = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral, i32 0, i32 1, !dbg !2275
  %imag3 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %chk, i32 0, i32 1, !dbg !2275
  %29 = ptrtoint double* %imag3 to i64
  call void @__DiscoPoPOpenMPRead(i64 %29, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1220, i32 0, i32 0))
  %30 = load double, double* %imag3, align 8, !dbg !2275
  %div4 = fdiv double %30, 2.621440e+05, !dbg !2275
  %31 = ptrtoint double* %imag to i64
  call void @__DiscoPoPOpenMPWrite(i64 %31, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1221, i32 0, i32 0))
  store double %div4, double* %imag, align 8, !dbg !2275
  %32 = bitcast %struct.dcomplex* %chk to i8*, !dbg !2275
  %33 = bitcast %struct.dcomplex* %.compoundliteral to i8*, !dbg !2275
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %32, i8* %33, i64 16, i32 8, i1 false), !dbg !2275
  %34 = ptrtoint i32* %i.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %34, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1222, i32 0, i32 0))
  %35 = load i32, i32* %i.addr, align 4, !dbg !2276
  %real5 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %chk, i32 0, i32 0, !dbg !2277
  %36 = ptrtoint double* %real5 to i64
  call void @__DiscoPoPOpenMPRead(i64 %36, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1223, i32 0, i32 0))
  %37 = load double, double* %real5, align 8, !dbg !2277
  %imag6 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %chk, i32 0, i32 1, !dbg !2278
  %38 = ptrtoint double* %imag6 to i64
  call void @__DiscoPoPOpenMPRead(i64 %38, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1224, i32 0, i32 0))
  %39 = load double, double* %imag6, align 8, !dbg !2278
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.32, i32 0, i32 0), i32 %35, double %37, double %39), !dbg !2279
  %40 = ptrtoint i32* %i.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %40, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1225, i32 0, i32 0))
  %41 = load i32, i32* %i.addr, align 4, !dbg !2280
  %idxprom = sext i32 %41 to i64, !dbg !2281
  %arrayidx = getelementptr inbounds [7 x %struct.dcomplex], [7 x %struct.dcomplex]* @sums, i64 0, i64 %idxprom, !dbg !2281
  %42 = bitcast %struct.dcomplex* %arrayidx to i8*, !dbg !2282
  %43 = bitcast %struct.dcomplex* %chk to i8*, !dbg !2282
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %42, i8* %43, i64 16, i32 8, i1 false), !dbg !2282
  ret void, !dbg !2283
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #3

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..31(i32* noalias %.global_tid., i32* noalias %.bound_tid., i32* dereferenceable(4) %j, i64 %vla, i64 %vla1, %struct.dcomplex** dereferenceable(8) %u1, %struct.dcomplex* dereferenceable(16) %chk) #0 !dbg !2284 {
entry:
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([132 x i8], [132 x i8]* @.str.1227, i32 0, i32 0))
  %.global_tid..addr = alloca i32*, align 8
  %.bound_tid..addr = alloca i32*, align 8
  %j.addr = alloca i32*, align 8
  %vla.addr = alloca i64, align 8
  %vla.addr2 = alloca i64, align 8
  %u1.addr = alloca %struct.dcomplex**, align 8
  %chk.addr = alloca %struct.dcomplex*, align 8
  %i = alloca i32, align 4
  %q = alloca i32, align 4
  %r = alloca i32, align 4
  %s = alloca i32, align 4
  %my_chk = alloca %struct.dcomplex, align 8
  %.omp.iv = alloca i32, align 4
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %j3 = alloca i32, align 4
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  %.compoundliteral = alloca %struct.dcomplex, align 8
  %.compoundliteral26 = alloca %struct.dcomplex, align 8
  %2 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1228, i32 0, i32 0))
  store i32* %.global_tid., i32** %.global_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.global_tid..addr, metadata !2288, metadata !98), !dbg !2289
  %3 = ptrtoint i32** %.bound_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1229, i32 0, i32 0))
  store i32* %.bound_tid., i32** %.bound_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.bound_tid..addr, metadata !2290, metadata !98), !dbg !2289
  %4 = ptrtoint i32** %j.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1230, i32 0, i32 0))
  store i32* %j, i32** %j.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %j.addr, metadata !2291, metadata !98), !dbg !2289
  %5 = ptrtoint i64* %vla.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1231, i32 0, i32 0))
  store i64 %vla, i64* %vla.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %vla.addr, metadata !2292, metadata !98), !dbg !2289
  %6 = ptrtoint i64* %vla.addr2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1232, i32 0, i32 0))
  store i64 %vla1, i64* %vla.addr2, align 8
  call void @llvm.dbg.declare(metadata i64* %vla.addr2, metadata !2293, metadata !98), !dbg !2289
  %7 = ptrtoint %struct.dcomplex*** %u1.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %7, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1233, i32 0, i32 0))
  store %struct.dcomplex** %u1, %struct.dcomplex*** %u1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dcomplex*** %u1.addr, metadata !2294, metadata !98), !dbg !2289
  %8 = ptrtoint %struct.dcomplex** %chk.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %8, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1234, i32 0, i32 0))
  store %struct.dcomplex* %chk, %struct.dcomplex** %chk.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dcomplex** %chk.addr, metadata !2295, metadata !98), !dbg !2289
  %9 = ptrtoint i32** %j.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %9, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1235, i32 0, i32 0))
  %10 = load i32*, i32** %j.addr, align 8, !dbg !2296
  %11 = ptrtoint i64* %vla.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %11, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1236, i32 0, i32 0))
  %12 = load i64, i64* %vla.addr, align 8, !dbg !2296
  %13 = ptrtoint i64* %vla.addr2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %13, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1237, i32 0, i32 0))
  %14 = load i64, i64* %vla.addr2, align 8, !dbg !2296
  %15 = ptrtoint %struct.dcomplex*** %u1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %15, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1238, i32 0, i32 0))
  %16 = load %struct.dcomplex**, %struct.dcomplex*** %u1.addr, align 8, !dbg !2296
  %17 = ptrtoint %struct.dcomplex** %chk.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %17, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1239, i32 0, i32 0))
  %18 = load %struct.dcomplex*, %struct.dcomplex** %chk.addr, align 8, !dbg !2296
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2297, metadata !98), !dbg !2289
  call void @llvm.dbg.declare(metadata i32* %q, metadata !2298, metadata !98), !dbg !2289
  call void @llvm.dbg.declare(metadata i32* %r, metadata !2299, metadata !98), !dbg !2289
  call void @llvm.dbg.declare(metadata i32* %s, metadata !2300, metadata !98), !dbg !2289
  call void @llvm.dbg.declare(metadata %struct.dcomplex* %my_chk, metadata !2301, metadata !98), !dbg !2303
  %19 = bitcast %struct.dcomplex* %my_chk to i8*, !dbg !2303
  call void @llvm.memset.p0i8.i64(i8* %19, i8 0, i64 16, i32 8, i1 false), !dbg !2303
  call void @llvm.dbg.declare(metadata i32* %.omp.iv, metadata !2304, metadata !98), !dbg !2306
  call void @llvm.dbg.declare(metadata i32* %.omp.lb, metadata !2307, metadata !98), !dbg !2306
  %20 = ptrtoint i32* %.omp.lb to i64
  call void @__DiscoPoPOpenMPWrite(i64 %20, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1240, i32 0, i32 0))
  store i32 0, i32* %.omp.lb, align 4, !dbg !2308
  call void @llvm.dbg.declare(metadata i32* %.omp.ub, metadata !2309, metadata !98), !dbg !2306
  %21 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPWrite(i64 %21, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1241, i32 0, i32 0))
  store i32 1023, i32* %.omp.ub, align 4, !dbg !2308
  call void @llvm.dbg.declare(metadata i32* %.omp.stride, metadata !2310, metadata !98), !dbg !2306
  %22 = ptrtoint i32* %.omp.stride to i64
  call void @__DiscoPoPOpenMPWrite(i64 %22, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1242, i32 0, i32 0))
  store i32 1, i32* %.omp.stride, align 4, !dbg !2308
  call void @llvm.dbg.declare(metadata i32* %.omp.is_last, metadata !2311, metadata !98), !dbg !2306
  %23 = ptrtoint i32* %.omp.is_last to i64
  call void @__DiscoPoPOpenMPWrite(i64 %23, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1243, i32 0, i32 0))
  store i32 0, i32* %.omp.is_last, align 4, !dbg !2308
  call void @llvm.dbg.declare(metadata i32* %j3, metadata !2312, metadata !98), !dbg !2306
  %24 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !2313
  %25 = ptrtoint i8** %24 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %25, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1244, i32 0, i32 0))
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @9, i32 0, i32 0), i8** %24, align 8, !dbg !2313
  %26 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %26, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1245, i32 0, i32 0))
  %27 = load i32*, i32** %.global_tid..addr, align 8, !dbg !2313
  %28 = ptrtoint i32* %27 to i64
  call void @__DiscoPoPOpenMPRead(i64 %28, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1246, i32 0, i32 0))
  %29 = load i32, i32* %27, align 4, !dbg !2313
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([132 x i8], [132 x i8]* @.str.1248, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_for_static_init_4(%ident_t* %.kmpc_loc.addr, i32 %29, i32 34, i32* %.omp.is_last, i32* %.omp.lb, i32* %.omp.ub, i32* %.omp.stride, i32 1, i32 1), !dbg !2313
  %30 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %30, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1249, i32 0, i32 0))
  %31 = load i32, i32* %.omp.ub, align 4, !dbg !2308
  %cmp = icmp sgt i32 %31, 1023, !dbg !2308
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !2308

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !2314

cond.false:                                       ; preds = %entry
  %32 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %32, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1250, i32 0, i32 0))
  %33 = load i32, i32* %.omp.ub, align 4, !dbg !2316
  br label %cond.end, !dbg !2316

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 1023, %cond.true ], [ %33, %cond.false ], !dbg !2318
  %34 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPWrite(i64 %34, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1251, i32 0, i32 0))
  store i32 %cond, i32* %.omp.ub, align 4, !dbg !2318
  %35 = ptrtoint i32* %.omp.lb to i64
  call void @__DiscoPoPOpenMPRead(i64 %35, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1252, i32 0, i32 0))
  %36 = load i32, i32* %.omp.lb, align 4, !dbg !2318
  %37 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPWrite(i64 %37, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1253, i32 0, i32 0))
  store i32 %36, i32* %.omp.iv, align 4, !dbg !2318
  br label %omp.inner.for.cond, !dbg !2320

omp.inner.for.cond:                               ; preds = %omp.inner.for.inc, %cond.end
  %38 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %38, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1254, i32 0, i32 0))
  %39 = load i32, i32* %.omp.iv, align 4, !dbg !2322
  %40 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %40, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1255, i32 0, i32 0))
  %41 = load i32, i32* %.omp.ub, align 4, !dbg !2322
  %cmp4 = icmp sle i32 %39, %41, !dbg !2306
  br i1 %cmp4, label %omp.inner.for.body, label %omp.inner.for.end, !dbg !2324

omp.inner.for.body:                               ; preds = %omp.inner.for.cond
  %42 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %42, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1256, i32 0, i32 0))
  %43 = load i32, i32* %.omp.iv, align 4, !dbg !2326
  %mul = mul nsw i32 %43, 1, !dbg !2328
  %add = add nsw i32 1, %mul, !dbg !2328
  %44 = ptrtoint i32* %j3 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %44, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1257, i32 0, i32 0))
  store i32 %add, i32* %j3, align 4, !dbg !2328
  %45 = ptrtoint i32* %j3 to i64
  call void @__DiscoPoPOpenMPRead(i64 %45, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1258, i32 0, i32 0))
  %46 = load i32, i32* %j3, align 4, !dbg !2329
  %rem = srem i32 %46, 64, !dbg !2331
  %47 = ptrtoint i32* %q to i64
  call void @__DiscoPoPOpenMPWrite(i64 %47, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1259, i32 0, i32 0))
  store i32 %rem, i32* %q, align 4, !dbg !2332
  %48 = ptrtoint i32* %j3 to i64
  call void @__DiscoPoPOpenMPRead(i64 %48, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1260, i32 0, i32 0))
  %49 = load i32, i32* %j3, align 4, !dbg !2333
  %mul5 = mul nsw i32 3, %49, !dbg !2334
  %rem6 = srem i32 %mul5, 64, !dbg !2335
  %50 = ptrtoint i32* %r to i64
  call void @__DiscoPoPOpenMPWrite(i64 %50, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1261, i32 0, i32 0))
  store i32 %rem6, i32* %r, align 4, !dbg !2336
  %51 = ptrtoint i32* %j3 to i64
  call void @__DiscoPoPOpenMPRead(i64 %51, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1262, i32 0, i32 0))
  %52 = load i32, i32* %j3, align 4, !dbg !2337
  %mul7 = mul nsw i32 5, %52, !dbg !2338
  %rem8 = srem i32 %mul7, 64, !dbg !2339
  %53 = ptrtoint i32* %s to i64
  call void @__DiscoPoPOpenMPWrite(i64 %53, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1263, i32 0, i32 0))
  store i32 %rem8, i32* %s, align 4, !dbg !2340
  %real = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral, i32 0, i32 0, !dbg !2341
  %real9 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %my_chk, i32 0, i32 0, !dbg !2341
  %54 = ptrtoint double* %real9 to i64
  call void @__DiscoPoPOpenMPRead(i64 %54, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1264, i32 0, i32 0))
  %55 = load double, double* %real9, align 8, !dbg !2341
  %56 = ptrtoint i32* %q to i64
  call void @__DiscoPoPOpenMPRead(i64 %56, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1265, i32 0, i32 0))
  %57 = load i32, i32* %q, align 4, !dbg !2341
  %idxprom = sext i32 %57 to i64, !dbg !2341
  %58 = ptrtoint i32* %r to i64
  call void @__DiscoPoPOpenMPRead(i64 %58, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1266, i32 0, i32 0))
  %59 = load i32, i32* %r, align 4, !dbg !2341
  %idxprom10 = sext i32 %59 to i64, !dbg !2341
  %60 = ptrtoint i32* %s to i64
  call void @__DiscoPoPOpenMPRead(i64 %60, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1267, i32 0, i32 0))
  %61 = load i32, i32* %s, align 4, !dbg !2341
  %idxprom11 = sext i32 %61 to i64, !dbg !2341
  %62 = ptrtoint %struct.dcomplex** %16 to i64
  call void @__DiscoPoPOpenMPRead(i64 %62, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1268, i32 0, i32 0))
  %63 = load %struct.dcomplex*, %struct.dcomplex** %16, align 8, !dbg !2341
  %64 = mul nuw i64 %12, %14, !dbg !2341
  %65 = mul nsw i64 %idxprom11, %64, !dbg !2341
  %arrayidx = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %63, i64 %65, !dbg !2341
  %66 = mul nsw i64 %idxprom10, %14, !dbg !2341
  %arrayidx12 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx, i64 %66, !dbg !2341
  %arrayidx13 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx12, i64 %idxprom, !dbg !2341
  %real14 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx13, i32 0, i32 0, !dbg !2341
  %67 = ptrtoint double* %real14 to i64
  call void @__DiscoPoPOpenMPRead(i64 %67, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1269, i32 0, i32 0))
  %68 = load double, double* %real14, align 8, !dbg !2341
  %add15 = fadd double %55, %68, !dbg !2341
  %69 = ptrtoint double* %real to i64
  call void @__DiscoPoPOpenMPWrite(i64 %69, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1270, i32 0, i32 0))
  store double %add15, double* %real, align 8, !dbg !2341
  %imag = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral, i32 0, i32 1, !dbg !2341
  %imag16 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %my_chk, i32 0, i32 1, !dbg !2341
  %70 = ptrtoint double* %imag16 to i64
  call void @__DiscoPoPOpenMPRead(i64 %70, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1271, i32 0, i32 0))
  %71 = load double, double* %imag16, align 8, !dbg !2341
  %72 = ptrtoint i32* %q to i64
  call void @__DiscoPoPOpenMPRead(i64 %72, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1272, i32 0, i32 0))
  %73 = load i32, i32* %q, align 4, !dbg !2341
  %idxprom17 = sext i32 %73 to i64, !dbg !2341
  %74 = ptrtoint i32* %r to i64
  call void @__DiscoPoPOpenMPRead(i64 %74, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1273, i32 0, i32 0))
  %75 = load i32, i32* %r, align 4, !dbg !2341
  %idxprom18 = sext i32 %75 to i64, !dbg !2341
  %76 = ptrtoint i32* %s to i64
  call void @__DiscoPoPOpenMPRead(i64 %76, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1274, i32 0, i32 0))
  %77 = load i32, i32* %s, align 4, !dbg !2341
  %idxprom19 = sext i32 %77 to i64, !dbg !2341
  %78 = ptrtoint %struct.dcomplex** %16 to i64
  call void @__DiscoPoPOpenMPRead(i64 %78, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1275, i32 0, i32 0))
  %79 = load %struct.dcomplex*, %struct.dcomplex** %16, align 8, !dbg !2341
  %80 = mul nuw i64 %12, %14, !dbg !2341
  %81 = mul nsw i64 %idxprom19, %80, !dbg !2341
  %arrayidx20 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %79, i64 %81, !dbg !2341
  %82 = mul nsw i64 %idxprom18, %14, !dbg !2341
  %arrayidx21 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx20, i64 %82, !dbg !2341
  %arrayidx22 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx21, i64 %idxprom17, !dbg !2341
  %imag23 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx22, i32 0, i32 1, !dbg !2341
  %83 = ptrtoint double* %imag23 to i64
  call void @__DiscoPoPOpenMPRead(i64 %83, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1276, i32 0, i32 0))
  %84 = load double, double* %imag23, align 8, !dbg !2341
  %add24 = fadd double %71, %84, !dbg !2341
  %85 = ptrtoint double* %imag to i64
  call void @__DiscoPoPOpenMPWrite(i64 %85, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1277, i32 0, i32 0))
  store double %add24, double* %imag, align 8, !dbg !2341
  %86 = bitcast %struct.dcomplex* %my_chk to i8*, !dbg !2341
  %87 = bitcast %struct.dcomplex* %.compoundliteral to i8*, !dbg !2341
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %86, i8* %87, i64 16, i32 8, i1 false), !dbg !2341
  br label %omp.body.continue, !dbg !2342

omp.body.continue:                                ; preds = %omp.inner.for.body
  br label %omp.inner.for.inc, !dbg !2343

omp.inner.for.inc:                                ; preds = %omp.body.continue
  %88 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %88, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1278, i32 0, i32 0))
  %89 = load i32, i32* %.omp.iv, align 4, !dbg !2344
  %add25 = add nsw i32 %89, 1, !dbg !2346
  %90 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPWrite(i64 %90, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1279, i32 0, i32 0))
  store i32 %add25, i32* %.omp.iv, align 4, !dbg !2346
  br label %omp.inner.for.cond, !dbg !2348

omp.inner.for.end:                                ; preds = %omp.inner.for.cond
  br label %omp.loop.exit, !dbg !2349

omp.loop.exit:                                    ; preds = %omp.inner.for.end
  %91 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !2350
  %92 = ptrtoint i8** %91 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %92, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1280, i32 0, i32 0))
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @9, i32 0, i32 0), i8** %91, align 8, !dbg !2350
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([132 x i8], [132 x i8]* @.str.1282, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_for_static_fini(%ident_t* %.kmpc_loc.addr, i32 %29), !dbg !2350
  %93 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !2351
  %94 = ptrtoint i8** %93 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %94, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1283, i32 0, i32 0))
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @10, i32 0, i32 0), i8** %93, align 8, !dbg !2351
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([132 x i8], [132 x i8]* @.str.1285, i32 0, i32 0))
  call void @__kmpc_critical(%ident_t* %.kmpc_loc.addr, i32 %29, [8 x i32]* @.gomp_critical_user_.var), !dbg !2351
  %real27 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral26, i32 0, i32 0, !dbg !2352
  %real28 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %18, i32 0, i32 0, !dbg !2352
  %95 = ptrtoint double* %real28 to i64
  call void @__DiscoPoPOpenMPRead(i64 %95, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1286, i32 0, i32 0))
  %96 = load double, double* %real28, align 8, !dbg !2352
  %real29 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %my_chk, i32 0, i32 0, !dbg !2352
  %97 = ptrtoint double* %real29 to i64
  call void @__DiscoPoPOpenMPRead(i64 %97, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1287, i32 0, i32 0))
  %98 = load double, double* %real29, align 8, !dbg !2352
  %add30 = fadd double %96, %98, !dbg !2352
  %99 = ptrtoint double* %real27 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %99, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1288, i32 0, i32 0))
  store double %add30, double* %real27, align 8, !dbg !2352
  %imag31 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral26, i32 0, i32 1, !dbg !2352
  %imag32 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %18, i32 0, i32 1, !dbg !2352
  %100 = ptrtoint double* %imag32 to i64
  call void @__DiscoPoPOpenMPRead(i64 %100, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1289, i32 0, i32 0))
  %101 = load double, double* %imag32, align 8, !dbg !2352
  %imag33 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %my_chk, i32 0, i32 1, !dbg !2352
  %102 = ptrtoint double* %imag33 to i64
  call void @__DiscoPoPOpenMPRead(i64 %102, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1290, i32 0, i32 0))
  %103 = load double, double* %imag33, align 8, !dbg !2352
  %add34 = fadd double %101, %103, !dbg !2352
  %104 = ptrtoint double* %imag31 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %104, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1291, i32 0, i32 0))
  store double %add34, double* %imag31, align 8, !dbg !2352
  %105 = bitcast %struct.dcomplex* %18 to i8*, !dbg !2352
  %106 = bitcast %struct.dcomplex* %.compoundliteral26 to i8*, !dbg !2352
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %105, i8* %106, i64 16, i32 8, i1 false), !dbg !2352
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_end_critical(%ident_t* %.kmpc_loc.addr, i32 %29, [8 x i32]* @.gomp_critical_user_.var), !dbg !2355
  call void @__DiscoPoPOpenMPAfterCall()
  ret void, !dbg !2356
}

declare void @__kmpc_critical(%ident_t*, i32, [8 x i32]*)

declare void @__kmpc_end_critical(%ident_t*, i32, [8 x i32]*)

; Function Attrs: nounwind uwtable
define internal void @verify(i32 %d1, i32 %d2, i32 %d3, i32 %nt, i32* %verified, i8* %Class) #0 !dbg !2357 {
entry:
  %d1.addr = alloca i32, align 4
  %d2.addr = alloca i32, align 4
  %d3.addr = alloca i32, align 4
  %nt.addr = alloca i32, align 4
  %verified.addr = alloca i32*, align 8
  %Class.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %err = alloca double, align 8
  %epsilon = alloca double, align 8
  %csum_ref = alloca [26 x %struct.dcomplex], align 16
  %.compoundliteral = alloca %struct.dcomplex, align 8
  %.compoundliteral7 = alloca %struct.dcomplex, align 8
  %.compoundliteral11 = alloca %struct.dcomplex, align 8
  %.compoundliteral15 = alloca %struct.dcomplex, align 8
  %.compoundliteral19 = alloca %struct.dcomplex, align 8
  %.compoundliteral23 = alloca %struct.dcomplex, align 8
  %.compoundliteral35 = alloca %struct.dcomplex, align 8
  %.compoundliteral39 = alloca %struct.dcomplex, align 8
  %.compoundliteral43 = alloca %struct.dcomplex, align 8
  %.compoundliteral47 = alloca %struct.dcomplex, align 8
  %.compoundliteral51 = alloca %struct.dcomplex, align 8
  %.compoundliteral55 = alloca %struct.dcomplex, align 8
  %.compoundliteral68 = alloca %struct.dcomplex, align 8
  %.compoundliteral72 = alloca %struct.dcomplex, align 8
  %.compoundliteral76 = alloca %struct.dcomplex, align 8
  %.compoundliteral80 = alloca %struct.dcomplex, align 8
  %.compoundliteral84 = alloca %struct.dcomplex, align 8
  %.compoundliteral88 = alloca %struct.dcomplex, align 8
  %.compoundliteral101 = alloca %struct.dcomplex, align 8
  %.compoundliteral105 = alloca %struct.dcomplex, align 8
  %.compoundliteral109 = alloca %struct.dcomplex, align 8
  %.compoundliteral113 = alloca %struct.dcomplex, align 8
  %.compoundliteral117 = alloca %struct.dcomplex, align 8
  %.compoundliteral121 = alloca %struct.dcomplex, align 8
  %.compoundliteral125 = alloca %struct.dcomplex, align 8
  %.compoundliteral129 = alloca %struct.dcomplex, align 8
  %.compoundliteral133 = alloca %struct.dcomplex, align 8
  %.compoundliteral137 = alloca %struct.dcomplex, align 8
  %.compoundliteral141 = alloca %struct.dcomplex, align 8
  %.compoundliteral145 = alloca %struct.dcomplex, align 8
  %.compoundliteral149 = alloca %struct.dcomplex, align 8
  %.compoundliteral153 = alloca %struct.dcomplex, align 8
  %.compoundliteral157 = alloca %struct.dcomplex, align 8
  %.compoundliteral161 = alloca %struct.dcomplex, align 8
  %.compoundliteral165 = alloca %struct.dcomplex, align 8
  %.compoundliteral169 = alloca %struct.dcomplex, align 8
  %.compoundliteral173 = alloca %struct.dcomplex, align 8
  %.compoundliteral177 = alloca %struct.dcomplex, align 8
  %.compoundliteral190 = alloca %struct.dcomplex, align 8
  %.compoundliteral194 = alloca %struct.dcomplex, align 8
  %.compoundliteral198 = alloca %struct.dcomplex, align 8
  %.compoundliteral202 = alloca %struct.dcomplex, align 8
  %.compoundliteral206 = alloca %struct.dcomplex, align 8
  %.compoundliteral210 = alloca %struct.dcomplex, align 8
  %.compoundliteral214 = alloca %struct.dcomplex, align 8
  %.compoundliteral218 = alloca %struct.dcomplex, align 8
  %.compoundliteral222 = alloca %struct.dcomplex, align 8
  %.compoundliteral226 = alloca %struct.dcomplex, align 8
  %.compoundliteral230 = alloca %struct.dcomplex, align 8
  %.compoundliteral234 = alloca %struct.dcomplex, align 8
  %.compoundliteral238 = alloca %struct.dcomplex, align 8
  %.compoundliteral242 = alloca %struct.dcomplex, align 8
  %.compoundliteral246 = alloca %struct.dcomplex, align 8
  %.compoundliteral250 = alloca %struct.dcomplex, align 8
  %.compoundliteral254 = alloca %struct.dcomplex, align 8
  %.compoundliteral258 = alloca %struct.dcomplex, align 8
  %.compoundliteral262 = alloca %struct.dcomplex, align 8
  %.compoundliteral266 = alloca %struct.dcomplex, align 8
  %.compoundliteral279 = alloca %struct.dcomplex, align 8
  %.compoundliteral283 = alloca %struct.dcomplex, align 8
  %.compoundliteral287 = alloca %struct.dcomplex, align 8
  %.compoundliteral291 = alloca %struct.dcomplex, align 8
  %.compoundliteral295 = alloca %struct.dcomplex, align 8
  %.compoundliteral299 = alloca %struct.dcomplex, align 8
  %.compoundliteral303 = alloca %struct.dcomplex, align 8
  %.compoundliteral307 = alloca %struct.dcomplex, align 8
  %.compoundliteral311 = alloca %struct.dcomplex, align 8
  %.compoundliteral315 = alloca %struct.dcomplex, align 8
  %.compoundliteral319 = alloca %struct.dcomplex, align 8
  %.compoundliteral323 = alloca %struct.dcomplex, align 8
  %.compoundliteral327 = alloca %struct.dcomplex, align 8
  %.compoundliteral331 = alloca %struct.dcomplex, align 8
  %.compoundliteral335 = alloca %struct.dcomplex, align 8
  %.compoundliteral339 = alloca %struct.dcomplex, align 8
  %.compoundliteral343 = alloca %struct.dcomplex, align 8
  %.compoundliteral347 = alloca %struct.dcomplex, align 8
  %.compoundliteral351 = alloca %struct.dcomplex, align 8
  %.compoundliteral355 = alloca %struct.dcomplex, align 8
  %.compoundliteral359 = alloca %struct.dcomplex, align 8
  %.compoundliteral363 = alloca %struct.dcomplex, align 8
  %.compoundliteral367 = alloca %struct.dcomplex, align 8
  %.compoundliteral371 = alloca %struct.dcomplex, align 8
  %.compoundliteral375 = alloca %struct.dcomplex, align 8
  %.compoundliteral388 = alloca %struct.dcomplex, align 8
  %.compoundliteral392 = alloca %struct.dcomplex, align 8
  %.compoundliteral396 = alloca %struct.dcomplex, align 8
  %.compoundliteral400 = alloca %struct.dcomplex, align 8
  %.compoundliteral404 = alloca %struct.dcomplex, align 8
  %.compoundliteral408 = alloca %struct.dcomplex, align 8
  %.compoundliteral412 = alloca %struct.dcomplex, align 8
  %.compoundliteral416 = alloca %struct.dcomplex, align 8
  %.compoundliteral420 = alloca %struct.dcomplex, align 8
  %.compoundliteral424 = alloca %struct.dcomplex, align 8
  %.compoundliteral428 = alloca %struct.dcomplex, align 8
  %.compoundliteral432 = alloca %struct.dcomplex, align 8
  %.compoundliteral436 = alloca %struct.dcomplex, align 8
  %.compoundliteral440 = alloca %struct.dcomplex, align 8
  %.compoundliteral444 = alloca %struct.dcomplex, align 8
  %.compoundliteral448 = alloca %struct.dcomplex, align 8
  %.compoundliteral452 = alloca %struct.dcomplex, align 8
  %.compoundliteral456 = alloca %struct.dcomplex, align 8
  %.compoundliteral460 = alloca %struct.dcomplex, align 8
  %.compoundliteral464 = alloca %struct.dcomplex, align 8
  %.compoundliteral468 = alloca %struct.dcomplex, align 8
  %.compoundliteral472 = alloca %struct.dcomplex, align 8
  %.compoundliteral476 = alloca %struct.dcomplex, align 8
  %.compoundliteral480 = alloca %struct.dcomplex, align 8
  %.compoundliteral484 = alloca %struct.dcomplex, align 8
  %.compoundliteral498 = alloca %struct.dcomplex, align 8
  %coerce = alloca %struct.dcomplex, align 8
  %.compoundliteral516 = alloca %struct.dcomplex, align 8
  %coerce536 = alloca %struct.dcomplex, align 8
  %.compoundliteral538 = alloca %struct.dcomplex, align 8
  %coerce558 = alloca %struct.dcomplex, align 8
  %.compoundliteral560 = alloca %struct.dcomplex, align 8
  %coerce580 = alloca %struct.dcomplex, align 8
  %0 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1292, i32 0, i32 0))
  store i32 %d1, i32* %d1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %d1.addr, metadata !2361, metadata !98), !dbg !2362
  %1 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1293, i32 0, i32 0))
  store i32 %d2, i32* %d2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %d2.addr, metadata !2363, metadata !98), !dbg !2364
  %2 = ptrtoint i32* %d3.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1294, i32 0, i32 0))
  store i32 %d3, i32* %d3.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %d3.addr, metadata !2365, metadata !98), !dbg !2366
  %3 = ptrtoint i32* %nt.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1295, i32 0, i32 0))
  store i32 %nt, i32* %nt.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nt.addr, metadata !2367, metadata !98), !dbg !2368
  %4 = ptrtoint i32** %verified.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1296, i32 0, i32 0))
  store i32* %verified, i32** %verified.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %verified.addr, metadata !2369, metadata !98), !dbg !2370
  %5 = ptrtoint i8** %Class.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1297, i32 0, i32 0))
  store i8* %Class, i8** %Class.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %Class.addr, metadata !2371, metadata !98), !dbg !2372
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2373, metadata !98), !dbg !2374
  call void @llvm.dbg.declare(metadata double* %err, metadata !2375, metadata !98), !dbg !2376
  call void @llvm.dbg.declare(metadata double* %epsilon, metadata !2377, metadata !98), !dbg !2378
  call void @llvm.dbg.declare(metadata [26 x %struct.dcomplex]* %csum_ref, metadata !2379, metadata !98), !dbg !2383
  %6 = ptrtoint i8** %Class.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %6, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1298, i32 0, i32 0))
  %7 = load i8*, i8** %Class.addr, align 8, !dbg !2384
  %8 = ptrtoint i8* %7 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %8, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1299, i32 0, i32 0))
  store i8 85, i8* %7, align 1, !dbg !2385
  %9 = ptrtoint double* %epsilon to i64
  call void @__DiscoPoPOpenMPWrite(i64 %9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1300, i32 0, i32 0))
  store double 1.000000e-12, double* %epsilon, align 8, !dbg !2386
  %10 = ptrtoint i32** %verified.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %10, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1301, i32 0, i32 0))
  %11 = load i32*, i32** %verified.addr, align 8, !dbg !2387
  %12 = ptrtoint i32* %11 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %12, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1302, i32 0, i32 0))
  store i32 0, i32* %11, align 4, !dbg !2388
  %13 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %13, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1303, i32 0, i32 0))
  %14 = load i32, i32* %d1.addr, align 4, !dbg !2389
  %cmp = icmp eq i32 %14, 64, !dbg !2391
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !2392

land.lhs.true:                                    ; preds = %entry
  %15 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %15, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1304, i32 0, i32 0))
  %16 = load i32, i32* %d2.addr, align 4, !dbg !2393
  %cmp1 = icmp eq i32 %16, 64, !dbg !2395
  br i1 %cmp1, label %land.lhs.true2, label %if.else, !dbg !2396

land.lhs.true2:                                   ; preds = %land.lhs.true
  %17 = ptrtoint i32* %d3.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %17, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1305, i32 0, i32 0))
  %18 = load i32, i32* %d3.addr, align 4, !dbg !2397
  %cmp3 = icmp eq i32 %18, 64, !dbg !2399
  br i1 %cmp3, label %land.lhs.true4, label %if.else, !dbg !2400

land.lhs.true4:                                   ; preds = %land.lhs.true2
  %19 = ptrtoint i32* %nt.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %19, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1306, i32 0, i32 0))
  %20 = load i32, i32* %nt.addr, align 4, !dbg !2401
  %cmp5 = icmp eq i32 %20, 6, !dbg !2403
  br i1 %cmp5, label %if.then, label %if.else, !dbg !2404

if.then:                                          ; preds = %land.lhs.true4
  %21 = ptrtoint i8** %Class.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %21, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1307, i32 0, i32 0))
  %22 = load i8*, i8** %Class.addr, align 8, !dbg !2405
  %23 = ptrtoint i8* %22 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %23, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1308, i32 0, i32 0))
  store i8 83, i8* %22, align 1, !dbg !2407
  %arrayidx = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 1, !dbg !2408
  %real = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral, i32 0, i32 0, !dbg !2409
  %24 = ptrtoint double* %real to i64
  call void @__DiscoPoPOpenMPWrite(i64 %24, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1309, i32 0, i32 0))
  store double 0x408154DE9E5DA8C7, double* %real, align 8, !dbg !2409
  %imag = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral, i32 0, i32 1, !dbg !2409
  %25 = ptrtoint double* %imag to i64
  call void @__DiscoPoPOpenMPWrite(i64 %25, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1310, i32 0, i32 0))
  store double 0x407E4894D21E84F6, double* %imag, align 8, !dbg !2409
  %26 = bitcast %struct.dcomplex* %arrayidx to i8*, !dbg !2409
  %27 = bitcast %struct.dcomplex* %.compoundliteral to i8*, !dbg !2409
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %26, i8* %27, i64 16, i32 8, i1 false), !dbg !2409
  %arrayidx6 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 2, !dbg !2410
  %real8 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral7, i32 0, i32 0, !dbg !2411
  %28 = ptrtoint double* %real8 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %28, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1311, i32 0, i32 0))
  store double 0x4081551BBB575EAB, double* %real8, align 8, !dbg !2411
  %imag9 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral7, i32 0, i32 1, !dbg !2411
  %29 = ptrtoint double* %imag9 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %29, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1312, i32 0, i32 0))
  store double 0x407E687CA0F87E44, double* %imag9, align 8, !dbg !2411
  %30 = bitcast %struct.dcomplex* %arrayidx6 to i8*, !dbg !2411
  %31 = bitcast %struct.dcomplex* %.compoundliteral7 to i8*, !dbg !2411
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %30, i8* %31, i64 16, i32 8, i1 false), !dbg !2411
  %arrayidx10 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 3, !dbg !2412
  %real12 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral11, i32 0, i32 0, !dbg !2413
  %32 = ptrtoint double* %real12 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %32, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1313, i32 0, i32 0))
  store double 0x408154EB318EB593, double* %real12, align 8, !dbg !2413
  %imag13 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral11, i32 0, i32 1, !dbg !2413
  %33 = ptrtoint double* %imag13 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %33, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1314, i32 0, i32 0))
  store double 0x407E8641D4F55AF9, double* %imag13, align 8, !dbg !2413
  %34 = bitcast %struct.dcomplex* %arrayidx10 to i8*, !dbg !2413
  %35 = bitcast %struct.dcomplex* %.compoundliteral11 to i8*, !dbg !2413
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %34, i8* %35, i64 16, i32 8, i1 false), !dbg !2413
  %arrayidx14 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 4, !dbg !2414
  %real16 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral15, i32 0, i32 0, !dbg !2415
  %36 = ptrtoint double* %real16 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %36, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1315, i32 0, i32 0))
  store double 0x40815456C13A7B04, double* %real16, align 8, !dbg !2415
  %imag17 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral15, i32 0, i32 1, !dbg !2415
  %37 = ptrtoint double* %imag17 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %37, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1316, i32 0, i32 0))
  store double 0x407EA2097D7357C2, double* %imag17, align 8, !dbg !2415
  %38 = bitcast %struct.dcomplex* %arrayidx14 to i8*, !dbg !2415
  %39 = bitcast %struct.dcomplex* %.compoundliteral15 to i8*, !dbg !2415
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %38, i8* %39, i64 16, i32 8, i1 false), !dbg !2415
  %arrayidx18 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 5, !dbg !2416
  %real20 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral19, i32 0, i32 0, !dbg !2417
  %40 = ptrtoint double* %real20 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %40, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1317, i32 0, i32 0))
  store double 0x408153676E9F169C, double* %real20, align 8, !dbg !2417
  %imag21 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral19, i32 0, i32 1, !dbg !2417
  %41 = ptrtoint double* %imag21 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %41, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1318, i32 0, i32 0))
  store double 0x407EBBF61C86EF29, double* %imag21, align 8, !dbg !2417
  %42 = bitcast %struct.dcomplex* %arrayidx18 to i8*, !dbg !2417
  %43 = bitcast %struct.dcomplex* %.compoundliteral19 to i8*, !dbg !2417
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %42, i8* %43, i64 16, i32 8, i1 false), !dbg !2417
  %arrayidx22 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 6, !dbg !2418
  %real24 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral23, i32 0, i32 0, !dbg !2419
  %44 = ptrtoint double* %real24 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %44, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1319, i32 0, i32 0))
  store double 0x408152259010E0A1, double* %real24, align 8, !dbg !2419
  %imag25 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral23, i32 0, i32 1, !dbg !2419
  %45 = ptrtoint double* %imag25 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %45, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1320, i32 0, i32 0))
  store double 0x407ED427D4DF0213, double* %imag25, align 8, !dbg !2419
  %46 = bitcast %struct.dcomplex* %arrayidx22 to i8*, !dbg !2419
  %47 = bitcast %struct.dcomplex* %.compoundliteral23 to i8*, !dbg !2419
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %46, i8* %47, i64 16, i32 8, i1 false), !dbg !2419
  br label %if.end492, !dbg !2420

if.else:                                          ; preds = %land.lhs.true4, %land.lhs.true2, %land.lhs.true, %entry
  %48 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %48, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1321, i32 0, i32 0))
  %49 = load i32, i32* %d1.addr, align 4, !dbg !2421
  %cmp26 = icmp eq i32 %49, 128, !dbg !2424
  br i1 %cmp26, label %land.lhs.true27, label %if.else58, !dbg !2425

land.lhs.true27:                                  ; preds = %if.else
  %50 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %50, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1322, i32 0, i32 0))
  %51 = load i32, i32* %d2.addr, align 4, !dbg !2426
  %cmp28 = icmp eq i32 %51, 128, !dbg !2428
  br i1 %cmp28, label %land.lhs.true29, label %if.else58, !dbg !2429

land.lhs.true29:                                  ; preds = %land.lhs.true27
  %52 = ptrtoint i32* %d3.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %52, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1323, i32 0, i32 0))
  %53 = load i32, i32* %d3.addr, align 4, !dbg !2430
  %cmp30 = icmp eq i32 %53, 32, !dbg !2432
  br i1 %cmp30, label %land.lhs.true31, label %if.else58, !dbg !2433

land.lhs.true31:                                  ; preds = %land.lhs.true29
  %54 = ptrtoint i32* %nt.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %54, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1324, i32 0, i32 0))
  %55 = load i32, i32* %nt.addr, align 4, !dbg !2434
  %cmp32 = icmp eq i32 %55, 6, !dbg !2436
  br i1 %cmp32, label %if.then33, label %if.else58, !dbg !2437

if.then33:                                        ; preds = %land.lhs.true31
  %56 = ptrtoint i8** %Class.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %56, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1325, i32 0, i32 0))
  %57 = load i8*, i8** %Class.addr, align 8, !dbg !2438
  %58 = ptrtoint i8* %57 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %58, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1326, i32 0, i32 0))
  store i8 87, i8* %57, align 1, !dbg !2440
  %arrayidx34 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 1, !dbg !2441
  %real36 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral35, i32 0, i32 0, !dbg !2442
  %59 = ptrtoint double* %real36 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %59, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1327, i32 0, i32 0))
  store double 0x4081BAE3C635196D, double* %real36, align 8, !dbg !2442
  %imag37 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral35, i32 0, i32 1, !dbg !2442
  %60 = ptrtoint double* %imag37 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %60, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1328, i32 0, i32 0))
  store double 0x40808A98F467F156, double* %imag37, align 8, !dbg !2442
  %61 = bitcast %struct.dcomplex* %arrayidx34 to i8*, !dbg !2442
  %62 = bitcast %struct.dcomplex* %.compoundliteral35 to i8*, !dbg !2442
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %61, i8* %62, i64 16, i32 8, i1 false), !dbg !2442
  %arrayidx38 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 2, !dbg !2443
  %real40 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral39, i32 0, i32 0, !dbg !2444
  %63 = ptrtoint double* %real40 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %63, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1329, i32 0, i32 0))
  store double 0x40819926462BA5A4, double* %real40, align 8, !dbg !2444
  %imag41 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral39, i32 0, i32 1, !dbg !2444
  %64 = ptrtoint double* %imag41 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %64, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1330, i32 0, i32 0))
  store double 0x408081B851380EB7, double* %imag41, align 8, !dbg !2444
  %65 = bitcast %struct.dcomplex* %arrayidx38 to i8*, !dbg !2444
  %66 = bitcast %struct.dcomplex* %.compoundliteral39 to i8*, !dbg !2444
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %65, i8* %66, i64 16, i32 8, i1 false), !dbg !2444
  %arrayidx42 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 3, !dbg !2445
  %real44 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral43, i32 0, i32 0, !dbg !2446
  %67 = ptrtoint double* %real44 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %67, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1331, i32 0, i32 0))
  store double 0x40817B3822354DD9, double* %real44, align 8, !dbg !2446
  %imag45 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral43, i32 0, i32 1, !dbg !2446
  %68 = ptrtoint double* %imag45 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %68, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1332, i32 0, i32 0))
  store double 0x408078CC18578DFC, double* %imag45, align 8, !dbg !2446
  %69 = bitcast %struct.dcomplex* %arrayidx42 to i8*, !dbg !2446
  %70 = bitcast %struct.dcomplex* %.compoundliteral43 to i8*, !dbg !2446
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %69, i8* %70, i64 16, i32 8, i1 false), !dbg !2446
  %arrayidx46 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 4, !dbg !2447
  %real48 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral47, i32 0, i32 0, !dbg !2448
  %71 = ptrtoint double* %real48 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %71, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1333, i32 0, i32 0))
  store double 0x4081608EF5C48194, double* %real48, align 8, !dbg !2448
  %imag49 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral47, i32 0, i32 1, !dbg !2448
  %72 = ptrtoint double* %imag49 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %72, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1334, i32 0, i32 0))
  store double 0x40807005B7059038, double* %imag49, align 8, !dbg !2448
  %73 = bitcast %struct.dcomplex* %arrayidx46 to i8*, !dbg !2448
  %74 = bitcast %struct.dcomplex* %.compoundliteral47 to i8*, !dbg !2448
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %73, i8* %74, i64 16, i32 8, i1 false), !dbg !2448
  %arrayidx50 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 5, !dbg !2449
  %real52 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral51, i32 0, i32 0, !dbg !2450
  %75 = ptrtoint double* %real52 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %75, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1335, i32 0, i32 0))
  store double 0x408148B81D084E83, double* %real52, align 8, !dbg !2450
  %imag53 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral51, i32 0, i32 1, !dbg !2450
  %76 = ptrtoint double* %imag53 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %76, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1336, i32 0, i32 0))
  store double 0x408067854B0E36C9, double* %imag53, align 8, !dbg !2450
  %77 = bitcast %struct.dcomplex* %arrayidx50 to i8*, !dbg !2450
  %78 = bitcast %struct.dcomplex* %.compoundliteral51 to i8*, !dbg !2450
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %77, i8* %78, i64 16, i32 8, i1 false), !dbg !2450
  %arrayidx54 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 6, !dbg !2451
  %real56 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral55, i32 0, i32 0, !dbg !2452
  %79 = ptrtoint double* %real56 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %79, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1337, i32 0, i32 0))
  store double 0x40813353E9E3E09A, double* %real56, align 8, !dbg !2452
  %imag57 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral55, i32 0, i32 1, !dbg !2452
  %80 = ptrtoint double* %imag57 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %80, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1338, i32 0, i32 0))
  store double 0x40805F5EAB0F5DA2, double* %imag57, align 8, !dbg !2452
  %81 = bitcast %struct.dcomplex* %arrayidx54 to i8*, !dbg !2452
  %82 = bitcast %struct.dcomplex* %.compoundliteral55 to i8*, !dbg !2452
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %81, i8* %82, i64 16, i32 8, i1 false), !dbg !2452
  br label %if.end491, !dbg !2453

if.else58:                                        ; preds = %land.lhs.true31, %land.lhs.true29, %land.lhs.true27, %if.else
  %83 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %83, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1339, i32 0, i32 0))
  %84 = load i32, i32* %d1.addr, align 4, !dbg !2454
  %cmp59 = icmp eq i32 %84, 256, !dbg !2457
  br i1 %cmp59, label %land.lhs.true60, label %if.else91, !dbg !2458

land.lhs.true60:                                  ; preds = %if.else58
  %85 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %85, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1340, i32 0, i32 0))
  %86 = load i32, i32* %d2.addr, align 4, !dbg !2459
  %cmp61 = icmp eq i32 %86, 256, !dbg !2461
  br i1 %cmp61, label %land.lhs.true62, label %if.else91, !dbg !2462

land.lhs.true62:                                  ; preds = %land.lhs.true60
  %87 = ptrtoint i32* %d3.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %87, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1341, i32 0, i32 0))
  %88 = load i32, i32* %d3.addr, align 4, !dbg !2463
  %cmp63 = icmp eq i32 %88, 128, !dbg !2465
  br i1 %cmp63, label %land.lhs.true64, label %if.else91, !dbg !2466

land.lhs.true64:                                  ; preds = %land.lhs.true62
  %89 = ptrtoint i32* %nt.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %89, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1342, i32 0, i32 0))
  %90 = load i32, i32* %nt.addr, align 4, !dbg !2467
  %cmp65 = icmp eq i32 %90, 6, !dbg !2469
  br i1 %cmp65, label %if.then66, label %if.else91, !dbg !2470

if.then66:                                        ; preds = %land.lhs.true64
  %91 = ptrtoint i8** %Class.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %91, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1343, i32 0, i32 0))
  %92 = load i8*, i8** %Class.addr, align 8, !dbg !2471
  %93 = ptrtoint i8* %92 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %93, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1344, i32 0, i32 0))
  store i8 65, i8* %92, align 1, !dbg !2473
  %arrayidx67 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 1, !dbg !2474
  %real69 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral68, i32 0, i32 0, !dbg !2475
  %94 = ptrtoint double* %real69 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %94, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1345, i32 0, i32 0))
  store double 0x407F8AC6A8CB8B90, double* %real69, align 8, !dbg !2475
  %imag70 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral68, i32 0, i32 1, !dbg !2475
  %95 = ptrtoint double* %imag70 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %95, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1346, i32 0, i32 0))
  store double 0x407FF67A05A82466, double* %imag70, align 8, !dbg !2475
  %96 = bitcast %struct.dcomplex* %arrayidx67 to i8*, !dbg !2475
  %97 = bitcast %struct.dcomplex* %.compoundliteral68 to i8*, !dbg !2475
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %96, i8* %97, i64 16, i32 8, i1 false), !dbg !2475
  %arrayidx71 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 2, !dbg !2476
  %real73 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral72, i32 0, i32 0, !dbg !2477
  %98 = ptrtoint double* %real73 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %98, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1347, i32 0, i32 0))
  store double 0x407F9F0F4941FB3E, double* %real73, align 8, !dbg !2477
  %imag74 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral72, i32 0, i32 1, !dbg !2477
  %99 = ptrtoint double* %imag74 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %99, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1348, i32 0, i32 0))
  store double 0x407FDE18707A9D72, double* %imag74, align 8, !dbg !2477
  %100 = bitcast %struct.dcomplex* %arrayidx71 to i8*, !dbg !2477
  %101 = bitcast %struct.dcomplex* %.compoundliteral72 to i8*, !dbg !2477
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %100, i8* %101, i64 16, i32 8, i1 false), !dbg !2477
  %arrayidx75 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 3, !dbg !2478
  %real77 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral76, i32 0, i32 0, !dbg !2479
  %102 = ptrtoint double* %real77 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %102, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1349, i32 0, i32 0))
  store double 0x407FAF00C6D7110A, double* %real77, align 8, !dbg !2479
  %imag78 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral76, i32 0, i32 1, !dbg !2479
  %103 = ptrtoint double* %imag78 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %103, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1350, i32 0, i32 0))
  store double 0x407FDD07CCB88353, double* %imag78, align 8, !dbg !2479
  %104 = bitcast %struct.dcomplex* %arrayidx75 to i8*, !dbg !2479
  %105 = bitcast %struct.dcomplex* %.compoundliteral76 to i8*, !dbg !2479
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %104, i8* %105, i64 16, i32 8, i1 false), !dbg !2479
  %arrayidx79 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 4, !dbg !2480
  %real81 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral80, i32 0, i32 0, !dbg !2481
  %106 = ptrtoint double* %real81 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %106, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1351, i32 0, i32 0))
  store double 0x407FBCA0EB3ECBEF, double* %real81, align 8, !dbg !2481
  %imag82 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral80, i32 0, i32 1, !dbg !2481
  %107 = ptrtoint double* %imag82 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %107, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1352, i32 0, i32 0))
  store double 0x407FE2234776F4EF, double* %imag82, align 8, !dbg !2481
  %108 = bitcast %struct.dcomplex* %arrayidx79 to i8*, !dbg !2481
  %109 = bitcast %struct.dcomplex* %.compoundliteral80 to i8*, !dbg !2481
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %108, i8* %109, i64 16, i32 8, i1 false), !dbg !2481
  %arrayidx83 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 5, !dbg !2482
  %real85 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral84, i32 0, i32 0, !dbg !2483
  %110 = ptrtoint double* %real85 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %110, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1353, i32 0, i32 0))
  store double 0x407FC85F79D2C1E9, double* %real85, align 8, !dbg !2483
  %imag86 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral84, i32 0, i32 1, !dbg !2483
  %111 = ptrtoint double* %imag86 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %111, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1354, i32 0, i32 0))
  store double 0x407FE7DD0AF2CEF4, double* %imag86, align 8, !dbg !2483
  %112 = bitcast %struct.dcomplex* %arrayidx83 to i8*, !dbg !2483
  %113 = bitcast %struct.dcomplex* %.compoundliteral84 to i8*, !dbg !2483
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %112, i8* %113, i64 16, i32 8, i1 false), !dbg !2483
  %arrayidx87 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 6, !dbg !2484
  %real89 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral88, i32 0, i32 0, !dbg !2485
  %114 = ptrtoint double* %real89 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %114, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1355, i32 0, i32 0))
  store double 0x407FD2611DBB8FA9, double* %real89, align 8, !dbg !2485
  %imag90 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral88, i32 0, i32 1, !dbg !2485
  %115 = ptrtoint double* %imag90 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %115, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1356, i32 0, i32 0))
  store double 0x407FECAB25FE5602, double* %imag90, align 8, !dbg !2485
  %116 = bitcast %struct.dcomplex* %arrayidx87 to i8*, !dbg !2485
  %117 = bitcast %struct.dcomplex* %.compoundliteral88 to i8*, !dbg !2485
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %116, i8* %117, i64 16, i32 8, i1 false), !dbg !2485
  br label %if.end490, !dbg !2486

if.else91:                                        ; preds = %land.lhs.true64, %land.lhs.true62, %land.lhs.true60, %if.else58
  %118 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %118, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1357, i32 0, i32 0))
  %119 = load i32, i32* %d1.addr, align 4, !dbg !2487
  %cmp92 = icmp eq i32 %119, 512, !dbg !2490
  br i1 %cmp92, label %land.lhs.true93, label %if.else180, !dbg !2491

land.lhs.true93:                                  ; preds = %if.else91
  %120 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %120, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1358, i32 0, i32 0))
  %121 = load i32, i32* %d2.addr, align 4, !dbg !2492
  %cmp94 = icmp eq i32 %121, 256, !dbg !2494
  br i1 %cmp94, label %land.lhs.true95, label %if.else180, !dbg !2495

land.lhs.true95:                                  ; preds = %land.lhs.true93
  %122 = ptrtoint i32* %d3.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %122, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1359, i32 0, i32 0))
  %123 = load i32, i32* %d3.addr, align 4, !dbg !2496
  %cmp96 = icmp eq i32 %123, 256, !dbg !2498
  br i1 %cmp96, label %land.lhs.true97, label %if.else180, !dbg !2499

land.lhs.true97:                                  ; preds = %land.lhs.true95
  %124 = ptrtoint i32* %nt.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %124, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1360, i32 0, i32 0))
  %125 = load i32, i32* %nt.addr, align 4, !dbg !2500
  %cmp98 = icmp eq i32 %125, 20, !dbg !2502
  br i1 %cmp98, label %if.then99, label %if.else180, !dbg !2503

if.then99:                                        ; preds = %land.lhs.true97
  %126 = ptrtoint i8** %Class.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %126, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1361, i32 0, i32 0))
  %127 = load i8*, i8** %Class.addr, align 8, !dbg !2504
  %128 = ptrtoint i8* %127 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %128, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1362, i32 0, i32 0))
  store i8 66, i8* %127, align 1, !dbg !2506
  %arrayidx100 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 1, !dbg !2507
  %real102 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral101, i32 0, i32 0, !dbg !2508
  %129 = ptrtoint double* %real102 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %129, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1363, i32 0, i32 0))
  store double 0x40802E1D67491D27, double* %real102, align 8, !dbg !2508
  %imag103 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral101, i32 0, i32 1, !dbg !2508
  %130 = ptrtoint double* %imag103 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %130, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1364, i32 0, i32 0))
  store double 0x407FBC7C4BF0AFB0, double* %imag103, align 8, !dbg !2508
  %131 = bitcast %struct.dcomplex* %arrayidx100 to i8*, !dbg !2508
  %132 = bitcast %struct.dcomplex* %.compoundliteral101 to i8*, !dbg !2508
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %131, i8* %132, i64 16, i32 8, i1 false), !dbg !2508
  %arrayidx104 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 2, !dbg !2509
  %real106 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral105, i32 0, i32 0, !dbg !2510
  %133 = ptrtoint double* %real106 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %133, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1365, i32 0, i32 0))
  store double 0x40801B9DF5E01838, double* %real106, align 8, !dbg !2510
  %imag107 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral105, i32 0, i32 1, !dbg !2510
  %134 = ptrtoint double* %imag107 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %134, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1366, i32 0, i32 0))
  store double 0x407FCD32F7994D45, double* %imag107, align 8, !dbg !2510
  %135 = bitcast %struct.dcomplex* %arrayidx104 to i8*, !dbg !2510
  %136 = bitcast %struct.dcomplex* %.compoundliteral105 to i8*, !dbg !2510
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %135, i8* %136, i64 16, i32 8, i1 false), !dbg !2510
  %arrayidx108 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 3, !dbg !2511
  %real110 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral109, i32 0, i32 0, !dbg !2512
  %137 = ptrtoint double* %real110 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %137, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1367, i32 0, i32 0))
  store double 0x408015209C2AC008, double* %real110, align 8, !dbg !2512
  %imag111 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral109, i32 0, i32 1, !dbg !2512
  %138 = ptrtoint double* %imag111 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %138, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1368, i32 0, i32 0))
  store double 0x407FD9EF2BAE169A, double* %imag111, align 8, !dbg !2512
  %139 = bitcast %struct.dcomplex* %arrayidx108 to i8*, !dbg !2512
  %140 = bitcast %struct.dcomplex* %.compoundliteral109 to i8*, !dbg !2512
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %139, i8* %140, i64 16, i32 8, i1 false), !dbg !2512
  %arrayidx112 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 4, !dbg !2513
  %real114 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral113, i32 0, i32 0, !dbg !2514
  %141 = ptrtoint double* %real114 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %141, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1369, i32 0, i32 0))
  store double 0x408011E72B556FFE, double* %real114, align 8, !dbg !2514
  %imag115 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral113, i32 0, i32 1, !dbg !2514
  %142 = ptrtoint double* %imag115 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %142, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1370, i32 0, i32 0))
  store double 0x407FE1A32DF83794, double* %imag115, align 8, !dbg !2514
  %143 = bitcast %struct.dcomplex* %arrayidx112 to i8*, !dbg !2514
  %144 = bitcast %struct.dcomplex* %.compoundliteral113 to i8*, !dbg !2514
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %143, i8* %144, i64 16, i32 8, i1 false), !dbg !2514
  %arrayidx116 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 5, !dbg !2515
  %real118 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral117, i32 0, i32 0, !dbg !2516
  %145 = ptrtoint double* %real118 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %145, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1371, i32 0, i32 0))
  store double 0x40800FB38AA32FE6, double* %real118, align 8, !dbg !2516
  %imag119 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral117, i32 0, i32 1, !dbg !2516
  %146 = ptrtoint double* %imag119 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %146, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1372, i32 0, i32 0))
  store double 0x407FE65CD1D86E4E, double* %imag119, align 8, !dbg !2516
  %147 = bitcast %struct.dcomplex* %arrayidx116 to i8*, !dbg !2516
  %148 = bitcast %struct.dcomplex* %.compoundliteral117 to i8*, !dbg !2516
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %147, i8* %148, i64 16, i32 8, i1 false), !dbg !2516
  %arrayidx120 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 6, !dbg !2517
  %real122 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral121, i32 0, i32 0, !dbg !2518
  %149 = ptrtoint double* %real122 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %149, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1373, i32 0, i32 0))
  store double 0x40800DF0531A9C48, double* %real122, align 8, !dbg !2518
  %imag123 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral121, i32 0, i32 1, !dbg !2518
  %150 = ptrtoint double* %imag123 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %150, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1374, i32 0, i32 0))
  store double 0x407FE9844F14C8E1, double* %imag123, align 8, !dbg !2518
  %151 = bitcast %struct.dcomplex* %arrayidx120 to i8*, !dbg !2518
  %152 = bitcast %struct.dcomplex* %.compoundliteral121 to i8*, !dbg !2518
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %151, i8* %152, i64 16, i32 8, i1 false), !dbg !2518
  %arrayidx124 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 7, !dbg !2519
  %real126 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral125, i32 0, i32 0, !dbg !2520
  %153 = ptrtoint double* %real126 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %153, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1375, i32 0, i32 0))
  store double 0x40800C700989200D, double* %real126, align 8, !dbg !2520
  %imag127 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral125, i32 0, i32 1, !dbg !2520
  %154 = ptrtoint double* %imag127 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %154, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1376, i32 0, i32 0))
  store double 0x407FEBD8BF0DD370, double* %imag127, align 8, !dbg !2520
  %155 = bitcast %struct.dcomplex* %arrayidx124 to i8*, !dbg !2520
  %156 = bitcast %struct.dcomplex* %.compoundliteral125 to i8*, !dbg !2520
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %155, i8* %156, i64 16, i32 8, i1 false), !dbg !2520
  %arrayidx128 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 8, !dbg !2521
  %real130 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral129, i32 0, i32 0, !dbg !2522
  %157 = ptrtoint double* %real130 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %157, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1377, i32 0, i32 0))
  store double 0x40800B20F5210ADA, double* %real130, align 8, !dbg !2522
  %imag131 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral129, i32 0, i32 1, !dbg !2522
  %158 = ptrtoint double* %imag131 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %158, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1378, i32 0, i32 0))
  store double 0x407FEDB8F6EE292B, double* %imag131, align 8, !dbg !2522
  %159 = bitcast %struct.dcomplex* %arrayidx128 to i8*, !dbg !2522
  %160 = bitcast %struct.dcomplex* %.compoundliteral129 to i8*, !dbg !2522
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %159, i8* %160, i64 16, i32 8, i1 false), !dbg !2522
  %arrayidx132 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 9, !dbg !2523
  %real134 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral133, i32 0, i32 0, !dbg !2524
  %161 = ptrtoint double* %real134 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %161, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1379, i32 0, i32 0))
  store double 0x408009FA001E667B, double* %real134, align 8, !dbg !2524
  %imag135 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral133, i32 0, i32 1, !dbg !2524
  %162 = ptrtoint double* %imag135 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %162, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1380, i32 0, i32 0))
  store double 0x407FEF52DA70C18D, double* %imag135, align 8, !dbg !2524
  %163 = bitcast %struct.dcomplex* %arrayidx132 to i8*, !dbg !2524
  %164 = bitcast %struct.dcomplex* %.compoundliteral133 to i8*, !dbg !2524
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %163, i8* %164, i64 16, i32 8, i1 false), !dbg !2524
  %arrayidx136 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 10, !dbg !2525
  %real138 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral137, i32 0, i32 0, !dbg !2526
  %165 = ptrtoint double* %real138 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %165, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1381, i32 0, i32 0))
  store double 0x408008F54B8BB893, double* %real138, align 8, !dbg !2526
  %imag139 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral137, i32 0, i32 1, !dbg !2526
  %166 = ptrtoint double* %imag139 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %166, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1382, i32 0, i32 0))
  store double 0x407FF0BC8A6C6119, double* %imag139, align 8, !dbg !2526
  %167 = bitcast %struct.dcomplex* %arrayidx136 to i8*, !dbg !2526
  %168 = bitcast %struct.dcomplex* %.compoundliteral137 to i8*, !dbg !2526
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %167, i8* %168, i64 16, i32 8, i1 false), !dbg !2526
  %arrayidx140 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 11, !dbg !2527
  %real142 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral141, i32 0, i32 0, !dbg !2528
  %169 = ptrtoint double* %real142 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %169, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1383, i32 0, i32 0))
  store double 0x4080080E66C1709C, double* %real142, align 8, !dbg !2528
  %imag143 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral141, i32 0, i32 1, !dbg !2528
  %170 = ptrtoint double* %imag143 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %170, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1384, i32 0, i32 0))
  store double 0x407FF200FF33D23F, double* %imag143, align 8, !dbg !2528
  %171 = bitcast %struct.dcomplex* %arrayidx140 to i8*, !dbg !2528
  %172 = bitcast %struct.dcomplex* %.compoundliteral141 to i8*, !dbg !2528
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %172, i64 16, i32 8, i1 false), !dbg !2528
  %arrayidx144 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 12, !dbg !2529
  %real146 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral145, i32 0, i32 0, !dbg !2530
  %173 = ptrtoint double* %real146 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %173, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1385, i32 0, i32 0))
  store double 0x40800741A55F37AD, double* %real146, align 8, !dbg !2530
  %imag147 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral145, i32 0, i32 1, !dbg !2530
  %174 = ptrtoint double* %imag147 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %174, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1386, i32 0, i32 0))
  store double 0x407FF3261FE7F7AD, double* %imag147, align 8, !dbg !2530
  %175 = bitcast %struct.dcomplex* %arrayidx144 to i8*, !dbg !2530
  %176 = bitcast %struct.dcomplex* %.compoundliteral145 to i8*, !dbg !2530
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %175, i8* %176, i64 16, i32 8, i1 false), !dbg !2530
  %arrayidx148 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 13, !dbg !2531
  %real150 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral149, i32 0, i32 0, !dbg !2532
  %177 = ptrtoint double* %real150 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %177, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1387, i32 0, i32 0))
  store double 0x4080068BDAC33674, double* %real150, align 8, !dbg !2532
  %imag151 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral149, i32 0, i32 1, !dbg !2532
  %178 = ptrtoint double* %imag151 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %178, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1388, i32 0, i32 0))
  store double 0x407FF42F9BEB8DC0, double* %imag151, align 8, !dbg !2532
  %179 = bitcast %struct.dcomplex* %arrayidx148 to i8*, !dbg !2532
  %180 = bitcast %struct.dcomplex* %.compoundliteral149 to i8*, !dbg !2532
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %179, i8* %180, i64 16, i32 8, i1 false), !dbg !2532
  %arrayidx152 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 14, !dbg !2533
  %real154 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral153, i32 0, i32 0, !dbg !2534
  %181 = ptrtoint double* %real154 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %181, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1389, i32 0, i32 0))
  store double 0x408005EA3C919C43, double* %real154, align 8, !dbg !2534
  %imag155 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral153, i32 0, i32 1, !dbg !2534
  %182 = ptrtoint double* %imag155 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %182, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1390, i32 0, i32 0))
  store double 0x407FF5203263B154, double* %imag155, align 8, !dbg !2534
  %183 = bitcast %struct.dcomplex* %arrayidx152 to i8*, !dbg !2534
  %184 = bitcast %struct.dcomplex* %.compoundliteral153 to i8*, !dbg !2534
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %183, i8* %184, i64 16, i32 8, i1 false), !dbg !2534
  %arrayidx156 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 15, !dbg !2535
  %real158 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral157, i32 0, i32 0, !dbg !2536
  %185 = ptrtoint double* %real158 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %185, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1391, i32 0, i32 0))
  store double 0x4080055A545A3920, double* %real158, align 8, !dbg !2536
  %imag159 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral157, i32 0, i32 1, !dbg !2536
  %186 = ptrtoint double* %imag159 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %186, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1392, i32 0, i32 0))
  store double 0x407FF5FA3C741F6E, double* %imag159, align 8, !dbg !2536
  %187 = bitcast %struct.dcomplex* %arrayidx156 to i8*, !dbg !2536
  %188 = bitcast %struct.dcomplex* %.compoundliteral157 to i8*, !dbg !2536
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %187, i8* %188, i64 16, i32 8, i1 false), !dbg !2536
  %arrayidx160 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 16, !dbg !2537
  %real162 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral161, i32 0, i32 0, !dbg !2538
  %189 = ptrtoint double* %real162 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %189, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1393, i32 0, i32 0))
  store double 0x408004D9F6B6B8E1, double* %real162, align 8, !dbg !2538
  %imag163 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral161, i32 0, i32 1, !dbg !2538
  %190 = ptrtoint double* %imag163 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %190, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1394, i32 0, i32 0))
  store double 0x407FF6BFE1A61501, double* %imag163, align 8, !dbg !2538
  %191 = bitcast %struct.dcomplex* %arrayidx160 to i8*, !dbg !2538
  %192 = bitcast %struct.dcomplex* %.compoundliteral161 to i8*, !dbg !2538
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %191, i8* %192, i64 16, i32 8, i1 false), !dbg !2538
  %arrayidx164 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 17, !dbg !2539
  %real166 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral165, i32 0, i32 0, !dbg !2540
  %193 = ptrtoint double* %real166 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %193, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1395, i32 0, i32 0))
  store double 0x408004673C213244, double* %real166, align 8, !dbg !2540
  %imag167 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral165, i32 0, i32 1, !dbg !2540
  %194 = ptrtoint double* %imag167 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %194, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1396, i32 0, i32 0))
  store double 0x407FF77327A3F7B0, double* %imag167, align 8, !dbg !2540
  %195 = bitcast %struct.dcomplex* %arrayidx164 to i8*, !dbg !2540
  %196 = bitcast %struct.dcomplex* %.compoundliteral165 to i8*, !dbg !2540
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %195, i8* %196, i64 16, i32 8, i1 false), !dbg !2540
  %arrayidx168 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 18, !dbg !2541
  %real170 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral169, i32 0, i32 0, !dbg !2542
  %197 = ptrtoint double* %real170 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %197, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1397, i32 0, i32 0))
  store double 0x408004007A3FD0EA, double* %real170, align 8, !dbg !2542
  %imag171 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral169, i32 0, i32 1, !dbg !2542
  %198 = ptrtoint double* %imag171 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %198, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1398, i32 0, i32 0))
  store double 0x407FF815F3F1C1DE, double* %imag171, align 8, !dbg !2542
  %199 = bitcast %struct.dcomplex* %arrayidx168 to i8*, !dbg !2542
  %200 = bitcast %struct.dcomplex* %.compoundliteral169 to i8*, !dbg !2542
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %199, i8* %200, i64 16, i32 8, i1 false), !dbg !2542
  %arrayidx172 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 19, !dbg !2543
  %real174 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral173, i32 0, i32 0, !dbg !2544
  %201 = ptrtoint double* %real174 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %201, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1399, i32 0, i32 0))
  store double 0x408003A43D5F793B, double* %real174, align 8, !dbg !2544
  %imag175 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral173, i32 0, i32 1, !dbg !2544
  %202 = ptrtoint double* %imag175 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %202, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1400, i32 0, i32 0))
  store double 0x407FF8AA099402A0, double* %imag175, align 8, !dbg !2544
  %203 = bitcast %struct.dcomplex* %arrayidx172 to i8*, !dbg !2544
  %204 = bitcast %struct.dcomplex* %.compoundliteral173 to i8*, !dbg !2544
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %203, i8* %204, i64 16, i32 8, i1 false), !dbg !2544
  %arrayidx176 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 20, !dbg !2545
  %real178 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral177, i32 0, i32 0, !dbg !2546
  %205 = ptrtoint double* %real178 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %205, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1401, i32 0, i32 0))
  store double 0x40800351422D2EDF, double* %real178, align 8, !dbg !2546
  %imag179 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral177, i32 0, i32 1, !dbg !2546
  %206 = ptrtoint double* %imag179 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %206, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1402, i32 0, i32 0))
  store double 0x407FF93106A352EE, double* %imag179, align 8, !dbg !2546
  %207 = bitcast %struct.dcomplex* %arrayidx176 to i8*, !dbg !2546
  %208 = bitcast %struct.dcomplex* %.compoundliteral177 to i8*, !dbg !2546
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %207, i8* %208, i64 16, i32 8, i1 false), !dbg !2546
  br label %if.end489, !dbg !2547

if.else180:                                       ; preds = %land.lhs.true97, %land.lhs.true95, %land.lhs.true93, %if.else91
  %209 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %209, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1403, i32 0, i32 0))
  %210 = load i32, i32* %d1.addr, align 4, !dbg !2548
  %cmp181 = icmp eq i32 %210, 512, !dbg !2551
  br i1 %cmp181, label %land.lhs.true182, label %if.else269, !dbg !2552

land.lhs.true182:                                 ; preds = %if.else180
  %211 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %211, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1404, i32 0, i32 0))
  %212 = load i32, i32* %d2.addr, align 4, !dbg !2553
  %cmp183 = icmp eq i32 %212, 512, !dbg !2555
  br i1 %cmp183, label %land.lhs.true184, label %if.else269, !dbg !2556

land.lhs.true184:                                 ; preds = %land.lhs.true182
  %213 = ptrtoint i32* %d3.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %213, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1405, i32 0, i32 0))
  %214 = load i32, i32* %d3.addr, align 4, !dbg !2557
  %cmp185 = icmp eq i32 %214, 512, !dbg !2559
  br i1 %cmp185, label %land.lhs.true186, label %if.else269, !dbg !2560

land.lhs.true186:                                 ; preds = %land.lhs.true184
  %215 = ptrtoint i32* %nt.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %215, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1406, i32 0, i32 0))
  %216 = load i32, i32* %nt.addr, align 4, !dbg !2561
  %cmp187 = icmp eq i32 %216, 20, !dbg !2563
  br i1 %cmp187, label %if.then188, label %if.else269, !dbg !2564

if.then188:                                       ; preds = %land.lhs.true186
  %217 = ptrtoint i8** %Class.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %217, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1407, i32 0, i32 0))
  %218 = load i8*, i8** %Class.addr, align 8, !dbg !2565
  %219 = ptrtoint i8* %218 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %219, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1408, i32 0, i32 0))
  store i8 67, i8* %218, align 1, !dbg !2567
  %arrayidx189 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 1, !dbg !2568
  %real191 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral190, i32 0, i32 0, !dbg !2569
  %220 = ptrtoint double* %real191 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %220, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1409, i32 0, i32 0))
  store double 0x40803C101E899B03, double* %real191, align 8, !dbg !2569
  %imag192 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral190, i32 0, i32 1, !dbg !2569
  %221 = ptrtoint double* %imag192 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %221, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1410, i32 0, i32 0))
  store double 0x408017373C01E593, double* %imag192, align 8, !dbg !2569
  %222 = bitcast %struct.dcomplex* %arrayidx189 to i8*, !dbg !2569
  %223 = bitcast %struct.dcomplex* %.compoundliteral190 to i8*, !dbg !2569
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %222, i8* %223, i64 16, i32 8, i1 false), !dbg !2569
  %arrayidx193 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 2, !dbg !2570
  %real195 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral194, i32 0, i32 0, !dbg !2571
  %224 = ptrtoint double* %real195 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %224, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1411, i32 0, i32 0))
  store double 0x40801C5675ED0B14, double* %real195, align 8, !dbg !2571
  %imag196 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral194, i32 0, i32 1, !dbg !2571
  %225 = ptrtoint double* %imag196 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %225, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1412, i32 0, i32 0))
  store double 0x4080061004096FAD, double* %imag196, align 8, !dbg !2571
  %226 = bitcast %struct.dcomplex* %arrayidx193 to i8*, !dbg !2571
  %227 = bitcast %struct.dcomplex* %.compoundliteral194 to i8*, !dbg !2571
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %226, i8* %227, i64 16, i32 8, i1 false), !dbg !2571
  %arrayidx197 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 3, !dbg !2572
  %real199 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral198, i32 0, i32 0, !dbg !2573
  %228 = ptrtoint double* %real199 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %228, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1413, i32 0, i32 0))
  store double 0x408013BE0F176AC3, double* %real199, align 8, !dbg !2573
  %imag200 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral198, i32 0, i32 1, !dbg !2573
  %229 = ptrtoint double* %imag200 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %229, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1414, i32 0, i32 0))
  store double 0x408001CD2DA9B691, double* %imag200, align 8, !dbg !2573
  %230 = bitcast %struct.dcomplex* %arrayidx197 to i8*, !dbg !2573
  %231 = bitcast %struct.dcomplex* %.compoundliteral198 to i8*, !dbg !2573
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %230, i8* %231, i64 16, i32 8, i1 false), !dbg !2573
  %arrayidx201 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 4, !dbg !2574
  %real203 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral202, i32 0, i32 0, !dbg !2575
  %232 = ptrtoint double* %real203 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %232, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1415, i32 0, i32 0))
  store double 0x4080101ED77ADAFA, double* %real203, align 8, !dbg !2575
  %imag204 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral202, i32 0, i32 1, !dbg !2575
  %233 = ptrtoint double* %imag204 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %233, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1416, i32 0, i32 0))
  store double 0x408000DF4A8B7C66, double* %imag204, align 8, !dbg !2575
  %234 = bitcast %struct.dcomplex* %arrayidx201 to i8*, !dbg !2575
  %235 = bitcast %struct.dcomplex* %.compoundliteral202 to i8*, !dbg !2575
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %234, i8* %235, i64 16, i32 8, i1 false), !dbg !2575
  %arrayidx205 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 5, !dbg !2576
  %real207 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral206, i32 0, i32 0, !dbg !2577
  %236 = ptrtoint double* %real207 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %236, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1417, i32 0, i32 0))
  store double 0x40800E0A53D12FD5, double* %real207, align 8, !dbg !2577
  %imag208 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral206, i32 0, i32 1, !dbg !2577
  %237 = ptrtoint double* %imag208 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %237, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1418, i32 0, i32 0))
  store double 0x408000EA3A1348C8, double* %imag208, align 8, !dbg !2577
  %238 = bitcast %struct.dcomplex* %arrayidx205 to i8*, !dbg !2577
  %239 = bitcast %struct.dcomplex* %.compoundliteral206 to i8*, !dbg !2577
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %238, i8* %239, i64 16, i32 8, i1 false), !dbg !2577
  %arrayidx209 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 6, !dbg !2578
  %real211 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral210, i32 0, i32 0, !dbg !2579
  %240 = ptrtoint double* %real211 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %240, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1419, i32 0, i32 0))
  store double 0x40800CA61ABB2192, double* %real211, align 8, !dbg !2579
  %imag212 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral210, i32 0, i32 1, !dbg !2579
  %241 = ptrtoint double* %imag212 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %241, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1420, i32 0, i32 0))
  store double 0x408001328991F77F, double* %imag212, align 8, !dbg !2579
  %242 = bitcast %struct.dcomplex* %arrayidx209 to i8*, !dbg !2579
  %243 = bitcast %struct.dcomplex* %.compoundliteral210 to i8*, !dbg !2579
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %242, i8* %243, i64 16, i32 8, i1 false), !dbg !2579
  %arrayidx213 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 7, !dbg !2580
  %real215 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral214, i32 0, i32 0, !dbg !2581
  %244 = ptrtoint double* %real215 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %244, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1421, i32 0, i32 0))
  store double 0x40800BA7CD2DCE4D, double* %real215, align 8, !dbg !2581
  %imag216 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral214, i32 0, i32 1, !dbg !2581
  %245 = ptrtoint double* %imag216 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %245, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1422, i32 0, i32 0))
  store double 0x4080017F2A30930B, double* %imag216, align 8, !dbg !2581
  %246 = bitcast %struct.dcomplex* %arrayidx213 to i8*, !dbg !2581
  %247 = bitcast %struct.dcomplex* %.compoundliteral214 to i8*, !dbg !2581
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %246, i8* %247, i64 16, i32 8, i1 false), !dbg !2581
  %arrayidx217 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 8, !dbg !2582
  %real219 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral218, i32 0, i32 0, !dbg !2583
  %248 = ptrtoint double* %real219 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %248, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1423, i32 0, i32 0))
  store double 0x40800AEBECB397D4, double* %real219, align 8, !dbg !2583
  %imag220 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral218, i32 0, i32 1, !dbg !2583
  %249 = ptrtoint double* %imag220 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %249, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1424, i32 0, i32 0))
  store double 0x408001C12D7B83F2, double* %imag220, align 8, !dbg !2583
  %250 = bitcast %struct.dcomplex* %arrayidx217 to i8*, !dbg !2583
  %251 = bitcast %struct.dcomplex* %.compoundliteral218 to i8*, !dbg !2583
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %250, i8* %251, i64 16, i32 8, i1 false), !dbg !2583
  %arrayidx221 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 9, !dbg !2584
  %real223 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral222, i32 0, i32 0, !dbg !2585
  %252 = ptrtoint double* %real223 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %252, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1425, i32 0, i32 0))
  store double 0x40800A5D393668AE, double* %real223, align 8, !dbg !2585
  %imag224 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral222, i32 0, i32 1, !dbg !2585
  %253 = ptrtoint double* %imag224 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %253, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1426, i32 0, i32 0))
  store double 0x408001F6BADA1C71, double* %imag224, align 8, !dbg !2585
  %254 = bitcast %struct.dcomplex* %arrayidx221 to i8*, !dbg !2585
  %255 = bitcast %struct.dcomplex* %.compoundliteral222 to i8*, !dbg !2585
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %254, i8* %255, i64 16, i32 8, i1 false), !dbg !2585
  %arrayidx225 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 10, !dbg !2586
  %real227 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral226, i32 0, i32 0, !dbg !2587
  %256 = ptrtoint double* %real227 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %256, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1427, i32 0, i32 0))
  store double 0x408009EDAA24021D, double* %real227, align 8, !dbg !2587
  %imag228 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral226, i32 0, i32 1, !dbg !2587
  %257 = ptrtoint double* %imag228 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %257, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1428, i32 0, i32 0))
  store double 0x4080022183F3CA50, double* %imag228, align 8, !dbg !2587
  %258 = bitcast %struct.dcomplex* %arrayidx225 to i8*, !dbg !2587
  %259 = bitcast %struct.dcomplex* %.compoundliteral226 to i8*, !dbg !2587
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %258, i8* %259, i64 16, i32 8, i1 false), !dbg !2587
  %arrayidx229 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 11, !dbg !2588
  %real231 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral230, i32 0, i32 0, !dbg !2589
  %260 = ptrtoint double* %real231 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %260, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1429, i32 0, i32 0))
  store double 0x40800993B097C5AC, double* %real231, align 8, !dbg !2589
  %imag232 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral230, i32 0, i32 1, !dbg !2589
  %261 = ptrtoint double* %imag232 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %261, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1430, i32 0, i32 0))
  store double 0x40800243C3A1DCB2, double* %imag232, align 8, !dbg !2589
  %262 = bitcast %struct.dcomplex* %arrayidx229 to i8*, !dbg !2589
  %263 = bitcast %struct.dcomplex* %.compoundliteral230 to i8*, !dbg !2589
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %262, i8* %263, i64 16, i32 8, i1 false), !dbg !2589
  %arrayidx233 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 12, !dbg !2590
  %real235 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral234, i32 0, i32 0, !dbg !2591
  %264 = ptrtoint double* %real235 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %264, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1431, i32 0, i32 0))
  store double 0x40800948BF026ADC, double* %real235, align 8, !dbg !2591
  %imag236 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral234, i32 0, i32 1, !dbg !2591
  %265 = ptrtoint double* %imag236 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %265, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1432, i32 0, i32 0))
  store double 0x4080025F68FD8268, double* %imag236, align 8, !dbg !2591
  %266 = bitcast %struct.dcomplex* %arrayidx233 to i8*, !dbg !2591
  %267 = bitcast %struct.dcomplex* %.compoundliteral234 to i8*, !dbg !2591
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %266, i8* %267, i64 16, i32 8, i1 false), !dbg !2591
  %arrayidx237 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 13, !dbg !2592
  %real239 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral238, i32 0, i32 0, !dbg !2593
  %268 = ptrtoint double* %real239 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %268, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1433, i32 0, i32 0))
  store double 0x4080090857A518D9, double* %real239, align 8, !dbg !2593
  %imag240 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral238, i32 0, i32 1, !dbg !2593
  %269 = ptrtoint double* %imag240 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %269, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1434, i32 0, i32 0))
  store double 0x40800275F32F50EA, double* %imag240, align 8, !dbg !2593
  %270 = bitcast %struct.dcomplex* %arrayidx237 to i8*, !dbg !2593
  %271 = bitcast %struct.dcomplex* %.compoundliteral238 to i8*, !dbg !2593
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %270, i8* %271, i64 16, i32 8, i1 false), !dbg !2593
  %arrayidx241 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 14, !dbg !2594
  %real243 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral242, i32 0, i32 0, !dbg !2595
  %272 = ptrtoint double* %real243 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %272, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1435, i32 0, i32 0))
  store double 0x408008CF67B5F6E6, double* %real243, align 8, !dbg !2595
  %imag244 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral242, i32 0, i32 1, !dbg !2595
  %273 = ptrtoint double* %imag244 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %273, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1436, i32 0, i32 0))
  store double 0x408002887F1716B0, double* %imag244, align 8, !dbg !2595
  %274 = bitcast %struct.dcomplex* %arrayidx241 to i8*, !dbg !2595
  %275 = bitcast %struct.dcomplex* %.compoundliteral242 to i8*, !dbg !2595
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %274, i8* %275, i64 16, i32 8, i1 false), !dbg !2595
  %arrayidx245 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 15, !dbg !2596
  %real247 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral246, i32 0, i32 0, !dbg !2597
  %276 = ptrtoint double* %real247 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %276, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1437, i32 0, i32 0))
  store double 0x4080089BD580EA3A, double* %real247, align 8, !dbg !2597
  %imag248 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral246, i32 0, i32 1, !dbg !2597
  %277 = ptrtoint double* %imag248 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %277, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1438, i32 0, i32 0))
  store double 0x40800297DE24048E, double* %imag248, align 8, !dbg !2597
  %278 = bitcast %struct.dcomplex* %arrayidx245 to i8*, !dbg !2597
  %279 = bitcast %struct.dcomplex* %.compoundliteral246 to i8*, !dbg !2597
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %278, i8* %279, i64 16, i32 8, i1 false), !dbg !2597
  %arrayidx249 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 16, !dbg !2598
  %real251 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral250, i32 0, i32 0, !dbg !2599
  %280 = ptrtoint double* %real251 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %280, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1439, i32 0, i32 0))
  store double 0x4080086C31EBD984, double* %real251, align 8, !dbg !2599
  %imag252 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral250, i32 0, i32 1, !dbg !2599
  %281 = ptrtoint double* %imag252 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %281, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1440, i32 0, i32 0))
  store double 0x408002A4AAB9F9F8, double* %imag252, align 8, !dbg !2599
  %282 = bitcast %struct.dcomplex* %arrayidx249 to i8*, !dbg !2599
  %283 = bitcast %struct.dcomplex* %.compoundliteral250 to i8*, !dbg !2599
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %282, i8* %283, i64 16, i32 8, i1 false), !dbg !2599
  %arrayidx253 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 17, !dbg !2600
  %real255 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral254, i32 0, i32 0, !dbg !2601
  %284 = ptrtoint double* %real255 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %284, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1441, i32 0, i32 0))
  store double 0x4080083F8294129E, double* %real255, align 8, !dbg !2601
  %imag256 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral254, i32 0, i32 1, !dbg !2601
  %285 = ptrtoint double* %imag256 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %285, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1442, i32 0, i32 0))
  store double 0x408002AF57DC0D71, double* %imag256, align 8, !dbg !2601
  %286 = bitcast %struct.dcomplex* %arrayidx253 to i8*, !dbg !2601
  %287 = bitcast %struct.dcomplex* %.compoundliteral254 to i8*, !dbg !2601
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %286, i8* %287, i64 16, i32 8, i1 false), !dbg !2601
  %arrayidx257 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 18, !dbg !2602
  %real259 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral258, i32 0, i32 0, !dbg !2603
  %288 = ptrtoint double* %real259 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %288, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1443, i32 0, i32 0))
  store double 0x408008151CE457D2, double* %real259, align 8, !dbg !2603
  %imag260 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral258, i32 0, i32 1, !dbg !2603
  %289 = ptrtoint double* %imag260 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %289, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1444, i32 0, i32 0))
  store double 0x408002B83C8A44C9, double* %imag260, align 8, !dbg !2603
  %290 = bitcast %struct.dcomplex* %arrayidx257 to i8*, !dbg !2603
  %291 = bitcast %struct.dcomplex* %.compoundliteral258 to i8*, !dbg !2603
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %290, i8* %291, i64 16, i32 8, i1 false), !dbg !2603
  %arrayidx261 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 19, !dbg !2604
  %real263 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral262, i32 0, i32 0, !dbg !2605
  %292 = ptrtoint double* %real263 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %292, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1445, i32 0, i32 0))
  store double 0x408007EC8CCD48ED, double* %real263, align 8, !dbg !2605
  %imag264 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral262, i32 0, i32 1, !dbg !2605
  %293 = ptrtoint double* %imag264 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %293, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1446, i32 0, i32 0))
  store double 0x408002BF9BCECA75, double* %imag264, align 8, !dbg !2605
  %294 = bitcast %struct.dcomplex* %arrayidx261 to i8*, !dbg !2605
  %295 = bitcast %struct.dcomplex* %.compoundliteral262 to i8*, !dbg !2605
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %294, i8* %295, i64 16, i32 8, i1 false), !dbg !2605
  %arrayidx265 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 20, !dbg !2606
  %real267 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral266, i32 0, i32 0, !dbg !2607
  %296 = ptrtoint double* %real267 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %296, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1447, i32 0, i32 0))
  store double 0x408007C58371022F, double* %real267, align 8, !dbg !2607
  %imag268 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral266, i32 0, i32 1, !dbg !2607
  %297 = ptrtoint double* %imag268 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %297, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1448, i32 0, i32 0))
  store double 0x408002C5AA6407B6, double* %imag268, align 8, !dbg !2607
  %298 = bitcast %struct.dcomplex* %arrayidx265 to i8*, !dbg !2607
  %299 = bitcast %struct.dcomplex* %.compoundliteral266 to i8*, !dbg !2607
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %298, i8* %299, i64 16, i32 8, i1 false), !dbg !2607
  br label %if.end488, !dbg !2608

if.else269:                                       ; preds = %land.lhs.true186, %land.lhs.true184, %land.lhs.true182, %if.else180
  %300 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %300, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1449, i32 0, i32 0))
  %301 = load i32, i32* %d1.addr, align 4, !dbg !2609
  %cmp270 = icmp eq i32 %301, 2048, !dbg !2612
  br i1 %cmp270, label %land.lhs.true271, label %if.else378, !dbg !2613

land.lhs.true271:                                 ; preds = %if.else269
  %302 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %302, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1450, i32 0, i32 0))
  %303 = load i32, i32* %d2.addr, align 4, !dbg !2614
  %cmp272 = icmp eq i32 %303, 1024, !dbg !2616
  br i1 %cmp272, label %land.lhs.true273, label %if.else378, !dbg !2617

land.lhs.true273:                                 ; preds = %land.lhs.true271
  %304 = ptrtoint i32* %d3.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %304, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1451, i32 0, i32 0))
  %305 = load i32, i32* %d3.addr, align 4, !dbg !2618
  %cmp274 = icmp eq i32 %305, 1024, !dbg !2620
  br i1 %cmp274, label %land.lhs.true275, label %if.else378, !dbg !2621

land.lhs.true275:                                 ; preds = %land.lhs.true273
  %306 = ptrtoint i32* %nt.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %306, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1452, i32 0, i32 0))
  %307 = load i32, i32* %nt.addr, align 4, !dbg !2622
  %cmp276 = icmp eq i32 %307, 25, !dbg !2624
  br i1 %cmp276, label %if.then277, label %if.else378, !dbg !2625

if.then277:                                       ; preds = %land.lhs.true275
  %308 = ptrtoint i8** %Class.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %308, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1453, i32 0, i32 0))
  %309 = load i8*, i8** %Class.addr, align 8, !dbg !2626
  %310 = ptrtoint i8* %309 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %310, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1454, i32 0, i32 0))
  store i8 68, i8* %309, align 1, !dbg !2628
  %arrayidx278 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 1, !dbg !2629
  %real280 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral279, i32 0, i32 0, !dbg !2630
  %311 = ptrtoint double* %real280 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %311, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1455, i32 0, i32 0))
  store double 0x408001C8B7A5243B, double* %real280, align 8, !dbg !2630
  %imag281 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral279, i32 0, i32 1, !dbg !2630
  %312 = ptrtoint double* %imag281 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %312, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1456, i32 0, i32 0))
  store double 0x407FFDA78AA6499C, double* %imag281, align 8, !dbg !2630
  %313 = bitcast %struct.dcomplex* %arrayidx278 to i8*, !dbg !2630
  %314 = bitcast %struct.dcomplex* %.compoundliteral279 to i8*, !dbg !2630
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %313, i8* %314, i64 16, i32 8, i1 false), !dbg !2630
  %arrayidx282 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 2, !dbg !2631
  %real284 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral283, i32 0, i32 0, !dbg !2632
  %315 = ptrtoint double* %real284 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %315, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1457, i32 0, i32 0))
  store double 0x4080005F05B14D73, double* %real284, align 8, !dbg !2632
  %imag285 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral283, i32 0, i32 1, !dbg !2632
  %316 = ptrtoint double* %imag285 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %316, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1458, i32 0, i32 0))
  store double 0x407FFB4C42805D51, double* %imag285, align 8, !dbg !2632
  %317 = bitcast %struct.dcomplex* %arrayidx282 to i8*, !dbg !2632
  %318 = bitcast %struct.dcomplex* %.compoundliteral283 to i8*, !dbg !2632
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %317, i8* %318, i64 16, i32 8, i1 false), !dbg !2632
  %arrayidx286 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 3, !dbg !2633
  %real288 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral287, i32 0, i32 0, !dbg !2634
  %319 = ptrtoint double* %real288 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %319, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1459, i32 0, i32 0))
  store double 0x407FFFC9049FE6AA, double* %real288, align 8, !dbg !2634
  %imag289 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral287, i32 0, i32 1, !dbg !2634
  %320 = ptrtoint double* %imag289 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %320, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1460, i32 0, i32 0))
  store double 0x407FFB5AABC2C2DC, double* %imag289, align 8, !dbg !2634
  %321 = bitcast %struct.dcomplex* %arrayidx286 to i8*, !dbg !2634
  %322 = bitcast %struct.dcomplex* %.compoundliteral287 to i8*, !dbg !2634
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %321, i8* %322, i64 16, i32 8, i1 false), !dbg !2634
  %arrayidx290 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 4, !dbg !2635
  %real292 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral291, i32 0, i32 0, !dbg !2636
  %323 = ptrtoint double* %real292 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %323, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1461, i32 0, i32 0))
  store double 0x407FFF3AE6781D07, double* %real292, align 8, !dbg !2636
  %imag293 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral291, i32 0, i32 1, !dbg !2636
  %324 = ptrtoint double* %imag293 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %324, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1462, i32 0, i32 0))
  store double 0x407FFBCC55AD30A5, double* %imag293, align 8, !dbg !2636
  %325 = bitcast %struct.dcomplex* %arrayidx290 to i8*, !dbg !2636
  %326 = bitcast %struct.dcomplex* %.compoundliteral291 to i8*, !dbg !2636
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %325, i8* %326, i64 16, i32 8, i1 false), !dbg !2636
  %arrayidx294 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 5, !dbg !2637
  %real296 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral295, i32 0, i32 0, !dbg !2638
  %327 = ptrtoint double* %real296 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %327, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1463, i32 0, i32 0))
  store double 0x407FFED49E586270, double* %real296, align 8, !dbg !2638
  %imag297 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral295, i32 0, i32 1, !dbg !2638
  %328 = ptrtoint double* %imag297 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %328, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1464, i32 0, i32 0))
  store double 0x407FFC49DED1E229, double* %imag297, align 8, !dbg !2638
  %329 = bitcast %struct.dcomplex* %arrayidx294 to i8*, !dbg !2638
  %330 = bitcast %struct.dcomplex* %.compoundliteral295 to i8*, !dbg !2638
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %329, i8* %330, i64 16, i32 8, i1 false), !dbg !2638
  %arrayidx298 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 6, !dbg !2639
  %real300 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral299, i32 0, i32 0, !dbg !2640
  %331 = ptrtoint double* %real300 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %331, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1465, i32 0, i32 0))
  store double 0x407FFE88286F1600, double* %real300, align 8, !dbg !2640
  %imag301 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral299, i32 0, i32 1, !dbg !2640
  %332 = ptrtoint double* %imag301 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %332, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1466, i32 0, i32 0))
  store double 0x407FFCBFA44E2DA9, double* %imag301, align 8, !dbg !2640
  %333 = bitcast %struct.dcomplex* %arrayidx298 to i8*, !dbg !2640
  %334 = bitcast %struct.dcomplex* %.compoundliteral299 to i8*, !dbg !2640
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %333, i8* %334, i64 16, i32 8, i1 false), !dbg !2640
  %arrayidx302 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 7, !dbg !2641
  %real304 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral303, i32 0, i32 0, !dbg !2642
  %335 = ptrtoint double* %real304 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %335, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1467, i32 0, i32 0))
  store double 0x407FFE4F62F012B7, double* %real304, align 8, !dbg !2642
  %imag305 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral303, i32 0, i32 1, !dbg !2642
  %336 = ptrtoint double* %imag305 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %336, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1468, i32 0, i32 0))
  store double 0x407FFD2913502BF7, double* %imag305, align 8, !dbg !2642
  %337 = bitcast %struct.dcomplex* %arrayidx302 to i8*, !dbg !2642
  %338 = bitcast %struct.dcomplex* %.compoundliteral303 to i8*, !dbg !2642
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %337, i8* %338, i64 16, i32 8, i1 false), !dbg !2642
  %arrayidx306 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 8, !dbg !2643
  %real308 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral307, i32 0, i32 0, !dbg !2644
  %339 = ptrtoint double* %real308 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %339, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1469, i32 0, i32 0))
  store double 0x407FFE25D7467D87, double* %real308, align 8, !dbg !2644
  %imag309 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral307, i32 0, i32 1, !dbg !2644
  %340 = ptrtoint double* %imag309 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %340, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1470, i32 0, i32 0))
  store double 0x407FFD85C991CC1E, double* %imag309, align 8, !dbg !2644
  %341 = bitcast %struct.dcomplex* %arrayidx306 to i8*, !dbg !2644
  %342 = bitcast %struct.dcomplex* %.compoundliteral307 to i8*, !dbg !2644
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %341, i8* %342, i64 16, i32 8, i1 false), !dbg !2644
  %arrayidx310 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 9, !dbg !2645
  %real312 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral311, i32 0, i32 0, !dbg !2646
  %343 = ptrtoint double* %real312 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %343, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1471, i32 0, i32 0))
  store double 0x407FFE07F5F9461B, double* %real312, align 8, !dbg !2646
  %imag313 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral311, i32 0, i32 1, !dbg !2646
  %344 = ptrtoint double* %imag313 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %344, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1472, i32 0, i32 0))
  store double 0x407FFDD6ADE6AA2F, double* %imag313, align 8, !dbg !2646
  %345 = bitcast %struct.dcomplex* %arrayidx310 to i8*, !dbg !2646
  %346 = bitcast %struct.dcomplex* %.compoundliteral311 to i8*, !dbg !2646
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %345, i8* %346, i64 16, i32 8, i1 false), !dbg !2646
  %arrayidx314 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 10, !dbg !2647
  %real316 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral315, i32 0, i32 0, !dbg !2648
  %347 = ptrtoint double* %real316 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %347, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1473, i32 0, i32 0))
  store double 0x407FFDF2F9E3CE75, double* %real316, align 8, !dbg !2648
  %imag317 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral315, i32 0, i32 1, !dbg !2648
  %348 = ptrtoint double* %imag317 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %348, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1474, i32 0, i32 0))
  store double 0x407FFE1D0052370F, double* %imag317, align 8, !dbg !2648
  %349 = bitcast %struct.dcomplex* %arrayidx314 to i8*, !dbg !2648
  %350 = bitcast %struct.dcomplex* %.compoundliteral315 to i8*, !dbg !2648
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %349, i8* %350, i64 16, i32 8, i1 false), !dbg !2648
  %arrayidx318 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 11, !dbg !2649
  %real320 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral319, i32 0, i32 0, !dbg !2650
  %351 = ptrtoint double* %real320 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %351, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1475, i32 0, i32 0))
  store double 0x407FFDE4CA360F49, double* %real320, align 8, !dbg !2650
  %imag321 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral319, i32 0, i32 1, !dbg !2650
  %352 = ptrtoint double* %imag321 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %352, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1476, i32 0, i32 0))
  store double 0x407FFE5A05B5973E, double* %imag321, align 8, !dbg !2650
  %353 = bitcast %struct.dcomplex* %arrayidx318 to i8*, !dbg !2650
  %354 = bitcast %struct.dcomplex* %.compoundliteral319 to i8*, !dbg !2650
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %353, i8* %354, i64 16, i32 8, i1 false), !dbg !2650
  %arrayidx322 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 12, !dbg !2651
  %real324 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral323, i32 0, i32 0, !dbg !2652
  %355 = ptrtoint double* %real324 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %355, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1477, i32 0, i32 0))
  store double 0x407FFDDBD5F99711, double* %real324, align 8, !dbg !2652
  %imag325 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral323, i32 0, i32 1, !dbg !2652
  %356 = ptrtoint double* %imag325 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %356, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1478, i32 0, i32 0))
  store double 0x407FFE8EEACAA874, double* %imag325, align 8, !dbg !2652
  %357 = bitcast %struct.dcomplex* %arrayidx322 to i8*, !dbg !2652
  %358 = bitcast %struct.dcomplex* %.compoundliteral323 to i8*, !dbg !2652
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %357, i8* %358, i64 16, i32 8, i1 false), !dbg !2652
  %arrayidx326 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 13, !dbg !2653
  %real328 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral327, i32 0, i32 0, !dbg !2654
  %359 = ptrtoint double* %real328 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %359, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1479, i32 0, i32 0))
  store double 0x407FFDD6F2033D21, double* %real328, align 8, !dbg !2654
  %imag329 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral327, i32 0, i32 1, !dbg !2654
  %360 = ptrtoint double* %imag329 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %360, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1480, i32 0, i32 0))
  store double 0x407FFEBCBBFA2EBF, double* %imag329, align 8, !dbg !2654
  %361 = bitcast %struct.dcomplex* %arrayidx326 to i8*, !dbg !2654
  %362 = bitcast %struct.dcomplex* %.compoundliteral327 to i8*, !dbg !2654
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %361, i8* %362, i64 16, i32 8, i1 false), !dbg !2654
  %arrayidx330 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 14, !dbg !2655
  %real332 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral331, i32 0, i32 0, !dbg !2656
  %363 = ptrtoint double* %real332 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %363, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1481, i32 0, i32 0))
  store double 0x407FFDD53D74DC74, double* %real332, align 8, !dbg !2656
  %imag333 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral331, i32 0, i32 1, !dbg !2656
  %364 = ptrtoint double* %imag333 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %364, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1482, i32 0, i32 0))
  store double 0x407FFEE46511649D, double* %imag333, align 8, !dbg !2656
  %365 = bitcast %struct.dcomplex* %arrayidx330 to i8*, !dbg !2656
  %366 = bitcast %struct.dcomplex* %.compoundliteral331 to i8*, !dbg !2656
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %365, i8* %366, i64 16, i32 8, i1 false), !dbg !2656
  %arrayidx334 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 15, !dbg !2657
  %real336 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral335, i32 0, i32 0, !dbg !2658
  %367 = ptrtoint double* %real336 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %367, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1483, i32 0, i32 0))
  store double 0x407FFDD60D2DB5D2, double* %real336, align 8, !dbg !2658
  %imag337 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral335, i32 0, i32 1, !dbg !2658
  %368 = ptrtoint double* %imag337 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %368, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1484, i32 0, i32 0))
  store double 0x407FFF06B3C01AEA, double* %imag337, align 8, !dbg !2658
  %369 = bitcast %struct.dcomplex* %arrayidx334 to i8*, !dbg !2658
  %370 = bitcast %struct.dcomplex* %.compoundliteral335 to i8*, !dbg !2658
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %369, i8* %370, i64 16, i32 8, i1 false), !dbg !2658
  %arrayidx338 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 16, !dbg !2659
  %real340 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral339, i32 0, i32 0, !dbg !2660
  %371 = ptrtoint double* %real340 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %371, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1485, i32 0, i32 0))
  store double 0x407FFDD8DD056A7D, double* %real340, align 8, !dbg !2660
  %imag341 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral339, i32 0, i32 1, !dbg !2660
  %372 = ptrtoint double* %imag341 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %372, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1486, i32 0, i32 0))
  store double 0x407FFF245ADF0BCE, double* %imag341, align 8, !dbg !2660
  %373 = bitcast %struct.dcomplex* %arrayidx338 to i8*, !dbg !2660
  %374 = bitcast %struct.dcomplex* %.compoundliteral339 to i8*, !dbg !2660
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %373, i8* %374, i64 16, i32 8, i1 false), !dbg !2660
  %arrayidx342 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 17, !dbg !2661
  %real344 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral343, i32 0, i32 0, !dbg !2662
  %375 = ptrtoint double* %real344 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %375, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1487, i32 0, i32 0))
  store double 0x407FFDDD45618FE6, double* %real344, align 8, !dbg !2662
  %imag345 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral343, i32 0, i32 1, !dbg !2662
  %376 = ptrtoint double* %imag345 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %376, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1488, i32 0, i32 0))
  store double 0x407FFF3DF5BAB029, double* %imag345, align 8, !dbg !2662
  %377 = bitcast %struct.dcomplex* %arrayidx342 to i8*, !dbg !2662
  %378 = bitcast %struct.dcomplex* %.compoundliteral343 to i8*, !dbg !2662
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %377, i8* %378, i64 16, i32 8, i1 false), !dbg !2662
  %arrayidx346 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 18, !dbg !2663
  %real348 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral347, i32 0, i32 0, !dbg !2664
  %379 = ptrtoint double* %real348 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %379, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1489, i32 0, i32 0))
  store double 0x407FFDE2F3E650B3, double* %real348, align 8, !dbg !2664
  %imag349 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral347, i32 0, i32 1, !dbg !2664
  %380 = ptrtoint double* %imag349 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %380, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1490, i32 0, i32 0))
  store double 0x407FFF540B1CF5A1, double* %imag349, align 8, !dbg !2664
  %381 = bitcast %struct.dcomplex* %arrayidx346 to i8*, !dbg !2664
  %382 = bitcast %struct.dcomplex* %.compoundliteral347 to i8*, !dbg !2664
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %381, i8* %382, i64 16, i32 8, i1 false), !dbg !2664
  %arrayidx350 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 19, !dbg !2665
  %real352 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral351, i32 0, i32 0, !dbg !2666
  %383 = ptrtoint double* %real352 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %383, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1491, i32 0, i32 0))
  store double 0x407FFDE9A64E1245, double* %real352, align 8, !dbg !2666
  %imag353 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral351, i32 0, i32 1, !dbg !2666
  %384 = ptrtoint double* %imag353 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %384, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1492, i32 0, i32 0))
  store double 0x407FFF671002DAE5, double* %imag353, align 8, !dbg !2666
  %385 = bitcast %struct.dcomplex* %arrayidx350 to i8*, !dbg !2666
  %386 = bitcast %struct.dcomplex* %.compoundliteral351 to i8*, !dbg !2666
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %385, i8* %386, i64 16, i32 8, i1 false), !dbg !2666
  %arrayidx354 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 20, !dbg !2667
  %real356 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral355, i32 0, i32 0, !dbg !2668
  %387 = ptrtoint double* %real356 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %387, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1493, i32 0, i32 0))
  store double 0x407FFDF126BADF21, double* %real356, align 8, !dbg !2668
  %imag357 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral355, i32 0, i32 1, !dbg !2668
  %388 = ptrtoint double* %imag357 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %388, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1494, i32 0, i32 0))
  store double 0x407FFF7769FD4D32, double* %imag357, align 8, !dbg !2668
  %389 = bitcast %struct.dcomplex* %arrayidx354 to i8*, !dbg !2668
  %390 = bitcast %struct.dcomplex* %.compoundliteral355 to i8*, !dbg !2668
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %389, i8* %390, i64 16, i32 8, i1 false), !dbg !2668
  %arrayidx358 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 21, !dbg !2669
  %real360 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral359, i32 0, i32 0, !dbg !2670
  %391 = ptrtoint double* %real360 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %391, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1495, i32 0, i32 0))
  store double 0x407FFDF94909BB13, double* %real360, align 8, !dbg !2670
  %imag361 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral359, i32 0, i32 1, !dbg !2670
  %392 = ptrtoint double* %imag361 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %392, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1496, i32 0, i32 0))
  store double 0x407FFF85714411B2, double* %imag361, align 8, !dbg !2670
  %393 = bitcast %struct.dcomplex* %arrayidx358 to i8*, !dbg !2670
  %394 = bitcast %struct.dcomplex* %.compoundliteral359 to i8*, !dbg !2670
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %393, i8* %394, i64 16, i32 8, i1 false), !dbg !2670
  %arrayidx362 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 22, !dbg !2671
  %real364 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral363, i32 0, i32 0, !dbg !2672
  %395 = ptrtoint double* %real364 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %395, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1497, i32 0, i32 0))
  store double 0x407FFE01E8D7E962, double* %real364, align 8, !dbg !2672
  %imag365 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral363, i32 0, i32 1, !dbg !2672
  %396 = ptrtoint double* %imag365 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %396, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1498, i32 0, i32 0))
  store double 0x407FFF9172826820, double* %imag365, align 8, !dbg !2672
  %397 = bitcast %struct.dcomplex* %arrayidx362 to i8*, !dbg !2672
  %398 = bitcast %struct.dcomplex* %.compoundliteral363 to i8*, !dbg !2672
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %397, i8* %398, i64 16, i32 8, i1 false), !dbg !2672
  %arrayidx366 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 23, !dbg !2673
  %real368 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral367, i32 0, i32 0, !dbg !2674
  %399 = ptrtoint double* %real368 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %399, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1499, i32 0, i32 0))
  store double 0x407FFE0AE8040E41, double* %real368, align 8, !dbg !2674
  %imag369 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral367, i32 0, i32 1, !dbg !2674
  %400 = ptrtoint double* %imag369 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %400, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1500, i32 0, i32 0))
  store double 0x407FFF9BB06626E0, double* %imag369, align 8, !dbg !2674
  %401 = bitcast %struct.dcomplex* %arrayidx366 to i8*, !dbg !2674
  %402 = bitcast %struct.dcomplex* %.compoundliteral367 to i8*, !dbg !2674
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %401, i8* %402, i64 16, i32 8, i1 false), !dbg !2674
  %arrayidx370 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 24, !dbg !2675
  %real372 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral371, i32 0, i32 0, !dbg !2676
  %403 = ptrtoint double* %real372 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %403, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1501, i32 0, i32 0))
  store double 0x407FFE142D872C17, double* %real372, align 8, !dbg !2676
  %imag373 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral371, i32 0, i32 1, !dbg !2676
  %404 = ptrtoint double* %imag373 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %404, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1502, i32 0, i32 0))
  store double 0x407FFFA464F89DCE, double* %imag373, align 8, !dbg !2676
  %405 = bitcast %struct.dcomplex* %arrayidx370 to i8*, !dbg !2676
  %406 = bitcast %struct.dcomplex* %.compoundliteral371 to i8*, !dbg !2676
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %405, i8* %406, i64 16, i32 8, i1 false), !dbg !2676
  %arrayidx374 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 25, !dbg !2677
  %real376 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral375, i32 0, i32 0, !dbg !2678
  %407 = ptrtoint double* %real376 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %407, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1503, i32 0, i32 0))
  store double 0x407FFE1DA48D386E, double* %real376, align 8, !dbg !2678
  %imag377 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral375, i32 0, i32 1, !dbg !2678
  %408 = ptrtoint double* %imag377 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %408, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1504, i32 0, i32 0))
  store double 0x407FFFABC2C855DE, double* %imag377, align 8, !dbg !2678
  %409 = bitcast %struct.dcomplex* %arrayidx374 to i8*, !dbg !2678
  %410 = bitcast %struct.dcomplex* %.compoundliteral375 to i8*, !dbg !2678
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %409, i8* %410, i64 16, i32 8, i1 false), !dbg !2678
  br label %if.end487, !dbg !2679

if.else378:                                       ; preds = %land.lhs.true275, %land.lhs.true273, %land.lhs.true271, %if.else269
  %411 = ptrtoint i32* %d1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %411, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1505, i32 0, i32 0))
  %412 = load i32, i32* %d1.addr, align 4, !dbg !2680
  %cmp379 = icmp eq i32 %412, 4096, !dbg !2683
  br i1 %cmp379, label %land.lhs.true380, label %if.end, !dbg !2684

land.lhs.true380:                                 ; preds = %if.else378
  %413 = ptrtoint i32* %d2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %413, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1506, i32 0, i32 0))
  %414 = load i32, i32* %d2.addr, align 4, !dbg !2685
  %cmp381 = icmp eq i32 %414, 2048, !dbg !2687
  br i1 %cmp381, label %land.lhs.true382, label %if.end, !dbg !2688

land.lhs.true382:                                 ; preds = %land.lhs.true380
  %415 = ptrtoint i32* %d3.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %415, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1507, i32 0, i32 0))
  %416 = load i32, i32* %d3.addr, align 4, !dbg !2689
  %cmp383 = icmp eq i32 %416, 2048, !dbg !2691
  br i1 %cmp383, label %land.lhs.true384, label %if.end, !dbg !2692

land.lhs.true384:                                 ; preds = %land.lhs.true382
  %417 = ptrtoint i32* %nt.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %417, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1508, i32 0, i32 0))
  %418 = load i32, i32* %nt.addr, align 4, !dbg !2693
  %cmp385 = icmp eq i32 %418, 25, !dbg !2695
  br i1 %cmp385, label %if.then386, label %if.end, !dbg !2696

if.then386:                                       ; preds = %land.lhs.true384
  %419 = ptrtoint i8** %Class.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %419, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1509, i32 0, i32 0))
  %420 = load i8*, i8** %Class.addr, align 8, !dbg !2697
  %421 = ptrtoint i8* %420 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %421, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1510, i32 0, i32 0))
  store i8 69, i8* %420, align 1, !dbg !2699
  %arrayidx387 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 1, !dbg !2700
  %real389 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral388, i32 0, i32 0, !dbg !2701
  %422 = ptrtoint double* %real389 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %422, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1511, i32 0, i32 0))
  store double 0x40800147E4E2E063, double* %real389, align 8, !dbg !2701
  %imag390 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral388, i32 0, i32 1, !dbg !2701
  %423 = ptrtoint double* %imag390 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %423, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1512, i32 0, i32 0))
  store double 0x407FFBD566A0B5FD, double* %imag390, align 8, !dbg !2701
  %424 = bitcast %struct.dcomplex* %arrayidx387 to i8*, !dbg !2701
  %425 = bitcast %struct.dcomplex* %.compoundliteral388 to i8*, !dbg !2701
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %424, i8* %425, i64 16, i32 8, i1 false), !dbg !2701
  %arrayidx391 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 2, !dbg !2702
  %real393 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral392, i32 0, i32 0, !dbg !2703
  %426 = ptrtoint double* %real393 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %426, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1513, i32 0, i32 0))
  store double 0x408000B96D3A755A, double* %real393, align 8, !dbg !2703
  %imag394 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral392, i32 0, i32 1, !dbg !2703
  %427 = ptrtoint double* %imag394 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %427, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1514, i32 0, i32 0))
  store double 0x407FFDC89676A99F, double* %imag394, align 8, !dbg !2703
  %428 = bitcast %struct.dcomplex* %arrayidx391 to i8*, !dbg !2703
  %429 = bitcast %struct.dcomplex* %.compoundliteral392 to i8*, !dbg !2703
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %428, i8* %429, i64 16, i32 8, i1 false), !dbg !2703
  %arrayidx395 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 3, !dbg !2704
  %real397 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral396, i32 0, i32 0, !dbg !2705
  %430 = ptrtoint double* %real397 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %430, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1515, i32 0, i32 0))
  store double 0x4080007FA32A25BE, double* %real397, align 8, !dbg !2705
  %imag398 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral396, i32 0, i32 1, !dbg !2705
  %431 = ptrtoint double* %imag398 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %431, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1516, i32 0, i32 0))
  store double 0x407FFE84CB3A10F8, double* %imag398, align 8, !dbg !2705
  %432 = bitcast %struct.dcomplex* %arrayidx395 to i8*, !dbg !2705
  %433 = bitcast %struct.dcomplex* %.compoundliteral396 to i8*, !dbg !2705
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %432, i8* %433, i64 16, i32 8, i1 false), !dbg !2705
  %arrayidx399 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 4, !dbg !2706
  %real401 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral400, i32 0, i32 0, !dbg !2707
  %434 = ptrtoint double* %real401 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %434, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1517, i32 0, i32 0))
  store double 0x40800059C9C82B40, double* %real401, align 8, !dbg !2707
  %imag402 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral400, i32 0, i32 1, !dbg !2707
  %435 = ptrtoint double* %imag402 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %435, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1518, i32 0, i32 0))
  store double 0x407FFEF414B87FD6, double* %imag402, align 8, !dbg !2707
  %436 = bitcast %struct.dcomplex* %arrayidx399 to i8*, !dbg !2707
  %437 = bitcast %struct.dcomplex* %.compoundliteral400 to i8*, !dbg !2707
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %436, i8* %437, i64 16, i32 8, i1 false), !dbg !2707
  %arrayidx403 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 5, !dbg !2708
  %real405 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral404, i32 0, i32 0, !dbg !2709
  %438 = ptrtoint double* %real405 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %438, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1519, i32 0, i32 0))
  store double 0x4080003FCCB7C9C8, double* %real405, align 8, !dbg !2709
  %imag406 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral404, i32 0, i32 1, !dbg !2709
  %439 = ptrtoint double* %imag406 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %439, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1520, i32 0, i32 0))
  store double 0x407FFF483912F11E, double* %imag406, align 8, !dbg !2709
  %440 = bitcast %struct.dcomplex* %arrayidx403 to i8*, !dbg !2709
  %441 = bitcast %struct.dcomplex* %.compoundliteral404 to i8*, !dbg !2709
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %440, i8* %441, i64 16, i32 8, i1 false), !dbg !2709
  %arrayidx407 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 6, !dbg !2710
  %real409 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral408, i32 0, i32 0, !dbg !2711
  %442 = ptrtoint double* %real409 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %442, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1521, i32 0, i32 0))
  store double 0x4080002E4D90A084, double* %real409, align 8, !dbg !2711
  %imag410 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral408, i32 0, i32 1, !dbg !2711
  %443 = ptrtoint double* %imag410 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %443, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1522, i32 0, i32 0))
  store double 0x407FFF8D62BCE558, double* %imag410, align 8, !dbg !2711
  %444 = bitcast %struct.dcomplex* %arrayidx407 to i8*, !dbg !2711
  %445 = bitcast %struct.dcomplex* %.compoundliteral408 to i8*, !dbg !2711
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %444, i8* %445, i64 16, i32 8, i1 false), !dbg !2711
  %arrayidx411 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 7, !dbg !2712
  %real413 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral412, i32 0, i32 0, !dbg !2713
  %446 = ptrtoint double* %real413 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %446, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1523, i32 0, i32 0))
  store double 0x40800022AC039D7C, double* %real413, align 8, !dbg !2713
  %imag414 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral412, i32 0, i32 1, !dbg !2713
  %447 = ptrtoint double* %imag414 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %447, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1524, i32 0, i32 0))
  store double 0x407FFFC737C3F7CD, double* %imag414, align 8, !dbg !2713
  %448 = bitcast %struct.dcomplex* %arrayidx411 to i8*, !dbg !2713
  %449 = bitcast %struct.dcomplex* %.compoundliteral412 to i8*, !dbg !2713
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %448, i8* %449, i64 16, i32 8, i1 false), !dbg !2713
  %arrayidx415 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 8, !dbg !2714
  %real417 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral416, i32 0, i32 0, !dbg !2715
  %450 = ptrtoint double* %real417 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %450, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1525, i32 0, i32 0))
  store double 0x4080001ADFFA71B9, double* %real417, align 8, !dbg !2715
  %imag418 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral416, i32 0, i32 1, !dbg !2715
  %451 = ptrtoint double* %imag418 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %451, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1526, i32 0, i32 0))
  store double 0x407FFFF78C336255, double* %imag418, align 8, !dbg !2715
  %452 = bitcast %struct.dcomplex* %arrayidx415 to i8*, !dbg !2715
  %453 = bitcast %struct.dcomplex* %.compoundliteral416 to i8*, !dbg !2715
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %452, i8* %453, i64 16, i32 8, i1 false), !dbg !2715
  %arrayidx419 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 9, !dbg !2716
  %real421 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral420, i32 0, i32 0, !dbg !2717
  %454 = ptrtoint double* %real421 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %454, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1527, i32 0, i32 0))
  store double 0x4080001574D0520C, double* %real421, align 8, !dbg !2717
  %imag422 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral420, i32 0, i32 1, !dbg !2717
  %455 = ptrtoint double* %imag422 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %455, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1528, i32 0, i32 0))
  store double 0x4080000FE85C03E9, double* %imag422, align 8, !dbg !2717
  %456 = bitcast %struct.dcomplex* %arrayidx419 to i8*, !dbg !2717
  %457 = bitcast %struct.dcomplex* %.compoundliteral420 to i8*, !dbg !2717
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %456, i8* %457, i64 16, i32 8, i1 false), !dbg !2717
  %arrayidx423 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 10, !dbg !2718
  %real425 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral424, i32 0, i32 0, !dbg !2719
  %458 = ptrtoint double* %real425 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %458, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1529, i32 0, i32 0))
  store double 0x408000116F284244, double* %real425, align 8, !dbg !2719
  %imag426 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral424, i32 0, i32 1, !dbg !2719
  %459 = ptrtoint double* %imag426 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %459, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1530, i32 0, i32 0))
  store double 0x40800020A7695837, double* %imag426, align 8, !dbg !2719
  %460 = bitcast %struct.dcomplex* %arrayidx423 to i8*, !dbg !2719
  %461 = bitcast %struct.dcomplex* %.compoundliteral424 to i8*, !dbg !2719
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %460, i8* %461, i64 16, i32 8, i1 false), !dbg !2719
  %arrayidx427 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 11, !dbg !2720
  %real429 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral428, i32 0, i32 0, !dbg !2721
  %462 = ptrtoint double* %real429 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %462, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1531, i32 0, i32 0))
  store double 0x4080000E2D56813F, double* %real429, align 8, !dbg !2721
  %imag430 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral428, i32 0, i32 1, !dbg !2721
  %463 = ptrtoint double* %imag430 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %463, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1532, i32 0, i32 0))
  store double 0x4080002E951F7B34, double* %imag430, align 8, !dbg !2721
  %464 = bitcast %struct.dcomplex* %arrayidx427 to i8*, !dbg !2721
  %465 = bitcast %struct.dcomplex* %.compoundliteral428 to i8*, !dbg !2721
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %464, i8* %465, i64 16, i32 8, i1 false), !dbg !2721
  %arrayidx431 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 12, !dbg !2722
  %real433 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral432, i32 0, i32 0, !dbg !2723
  %466 = ptrtoint double* %real433 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %466, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1533, i32 0, i32 0))
  store double 0x4080000B4BE05864, double* %real433, align 8, !dbg !2723
  %imag434 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral432, i32 0, i32 1, !dbg !2723
  %467 = ptrtoint double* %imag434 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %467, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1534, i32 0, i32 0))
  store double 0x4080003A2ED08404, double* %imag434, align 8, !dbg !2723
  %468 = bitcast %struct.dcomplex* %arrayidx431 to i8*, !dbg !2723
  %469 = bitcast %struct.dcomplex* %.compoundliteral432 to i8*, !dbg !2723
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %468, i8* %469, i64 16, i32 8, i1 false), !dbg !2723
  %arrayidx435 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 13, !dbg !2724
  %real437 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral436, i32 0, i32 0, !dbg !2725
  %470 = ptrtoint double* %real437 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %470, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1535, i32 0, i32 0))
  store double 0x408000089094AC2D, double* %real437, align 8, !dbg !2725
  %imag438 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral436, i32 0, i32 1, !dbg !2725
  %471 = ptrtoint double* %imag438 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %471, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1536, i32 0, i32 0))
  store double 0x40800043DD87C2F3, double* %imag438, align 8, !dbg !2725
  %472 = bitcast %struct.dcomplex* %arrayidx435 to i8*, !dbg !2725
  %473 = bitcast %struct.dcomplex* %.compoundliteral436 to i8*, !dbg !2725
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %472, i8* %473, i64 16, i32 8, i1 false), !dbg !2725
  %arrayidx439 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 14, !dbg !2726
  %real441 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral440, i32 0, i32 0, !dbg !2727
  %474 = ptrtoint double* %real441 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %474, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1537, i32 0, i32 0))
  store double 0x40800005DBBF34DD, double* %real441, align 8, !dbg !2727
  %imag442 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral440, i32 0, i32 1, !dbg !2727
  %475 = ptrtoint double* %imag442 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %475, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1538, i32 0, i32 0))
  store double 0x4080004BF7DEAC1A, double* %imag442, align 8, !dbg !2727
  %476 = bitcast %struct.dcomplex* %arrayidx439 to i8*, !dbg !2727
  %477 = bitcast %struct.dcomplex* %.compoundliteral440 to i8*, !dbg !2727
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %476, i8* %477, i64 16, i32 8, i1 false), !dbg !2727
  %arrayidx443 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 15, !dbg !2728
  %real445 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral444, i32 0, i32 0, !dbg !2729
  %478 = ptrtoint double* %real445 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %478, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1539, i32 0, i32 0))
  store double 0x408000031E1FCB83, double* %real445, align 8, !dbg !2729
  %imag446 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral444, i32 0, i32 1, !dbg !2729
  %479 = ptrtoint double* %imag446 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %479, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1540, i32 0, i32 0))
  store double 0x40800052C48391C0, double* %imag446, align 8, !dbg !2729
  %480 = bitcast %struct.dcomplex* %arrayidx443 to i8*, !dbg !2729
  %481 = bitcast %struct.dcomplex* %.compoundliteral444 to i8*, !dbg !2729
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %480, i8* %481, i64 16, i32 8, i1 false), !dbg !2729
  %arrayidx447 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 16, !dbg !2730
  %real449 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral448, i32 0, i32 0, !dbg !2731
  %482 = ptrtoint double* %real449 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %482, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1541, i32 0, i32 0))
  store double 0x4080000052507A84, double* %real449, align 8, !dbg !2731
  %imag450 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral448, i32 0, i32 1, !dbg !2731
  %483 = ptrtoint double* %imag450 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %483, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1542, i32 0, i32 0))
  store double 0x408000587CD9C3A1, double* %imag450, align 8, !dbg !2731
  %484 = bitcast %struct.dcomplex* %arrayidx447 to i8*, !dbg !2731
  %485 = bitcast %struct.dcomplex* %.compoundliteral448 to i8*, !dbg !2731
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %484, i8* %485, i64 16, i32 8, i1 false), !dbg !2731
  %arrayidx451 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 17, !dbg !2732
  %real453 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral452, i32 0, i32 0, !dbg !2733
  %486 = ptrtoint double* %real453 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %486, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1543, i32 0, i32 0))
  store double 0x407FFFFAF1111C29, double* %real453, align 8, !dbg !2733
  %imag454 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral452, i32 0, i32 1, !dbg !2733
  %487 = ptrtoint double* %imag454 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %487, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1544, i32 0, i32 0))
  store double 0x4080005D4F648E97, double* %imag454, align 8, !dbg !2733
  %488 = bitcast %struct.dcomplex* %arrayidx451 to i8*, !dbg !2733
  %489 = bitcast %struct.dcomplex* %.compoundliteral452 to i8*, !dbg !2733
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %488, i8* %489, i64 16, i32 8, i1 false), !dbg !2733
  %arrayidx455 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 18, !dbg !2734
  %real457 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral456, i32 0, i32 0, !dbg !2735
  %490 = ptrtoint double* %real457 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %490, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1545, i32 0, i32 0))
  store double 0x407FFFF527E792B0, double* %real457, align 8, !dbg !2735
  %imag458 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral456, i32 0, i32 1, !dbg !2735
  %491 = ptrtoint double* %imag458 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %491, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1546, i32 0, i32 0))
  store double 0x4080006161DD7A20, double* %imag458, align 8, !dbg !2735
  %492 = bitcast %struct.dcomplex* %arrayidx455 to i8*, !dbg !2735
  %493 = bitcast %struct.dcomplex* %.compoundliteral456 to i8*, !dbg !2735
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %492, i8* %493, i64 16, i32 8, i1 false), !dbg !2735
  %arrayidx459 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 19, !dbg !2736
  %real461 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral460, i32 0, i32 0, !dbg !2737
  %494 = ptrtoint double* %real461 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %494, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1547, i32 0, i32 0))
  store double 0x407FFFEF5224A658, double* %real461, align 8, !dbg !2737
  %imag462 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral460, i32 0, i32 1, !dbg !2737
  %495 = ptrtoint double* %imag462 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %495, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1548, i32 0, i32 0))
  store double 0x40800064D2F0E0FB, double* %imag462, align 8, !dbg !2737
  %496 = bitcast %struct.dcomplex* %arrayidx459 to i8*, !dbg !2737
  %497 = bitcast %struct.dcomplex* %.compoundliteral460 to i8*, !dbg !2737
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %496, i8* %497, i64 16, i32 8, i1 false), !dbg !2737
  %arrayidx463 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 20, !dbg !2738
  %real465 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral464, i32 0, i32 0, !dbg !2739
  %498 = ptrtoint double* %real465 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %498, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1549, i32 0, i32 0))
  store double 0x407FFFE97985082F, double* %real465, align 8, !dbg !2739
  %imag466 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral464, i32 0, i32 1, !dbg !2739
  %499 = ptrtoint double* %imag466 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %499, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1550, i32 0, i32 0))
  store double 0x40800067BBA76761, double* %imag466, align 8, !dbg !2739
  %500 = bitcast %struct.dcomplex* %arrayidx463 to i8*, !dbg !2739
  %501 = bitcast %struct.dcomplex* %.compoundliteral464 to i8*, !dbg !2739
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %500, i8* %501, i64 16, i32 8, i1 false), !dbg !2739
  %arrayidx467 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 21, !dbg !2740
  %real469 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral468, i32 0, i32 0, !dbg !2741
  %502 = ptrtoint double* %real469 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %502, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1551, i32 0, i32 0))
  store double 0x407FFFE3A76CE198, double* %real469, align 8, !dbg !2741
  %imag470 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral468, i32 0, i32 1, !dbg !2741
  %503 = ptrtoint double* %imag470 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %503, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1552, i32 0, i32 0))
  store double 0x4080006A3087F53C, double* %imag470, align 8, !dbg !2741
  %504 = bitcast %struct.dcomplex* %arrayidx467 to i8*, !dbg !2741
  %505 = bitcast %struct.dcomplex* %.compoundliteral468 to i8*, !dbg !2741
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %504, i8* %505, i64 16, i32 8, i1 false), !dbg !2741
  %arrayidx471 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 22, !dbg !2742
  %real473 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral472, i32 0, i32 0, !dbg !2743
  %506 = ptrtoint double* %real473 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %506, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1553, i32 0, i32 0))
  store double 0x407FFFDDE458AC2A, double* %real473, align 8, !dbg !2743
  %imag474 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral472, i32 0, i32 1, !dbg !2743
  %507 = ptrtoint double* %imag474 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %507, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1554, i32 0, i32 0))
  store double 0x4080006C427E60CB, double* %imag474, align 8, !dbg !2743
  %508 = bitcast %struct.dcomplex* %arrayidx471 to i8*, !dbg !2743
  %509 = bitcast %struct.dcomplex* %.compoundliteral472 to i8*, !dbg !2743
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %508, i8* %509, i64 16, i32 8, i1 false), !dbg !2743
  %arrayidx475 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 23, !dbg !2744
  %real477 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral476, i32 0, i32 0, !dbg !2745
  %510 = ptrtoint double* %real477 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %510, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1555, i32 0, i32 0))
  store double 0x407FFFD8379EC190, double* %real477, align 8, !dbg !2745
  %imag478 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral476, i32 0, i32 1, !dbg !2745
  %511 = ptrtoint double* %imag478 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %511, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1556, i32 0, i32 0))
  store double 0x4080006DFF9235BC, double* %imag478, align 8, !dbg !2745
  %512 = bitcast %struct.dcomplex* %arrayidx475 to i8*, !dbg !2745
  %513 = bitcast %struct.dcomplex* %.compoundliteral476 to i8*, !dbg !2745
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %512, i8* %513, i64 16, i32 8, i1 false), !dbg !2745
  %arrayidx479 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 24, !dbg !2746
  %real481 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral480, i32 0, i32 0, !dbg !2747
  %514 = ptrtoint double* %real481 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %514, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1557, i32 0, i32 0))
  store double 0x407FFFD2A76113A7, double* %real481, align 8, !dbg !2747
  %imag482 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral480, i32 0, i32 1, !dbg !2747
  %515 = ptrtoint double* %imag482 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %515, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1558, i32 0, i32 0))
  store double 0x4080006F7377203C, double* %imag482, align 8, !dbg !2747
  %516 = bitcast %struct.dcomplex* %arrayidx479 to i8*, !dbg !2747
  %517 = bitcast %struct.dcomplex* %.compoundliteral480 to i8*, !dbg !2747
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %516, i8* %517, i64 16, i32 8, i1 false), !dbg !2747
  %arrayidx483 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 25, !dbg !2748
  %real485 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral484, i32 0, i32 0, !dbg !2749
  %518 = ptrtoint double* %real485 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %518, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1559, i32 0, i32 0))
  store double 0x407FFFCD389947BC, double* %real485, align 8, !dbg !2749
  %imag486 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral484, i32 0, i32 1, !dbg !2749
  %519 = ptrtoint double* %imag486 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %519, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1560, i32 0, i32 0))
  store double 0x40800070A7FF2BFD, double* %imag486, align 8, !dbg !2749
  %520 = bitcast %struct.dcomplex* %arrayidx483 to i8*, !dbg !2749
  %521 = bitcast %struct.dcomplex* %.compoundliteral484 to i8*, !dbg !2749
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %520, i8* %521, i64 16, i32 8, i1 false), !dbg !2749
  br label %if.end, !dbg !2750

if.end:                                           ; preds = %if.then386, %land.lhs.true384, %land.lhs.true382, %land.lhs.true380, %if.else378
  br label %if.end487

if.end487:                                        ; preds = %if.end, %if.then277
  br label %if.end488

if.end488:                                        ; preds = %if.end487, %if.then188
  br label %if.end489

if.end489:                                        ; preds = %if.end488, %if.then99
  br label %if.end490

if.end490:                                        ; preds = %if.end489, %if.then66
  br label %if.end491

if.end491:                                        ; preds = %if.end490, %if.then33
  br label %if.end492

if.end492:                                        ; preds = %if.end491, %if.then
  %522 = ptrtoint i8** %Class.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %522, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1561, i32 0, i32 0))
  %523 = load i8*, i8** %Class.addr, align 8, !dbg !2751
  %524 = ptrtoint i8* %523 to i64
  call void @__DiscoPoPOpenMPRead(i64 %524, i32 1, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1562, i32 0, i32 0))
  %525 = load i8, i8* %523, align 1, !dbg !2753
  %conv = sext i8 %525 to i32, !dbg !2753
  %cmp493 = icmp ne i32 %conv, 85, !dbg !2754
  br i1 %cmp493, label %if.then495, label %if.end588, !dbg !2755

if.then495:                                       ; preds = %if.end492
  %526 = ptrtoint i32** %verified.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %526, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1563, i32 0, i32 0))
  %527 = load i32*, i32** %verified.addr, align 8, !dbg !2756
  %528 = ptrtoint i32* %527 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %528, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1564, i32 0, i32 0))
  store i32 1, i32* %527, align 4, !dbg !2758
  %529 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %529, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1565, i32 0, i32 0))
  store i32 1, i32* %i, align 4, !dbg !2759
  br label %for.cond, !dbg !2761

for.cond:                                         ; preds = %for.inc, %if.then495
  %530 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %530, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1566, i32 0, i32 0))
  %531 = load i32, i32* %i, align 4, !dbg !2762
  %532 = ptrtoint i32* %nt.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %532, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1567, i32 0, i32 0))
  %533 = load i32, i32* %nt.addr, align 4, !dbg !2765
  %cmp496 = icmp sle i32 %531, %533, !dbg !2766
  br i1 %cmp496, label %for.body, label %for.end, !dbg !2767

for.body:                                         ; preds = %for.cond
  %real499 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral498, i32 0, i32 0, !dbg !2768
  %534 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %534, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1568, i32 0, i32 0))
  %535 = load i32, i32* %i, align 4, !dbg !2768
  %idxprom = sext i32 %535 to i64, !dbg !2768
  %arrayidx500 = getelementptr inbounds [7 x %struct.dcomplex], [7 x %struct.dcomplex]* @sums, i64 0, i64 %idxprom, !dbg !2768
  %real501 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx500, i32 0, i32 0, !dbg !2768
  %536 = ptrtoint double* %real501 to i64
  call void @__DiscoPoPOpenMPRead(i64 %536, i32 16, i32 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1569, i32 0, i32 0))
  %537 = load double, double* %real501, align 16, !dbg !2768
  %538 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %538, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1570, i32 0, i32 0))
  %539 = load i32, i32* %i, align 4, !dbg !2768
  %idxprom502 = sext i32 %539 to i64, !dbg !2768
  %arrayidx503 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 %idxprom502, !dbg !2768
  %real504 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx503, i32 0, i32 0, !dbg !2768
  %540 = ptrtoint double* %real504 to i64
  call void @__DiscoPoPOpenMPRead(i64 %540, i32 16, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1571, i32 0, i32 0))
  %541 = load double, double* %real504, align 16, !dbg !2768
  %sub = fsub double %537, %541, !dbg !2768
  %542 = ptrtoint double* %real499 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %542, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1572, i32 0, i32 0))
  store double %sub, double* %real499, align 8, !dbg !2768
  %imag505 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral498, i32 0, i32 1, !dbg !2768
  %543 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %543, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1573, i32 0, i32 0))
  %544 = load i32, i32* %i, align 4, !dbg !2768
  %idxprom506 = sext i32 %544 to i64, !dbg !2768
  %arrayidx507 = getelementptr inbounds [7 x %struct.dcomplex], [7 x %struct.dcomplex]* @sums, i64 0, i64 %idxprom506, !dbg !2768
  %imag508 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx507, i32 0, i32 1, !dbg !2768
  %545 = ptrtoint double* %imag508 to i64
  call void @__DiscoPoPOpenMPRead(i64 %545, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1574, i32 0, i32 0))
  %546 = load double, double* %imag508, align 8, !dbg !2768
  %547 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %547, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1575, i32 0, i32 0))
  %548 = load i32, i32* %i, align 4, !dbg !2768
  %idxprom509 = sext i32 %548 to i64, !dbg !2768
  %arrayidx510 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 %idxprom509, !dbg !2768
  %imag511 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx510, i32 0, i32 1, !dbg !2768
  %549 = ptrtoint double* %imag511 to i64
  call void @__DiscoPoPOpenMPRead(i64 %549, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1576, i32 0, i32 0))
  %550 = load double, double* %imag511, align 8, !dbg !2768
  %sub512 = fsub double %546, %550, !dbg !2768
  %551 = ptrtoint double* %imag505 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %551, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1577, i32 0, i32 0))
  store double %sub512, double* %imag505, align 8, !dbg !2768
  %552 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %552, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1578, i32 0, i32 0))
  %553 = load i32, i32* %i, align 4, !dbg !2768
  %idxprom513 = sext i32 %553 to i64, !dbg !2768
  %arrayidx514 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 %idxprom513, !dbg !2768
  %554 = bitcast %struct.dcomplex* %.compoundliteral498 to { double, double }*, !dbg !2768
  %555 = getelementptr inbounds { double, double }, { double, double }* %554, i32 0, i32 0, !dbg !2768
  %556 = ptrtoint double* %555 to i64
  call void @__DiscoPoPOpenMPRead(i64 %556, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1579, i32 0, i32 0))
  %557 = load double, double* %555, align 8, !dbg !2768
  %558 = getelementptr inbounds { double, double }, { double, double }* %554, i32 0, i32 1, !dbg !2768
  %559 = ptrtoint double* %558 to i64
  call void @__DiscoPoPOpenMPRead(i64 %559, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1580, i32 0, i32 0))
  %560 = load double, double* %558, align 8, !dbg !2768
  %561 = bitcast %struct.dcomplex* %arrayidx514 to { double, double }*, !dbg !2768
  %562 = getelementptr inbounds { double, double }, { double, double }* %561, i32 0, i32 0, !dbg !2768
  %563 = ptrtoint double* %562 to i64
  call void @__DiscoPoPOpenMPRead(i64 %563, i32 16, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1581, i32 0, i32 0))
  %564 = load double, double* %562, align 16, !dbg !2768
  %565 = getelementptr inbounds { double, double }, { double, double }* %561, i32 0, i32 1, !dbg !2768
  %566 = ptrtoint double* %565 to i64
  call void @__DiscoPoPOpenMPRead(i64 %566, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1582, i32 0, i32 0))
  %567 = load double, double* %565, align 8, !dbg !2768
  %call = call { double, double } @dcmplx_div(double %557, double %560, double %564, double %567), !dbg !2768
  %568 = bitcast %struct.dcomplex* %coerce to { double, double }*, !dbg !2768
  %569 = getelementptr inbounds { double, double }, { double, double }* %568, i32 0, i32 0, !dbg !2768
  %570 = extractvalue { double, double } %call, 0, !dbg !2768
  %571 = ptrtoint double* %569 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %571, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1583, i32 0, i32 0))
  store double %570, double* %569, align 8, !dbg !2768
  %572 = getelementptr inbounds { double, double }, { double, double }* %568, i32 0, i32 1, !dbg !2768
  %573 = extractvalue { double, double } %call, 1, !dbg !2768
  %574 = ptrtoint double* %572 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %574, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1584, i32 0, i32 0))
  store double %573, double* %572, align 8, !dbg !2768
  %real515 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %coerce, i32 0, i32 0, !dbg !2768
  %575 = ptrtoint double* %real515 to i64
  call void @__DiscoPoPOpenMPRead(i64 %575, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1585, i32 0, i32 0))
  %576 = load double, double* %real515, align 8, !dbg !2768
  %real517 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral516, i32 0, i32 0, !dbg !2768
  %577 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %577, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1586, i32 0, i32 0))
  %578 = load i32, i32* %i, align 4, !dbg !2768
  %idxprom518 = sext i32 %578 to i64, !dbg !2768
  %arrayidx519 = getelementptr inbounds [7 x %struct.dcomplex], [7 x %struct.dcomplex]* @sums, i64 0, i64 %idxprom518, !dbg !2768
  %real520 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx519, i32 0, i32 0, !dbg !2768
  %579 = ptrtoint double* %real520 to i64
  call void @__DiscoPoPOpenMPRead(i64 %579, i32 16, i32 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1587, i32 0, i32 0))
  %580 = load double, double* %real520, align 16, !dbg !2768
  %581 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %581, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1588, i32 0, i32 0))
  %582 = load i32, i32* %i, align 4, !dbg !2768
  %idxprom521 = sext i32 %582 to i64, !dbg !2768
  %arrayidx522 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 %idxprom521, !dbg !2768
  %real523 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx522, i32 0, i32 0, !dbg !2768
  %583 = ptrtoint double* %real523 to i64
  call void @__DiscoPoPOpenMPRead(i64 %583, i32 16, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1589, i32 0, i32 0))
  %584 = load double, double* %real523, align 16, !dbg !2768
  %sub524 = fsub double %580, %584, !dbg !2768
  %585 = ptrtoint double* %real517 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %585, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1590, i32 0, i32 0))
  store double %sub524, double* %real517, align 8, !dbg !2768
  %imag525 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral516, i32 0, i32 1, !dbg !2768
  %586 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %586, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1591, i32 0, i32 0))
  %587 = load i32, i32* %i, align 4, !dbg !2768
  %idxprom526 = sext i32 %587 to i64, !dbg !2768
  %arrayidx527 = getelementptr inbounds [7 x %struct.dcomplex], [7 x %struct.dcomplex]* @sums, i64 0, i64 %idxprom526, !dbg !2768
  %imag528 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx527, i32 0, i32 1, !dbg !2768
  %588 = ptrtoint double* %imag528 to i64
  call void @__DiscoPoPOpenMPRead(i64 %588, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1592, i32 0, i32 0))
  %589 = load double, double* %imag528, align 8, !dbg !2768
  %590 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %590, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1593, i32 0, i32 0))
  %591 = load i32, i32* %i, align 4, !dbg !2768
  %idxprom529 = sext i32 %591 to i64, !dbg !2768
  %arrayidx530 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 %idxprom529, !dbg !2768
  %imag531 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx530, i32 0, i32 1, !dbg !2768
  %592 = ptrtoint double* %imag531 to i64
  call void @__DiscoPoPOpenMPRead(i64 %592, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1594, i32 0, i32 0))
  %593 = load double, double* %imag531, align 8, !dbg !2768
  %sub532 = fsub double %589, %593, !dbg !2768
  %594 = ptrtoint double* %imag525 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %594, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1595, i32 0, i32 0))
  store double %sub532, double* %imag525, align 8, !dbg !2768
  %595 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %595, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1596, i32 0, i32 0))
  %596 = load i32, i32* %i, align 4, !dbg !2768
  %idxprom533 = sext i32 %596 to i64, !dbg !2768
  %arrayidx534 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 %idxprom533, !dbg !2768
  %597 = bitcast %struct.dcomplex* %.compoundliteral516 to { double, double }*, !dbg !2768
  %598 = getelementptr inbounds { double, double }, { double, double }* %597, i32 0, i32 0, !dbg !2768
  %599 = ptrtoint double* %598 to i64
  call void @__DiscoPoPOpenMPRead(i64 %599, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1597, i32 0, i32 0))
  %600 = load double, double* %598, align 8, !dbg !2768
  %601 = getelementptr inbounds { double, double }, { double, double }* %597, i32 0, i32 1, !dbg !2768
  %602 = ptrtoint double* %601 to i64
  call void @__DiscoPoPOpenMPRead(i64 %602, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1598, i32 0, i32 0))
  %603 = load double, double* %601, align 8, !dbg !2768
  %604 = bitcast %struct.dcomplex* %arrayidx534 to { double, double }*, !dbg !2768
  %605 = getelementptr inbounds { double, double }, { double, double }* %604, i32 0, i32 0, !dbg !2768
  %606 = ptrtoint double* %605 to i64
  call void @__DiscoPoPOpenMPRead(i64 %606, i32 16, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1599, i32 0, i32 0))
  %607 = load double, double* %605, align 16, !dbg !2768
  %608 = getelementptr inbounds { double, double }, { double, double }* %604, i32 0, i32 1, !dbg !2768
  %609 = ptrtoint double* %608 to i64
  call void @__DiscoPoPOpenMPRead(i64 %609, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1600, i32 0, i32 0))
  %610 = load double, double* %608, align 8, !dbg !2768
  %call535 = call { double, double } @dcmplx_div(double %600, double %603, double %607, double %610), !dbg !2770
  %611 = bitcast %struct.dcomplex* %coerce536 to { double, double }*, !dbg !2768
  %612 = getelementptr inbounds { double, double }, { double, double }* %611, i32 0, i32 0, !dbg !2768
  %613 = extractvalue { double, double } %call535, 0, !dbg !2768
  %614 = ptrtoint double* %612 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %614, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1601, i32 0, i32 0))
  store double %613, double* %612, align 8, !dbg !2768
  %615 = getelementptr inbounds { double, double }, { double, double }* %611, i32 0, i32 1, !dbg !2768
  %616 = extractvalue { double, double } %call535, 1, !dbg !2768
  %617 = ptrtoint double* %615 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %617, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1602, i32 0, i32 0))
  store double %616, double* %615, align 8, !dbg !2768
  %real537 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %coerce536, i32 0, i32 0, !dbg !2768
  %618 = ptrtoint double* %real537 to i64
  call void @__DiscoPoPOpenMPRead(i64 %618, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1603, i32 0, i32 0))
  %619 = load double, double* %real537, align 8, !dbg !2768
  %mul = fmul double %576, %619, !dbg !2768
  %real539 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral538, i32 0, i32 0, !dbg !2768
  %620 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %620, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1604, i32 0, i32 0))
  %621 = load i32, i32* %i, align 4, !dbg !2768
  %idxprom540 = sext i32 %621 to i64, !dbg !2768
  %arrayidx541 = getelementptr inbounds [7 x %struct.dcomplex], [7 x %struct.dcomplex]* @sums, i64 0, i64 %idxprom540, !dbg !2768
  %real542 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx541, i32 0, i32 0, !dbg !2768
  %622 = ptrtoint double* %real542 to i64
  call void @__DiscoPoPOpenMPRead(i64 %622, i32 16, i32 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1605, i32 0, i32 0))
  %623 = load double, double* %real542, align 16, !dbg !2768
  %624 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %624, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1606, i32 0, i32 0))
  %625 = load i32, i32* %i, align 4, !dbg !2768
  %idxprom543 = sext i32 %625 to i64, !dbg !2768
  %arrayidx544 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 %idxprom543, !dbg !2768
  %real545 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx544, i32 0, i32 0, !dbg !2768
  %626 = ptrtoint double* %real545 to i64
  call void @__DiscoPoPOpenMPRead(i64 %626, i32 16, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1607, i32 0, i32 0))
  %627 = load double, double* %real545, align 16, !dbg !2768
  %sub546 = fsub double %623, %627, !dbg !2768
  %628 = ptrtoint double* %real539 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %628, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1608, i32 0, i32 0))
  store double %sub546, double* %real539, align 8, !dbg !2768
  %imag547 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral538, i32 0, i32 1, !dbg !2768
  %629 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %629, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1609, i32 0, i32 0))
  %630 = load i32, i32* %i, align 4, !dbg !2768
  %idxprom548 = sext i32 %630 to i64, !dbg !2768
  %arrayidx549 = getelementptr inbounds [7 x %struct.dcomplex], [7 x %struct.dcomplex]* @sums, i64 0, i64 %idxprom548, !dbg !2768
  %imag550 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx549, i32 0, i32 1, !dbg !2768
  %631 = ptrtoint double* %imag550 to i64
  call void @__DiscoPoPOpenMPRead(i64 %631, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1610, i32 0, i32 0))
  %632 = load double, double* %imag550, align 8, !dbg !2768
  %633 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %633, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1611, i32 0, i32 0))
  %634 = load i32, i32* %i, align 4, !dbg !2768
  %idxprom551 = sext i32 %634 to i64, !dbg !2768
  %arrayidx552 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 %idxprom551, !dbg !2768
  %imag553 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx552, i32 0, i32 1, !dbg !2768
  %635 = ptrtoint double* %imag553 to i64
  call void @__DiscoPoPOpenMPRead(i64 %635, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1612, i32 0, i32 0))
  %636 = load double, double* %imag553, align 8, !dbg !2768
  %sub554 = fsub double %632, %636, !dbg !2768
  %637 = ptrtoint double* %imag547 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %637, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1613, i32 0, i32 0))
  store double %sub554, double* %imag547, align 8, !dbg !2768
  %638 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %638, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1614, i32 0, i32 0))
  %639 = load i32, i32* %i, align 4, !dbg !2768
  %idxprom555 = sext i32 %639 to i64, !dbg !2768
  %arrayidx556 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 %idxprom555, !dbg !2768
  %640 = bitcast %struct.dcomplex* %.compoundliteral538 to { double, double }*, !dbg !2768
  %641 = getelementptr inbounds { double, double }, { double, double }* %640, i32 0, i32 0, !dbg !2768
  %642 = ptrtoint double* %641 to i64
  call void @__DiscoPoPOpenMPRead(i64 %642, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1615, i32 0, i32 0))
  %643 = load double, double* %641, align 8, !dbg !2768
  %644 = getelementptr inbounds { double, double }, { double, double }* %640, i32 0, i32 1, !dbg !2768
  %645 = ptrtoint double* %644 to i64
  call void @__DiscoPoPOpenMPRead(i64 %645, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1616, i32 0, i32 0))
  %646 = load double, double* %644, align 8, !dbg !2768
  %647 = bitcast %struct.dcomplex* %arrayidx556 to { double, double }*, !dbg !2768
  %648 = getelementptr inbounds { double, double }, { double, double }* %647, i32 0, i32 0, !dbg !2768
  %649 = ptrtoint double* %648 to i64
  call void @__DiscoPoPOpenMPRead(i64 %649, i32 16, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1617, i32 0, i32 0))
  %650 = load double, double* %648, align 16, !dbg !2768
  %651 = getelementptr inbounds { double, double }, { double, double }* %647, i32 0, i32 1, !dbg !2768
  %652 = ptrtoint double* %651 to i64
  call void @__DiscoPoPOpenMPRead(i64 %652, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1618, i32 0, i32 0))
  %653 = load double, double* %651, align 8, !dbg !2768
  %call557 = call { double, double } @dcmplx_div(double %643, double %646, double %650, double %653), !dbg !2772
  %654 = bitcast %struct.dcomplex* %coerce558 to { double, double }*, !dbg !2768
  %655 = getelementptr inbounds { double, double }, { double, double }* %654, i32 0, i32 0, !dbg !2768
  %656 = extractvalue { double, double } %call557, 0, !dbg !2768
  %657 = ptrtoint double* %655 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %657, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1619, i32 0, i32 0))
  store double %656, double* %655, align 8, !dbg !2768
  %658 = getelementptr inbounds { double, double }, { double, double }* %654, i32 0, i32 1, !dbg !2768
  %659 = extractvalue { double, double } %call557, 1, !dbg !2768
  %660 = ptrtoint double* %658 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %660, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1620, i32 0, i32 0))
  store double %659, double* %658, align 8, !dbg !2768
  %imag559 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %coerce558, i32 0, i32 1, !dbg !2768
  %661 = ptrtoint double* %imag559 to i64
  call void @__DiscoPoPOpenMPRead(i64 %661, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1621, i32 0, i32 0))
  %662 = load double, double* %imag559, align 8, !dbg !2768
  %real561 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral560, i32 0, i32 0, !dbg !2768
  %663 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %663, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1622, i32 0, i32 0))
  %664 = load i32, i32* %i, align 4, !dbg !2768
  %idxprom562 = sext i32 %664 to i64, !dbg !2768
  %arrayidx563 = getelementptr inbounds [7 x %struct.dcomplex], [7 x %struct.dcomplex]* @sums, i64 0, i64 %idxprom562, !dbg !2768
  %real564 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx563, i32 0, i32 0, !dbg !2768
  %665 = ptrtoint double* %real564 to i64
  call void @__DiscoPoPOpenMPRead(i64 %665, i32 16, i32 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1623, i32 0, i32 0))
  %666 = load double, double* %real564, align 16, !dbg !2768
  %667 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %667, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1624, i32 0, i32 0))
  %668 = load i32, i32* %i, align 4, !dbg !2768
  %idxprom565 = sext i32 %668 to i64, !dbg !2768
  %arrayidx566 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 %idxprom565, !dbg !2768
  %real567 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx566, i32 0, i32 0, !dbg !2768
  %669 = ptrtoint double* %real567 to i64
  call void @__DiscoPoPOpenMPRead(i64 %669, i32 16, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1625, i32 0, i32 0))
  %670 = load double, double* %real567, align 16, !dbg !2768
  %sub568 = fsub double %666, %670, !dbg !2768
  %671 = ptrtoint double* %real561 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %671, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1626, i32 0, i32 0))
  store double %sub568, double* %real561, align 8, !dbg !2768
  %imag569 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %.compoundliteral560, i32 0, i32 1, !dbg !2768
  %672 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %672, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1627, i32 0, i32 0))
  %673 = load i32, i32* %i, align 4, !dbg !2768
  %idxprom570 = sext i32 %673 to i64, !dbg !2768
  %arrayidx571 = getelementptr inbounds [7 x %struct.dcomplex], [7 x %struct.dcomplex]* @sums, i64 0, i64 %idxprom570, !dbg !2768
  %imag572 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx571, i32 0, i32 1, !dbg !2768
  %674 = ptrtoint double* %imag572 to i64
  call void @__DiscoPoPOpenMPRead(i64 %674, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1628, i32 0, i32 0))
  %675 = load double, double* %imag572, align 8, !dbg !2768
  %676 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %676, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1629, i32 0, i32 0))
  %677 = load i32, i32* %i, align 4, !dbg !2768
  %idxprom573 = sext i32 %677 to i64, !dbg !2768
  %arrayidx574 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 %idxprom573, !dbg !2768
  %imag575 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %arrayidx574, i32 0, i32 1, !dbg !2768
  %678 = ptrtoint double* %imag575 to i64
  call void @__DiscoPoPOpenMPRead(i64 %678, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1630, i32 0, i32 0))
  %679 = load double, double* %imag575, align 8, !dbg !2768
  %sub576 = fsub double %675, %679, !dbg !2768
  %680 = ptrtoint double* %imag569 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %680, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1631, i32 0, i32 0))
  store double %sub576, double* %imag569, align 8, !dbg !2768
  %681 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %681, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1632, i32 0, i32 0))
  %682 = load i32, i32* %i, align 4, !dbg !2768
  %idxprom577 = sext i32 %682 to i64, !dbg !2768
  %arrayidx578 = getelementptr inbounds [26 x %struct.dcomplex], [26 x %struct.dcomplex]* %csum_ref, i64 0, i64 %idxprom577, !dbg !2768
  %683 = bitcast %struct.dcomplex* %.compoundliteral560 to { double, double }*, !dbg !2768
  %684 = getelementptr inbounds { double, double }, { double, double }* %683, i32 0, i32 0, !dbg !2768
  %685 = ptrtoint double* %684 to i64
  call void @__DiscoPoPOpenMPRead(i64 %685, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1633, i32 0, i32 0))
  %686 = load double, double* %684, align 8, !dbg !2768
  %687 = getelementptr inbounds { double, double }, { double, double }* %683, i32 0, i32 1, !dbg !2768
  %688 = ptrtoint double* %687 to i64
  call void @__DiscoPoPOpenMPRead(i64 %688, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1634, i32 0, i32 0))
  %689 = load double, double* %687, align 8, !dbg !2768
  %690 = bitcast %struct.dcomplex* %arrayidx578 to { double, double }*, !dbg !2768
  %691 = getelementptr inbounds { double, double }, { double, double }* %690, i32 0, i32 0, !dbg !2768
  %692 = ptrtoint double* %691 to i64
  call void @__DiscoPoPOpenMPRead(i64 %692, i32 16, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1635, i32 0, i32 0))
  %693 = load double, double* %691, align 16, !dbg !2768
  %694 = getelementptr inbounds { double, double }, { double, double }* %690, i32 0, i32 1, !dbg !2768
  %695 = ptrtoint double* %694 to i64
  call void @__DiscoPoPOpenMPRead(i64 %695, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1636, i32 0, i32 0))
  %696 = load double, double* %694, align 8, !dbg !2768
  %call579 = call { double, double } @dcmplx_div(double %686, double %689, double %693, double %696), !dbg !2774
  %697 = bitcast %struct.dcomplex* %coerce580 to { double, double }*, !dbg !2768
  %698 = getelementptr inbounds { double, double }, { double, double }* %697, i32 0, i32 0, !dbg !2768
  %699 = extractvalue { double, double } %call579, 0, !dbg !2768
  %700 = ptrtoint double* %698 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %700, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1637, i32 0, i32 0))
  store double %699, double* %698, align 8, !dbg !2768
  %701 = getelementptr inbounds { double, double }, { double, double }* %697, i32 0, i32 1, !dbg !2768
  %702 = extractvalue { double, double } %call579, 1, !dbg !2768
  %703 = ptrtoint double* %701 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %703, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1638, i32 0, i32 0))
  store double %702, double* %701, align 8, !dbg !2768
  %imag581 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %coerce580, i32 0, i32 1, !dbg !2768
  %704 = ptrtoint double* %imag581 to i64
  call void @__DiscoPoPOpenMPRead(i64 %704, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1639, i32 0, i32 0))
  %705 = load double, double* %imag581, align 8, !dbg !2768
  %mul582 = fmul double %662, %705, !dbg !2768
  %add = fadd double %mul, %mul582, !dbg !2768
  %call583 = call double @sqrt(double %add) #7, !dbg !2776
  %706 = ptrtoint double* %err to i64
  call void @__DiscoPoPOpenMPWrite(i64 %706, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1640, i32 0, i32 0))
  store double %call583, double* %err, align 8, !dbg !2778
  %707 = ptrtoint double* %err to i64
  call void @__DiscoPoPOpenMPRead(i64 %707, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1641, i32 0, i32 0))
  %708 = load double, double* %err, align 8, !dbg !2779
  %709 = ptrtoint double* %epsilon to i64
  call void @__DiscoPoPOpenMPRead(i64 %709, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1642, i32 0, i32 0))
  %710 = load double, double* %epsilon, align 8, !dbg !2781
  %cmp584 = fcmp ole double %708, %710, !dbg !2782
  br i1 %cmp584, label %if.end587, label %if.then586, !dbg !2783

if.then586:                                       ; preds = %for.body
  %711 = ptrtoint i32** %verified.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %711, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1643, i32 0, i32 0))
  %712 = load i32*, i32** %verified.addr, align 8, !dbg !2784
  %713 = ptrtoint i32* %712 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %713, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1644, i32 0, i32 0))
  store i32 0, i32* %712, align 4, !dbg !2786
  br label %for.end, !dbg !2787

if.end587:                                        ; preds = %for.body
  br label %for.inc, !dbg !2788

for.inc:                                          ; preds = %if.end587
  %714 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %714, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1645, i32 0, i32 0))
  %715 = load i32, i32* %i, align 4, !dbg !2789
  %inc = add nsw i32 %715, 1, !dbg !2789
  %716 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %716, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1646, i32 0, i32 0))
  store i32 %inc, i32* %i, align 4, !dbg !2789
  br label %for.cond, !dbg !2791

for.end:                                          ; preds = %if.then586, %for.cond
  br label %if.end588, !dbg !2792

if.end588:                                        ; preds = %for.end, %if.end492
  %717 = ptrtoint i8** %Class.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %717, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1647, i32 0, i32 0))
  %718 = load i8*, i8** %Class.addr, align 8, !dbg !2793
  %719 = ptrtoint i8* %718 to i64
  call void @__DiscoPoPOpenMPRead(i64 %719, i32 1, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1648, i32 0, i32 0))
  %720 = load i8, i8* %718, align 1, !dbg !2795
  %conv589 = sext i8 %720 to i32, !dbg !2795
  %cmp590 = icmp ne i32 %conv589, 85, !dbg !2796
  br i1 %cmp590, label %if.then592, label %if.end598, !dbg !2797

if.then592:                                       ; preds = %if.end588
  %721 = ptrtoint i32** %verified.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %721, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1649, i32 0, i32 0))
  %722 = load i32*, i32** %verified.addr, align 8, !dbg !2798
  %723 = ptrtoint i32* %722 to i64
  call void @__DiscoPoPOpenMPRead(i64 %723, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1650, i32 0, i32 0))
  %724 = load i32, i32* %722, align 4, !dbg !2801
  %tobool = icmp ne i32 %724, 0, !dbg !2801
  br i1 %tobool, label %if.then593, label %if.else595, !dbg !2802

if.then593:                                       ; preds = %if.then592
  %call594 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.33, i32 0, i32 0)), !dbg !2803
  br label %if.end597, !dbg !2805

if.else595:                                       ; preds = %if.then592
  %call596 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.34, i32 0, i32 0)), !dbg !2806
  br label %if.end597

if.end597:                                        ; preds = %if.else595, %if.then593
  br label %if.end598, !dbg !2808

if.end598:                                        ; preds = %if.end597, %if.end588
  %725 = ptrtoint i8** %Class.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %725, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1651, i32 0, i32 0))
  %726 = load i8*, i8** %Class.addr, align 8, !dbg !2809
  %727 = ptrtoint i8* %726 to i64
  call void @__DiscoPoPOpenMPRead(i64 %727, i32 1, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1652, i32 0, i32 0))
  %728 = load i8, i8* %726, align 1, !dbg !2810
  %conv599 = sext i8 %728 to i32, !dbg !2810
  %call600 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.35, i32 0, i32 0), i32 %conv599), !dbg !2811
  ret void, !dbg !2812
}

; Function Attrs: inlinehint nounwind uwtable
define internal { double, double } @dcmplx_div(double %z1.coerce0, double %z1.coerce1, double %z2.coerce0, double %z2.coerce1) #6 !dbg !2813 {
entry:
  %retval = alloca %struct.dcomplex, align 8
  %z1 = alloca %struct.dcomplex, align 8
  %z2 = alloca %struct.dcomplex, align 8
  %a = alloca double, align 8
  %b = alloca double, align 8
  %c = alloca double, align 8
  %d = alloca double, align 8
  %divisor = alloca double, align 8
  %real4 = alloca double, align 8
  %imag8 = alloca double, align 8
  %result = alloca %struct.dcomplex, align 8
  %0 = bitcast %struct.dcomplex* %z1 to { double, double }*
  %1 = getelementptr inbounds { double, double }, { double, double }* %0, i32 0, i32 0
  %2 = ptrtoint double* %1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1653, i32 0, i32 0))
  store double %z1.coerce0, double* %1, align 8
  %3 = getelementptr inbounds { double, double }, { double, double }* %0, i32 0, i32 1
  %4 = ptrtoint double* %3 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1654, i32 0, i32 0))
  store double %z1.coerce1, double* %3, align 8
  %5 = bitcast %struct.dcomplex* %z2 to { double, double }*
  %6 = getelementptr inbounds { double, double }, { double, double }* %5, i32 0, i32 0
  %7 = ptrtoint double* %6 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %7, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1655, i32 0, i32 0))
  store double %z2.coerce0, double* %6, align 8
  %8 = getelementptr inbounds { double, double }, { double, double }* %5, i32 0, i32 1
  %9 = ptrtoint double* %8 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %9, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1656, i32 0, i32 0))
  store double %z2.coerce1, double* %8, align 8
  call void @llvm.dbg.declare(metadata %struct.dcomplex* %z1, metadata !2816, metadata !98), !dbg !2817
  call void @llvm.dbg.declare(metadata %struct.dcomplex* %z2, metadata !2818, metadata !98), !dbg !2819
  call void @llvm.dbg.declare(metadata double* %a, metadata !2820, metadata !98), !dbg !2821
  %real = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %z1, i32 0, i32 0, !dbg !2822
  %10 = ptrtoint double* %real to i64
  call void @__DiscoPoPOpenMPRead(i64 %10, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1657, i32 0, i32 0))
  %11 = load double, double* %real, align 8, !dbg !2822
  %12 = ptrtoint double* %a to i64
  call void @__DiscoPoPOpenMPWrite(i64 %12, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1658, i32 0, i32 0))
  store double %11, double* %a, align 8, !dbg !2821
  call void @llvm.dbg.declare(metadata double* %b, metadata !2823, metadata !98), !dbg !2824
  %imag = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %z1, i32 0, i32 1, !dbg !2825
  %13 = ptrtoint double* %imag to i64
  call void @__DiscoPoPOpenMPRead(i64 %13, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1659, i32 0, i32 0))
  %14 = load double, double* %imag, align 8, !dbg !2825
  %15 = ptrtoint double* %b to i64
  call void @__DiscoPoPOpenMPWrite(i64 %15, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1660, i32 0, i32 0))
  store double %14, double* %b, align 8, !dbg !2824
  call void @llvm.dbg.declare(metadata double* %c, metadata !2826, metadata !98), !dbg !2827
  %real1 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %z2, i32 0, i32 0, !dbg !2828
  %16 = ptrtoint double* %real1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %16, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1661, i32 0, i32 0))
  %17 = load double, double* %real1, align 8, !dbg !2828
  %18 = ptrtoint double* %c to i64
  call void @__DiscoPoPOpenMPWrite(i64 %18, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1662, i32 0, i32 0))
  store double %17, double* %c, align 8, !dbg !2827
  call void @llvm.dbg.declare(metadata double* %d, metadata !2829, metadata !98), !dbg !2830
  %imag2 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %z2, i32 0, i32 1, !dbg !2831
  %19 = ptrtoint double* %imag2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %19, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1663, i32 0, i32 0))
  %20 = load double, double* %imag2, align 8, !dbg !2831
  %21 = ptrtoint double* %d to i64
  call void @__DiscoPoPOpenMPWrite(i64 %21, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1664, i32 0, i32 0))
  store double %20, double* %d, align 8, !dbg !2830
  call void @llvm.dbg.declare(metadata double* %divisor, metadata !2832, metadata !98), !dbg !2833
  %22 = ptrtoint double* %c to i64
  call void @__DiscoPoPOpenMPRead(i64 %22, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1665, i32 0, i32 0))
  %23 = load double, double* %c, align 8, !dbg !2834
  %24 = ptrtoint double* %c to i64
  call void @__DiscoPoPOpenMPRead(i64 %24, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1666, i32 0, i32 0))
  %25 = load double, double* %c, align 8, !dbg !2835
  %mul = fmul double %23, %25, !dbg !2836
  %26 = ptrtoint double* %d to i64
  call void @__DiscoPoPOpenMPRead(i64 %26, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1667, i32 0, i32 0))
  %27 = load double, double* %d, align 8, !dbg !2837
  %28 = ptrtoint double* %d to i64
  call void @__DiscoPoPOpenMPRead(i64 %28, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1668, i32 0, i32 0))
  %29 = load double, double* %d, align 8, !dbg !2838
  %mul3 = fmul double %27, %29, !dbg !2839
  %add = fadd double %mul, %mul3, !dbg !2840
  %30 = ptrtoint double* %divisor to i64
  call void @__DiscoPoPOpenMPWrite(i64 %30, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1669, i32 0, i32 0))
  store double %add, double* %divisor, align 8, !dbg !2833
  call void @llvm.dbg.declare(metadata double* %real4, metadata !2841, metadata !98), !dbg !2842
  %31 = ptrtoint double* %a to i64
  call void @__DiscoPoPOpenMPRead(i64 %31, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1670, i32 0, i32 0))
  %32 = load double, double* %a, align 8, !dbg !2843
  %33 = ptrtoint double* %c to i64
  call void @__DiscoPoPOpenMPRead(i64 %33, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1671, i32 0, i32 0))
  %34 = load double, double* %c, align 8, !dbg !2844
  %mul5 = fmul double %32, %34, !dbg !2845
  %35 = ptrtoint double* %b to i64
  call void @__DiscoPoPOpenMPRead(i64 %35, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1672, i32 0, i32 0))
  %36 = load double, double* %b, align 8, !dbg !2846
  %37 = ptrtoint double* %d to i64
  call void @__DiscoPoPOpenMPRead(i64 %37, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1673, i32 0, i32 0))
  %38 = load double, double* %d, align 8, !dbg !2847
  %mul6 = fmul double %36, %38, !dbg !2848
  %add7 = fadd double %mul5, %mul6, !dbg !2849
  %39 = ptrtoint double* %divisor to i64
  call void @__DiscoPoPOpenMPRead(i64 %39, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1674, i32 0, i32 0))
  %40 = load double, double* %divisor, align 8, !dbg !2850
  %div = fdiv double %add7, %40, !dbg !2851
  %41 = ptrtoint double* %real4 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %41, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1675, i32 0, i32 0))
  store double %div, double* %real4, align 8, !dbg !2842
  call void @llvm.dbg.declare(metadata double* %imag8, metadata !2852, metadata !98), !dbg !2853
  %42 = ptrtoint double* %b to i64
  call void @__DiscoPoPOpenMPRead(i64 %42, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1676, i32 0, i32 0))
  %43 = load double, double* %b, align 8, !dbg !2854
  %44 = ptrtoint double* %c to i64
  call void @__DiscoPoPOpenMPRead(i64 %44, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1677, i32 0, i32 0))
  %45 = load double, double* %c, align 8, !dbg !2855
  %mul9 = fmul double %43, %45, !dbg !2856
  %46 = ptrtoint double* %a to i64
  call void @__DiscoPoPOpenMPRead(i64 %46, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1678, i32 0, i32 0))
  %47 = load double, double* %a, align 8, !dbg !2857
  %48 = ptrtoint double* %d to i64
  call void @__DiscoPoPOpenMPRead(i64 %48, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1679, i32 0, i32 0))
  %49 = load double, double* %d, align 8, !dbg !2858
  %mul10 = fmul double %47, %49, !dbg !2859
  %sub = fsub double %mul9, %mul10, !dbg !2860
  %50 = ptrtoint double* %divisor to i64
  call void @__DiscoPoPOpenMPRead(i64 %50, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1680, i32 0, i32 0))
  %51 = load double, double* %divisor, align 8, !dbg !2861
  %div11 = fdiv double %sub, %51, !dbg !2862
  %52 = ptrtoint double* %imag8 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %52, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1681, i32 0, i32 0))
  store double %div11, double* %imag8, align 8, !dbg !2853
  call void @llvm.dbg.declare(metadata %struct.dcomplex* %result, metadata !2863, metadata !98), !dbg !2864
  %real12 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %result, i32 0, i32 0, !dbg !2865
  %53 = ptrtoint double* %real4 to i64
  call void @__DiscoPoPOpenMPRead(i64 %53, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1682, i32 0, i32 0))
  %54 = load double, double* %real4, align 8, !dbg !2866
  %55 = ptrtoint double* %real12 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %55, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1683, i32 0, i32 0))
  store double %54, double* %real12, align 8, !dbg !2865
  %imag13 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %result, i32 0, i32 1, !dbg !2865
  %56 = ptrtoint double* %imag8 to i64
  call void @__DiscoPoPOpenMPRead(i64 %56, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1684, i32 0, i32 0))
  %57 = load double, double* %imag8, align 8, !dbg !2867
  %58 = ptrtoint double* %imag13 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %58, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1685, i32 0, i32 0))
  store double %57, double* %imag13, align 8, !dbg !2865
  %59 = bitcast %struct.dcomplex* %retval to i8*, !dbg !2868
  %60 = bitcast %struct.dcomplex* %result to i8*, !dbg !2868
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %59, i8* %60, i64 16, i32 8, i1 false), !dbg !2868
  %61 = bitcast %struct.dcomplex* %retval to { double, double }*, !dbg !2869
  %62 = ptrtoint { double, double }* %61 to i64
  call void @__DiscoPoPOpenMPRead(i64 %62, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1686, i32 0, i32 0))
  %63 = load { double, double }, { double, double }* %61, align 8, !dbg !2869
  ret { double, double } %63, !dbg !2869
}

; Function Attrs: nounwind
declare double @sqrt(double) #4

; Function Attrs: nounwind
declare double @log(double) #4

; Function Attrs: nounwind uwtable
define internal void @print_timers() #0 !dbg !2870 {
entry:
  %i = alloca i32, align 4
  %t = alloca double, align 8
  %t_m = alloca double, align 8
  %tstrings = alloca [9 x i8*], align 16
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2871, metadata !98), !dbg !2872
  call void @llvm.dbg.declare(metadata double* %t, metadata !2873, metadata !98), !dbg !2874
  call void @llvm.dbg.declare(metadata double* %t_m, metadata !2875, metadata !98), !dbg !2876
  call void @llvm.dbg.declare(metadata [9 x i8*]* %tstrings, metadata !2877, metadata !98), !dbg !2881
  %arrayidx = getelementptr inbounds [9 x i8*], [9 x i8*]* %tstrings, i64 0, i64 1, !dbg !2882
  %0 = ptrtoint i8** %arrayidx to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1687, i32 0, i32 0))
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.18, i32 0, i32 0), i8** %arrayidx, align 8, !dbg !2883
  %arrayidx1 = getelementptr inbounds [9 x i8*], [9 x i8*]* %tstrings, i64 0, i64 2, !dbg !2884
  %1 = ptrtoint i8** %arrayidx1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1688, i32 0, i32 0))
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.19, i32 0, i32 0), i8** %arrayidx1, align 16, !dbg !2885
  %arrayidx2 = getelementptr inbounds [9 x i8*], [9 x i8*]* %tstrings, i64 0, i64 3, !dbg !2886
  %2 = ptrtoint i8** %arrayidx2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1689, i32 0, i32 0))
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.20, i32 0, i32 0), i8** %arrayidx2, align 8, !dbg !2887
  %arrayidx3 = getelementptr inbounds [9 x i8*], [9 x i8*]* %tstrings, i64 0, i64 4, !dbg !2888
  %3 = ptrtoint i8** %arrayidx3 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1690, i32 0, i32 0))
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.21, i32 0, i32 0), i8** %arrayidx3, align 16, !dbg !2889
  %arrayidx4 = getelementptr inbounds [9 x i8*], [9 x i8*]* %tstrings, i64 0, i64 5, !dbg !2890
  %4 = ptrtoint i8** %arrayidx4 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1691, i32 0, i32 0))
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.22, i32 0, i32 0), i8** %arrayidx4, align 8, !dbg !2891
  %arrayidx5 = getelementptr inbounds [9 x i8*], [9 x i8*]* %tstrings, i64 0, i64 6, !dbg !2892
  %5 = ptrtoint i8** %arrayidx5 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1692, i32 0, i32 0))
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.23, i32 0, i32 0), i8** %arrayidx5, align 16, !dbg !2893
  %arrayidx6 = getelementptr inbounds [9 x i8*], [9 x i8*]* %tstrings, i64 0, i64 7, !dbg !2894
  %6 = ptrtoint i8** %arrayidx6 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1693, i32 0, i32 0))
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.24, i32 0, i32 0), i8** %arrayidx6, align 8, !dbg !2895
  %arrayidx7 = getelementptr inbounds [9 x i8*], [9 x i8*]* %tstrings, i64 0, i64 8, !dbg !2896
  %7 = ptrtoint i8** %arrayidx7 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %7, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1694, i32 0, i32 0))
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.25, i32 0, i32 0), i8** %arrayidx7, align 16, !dbg !2897
  %call = call double @timer_read(i32 1), !dbg !2898
  %8 = ptrtoint double* %t_m to i64
  call void @__DiscoPoPOpenMPWrite(i64 %8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1695, i32 0, i32 0))
  store double %call, double* %t_m, align 8, !dbg !2899
  %9 = ptrtoint double* %t_m to i64
  call void @__DiscoPoPOpenMPRead(i64 %9, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1696, i32 0, i32 0))
  %10 = load double, double* %t_m, align 8, !dbg !2900
  %cmp = fcmp ole double %10, 0.000000e+00, !dbg !2902
  br i1 %cmp, label %if.then, label %if.end, !dbg !2903

if.then:                                          ; preds = %entry
  %11 = ptrtoint double* %t_m to i64
  call void @__DiscoPoPOpenMPWrite(i64 %11, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1697, i32 0, i32 0))
  store double 1.000000e+00, double* %t_m, align 8, !dbg !2904
  br label %if.end, !dbg !2906

if.end:                                           ; preds = %if.then, %entry
  %12 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %12, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1698, i32 0, i32 0))
  store i32 1, i32* %i, align 4, !dbg !2907
  br label %for.cond, !dbg !2909

for.cond:                                         ; preds = %for.inc, %if.end
  %13 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %13, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1699, i32 0, i32 0))
  %14 = load i32, i32* %i, align 4, !dbg !2910
  %cmp8 = icmp sle i32 %14, 8, !dbg !2913
  br i1 %cmp8, label %for.body, label %for.end, !dbg !2914

for.body:                                         ; preds = %for.cond
  %15 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %15, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1700, i32 0, i32 0))
  %16 = load i32, i32* %i, align 4, !dbg !2915
  %call9 = call double @timer_read(i32 %16), !dbg !2917
  %17 = ptrtoint double* %t to i64
  call void @__DiscoPoPOpenMPWrite(i64 %17, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1701, i32 0, i32 0))
  store double %call9, double* %t, align 8, !dbg !2918
  %18 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %18, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1702, i32 0, i32 0))
  %19 = load i32, i32* %i, align 4, !dbg !2919
  %20 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %20, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1703, i32 0, i32 0))
  %21 = load i32, i32* %i, align 4, !dbg !2920
  %idxprom = sext i32 %21 to i64, !dbg !2921
  %arrayidx10 = getelementptr inbounds [9 x i8*], [9 x i8*]* %tstrings, i64 0, i64 %idxprom, !dbg !2921
  %22 = ptrtoint i8** %arrayidx10 to i64
  call void @__DiscoPoPOpenMPRead(i64 %22, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1704, i32 0, i32 0))
  %23 = load i8*, i8** %arrayidx10, align 8, !dbg !2921
  %24 = ptrtoint double* %t to i64
  call void @__DiscoPoPOpenMPRead(i64 %24, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1705, i32 0, i32 0))
  %25 = load double, double* %t, align 8, !dbg !2922
  %26 = ptrtoint double* %t to i64
  call void @__DiscoPoPOpenMPRead(i64 %26, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1706, i32 0, i32 0))
  %27 = load double, double* %t, align 8, !dbg !2923
  %mul = fmul double %27, 1.000000e+02, !dbg !2924
  %28 = ptrtoint double* %t_m to i64
  call void @__DiscoPoPOpenMPRead(i64 %28, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1707, i32 0, i32 0))
  %29 = load double, double* %t_m, align 8, !dbg !2925
  %div = fdiv double %mul, %29, !dbg !2926
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.26, i32 0, i32 0), i32 %19, i8* %23, double %25, double %div), !dbg !2927
  br label %for.inc, !dbg !2928

for.inc:                                          ; preds = %for.body
  %30 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %30, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1708, i32 0, i32 0))
  %31 = load i32, i32* %i, align 4, !dbg !2929
  %inc = add nsw i32 %31, 1, !dbg !2929
  %32 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %32, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1709, i32 0, i32 0))
  store i32 %inc, i32* %i, align 4, !dbg !2929
  br label %for.cond, !dbg !2931

for.end:                                          ; preds = %for.cond
  ret void, !dbg !2932
}

; Function Attrs: nounwind uwtable
define void @print_results(i8* %name, i8 signext %class, i32 %n1, i32 %n2, i32 %n3, i32 %niter, double %t, double %mops, i8* %optype, i32 %verified, i8* %npbversion, i8* %compiletime, i8* %cs1, i8* %cs2, i8* %cs3, i8* %cs4, i8* %cs5, i8* %cs6, i8* %cs7) #0 !dbg !2933 {
entry:
  %name.addr = alloca i8*, align 8
  %class.addr = alloca i8, align 1
  %n1.addr = alloca i32, align 4
  %n2.addr = alloca i32, align 4
  %n3.addr = alloca i32, align 4
  %niter.addr = alloca i32, align 4
  %t.addr = alloca double, align 8
  %mops.addr = alloca double, align 8
  %optype.addr = alloca i8*, align 8
  %verified.addr = alloca i32, align 4
  %npbversion.addr = alloca i8*, align 8
  %compiletime.addr = alloca i8*, align 8
  %cs1.addr = alloca i8*, align 8
  %cs2.addr = alloca i8*, align 8
  %cs3.addr = alloca i8*, align 8
  %cs4.addr = alloca i8*, align 8
  %cs5.addr = alloca i8*, align 8
  %cs6.addr = alloca i8*, align 8
  %cs7.addr = alloca i8*, align 8
  %size = alloca [16 x i8], align 16
  %j = alloca i32, align 4
  %num_threads = alloca i32, align 4
  %max_threads = alloca i32, align 4
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  %2 = ptrtoint i8** %name.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1710, i32 0, i32 0))
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !2938, metadata !98), !dbg !2939
  %3 = ptrtoint i8* %class.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1711, i32 0, i32 0))
  store i8 %class, i8* %class.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %class.addr, metadata !2940, metadata !98), !dbg !2941
  %4 = ptrtoint i32* %n1.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1712, i32 0, i32 0))
  store i32 %n1, i32* %n1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n1.addr, metadata !2942, metadata !98), !dbg !2943
  %5 = ptrtoint i32* %n2.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1713, i32 0, i32 0))
  store i32 %n2, i32* %n2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n2.addr, metadata !2944, metadata !98), !dbg !2945
  %6 = ptrtoint i32* %n3.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1714, i32 0, i32 0))
  store i32 %n3, i32* %n3.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n3.addr, metadata !2946, metadata !98), !dbg !2947
  %7 = ptrtoint i32* %niter.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %7, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1715, i32 0, i32 0))
  store i32 %niter, i32* %niter.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %niter.addr, metadata !2948, metadata !98), !dbg !2949
  %8 = ptrtoint double* %t.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1716, i32 0, i32 0))
  store double %t, double* %t.addr, align 8
  call void @llvm.dbg.declare(metadata double* %t.addr, metadata !2950, metadata !98), !dbg !2951
  %9 = ptrtoint double* %mops.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %9, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1717, i32 0, i32 0))
  store double %mops, double* %mops.addr, align 8
  call void @llvm.dbg.declare(metadata double* %mops.addr, metadata !2952, metadata !98), !dbg !2953
  %10 = ptrtoint i8** %optype.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %10, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1718, i32 0, i32 0))
  store i8* %optype, i8** %optype.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optype.addr, metadata !2954, metadata !98), !dbg !2955
  %11 = ptrtoint i32* %verified.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %11, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1719, i32 0, i32 0))
  store i32 %verified, i32* %verified.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %verified.addr, metadata !2956, metadata !98), !dbg !2957
  %12 = ptrtoint i8** %npbversion.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %12, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1720, i32 0, i32 0))
  store i8* %npbversion, i8** %npbversion.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %npbversion.addr, metadata !2958, metadata !98), !dbg !2959
  %13 = ptrtoint i8** %compiletime.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %13, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1721, i32 0, i32 0))
  store i8* %compiletime, i8** %compiletime.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %compiletime.addr, metadata !2960, metadata !98), !dbg !2961
  %14 = ptrtoint i8** %cs1.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %14, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1722, i32 0, i32 0))
  store i8* %cs1, i8** %cs1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cs1.addr, metadata !2962, metadata !98), !dbg !2963
  %15 = ptrtoint i8** %cs2.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %15, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1723, i32 0, i32 0))
  store i8* %cs2, i8** %cs2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cs2.addr, metadata !2964, metadata !98), !dbg !2965
  %16 = ptrtoint i8** %cs3.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %16, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1724, i32 0, i32 0))
  store i8* %cs3, i8** %cs3.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cs3.addr, metadata !2966, metadata !98), !dbg !2967
  %17 = ptrtoint i8** %cs4.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1725, i32 0, i32 0))
  store i8* %cs4, i8** %cs4.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cs4.addr, metadata !2968, metadata !98), !dbg !2969
  %18 = ptrtoint i8** %cs5.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %18, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1726, i32 0, i32 0))
  store i8* %cs5, i8** %cs5.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cs5.addr, metadata !2970, metadata !98), !dbg !2971
  %19 = ptrtoint i8** %cs6.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %19, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1727, i32 0, i32 0))
  store i8* %cs6, i8** %cs6.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cs6.addr, metadata !2972, metadata !98), !dbg !2973
  %20 = ptrtoint i8** %cs7.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %20, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1728, i32 0, i32 0))
  store i8* %cs7, i8** %cs7.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cs7.addr, metadata !2974, metadata !98), !dbg !2975
  call void @llvm.dbg.declare(metadata [16 x i8]* %size, metadata !2976, metadata !98), !dbg !2980
  call void @llvm.dbg.declare(metadata i32* %j, metadata !2981, metadata !98), !dbg !2982
  call void @llvm.dbg.declare(metadata i32* %num_threads, metadata !2983, metadata !98), !dbg !2984
  call void @llvm.dbg.declare(metadata i32* %max_threads, metadata !2985, metadata !98), !dbg !2986
  %21 = ptrtoint i32* %max_threads to i64
  call void @__DiscoPoPOpenMPWrite(i64 %21, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1729, i32 0, i32 0))
  store i32 1, i32* %max_threads, align 4, !dbg !2987
  %22 = ptrtoint i32* %num_threads to i64
  call void @__DiscoPoPOpenMPWrite(i64 %22, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1730, i32 0, i32 0))
  store i32 1, i32* %num_threads, align 4, !dbg !2988
  %call = call i32 @omp_get_max_threads(), !dbg !2989
  %23 = ptrtoint i32* %max_threads to i64
  call void @__DiscoPoPOpenMPWrite(i64 %23, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1731, i32 0, i32 0))
  store i32 %call, i32* %max_threads, align 4, !dbg !2990
  %24 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !2991
  %25 = ptrtoint i8** %24 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %25, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1732, i32 0, i32 0))
  store i8* getelementptr inbounds ([38 x i8], [38 x i8]* @12, i32 0, i32 0), i8** %24, align 8, !dbg !2991
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.1734, i32 0, i32 0))
  call void @__DiscoPoPOpenMPAfterCall()
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* %.kmpc_loc.addr, i32 1, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*)* @.omp_outlined..10 to void (i32*, i32*, ...)*), i32* %num_threads), !dbg !2991
  %26 = ptrtoint i8** %name.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %26, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1735, i32 0, i32 0))
  %27 = load i8*, i8** %name.addr, align 8, !dbg !2992
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1.11, i32 0, i32 0), i8* %27), !dbg !2993
  %28 = ptrtoint i8* %class.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %28, i32 1, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1736, i32 0, i32 0))
  %29 = load i8, i8* %class.addr, align 1, !dbg !2994
  %conv = sext i8 %29 to i32, !dbg !2994
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2.12, i32 0, i32 0), i32 %conv), !dbg !2995
  %30 = ptrtoint i32* %n2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %30, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1737, i32 0, i32 0))
  %31 = load i32, i32* %n2.addr, align 4, !dbg !2996
  %cmp = icmp eq i32 %31, 0, !dbg !2998
  br i1 %cmp, label %land.lhs.true, label %if.else31, !dbg !2999

land.lhs.true:                                    ; preds = %entry
  %32 = ptrtoint i32* %n3.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %32, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1738, i32 0, i32 0))
  %33 = load i32, i32* %n3.addr, align 4, !dbg !3000
  %cmp4 = icmp eq i32 %33, 0, !dbg !3002
  br i1 %cmp4, label %if.then, label %if.else31, !dbg !3003

if.then:                                          ; preds = %land.lhs.true
  %34 = ptrtoint i8** %name.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %34, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1739, i32 0, i32 0))
  %35 = load i8*, i8** %name.addr, align 8, !dbg !3004
  %arrayidx = getelementptr inbounds i8, i8* %35, i64 0, !dbg !3004
  %36 = ptrtoint i8* %arrayidx to i64
  call void @__DiscoPoPOpenMPRead(i64 %36, i32 1, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1740, i32 0, i32 0))
  %37 = load i8, i8* %arrayidx, align 1, !dbg !3004
  %conv6 = sext i8 %37 to i32, !dbg !3004
  %cmp7 = icmp eq i32 %conv6, 69, !dbg !3007
  br i1 %cmp7, label %land.lhs.true9, label %if.else, !dbg !3008

land.lhs.true9:                                   ; preds = %if.then
  %38 = ptrtoint i8** %name.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %38, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1741, i32 0, i32 0))
  %39 = load i8*, i8** %name.addr, align 8, !dbg !3009
  %arrayidx10 = getelementptr inbounds i8, i8* %39, i64 1, !dbg !3009
  %40 = ptrtoint i8* %arrayidx10 to i64
  call void @__DiscoPoPOpenMPRead(i64 %40, i32 1, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1742, i32 0, i32 0))
  %41 = load i8, i8* %arrayidx10, align 1, !dbg !3009
  %conv11 = sext i8 %41 to i32, !dbg !3009
  %cmp12 = icmp eq i32 %conv11, 80, !dbg !3011
  br i1 %cmp12, label %if.then14, label %if.else, !dbg !3012

if.then14:                                        ; preds = %land.lhs.true9
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %size, i32 0, i32 0, !dbg !3013
  %42 = ptrtoint i32* %n1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %42, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1743, i32 0, i32 0))
  %43 = load i32, i32* %n1.addr, align 4, !dbg !3015
  %conv15 = sitofp i32 %43 to double, !dbg !3015
  %call16 = call double @pow(double 2.000000e+00, double %conv15) #7, !dbg !3016
  %call17 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3.13, i32 0, i32 0), double %call16) #7, !dbg !3017
  %44 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %44, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1744, i32 0, i32 0))
  store i32 14, i32* %j, align 4, !dbg !3019
  %45 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %45, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1745, i32 0, i32 0))
  %46 = load i32, i32* %j, align 4, !dbg !3020
  %idxprom = sext i32 %46 to i64, !dbg !3022
  %arrayidx18 = getelementptr inbounds [16 x i8], [16 x i8]* %size, i64 0, i64 %idxprom, !dbg !3022
  %47 = ptrtoint i8* %arrayidx18 to i64
  call void @__DiscoPoPOpenMPRead(i64 %47, i32 1, i32 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1746, i32 0, i32 0))
  %48 = load i8, i8* %arrayidx18, align 1, !dbg !3022
  %conv19 = sext i8 %48 to i32, !dbg !3022
  %cmp20 = icmp eq i32 %conv19, 46, !dbg !3023
  br i1 %cmp20, label %if.then22, label %if.end, !dbg !3024

if.then22:                                        ; preds = %if.then14
  %49 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %49, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1747, i32 0, i32 0))
  %50 = load i32, i32* %j, align 4, !dbg !3025
  %idxprom23 = sext i32 %50 to i64, !dbg !3027
  %arrayidx24 = getelementptr inbounds [16 x i8], [16 x i8]* %size, i64 0, i64 %idxprom23, !dbg !3027
  %51 = ptrtoint i8* %arrayidx24 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %51, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1748, i32 0, i32 0))
  store i8 32, i8* %arrayidx24, align 1, !dbg !3028
  %52 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %52, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1749, i32 0, i32 0))
  %53 = load i32, i32* %j, align 4, !dbg !3029
  %dec = add nsw i32 %53, -1, !dbg !3029
  %54 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %54, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1750, i32 0, i32 0))
  store i32 %dec, i32* %j, align 4, !dbg !3029
  br label %if.end, !dbg !3030

if.end:                                           ; preds = %if.then22, %if.then14
  %55 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %55, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1751, i32 0, i32 0))
  %56 = load i32, i32* %j, align 4, !dbg !3031
  %add = add nsw i32 %56, 1, !dbg !3032
  %idxprom25 = sext i32 %add to i64, !dbg !3033
  %arrayidx26 = getelementptr inbounds [16 x i8], [16 x i8]* %size, i64 0, i64 %idxprom25, !dbg !3033
  %57 = ptrtoint i8* %arrayidx26 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %57, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1752, i32 0, i32 0))
  store i8 0, i8* %arrayidx26, align 1, !dbg !3034
  %arraydecay27 = getelementptr inbounds [16 x i8], [16 x i8]* %size, i32 0, i32 0, !dbg !3035
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.4.14, i32 0, i32 0), i8* %arraydecay27), !dbg !3036
  br label %if.end30, !dbg !3037

if.else:                                          ; preds = %land.lhs.true9, %if.then
  %58 = ptrtoint i32* %n1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %58, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1753, i32 0, i32 0))
  %59 = load i32, i32* %n1.addr, align 4, !dbg !3038
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5.15, i32 0, i32 0), i32 %59), !dbg !3040
  br label %if.end30

if.end30:                                         ; preds = %if.else, %if.end
  br label %if.end33, !dbg !3041

if.else31:                                        ; preds = %land.lhs.true, %entry
  %60 = ptrtoint i32* %n1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %60, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1754, i32 0, i32 0))
  %61 = load i32, i32* %n1.addr, align 4, !dbg !3042
  %62 = ptrtoint i32* %n2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %62, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1755, i32 0, i32 0))
  %63 = load i32, i32* %n2.addr, align 4, !dbg !3044
  %64 = ptrtoint i32* %n3.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %64, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1756, i32 0, i32 0))
  %65 = load i32, i32* %n3.addr, align 4, !dbg !3045
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.6.16, i32 0, i32 0), i32 %61, i32 %63, i32 %65), !dbg !3046
  br label %if.end33

if.end33:                                         ; preds = %if.else31, %if.end30
  %66 = ptrtoint i32* %niter.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %66, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1757, i32 0, i32 0))
  %67 = load i32, i32* %niter.addr, align 4, !dbg !3047
  %call34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.7.17, i32 0, i32 0), i32 %67), !dbg !3048
  %68 = ptrtoint double* %t.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %68, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1758, i32 0, i32 0))
  %69 = load double, double* %t.addr, align 8, !dbg !3049
  %call35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.8.18, i32 0, i32 0), double %69), !dbg !3050
  %70 = ptrtoint i32* %num_threads to i64
  call void @__DiscoPoPOpenMPRead(i64 %70, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1759, i32 0, i32 0))
  %71 = load i32, i32* %num_threads, align 4, !dbg !3051
  %call36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.9, i32 0, i32 0), i32 %71), !dbg !3052
  %72 = ptrtoint i32* %max_threads to i64
  call void @__DiscoPoPOpenMPRead(i64 %72, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1760, i32 0, i32 0))
  %73 = load i32, i32* %max_threads, align 4, !dbg !3053
  %call37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.10.19, i32 0, i32 0), i32 %73), !dbg !3054
  %74 = ptrtoint i32* %num_threads to i64
  call void @__DiscoPoPOpenMPRead(i64 %74, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1761, i32 0, i32 0))
  %75 = load i32, i32* %num_threads, align 4, !dbg !3055
  %76 = ptrtoint i32* %max_threads to i64
  call void @__DiscoPoPOpenMPRead(i64 %76, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1762, i32 0, i32 0))
  %77 = load i32, i32* %max_threads, align 4, !dbg !3057
  %cmp38 = icmp ne i32 %75, %77, !dbg !3058
  br i1 %cmp38, label %if.then40, label %if.end42, !dbg !3059

if.then40:                                        ; preds = %if.end33
  %call41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.11.20, i32 0, i32 0)), !dbg !3060
  br label %if.end42, !dbg !3060

if.end42:                                         ; preds = %if.then40, %if.end33
  %78 = ptrtoint double* %mops.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %78, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1763, i32 0, i32 0))
  %79 = load double, double* %mops.addr, align 8, !dbg !3061
  %call43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.12.21, i32 0, i32 0), double %79), !dbg !3062
  %80 = ptrtoint double* %mops.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %80, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1764, i32 0, i32 0))
  %81 = load double, double* %mops.addr, align 8, !dbg !3063
  %82 = ptrtoint i32* %num_threads to i64
  call void @__DiscoPoPOpenMPRead(i64 %82, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1765, i32 0, i32 0))
  %83 = load i32, i32* %num_threads, align 4, !dbg !3064
  %conv44 = sitofp i32 %83 to double, !dbg !3065
  %div = fdiv double %81, %conv44, !dbg !3066
  %call45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.13.22, i32 0, i32 0), double %div), !dbg !3067
  %84 = ptrtoint i8** %optype.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %84, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1766, i32 0, i32 0))
  %85 = load i8*, i8** %optype.addr, align 8, !dbg !3068
  %call46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.14.23, i32 0, i32 0), i8* %85), !dbg !3069
  %86 = ptrtoint i32* %verified.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %86, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1767, i32 0, i32 0))
  %87 = load i32, i32* %verified.addr, align 4, !dbg !3070
  %tobool = icmp ne i32 %87, 0, !dbg !3070
  br i1 %tobool, label %if.then47, label %if.else49, !dbg !3072

if.then47:                                        ; preds = %if.end42
  %call48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.15.24, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16.25, i32 0, i32 0)), !dbg !3073
  br label %if.end51, !dbg !3073

if.else49:                                        ; preds = %if.end42
  %call50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.15.24, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.17, i32 0, i32 0)), !dbg !3074
  br label %if.end51

if.end51:                                         ; preds = %if.else49, %if.then47
  %88 = ptrtoint i8** %npbversion.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %88, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1768, i32 0, i32 0))
  %89 = load i8*, i8** %npbversion.addr, align 8, !dbg !3075
  %call52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.18.26, i32 0, i32 0), i8* %89), !dbg !3076
  %90 = ptrtoint i8** %compiletime.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %90, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1769, i32 0, i32 0))
  %91 = load i8*, i8** %compiletime.addr, align 8, !dbg !3077
  %call53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.19.27, i32 0, i32 0), i8* %91), !dbg !3078
  %92 = ptrtoint i8** %cs1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %92, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1770, i32 0, i32 0))
  %93 = load i8*, i8** %cs1.addr, align 8, !dbg !3079
  %call54 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.20.28, i32 0, i32 0), i8* %93), !dbg !3080
  %94 = ptrtoint i8** %cs2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %94, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1771, i32 0, i32 0))
  %95 = load i8*, i8** %cs2.addr, align 8, !dbg !3081
  %call55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.21.29, i32 0, i32 0), i8* %95), !dbg !3082
  %96 = ptrtoint i8** %cs3.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %96, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1772, i32 0, i32 0))
  %97 = load i8*, i8** %cs3.addr, align 8, !dbg !3083
  %call56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.22.30, i32 0, i32 0), i8* %97), !dbg !3084
  %98 = ptrtoint i8** %cs4.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %98, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1773, i32 0, i32 0))
  %99 = load i8*, i8** %cs4.addr, align 8, !dbg !3085
  %call57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.23.31, i32 0, i32 0), i8* %99), !dbg !3086
  %100 = ptrtoint i8** %cs5.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %100, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1774, i32 0, i32 0))
  %101 = load i8*, i8** %cs5.addr, align 8, !dbg !3087
  %call58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.24.32, i32 0, i32 0), i8* %101), !dbg !3088
  %102 = ptrtoint i8** %cs6.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %102, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1775, i32 0, i32 0))
  %103 = load i8*, i8** %cs6.addr, align 8, !dbg !3089
  %call59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.25.33, i32 0, i32 0), i8* %103), !dbg !3090
  %104 = ptrtoint i8** %cs7.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %104, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1776, i32 0, i32 0))
  %105 = load i8*, i8** %cs7.addr, align 8, !dbg !3091
  %call60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.26.34, i32 0, i32 0), i8* %105), !dbg !3092
  %call61 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([195 x i8], [195 x i8]* @.str.27, i32 0, i32 0)), !dbg !3093
  ret void, !dbg !3094
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..10(i32* noalias %.global_tid., i32* noalias %.bound_tid., i32* dereferenceable(4) %num_threads) #0 !dbg !3095 {
entry:
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([146 x i8], [146 x i8]* @.str.1778, i32 0, i32 0))
  %.global_tid..addr = alloca i32*, align 8
  %.bound_tid..addr = alloca i32*, align 8
  %num_threads.addr = alloca i32*, align 8
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  %2 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1779, i32 0, i32 0))
  store i32* %.global_tid., i32** %.global_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.global_tid..addr, metadata !3098, metadata !98), !dbg !3099
  %3 = ptrtoint i32** %.bound_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1780, i32 0, i32 0))
  store i32* %.bound_tid., i32** %.bound_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.bound_tid..addr, metadata !3100, metadata !98), !dbg !3099
  %4 = ptrtoint i32** %num_threads.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1781, i32 0, i32 0))
  store i32* %num_threads, i32** %num_threads.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %num_threads.addr, metadata !3101, metadata !98), !dbg !3099
  %5 = ptrtoint i32** %num_threads.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %5, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1782, i32 0, i32 0))
  %6 = load i32*, i32** %num_threads.addr, align 8, !dbg !3102
  %7 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !3104
  %8 = ptrtoint i8** %7 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %8, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1783, i32 0, i32 0))
  store i8* getelementptr inbounds ([39 x i8], [39 x i8]* @13, i32 0, i32 0), i8** %7, align 8, !dbg !3104
  %9 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %9, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1784, i32 0, i32 0))
  %10 = load i32*, i32** %.global_tid..addr, align 8, !dbg !3104
  %11 = ptrtoint i32* %10 to i64
  call void @__DiscoPoPOpenMPRead(i64 %11, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1785, i32 0, i32 0))
  %12 = load i32, i32* %10, align 4, !dbg !3104
  call void @__DiscoPoPOpenMPBeforeCall(i8* getelementptr inbounds ([146 x i8], [146 x i8]* @.str.1787, i32 0, i32 0))
  %13 = call i32 @__kmpc_master(%ident_t* %.kmpc_loc.addr, i32 %12), !dbg !3104
  %tobool = icmp ne i32 %13, 0, !dbg !3104
  br i1 %tobool, label %omp_if.then, label %omp_if.end, !dbg !3104

omp_if.then:                                      ; preds = %entry
  %call = call i32 @omp_get_num_threads(), !dbg !3106
  %14 = ptrtoint i32* %6 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %14, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1788, i32 0, i32 0))
  store i32 %call, i32* %6, align 4, !dbg !3108
  call void @__DiscoPoPOpenMPAfterCall()
  call void @__kmpc_end_master(%ident_t* %.kmpc_loc.addr, i32 %12), !dbg !3109
  br label %omp_if.end, !dbg !3111

omp_if.end:                                       ; preds = %omp_if.then, %entry
  call void @__DiscoPoPOpenMPAfterCall()
  ret void, !dbg !3112
}

declare i32 @__kmpc_master(%ident_t*, i32)

declare i32 @omp_get_num_threads() #2

declare void @__kmpc_end_master(%ident_t*, i32)

; Function Attrs: nounwind
declare double @pow(double, double) #4

; Function Attrs: nounwind
declare i32 @sprintf(i8*, i8*, ...) #4

; Function Attrs: nounwind uwtable
define double @randlc(double* %x, double %a) #0 !dbg !3113 {
entry:
  %x.addr = alloca double*, align 8
  %a.addr = alloca double, align 8
  %r23 = alloca double, align 8
  %r46 = alloca double, align 8
  %t23 = alloca double, align 8
  %t46 = alloca double, align 8
  %t1 = alloca double, align 8
  %t2 = alloca double, align 8
  %t3 = alloca double, align 8
  %t4 = alloca double, align 8
  %a1 = alloca double, align 8
  %a2 = alloca double, align 8
  %x1 = alloca double, align 8
  %x2 = alloca double, align 8
  %z = alloca double, align 8
  %r = alloca double, align 8
  %0 = ptrtoint double** %x.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1789, i32 0, i32 0))
  store double* %x, double** %x.addr, align 8
  call void @llvm.dbg.declare(metadata double** %x.addr, metadata !3117, metadata !98), !dbg !3118
  %1 = ptrtoint double* %a.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1790, i32 0, i32 0))
  store double %a, double* %a.addr, align 8
  call void @llvm.dbg.declare(metadata double* %a.addr, metadata !3119, metadata !98), !dbg !3120
  call void @llvm.dbg.declare(metadata double* %r23, metadata !3121, metadata !98), !dbg !3123
  %2 = ptrtoint double* %r23 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1791, i32 0, i32 0))
  store double 0x3E80000000000000, double* %r23, align 8, !dbg !3123
  call void @llvm.dbg.declare(metadata double* %r46, metadata !3124, metadata !98), !dbg !3125
  %3 = ptrtoint double* %r46 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1792, i32 0, i32 0))
  store double 0x3D10000000000000, double* %r46, align 8, !dbg !3125
  call void @llvm.dbg.declare(metadata double* %t23, metadata !3126, metadata !98), !dbg !3127
  %4 = ptrtoint double* %t23 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1793, i32 0, i32 0))
  store double 8.388608e+06, double* %t23, align 8, !dbg !3127
  call void @llvm.dbg.declare(metadata double* %t46, metadata !3128, metadata !98), !dbg !3129
  %5 = ptrtoint double* %t46 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1794, i32 0, i32 0))
  store double 0x42D0000000000000, double* %t46, align 8, !dbg !3129
  call void @llvm.dbg.declare(metadata double* %t1, metadata !3130, metadata !98), !dbg !3131
  call void @llvm.dbg.declare(metadata double* %t2, metadata !3132, metadata !98), !dbg !3133
  call void @llvm.dbg.declare(metadata double* %t3, metadata !3134, metadata !98), !dbg !3135
  call void @llvm.dbg.declare(metadata double* %t4, metadata !3136, metadata !98), !dbg !3137
  call void @llvm.dbg.declare(metadata double* %a1, metadata !3138, metadata !98), !dbg !3139
  call void @llvm.dbg.declare(metadata double* %a2, metadata !3140, metadata !98), !dbg !3141
  call void @llvm.dbg.declare(metadata double* %x1, metadata !3142, metadata !98), !dbg !3143
  call void @llvm.dbg.declare(metadata double* %x2, metadata !3144, metadata !98), !dbg !3145
  call void @llvm.dbg.declare(metadata double* %z, metadata !3146, metadata !98), !dbg !3147
  call void @llvm.dbg.declare(metadata double* %r, metadata !3148, metadata !98), !dbg !3149
  %6 = ptrtoint double* %a.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %6, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1795, i32 0, i32 0))
  %7 = load double, double* %a.addr, align 8, !dbg !3150
  %mul = fmul double 0x3E80000000000000, %7, !dbg !3151
  %8 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1796, i32 0, i32 0))
  store double %mul, double* %t1, align 8, !dbg !3152
  %9 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %9, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1797, i32 0, i32 0))
  %10 = load double, double* %t1, align 8, !dbg !3153
  %conv = fptosi double %10 to i32, !dbg !3154
  %conv1 = sitofp i32 %conv to double, !dbg !3154
  %11 = ptrtoint double* %a1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %11, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1798, i32 0, i32 0))
  store double %conv1, double* %a1, align 8, !dbg !3155
  %12 = ptrtoint double* %a.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %12, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1799, i32 0, i32 0))
  %13 = load double, double* %a.addr, align 8, !dbg !3156
  %14 = ptrtoint double* %a1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %14, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1800, i32 0, i32 0))
  %15 = load double, double* %a1, align 8, !dbg !3157
  %mul2 = fmul double 8.388608e+06, %15, !dbg !3158
  %sub = fsub double %13, %mul2, !dbg !3159
  %16 = ptrtoint double* %a2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1801, i32 0, i32 0))
  store double %sub, double* %a2, align 8, !dbg !3160
  %17 = ptrtoint double** %x.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %17, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1802, i32 0, i32 0))
  %18 = load double*, double** %x.addr, align 8, !dbg !3161
  %19 = ptrtoint double* %18 to i64
  call void @__DiscoPoPOpenMPRead(i64 %19, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1803, i32 0, i32 0))
  %20 = load double, double* %18, align 8, !dbg !3162
  %mul3 = fmul double 0x3E80000000000000, %20, !dbg !3163
  %21 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %21, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1804, i32 0, i32 0))
  store double %mul3, double* %t1, align 8, !dbg !3164
  %22 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %22, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1805, i32 0, i32 0))
  %23 = load double, double* %t1, align 8, !dbg !3165
  %conv4 = fptosi double %23 to i32, !dbg !3166
  %conv5 = sitofp i32 %conv4 to double, !dbg !3166
  %24 = ptrtoint double* %x1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %24, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1806, i32 0, i32 0))
  store double %conv5, double* %x1, align 8, !dbg !3167
  %25 = ptrtoint double** %x.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %25, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1807, i32 0, i32 0))
  %26 = load double*, double** %x.addr, align 8, !dbg !3168
  %27 = ptrtoint double* %26 to i64
  call void @__DiscoPoPOpenMPRead(i64 %27, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1808, i32 0, i32 0))
  %28 = load double, double* %26, align 8, !dbg !3169
  %29 = ptrtoint double* %x1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %29, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1809, i32 0, i32 0))
  %30 = load double, double* %x1, align 8, !dbg !3170
  %mul6 = fmul double 8.388608e+06, %30, !dbg !3171
  %sub7 = fsub double %28, %mul6, !dbg !3172
  %31 = ptrtoint double* %x2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %31, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1810, i32 0, i32 0))
  store double %sub7, double* %x2, align 8, !dbg !3173
  %32 = ptrtoint double* %a1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %32, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1811, i32 0, i32 0))
  %33 = load double, double* %a1, align 8, !dbg !3174
  %34 = ptrtoint double* %x2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %34, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1812, i32 0, i32 0))
  %35 = load double, double* %x2, align 8, !dbg !3175
  %mul8 = fmul double %33, %35, !dbg !3176
  %36 = ptrtoint double* %a2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %36, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1813, i32 0, i32 0))
  %37 = load double, double* %a2, align 8, !dbg !3177
  %38 = ptrtoint double* %x1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %38, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1814, i32 0, i32 0))
  %39 = load double, double* %x1, align 8, !dbg !3178
  %mul9 = fmul double %37, %39, !dbg !3179
  %add = fadd double %mul8, %mul9, !dbg !3180
  %40 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %40, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1815, i32 0, i32 0))
  store double %add, double* %t1, align 8, !dbg !3181
  %41 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %41, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1816, i32 0, i32 0))
  %42 = load double, double* %t1, align 8, !dbg !3182
  %mul10 = fmul double 0x3E80000000000000, %42, !dbg !3183
  %conv11 = fptosi double %mul10 to i32, !dbg !3184
  %conv12 = sitofp i32 %conv11 to double, !dbg !3184
  %43 = ptrtoint double* %t2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %43, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1817, i32 0, i32 0))
  store double %conv12, double* %t2, align 8, !dbg !3185
  %44 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %44, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1818, i32 0, i32 0))
  %45 = load double, double* %t1, align 8, !dbg !3186
  %46 = ptrtoint double* %t2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %46, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1819, i32 0, i32 0))
  %47 = load double, double* %t2, align 8, !dbg !3187
  %mul13 = fmul double 8.388608e+06, %47, !dbg !3188
  %sub14 = fsub double %45, %mul13, !dbg !3189
  %48 = ptrtoint double* %z to i64
  call void @__DiscoPoPOpenMPWrite(i64 %48, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1820, i32 0, i32 0))
  store double %sub14, double* %z, align 8, !dbg !3190
  %49 = ptrtoint double* %z to i64
  call void @__DiscoPoPOpenMPRead(i64 %49, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1821, i32 0, i32 0))
  %50 = load double, double* %z, align 8, !dbg !3191
  %mul15 = fmul double 8.388608e+06, %50, !dbg !3192
  %51 = ptrtoint double* %a2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %51, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1822, i32 0, i32 0))
  %52 = load double, double* %a2, align 8, !dbg !3193
  %53 = ptrtoint double* %x2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %53, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1823, i32 0, i32 0))
  %54 = load double, double* %x2, align 8, !dbg !3194
  %mul16 = fmul double %52, %54, !dbg !3195
  %add17 = fadd double %mul15, %mul16, !dbg !3196
  %55 = ptrtoint double* %t3 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %55, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1824, i32 0, i32 0))
  store double %add17, double* %t3, align 8, !dbg !3197
  %56 = ptrtoint double* %t3 to i64
  call void @__DiscoPoPOpenMPRead(i64 %56, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1825, i32 0, i32 0))
  %57 = load double, double* %t3, align 8, !dbg !3198
  %mul18 = fmul double 0x3D10000000000000, %57, !dbg !3199
  %conv19 = fptosi double %mul18 to i32, !dbg !3200
  %conv20 = sitofp i32 %conv19 to double, !dbg !3200
  %58 = ptrtoint double* %t4 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %58, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1826, i32 0, i32 0))
  store double %conv20, double* %t4, align 8, !dbg !3201
  %59 = ptrtoint double* %t3 to i64
  call void @__DiscoPoPOpenMPRead(i64 %59, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1827, i32 0, i32 0))
  %60 = load double, double* %t3, align 8, !dbg !3202
  %61 = ptrtoint double* %t4 to i64
  call void @__DiscoPoPOpenMPRead(i64 %61, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1828, i32 0, i32 0))
  %62 = load double, double* %t4, align 8, !dbg !3203
  %mul21 = fmul double 0x42D0000000000000, %62, !dbg !3204
  %sub22 = fsub double %60, %mul21, !dbg !3205
  %63 = ptrtoint double** %x.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %63, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1829, i32 0, i32 0))
  %64 = load double*, double** %x.addr, align 8, !dbg !3206
  %65 = ptrtoint double* %64 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %65, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1830, i32 0, i32 0))
  store double %sub22, double* %64, align 8, !dbg !3207
  %66 = ptrtoint double** %x.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %66, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1831, i32 0, i32 0))
  %67 = load double*, double** %x.addr, align 8, !dbg !3208
  %68 = ptrtoint double* %67 to i64
  call void @__DiscoPoPOpenMPRead(i64 %68, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1832, i32 0, i32 0))
  %69 = load double, double* %67, align 8, !dbg !3209
  %mul23 = fmul double 0x3D10000000000000, %69, !dbg !3210
  %70 = ptrtoint double* %r to i64
  call void @__DiscoPoPOpenMPWrite(i64 %70, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1833, i32 0, i32 0))
  store double %mul23, double* %r, align 8, !dbg !3211
  %71 = ptrtoint double* %r to i64
  call void @__DiscoPoPOpenMPRead(i64 %71, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1834, i32 0, i32 0))
  %72 = load double, double* %r, align 8, !dbg !3212
  ret double %72, !dbg !3213
}

; Function Attrs: nounwind uwtable
define void @vranlc(i32 %n, double* %x, double %a, double* %y) #0 !dbg !3214 {
entry:
  %n.addr = alloca i32, align 4
  %x.addr = alloca double*, align 8
  %a.addr = alloca double, align 8
  %y.addr = alloca double*, align 8
  %r23 = alloca double, align 8
  %r46 = alloca double, align 8
  %t23 = alloca double, align 8
  %t46 = alloca double, align 8
  %t1 = alloca double, align 8
  %t2 = alloca double, align 8
  %t3 = alloca double, align 8
  %t4 = alloca double, align 8
  %a1 = alloca double, align 8
  %a2 = alloca double, align 8
  %x1 = alloca double, align 8
  %x2 = alloca double, align 8
  %z = alloca double, align 8
  %i = alloca i32, align 4
  %0 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1835, i32 0, i32 0))
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !3217, metadata !98), !dbg !3218
  %1 = ptrtoint double** %x.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1836, i32 0, i32 0))
  store double* %x, double** %x.addr, align 8
  call void @llvm.dbg.declare(metadata double** %x.addr, metadata !3219, metadata !98), !dbg !3220
  %2 = ptrtoint double* %a.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1837, i32 0, i32 0))
  store double %a, double* %a.addr, align 8
  call void @llvm.dbg.declare(metadata double* %a.addr, metadata !3221, metadata !98), !dbg !3222
  %3 = ptrtoint double** %y.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1838, i32 0, i32 0))
  store double* %y, double** %y.addr, align 8
  call void @llvm.dbg.declare(metadata double** %y.addr, metadata !3223, metadata !98), !dbg !3224
  call void @llvm.dbg.declare(metadata double* %r23, metadata !3225, metadata !98), !dbg !3226
  %4 = ptrtoint double* %r23 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1839, i32 0, i32 0))
  store double 0x3E80000000000000, double* %r23, align 8, !dbg !3226
  call void @llvm.dbg.declare(metadata double* %r46, metadata !3227, metadata !98), !dbg !3228
  %5 = ptrtoint double* %r46 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1840, i32 0, i32 0))
  store double 0x3D10000000000000, double* %r46, align 8, !dbg !3228
  call void @llvm.dbg.declare(metadata double* %t23, metadata !3229, metadata !98), !dbg !3230
  %6 = ptrtoint double* %t23 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1841, i32 0, i32 0))
  store double 8.388608e+06, double* %t23, align 8, !dbg !3230
  call void @llvm.dbg.declare(metadata double* %t46, metadata !3231, metadata !98), !dbg !3232
  %7 = ptrtoint double* %t46 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %7, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1842, i32 0, i32 0))
  store double 0x42D0000000000000, double* %t46, align 8, !dbg !3232
  call void @llvm.dbg.declare(metadata double* %t1, metadata !3233, metadata !98), !dbg !3234
  call void @llvm.dbg.declare(metadata double* %t2, metadata !3235, metadata !98), !dbg !3236
  call void @llvm.dbg.declare(metadata double* %t3, metadata !3237, metadata !98), !dbg !3238
  call void @llvm.dbg.declare(metadata double* %t4, metadata !3239, metadata !98), !dbg !3240
  call void @llvm.dbg.declare(metadata double* %a1, metadata !3241, metadata !98), !dbg !3242
  call void @llvm.dbg.declare(metadata double* %a2, metadata !3243, metadata !98), !dbg !3244
  call void @llvm.dbg.declare(metadata double* %x1, metadata !3245, metadata !98), !dbg !3246
  call void @llvm.dbg.declare(metadata double* %x2, metadata !3247, metadata !98), !dbg !3248
  call void @llvm.dbg.declare(metadata double* %z, metadata !3249, metadata !98), !dbg !3250
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3251, metadata !98), !dbg !3252
  %8 = ptrtoint double* %a.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %8, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1843, i32 0, i32 0))
  %9 = load double, double* %a.addr, align 8, !dbg !3253
  %mul = fmul double 0x3E80000000000000, %9, !dbg !3254
  %10 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %10, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1844, i32 0, i32 0))
  store double %mul, double* %t1, align 8, !dbg !3255
  %11 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %11, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1845, i32 0, i32 0))
  %12 = load double, double* %t1, align 8, !dbg !3256
  %conv = fptosi double %12 to i32, !dbg !3257
  %conv1 = sitofp i32 %conv to double, !dbg !3257
  %13 = ptrtoint double* %a1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %13, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1846, i32 0, i32 0))
  store double %conv1, double* %a1, align 8, !dbg !3258
  %14 = ptrtoint double* %a.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %14, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1847, i32 0, i32 0))
  %15 = load double, double* %a.addr, align 8, !dbg !3259
  %16 = ptrtoint double* %a1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %16, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1848, i32 0, i32 0))
  %17 = load double, double* %a1, align 8, !dbg !3260
  %mul2 = fmul double 8.388608e+06, %17, !dbg !3261
  %sub = fsub double %15, %mul2, !dbg !3262
  %18 = ptrtoint double* %a2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %18, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1849, i32 0, i32 0))
  store double %sub, double* %a2, align 8, !dbg !3263
  %19 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %19, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1850, i32 0, i32 0))
  store i32 0, i32* %i, align 4, !dbg !3264
  br label %for.cond, !dbg !3266

for.cond:                                         ; preds = %for.inc, %entry
  %20 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %20, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1851, i32 0, i32 0))
  %21 = load i32, i32* %i, align 4, !dbg !3267
  %22 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %22, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1852, i32 0, i32 0))
  %23 = load i32, i32* %n.addr, align 4, !dbg !3270
  %cmp = icmp slt i32 %21, %23, !dbg !3271
  br i1 %cmp, label %for.body, label %for.end, !dbg !3272

for.body:                                         ; preds = %for.cond
  %24 = ptrtoint double** %x.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %24, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1853, i32 0, i32 0))
  %25 = load double*, double** %x.addr, align 8, !dbg !3273
  %26 = ptrtoint double* %25 to i64
  call void @__DiscoPoPOpenMPRead(i64 %26, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1854, i32 0, i32 0))
  %27 = load double, double* %25, align 8, !dbg !3275
  %mul4 = fmul double 0x3E80000000000000, %27, !dbg !3276
  %28 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %28, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1855, i32 0, i32 0))
  store double %mul4, double* %t1, align 8, !dbg !3277
  %29 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %29, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1856, i32 0, i32 0))
  %30 = load double, double* %t1, align 8, !dbg !3278
  %conv5 = fptosi double %30 to i32, !dbg !3279
  %conv6 = sitofp i32 %conv5 to double, !dbg !3279
  %31 = ptrtoint double* %x1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %31, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1857, i32 0, i32 0))
  store double %conv6, double* %x1, align 8, !dbg !3280
  %32 = ptrtoint double** %x.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %32, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1858, i32 0, i32 0))
  %33 = load double*, double** %x.addr, align 8, !dbg !3281
  %34 = ptrtoint double* %33 to i64
  call void @__DiscoPoPOpenMPRead(i64 %34, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1859, i32 0, i32 0))
  %35 = load double, double* %33, align 8, !dbg !3282
  %36 = ptrtoint double* %x1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %36, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1860, i32 0, i32 0))
  %37 = load double, double* %x1, align 8, !dbg !3283
  %mul7 = fmul double 8.388608e+06, %37, !dbg !3284
  %sub8 = fsub double %35, %mul7, !dbg !3285
  %38 = ptrtoint double* %x2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %38, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1861, i32 0, i32 0))
  store double %sub8, double* %x2, align 8, !dbg !3286
  %39 = ptrtoint double* %a1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %39, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1862, i32 0, i32 0))
  %40 = load double, double* %a1, align 8, !dbg !3287
  %41 = ptrtoint double* %x2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %41, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1863, i32 0, i32 0))
  %42 = load double, double* %x2, align 8, !dbg !3288
  %mul9 = fmul double %40, %42, !dbg !3289
  %43 = ptrtoint double* %a2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %43, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1864, i32 0, i32 0))
  %44 = load double, double* %a2, align 8, !dbg !3290
  %45 = ptrtoint double* %x1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %45, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1865, i32 0, i32 0))
  %46 = load double, double* %x1, align 8, !dbg !3291
  %mul10 = fmul double %44, %46, !dbg !3292
  %add = fadd double %mul9, %mul10, !dbg !3293
  %47 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %47, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1866, i32 0, i32 0))
  store double %add, double* %t1, align 8, !dbg !3294
  %48 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %48, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1867, i32 0, i32 0))
  %49 = load double, double* %t1, align 8, !dbg !3295
  %mul11 = fmul double 0x3E80000000000000, %49, !dbg !3296
  %conv12 = fptosi double %mul11 to i32, !dbg !3297
  %conv13 = sitofp i32 %conv12 to double, !dbg !3297
  %50 = ptrtoint double* %t2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %50, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1868, i32 0, i32 0))
  store double %conv13, double* %t2, align 8, !dbg !3298
  %51 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %51, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1869, i32 0, i32 0))
  %52 = load double, double* %t1, align 8, !dbg !3299
  %53 = ptrtoint double* %t2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %53, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1870, i32 0, i32 0))
  %54 = load double, double* %t2, align 8, !dbg !3300
  %mul14 = fmul double 8.388608e+06, %54, !dbg !3301
  %sub15 = fsub double %52, %mul14, !dbg !3302
  %55 = ptrtoint double* %z to i64
  call void @__DiscoPoPOpenMPWrite(i64 %55, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1871, i32 0, i32 0))
  store double %sub15, double* %z, align 8, !dbg !3303
  %56 = ptrtoint double* %z to i64
  call void @__DiscoPoPOpenMPRead(i64 %56, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1872, i32 0, i32 0))
  %57 = load double, double* %z, align 8, !dbg !3304
  %mul16 = fmul double 8.388608e+06, %57, !dbg !3305
  %58 = ptrtoint double* %a2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %58, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1873, i32 0, i32 0))
  %59 = load double, double* %a2, align 8, !dbg !3306
  %60 = ptrtoint double* %x2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %60, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1874, i32 0, i32 0))
  %61 = load double, double* %x2, align 8, !dbg !3307
  %mul17 = fmul double %59, %61, !dbg !3308
  %add18 = fadd double %mul16, %mul17, !dbg !3309
  %62 = ptrtoint double* %t3 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %62, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1875, i32 0, i32 0))
  store double %add18, double* %t3, align 8, !dbg !3310
  %63 = ptrtoint double* %t3 to i64
  call void @__DiscoPoPOpenMPRead(i64 %63, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1876, i32 0, i32 0))
  %64 = load double, double* %t3, align 8, !dbg !3311
  %mul19 = fmul double 0x3D10000000000000, %64, !dbg !3312
  %conv20 = fptosi double %mul19 to i32, !dbg !3313
  %conv21 = sitofp i32 %conv20 to double, !dbg !3313
  %65 = ptrtoint double* %t4 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %65, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1877, i32 0, i32 0))
  store double %conv21, double* %t4, align 8, !dbg !3314
  %66 = ptrtoint double* %t3 to i64
  call void @__DiscoPoPOpenMPRead(i64 %66, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1878, i32 0, i32 0))
  %67 = load double, double* %t3, align 8, !dbg !3315
  %68 = ptrtoint double* %t4 to i64
  call void @__DiscoPoPOpenMPRead(i64 %68, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1879, i32 0, i32 0))
  %69 = load double, double* %t4, align 8, !dbg !3316
  %mul22 = fmul double 0x42D0000000000000, %69, !dbg !3317
  %sub23 = fsub double %67, %mul22, !dbg !3318
  %70 = ptrtoint double** %x.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %70, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1880, i32 0, i32 0))
  %71 = load double*, double** %x.addr, align 8, !dbg !3319
  %72 = ptrtoint double* %71 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %72, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1881, i32 0, i32 0))
  store double %sub23, double* %71, align 8, !dbg !3320
  %73 = ptrtoint double** %x.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %73, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1882, i32 0, i32 0))
  %74 = load double*, double** %x.addr, align 8, !dbg !3321
  %75 = ptrtoint double* %74 to i64
  call void @__DiscoPoPOpenMPRead(i64 %75, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1883, i32 0, i32 0))
  %76 = load double, double* %74, align 8, !dbg !3322
  %mul24 = fmul double 0x3D10000000000000, %76, !dbg !3323
  %77 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %77, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1884, i32 0, i32 0))
  %78 = load i32, i32* %i, align 4, !dbg !3324
  %idxprom = sext i32 %78 to i64, !dbg !3325
  %79 = ptrtoint double** %y.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %79, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1885, i32 0, i32 0))
  %80 = load double*, double** %y.addr, align 8, !dbg !3325
  %arrayidx = getelementptr inbounds double, double* %80, i64 %idxprom, !dbg !3325
  %81 = ptrtoint double* %arrayidx to i64
  call void @__DiscoPoPOpenMPWrite(i64 %81, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1886, i32 0, i32 0))
  store double %mul24, double* %arrayidx, align 8, !dbg !3326
  br label %for.inc, !dbg !3327

for.inc:                                          ; preds = %for.body
  %82 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %82, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1887, i32 0, i32 0))
  %83 = load i32, i32* %i, align 4, !dbg !3328
  %inc = add nsw i32 %83, 1, !dbg !3328
  %84 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %84, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1888, i32 0, i32 0))
  store i32 %inc, i32* %i, align 4, !dbg !3328
  br label %for.cond, !dbg !3330

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3331
}

; Function Attrs: nounwind uwtable
define void @timer_clear(i32 %n) #0 !dbg !3332 {
entry:
  %n.addr = alloca i32, align 4
  %0 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1889, i32 0, i32 0))
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !3333, metadata !98), !dbg !3334
  %1 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %1, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1890, i32 0, i32 0))
  %2 = load i32, i32* %n.addr, align 4, !dbg !3335
  %idxprom = sext i32 %2 to i64, !dbg !3336
  %3 = call [64 x double]* @_ZTWL7elapsed(), !dbg !3336
  %arrayidx = getelementptr inbounds [64 x double], [64 x double]* %3, i64 0, i64 %idxprom, !dbg !3336
  %4 = ptrtoint double* %arrayidx to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1891, i32 0, i32 0))
  store double 0.000000e+00, double* %arrayidx, align 8, !dbg !3337
  %5 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %5, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1892, i32 0, i32 0))
  %6 = load i32, i32* %n.addr, align 4, !dbg !3338
  %idxprom1 = sext i32 %6 to i64, !dbg !3339
  %7 = call [64 x i32]* @_ZTWL5count(), !dbg !3339
  %arrayidx2 = getelementptr inbounds [64 x i32], [64 x i32]* %7, i64 0, i64 %idxprom1, !dbg !3339
  %8 = ptrtoint i32* %arrayidx2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %8, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1893, i32 0, i32 0))
  store i32 0, i32* %arrayidx2, align 4, !dbg !3340
  ret void, !dbg !3341
}

; Function Attrs: nounwind uwtable
define internal [64 x double]* @_ZTWL7elapsed() #0 {
  ret [64 x double]* @elapsed
}

; Function Attrs: nounwind uwtable
define internal [64 x i32]* @_ZTWL5count() #0 {
  ret [64 x i32]* @count
}

; Function Attrs: nounwind uwtable
define void @timer_start(i32 %n) #0 !dbg !3342 {
entry:
  %n.addr = alloca i32, align 4
  %0 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1894, i32 0, i32 0))
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !3343, metadata !98), !dbg !3344
  %call = call double @elapsed_time(), !dbg !3345
  %1 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %1, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1895, i32 0, i32 0))
  %2 = load i32, i32* %n.addr, align 4, !dbg !3346
  %idxprom = sext i32 %2 to i64, !dbg !3347
  %3 = call [64 x double]* @_ZTWL5start(), !dbg !3348
  %arrayidx = getelementptr inbounds [64 x double], [64 x double]* %3, i64 0, i64 %idxprom, !dbg !3347
  %4 = ptrtoint double* %arrayidx to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1896, i32 0, i32 0))
  store double %call, double* %arrayidx, align 8, !dbg !3350
  ret void, !dbg !3351
}

; Function Attrs: nounwind uwtable
define internal double @elapsed_time() #0 !dbg !3352 {
entry:
  %t = alloca double, align 8
  call void @llvm.dbg.declare(metadata double* %t, metadata !3354, metadata !98), !dbg !3355
  %call = call double @omp_get_wtime(), !dbg !3356
  %0 = ptrtoint double* %t to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1897, i32 0, i32 0))
  store double %call, double* %t, align 8, !dbg !3357
  %1 = ptrtoint double* %t to i64
  call void @__DiscoPoPOpenMPRead(i64 %1, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1898, i32 0, i32 0))
  %2 = load double, double* %t, align 8, !dbg !3358
  ret double %2, !dbg !3359
}

declare double @omp_get_wtime() #2

; Function Attrs: nounwind uwtable
define internal [64 x double]* @_ZTWL5start() #0 {
  ret [64 x double]* @start
}

; Function Attrs: nounwind uwtable
define void @timer_stop(i32 %n) #0 !dbg !3360 {
entry:
  %n.addr = alloca i32, align 4
  %t = alloca double, align 8
  %now = alloca double, align 8
  %0 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1899, i32 0, i32 0))
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !3361, metadata !98), !dbg !3362
  call void @llvm.dbg.declare(metadata double* %t, metadata !3363, metadata !98), !dbg !3364
  call void @llvm.dbg.declare(metadata double* %now, metadata !3365, metadata !98), !dbg !3366
  %call = call double @elapsed_time(), !dbg !3367
  %1 = ptrtoint double* %now to i64
  call void @__DiscoPoPOpenMPWrite(i64 %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1900, i32 0, i32 0))
  store double %call, double* %now, align 8, !dbg !3368
  %2 = ptrtoint double* %now to i64
  call void @__DiscoPoPOpenMPRead(i64 %2, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1901, i32 0, i32 0))
  %3 = load double, double* %now, align 8, !dbg !3369
  %4 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %4, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1902, i32 0, i32 0))
  %5 = load i32, i32* %n.addr, align 4, !dbg !3370
  %idxprom = sext i32 %5 to i64, !dbg !3371
  %6 = call [64 x double]* @_ZTWL5start(), !dbg !3371
  %arrayidx = getelementptr inbounds [64 x double], [64 x double]* %6, i64 0, i64 %idxprom, !dbg !3371
  %7 = ptrtoint double* %arrayidx to i64
  call void @__DiscoPoPOpenMPRead(i64 %7, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1903, i32 0, i32 0))
  %8 = load double, double* %arrayidx, align 8, !dbg !3371
  %sub = fsub double %3, %8, !dbg !3372
  %9 = ptrtoint double* %t to i64
  call void @__DiscoPoPOpenMPWrite(i64 %9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1904, i32 0, i32 0))
  store double %sub, double* %t, align 8, !dbg !3373
  %10 = ptrtoint double* %t to i64
  call void @__DiscoPoPOpenMPRead(i64 %10, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1905, i32 0, i32 0))
  %11 = load double, double* %t, align 8, !dbg !3374
  %12 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %12, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1906, i32 0, i32 0))
  %13 = load i32, i32* %n.addr, align 4, !dbg !3375
  %idxprom1 = sext i32 %13 to i64, !dbg !3376
  %14 = call [64 x double]* @_ZTWL7elapsed(), !dbg !3376
  %arrayidx2 = getelementptr inbounds [64 x double], [64 x double]* %14, i64 0, i64 %idxprom1, !dbg !3376
  %15 = ptrtoint double* %arrayidx2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %15, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1907, i32 0, i32 0))
  %16 = load double, double* %arrayidx2, align 8, !dbg !3377
  %add = fadd double %16, %11, !dbg !3377
  %17 = ptrtoint double* %arrayidx2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %17, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1908, i32 0, i32 0))
  store double %add, double* %arrayidx2, align 8, !dbg !3377
  %18 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %18, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1909, i32 0, i32 0))
  %19 = load i32, i32* %n.addr, align 4, !dbg !3378
  %idxprom3 = sext i32 %19 to i64, !dbg !3379
  %20 = call [64 x i32]* @_ZTWL5count(), !dbg !3379
  %arrayidx4 = getelementptr inbounds [64 x i32], [64 x i32]* %20, i64 0, i64 %idxprom3, !dbg !3379
  %21 = ptrtoint i32* %arrayidx4 to i64
  call void @__DiscoPoPOpenMPRead(i64 %21, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1910, i32 0, i32 0))
  %22 = load i32, i32* %arrayidx4, align 4, !dbg !3380
  %inc = add i32 %22, 1, !dbg !3380
  %23 = ptrtoint i32* %arrayidx4 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %23, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1911, i32 0, i32 0))
  store i32 %inc, i32* %arrayidx4, align 4, !dbg !3380
  ret void, !dbg !3381
}

; Function Attrs: nounwind uwtable
define double @timer_read(i32 %n) #0 !dbg !3382 {
entry:
  %n.addr = alloca i32, align 4
  %0 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1912, i32 0, i32 0))
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !3385, metadata !98), !dbg !3386
  %1 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %1, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1913, i32 0, i32 0))
  %2 = load i32, i32* %n.addr, align 4, !dbg !3387
  %idxprom = sext i32 %2 to i64, !dbg !3388
  %3 = call [64 x double]* @_ZTWL7elapsed(), !dbg !3388
  %arrayidx = getelementptr inbounds [64 x double], [64 x double]* %3, i64 0, i64 %idxprom, !dbg !3388
  %4 = ptrtoint double* %arrayidx to i64
  call void @__DiscoPoPOpenMPRead(i64 %4, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1914, i32 0, i32 0))
  %5 = load double, double* %arrayidx, align 8, !dbg !3388
  ret double %5, !dbg !3389
}

; Function Attrs: nounwind uwtable
define i32 @timer_count(i32 %n) #0 !dbg !3390 {
entry:
  %n.addr = alloca i32, align 4
  %0 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1915, i32 0, i32 0))
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !3393, metadata !98), !dbg !3394
  %1 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %1, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1916, i32 0, i32 0))
  %2 = load i32, i32* %n.addr, align 4, !dbg !3395
  %idxprom = sext i32 %2 to i64, !dbg !3396
  %3 = call [64 x i32]* @_ZTWL5count(), !dbg !3396
  %arrayidx = getelementptr inbounds [64 x i32], [64 x i32]* %3, i64 0, i64 %idxprom, !dbg !3396
  %4 = ptrtoint i32* %arrayidx to i64
  call void @__DiscoPoPOpenMPRead(i64 %4, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1917, i32 0, i32 0))
  %5 = load i32, i32* %arrayidx, align 4, !dbg !3396
  ret i32 %5, !dbg !3397
}

; Function Attrs: nounwind uwtable
define void @wtime_(double* %t) #0 !dbg !85 {
entry:
  %t.addr = alloca double*, align 8
  %tv = alloca %struct.timeval, align 8
  %0 = ptrtoint double** %t.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1918, i32 0, i32 0))
  store double* %t, double** %t.addr, align 8
  call void @llvm.dbg.declare(metadata double** %t.addr, metadata !3398, metadata !98), !dbg !3399
  call void @llvm.dbg.declare(metadata %struct.timeval* %tv, metadata !3400, metadata !98), !dbg !3409
  %call = call i32 @gettimeofday(%struct.timeval* %tv, %struct.timezone* null) #7, !dbg !3410
  %1 = ptrtoint i32* @wtime_.sec to i64
  call void @__DiscoPoPOpenMPRead(i64 %1, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1919, i32 0, i32 0))
  %2 = load i32, i32* @wtime_.sec, align 4, !dbg !3411
  %cmp = icmp slt i32 %2, 0, !dbg !3413
  br i1 %cmp, label %if.then, label %if.end, !dbg !3414

if.then:                                          ; preds = %entry
  %tv_sec = getelementptr inbounds %struct.timeval, %struct.timeval* %tv, i32 0, i32 0, !dbg !3415
  %3 = ptrtoint i64* %tv_sec to i64
  call void @__DiscoPoPOpenMPRead(i64 %3, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1920, i32 0, i32 0))
  %4 = load i64, i64* %tv_sec, align 8, !dbg !3415
  %conv = trunc i64 %4 to i32, !dbg !3417
  %5 = ptrtoint i32* @wtime_.sec to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1921, i32 0, i32 0))
  store i32 %conv, i32* @wtime_.sec, align 4, !dbg !3418
  br label %if.end, !dbg !3419

if.end:                                           ; preds = %if.then, %entry
  %tv_sec1 = getelementptr inbounds %struct.timeval, %struct.timeval* %tv, i32 0, i32 0, !dbg !3420
  %6 = ptrtoint i64* %tv_sec1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %6, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1922, i32 0, i32 0))
  %7 = load i64, i64* %tv_sec1, align 8, !dbg !3420
  %8 = ptrtoint i32* @wtime_.sec to i64
  call void @__DiscoPoPOpenMPRead(i64 %8, i32 4, i32 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1923, i32 0, i32 0))
  %9 = load i32, i32* @wtime_.sec, align 4, !dbg !3421
  %conv2 = sext i32 %9 to i64, !dbg !3421
  %sub = sub nsw i64 %7, %conv2, !dbg !3422
  %conv3 = sitofp i64 %sub to double, !dbg !3423
  %tv_usec = getelementptr inbounds %struct.timeval, %struct.timeval* %tv, i32 0, i32 1, !dbg !3424
  %10 = ptrtoint i64* %tv_usec to i64
  call void @__DiscoPoPOpenMPRead(i64 %10, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1924, i32 0, i32 0))
  %11 = load i64, i64* %tv_usec, align 8, !dbg !3424
  %conv4 = sitofp i64 %11 to double, !dbg !3425
  %mul = fmul double 1.000000e-06, %conv4, !dbg !3426
  %add = fadd double %conv3, %mul, !dbg !3427
  %12 = ptrtoint double** %t.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %12, i32 8, i32 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1925, i32 0, i32 0))
  %13 = load double*, double** %t.addr, align 8, !dbg !3428
  %14 = ptrtoint double* %13 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %14, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1926, i32 0, i32 0))
  store double %add, double* %13, align 8, !dbg !3429
  ret void, !dbg !3430
}

; Function Attrs: nounwind
declare i32 @gettimeofday(%struct.timeval*, %struct.timezone*) #4

declare void @__DiscoPoPOpenMPInitialize()

declare void @__CollectThreadInfo()

declare void @__DiscoPoPOpenMPFinalize()

declare void @__DiscoPoPOpenMPRead(i64, i32, i32, i32, i8*)

declare void @__DiscoPoPOpenMPWrite(i64, i8*)

declare void @__DiscoPoPOpenMPBeforeCall(i8*)

declare void @__DiscoPoPOpenMPAfterCall()

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!0, !60, !66, !70, !81}
!llvm.ident = !{!88, !88, !88, !88, !88}
!llvm.module.flags = !{!89, !90}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.9.0 (trunk)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !8, globals: !24)
!1 = !DIFile(filename: "ft.c", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT")
!2 = !{!3}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !4, line: 4, size: 32, align: 32, elements: !5)
!4 = !DIFile(filename: "../common/type.h", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT")
!5 = !{!6, !7}
!6 = !DIEnumerator(name: "false", value: 0)
!7 = !DIEnumerator(name: "true", value: 1)
!8 = !{!9, !10, !19, !21, !22, !23}
!9 = !DIBasicType(name: "double", size: 64, align: 64, encoding: DW_ATE_float)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64, align: 64)
!11 = !DICompositeType(tag: DW_TAG_array_type, baseType: !12, align: 64, elements: !17)
!12 = !DIDerivedType(tag: DW_TAG_typedef, name: "dcomplex", file: !4, line: 8, baseType: !13)
!13 = !DICompositeType(tag: DW_TAG_structure_type, file: !4, line: 5, size: 128, align: 64, elements: !14)
!14 = !{!15, !16}
!15 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !13, file: !4, line: 6, baseType: !9, size: 64, align: 64)
!16 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !13, file: !4, line: 7, baseType: !9, size: 64, align: 64, offset: 64)
!17 = !{!18, !18}
!18 = !DISubrange(count: -1)
!19 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !20, size: 64, align: 64)
!20 = !DICompositeType(tag: DW_TAG_array_type, baseType: !9, align: 64, elements: !17)
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64, align: 64)
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64, align: 64)
!23 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!24 = !{!25, !30, !32, !33, !38, !39, !43, !45, !46, !47, !49, !50, !51, !52, !56}
!25 = !DIGlobalVariable(name: "dims", scope: !0, file: !26, line: 86, type: !27, isLocal: true, isDefinition: true, variable: [3 x i32]* @dims)
!26 = !DIFile(filename: "./global.h", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT")
!27 = !DICompositeType(tag: DW_TAG_array_type, baseType: !23, size: 96, align: 32, elements: !28)
!28 = !{!29}
!29 = !DISubrange(count: 3)
!30 = !DIGlobalVariable(name: "timers_enabled", scope: !0, file: !26, line: 102, type: !31, isLocal: true, isDefinition: true, variable: i32* @timers_enabled)
!31 = !DIDerivedType(tag: DW_TAG_typedef, name: "logical", file: !4, line: 4, baseType: !3)
!32 = !DIGlobalVariable(name: "niter", scope: !0, file: !26, line: 124, type: !23, isLocal: true, isDefinition: true, variable: i32* @niter)
!33 = !DIGlobalVariable(name: "ty1", scope: !0, file: !1, line: 53, type: !34, isLocal: true, isDefinition: true, variable: [64 x [33 x %struct.dcomplex]]* @ty1)
!34 = !DICompositeType(tag: DW_TAG_array_type, baseType: !12, size: 270336, align: 64, elements: !35)
!35 = !{!36, !37}
!36 = !DISubrange(count: 64)
!37 = !DISubrange(count: 33)
!38 = !DIGlobalVariable(name: "ty2", scope: !0, file: !1, line: 54, type: !34, isLocal: true, isDefinition: true, variable: [64 x [33 x %struct.dcomplex]]* @ty2)
!39 = !DIGlobalVariable(name: "u0", scope: !0, file: !1, line: 74, type: !40, isLocal: false, isDefinition: true, variable: [266240 x %struct.dcomplex]* @u0)
!40 = !DICompositeType(tag: DW_TAG_array_type, baseType: !12, size: 34078720, align: 64, elements: !41)
!41 = !{!42}
!42 = !DISubrange(count: 266240)
!43 = !DIGlobalVariable(name: "pad1", scope: !0, file: !1, line: 75, type: !44, isLocal: false, isDefinition: true, variable: [3 x %struct.dcomplex]* @pad1)
!44 = !DICompositeType(tag: DW_TAG_array_type, baseType: !12, size: 384, align: 64, elements: !28)
!45 = !DIGlobalVariable(name: "u1", scope: !0, file: !1, line: 76, type: !40, isLocal: false, isDefinition: true, variable: [266240 x %struct.dcomplex]* @u1)
!46 = !DIGlobalVariable(name: "pad2", scope: !0, file: !1, line: 77, type: !44, isLocal: false, isDefinition: true, variable: [3 x %struct.dcomplex]* @pad2)
!47 = !DIGlobalVariable(name: "twiddle", scope: !0, file: !1, line: 79, type: !48, isLocal: false, isDefinition: true, variable: [266240 x double]* @twiddle)
!48 = !DICompositeType(tag: DW_TAG_array_type, baseType: !9, size: 17039360, align: 64, elements: !41)
!49 = !DIGlobalVariable(name: "debug", scope: !0, file: !26, line: 103, type: !31, isLocal: true, isDefinition: true, variable: i32* @debug)
!50 = !DIGlobalVariable(name: "fftblock", scope: !0, file: !26, line: 55, type: !23, isLocal: true, isDefinition: true, variable: i32* @fftblock)
!51 = !DIGlobalVariable(name: "fftblockpad", scope: !0, file: !26, line: 55, type: !23, isLocal: true, isDefinition: true, variable: i32* @fftblockpad)
!52 = !DIGlobalVariable(name: "u", scope: !0, file: !26, line: 115, type: !53, isLocal: true, isDefinition: true, variable: [65 x %struct.dcomplex]* @u)
!53 = !DICompositeType(tag: DW_TAG_array_type, baseType: !12, size: 8320, align: 64, elements: !54)
!54 = !{!55}
!55 = !DISubrange(count: 65)
!56 = !DIGlobalVariable(name: "sums", scope: !0, file: !26, line: 120, type: !57, isLocal: true, isDefinition: true, variable: [7 x %struct.dcomplex]* @sums)
!57 = !DICompositeType(tag: DW_TAG_array_type, baseType: !12, size: 896, align: 64, elements: !58)
!58 = !{!59}
!59 = !DISubrange(count: 7)
!60 = distinct !DICompileUnit(language: DW_LANG_C99, file: !61, producer: "clang version 3.9.0 (trunk)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !62, retainedTypes: !65)
!61 = !DIFile(filename: "../common/print_results.c", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common")
!62 = !{!63}
!63 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !64, line: 4, size: 32, align: 32, elements: !5)
!64 = !DIFile(filename: "../common/type.h", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common")
!65 = !{!9}
!66 = distinct !DICompileUnit(language: DW_LANG_C99, file: !67, producer: "clang version 3.9.0 (trunk)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !68, retainedTypes: !69)
!67 = !DIFile(filename: "../common/randdp.c", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common")
!68 = !{}
!69 = !{!23}
!70 = distinct !DICompileUnit(language: DW_LANG_C99, file: !71, producer: "clang version 3.9.0 (trunk)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !68, globals: !72)
!71 = !DIFile(filename: "../common/c_timers.c", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common")
!72 = !{!73, !77, !78}
!73 = !DIGlobalVariable(name: "start", scope: !70, file: !74, line: 28, type: !75, isLocal: true, isDefinition: true, variable: [64 x double]* @start)
!74 = !DIFile(filename: "c_timers.c", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common")
!75 = !DICompositeType(tag: DW_TAG_array_type, baseType: !9, size: 4096, align: 64, elements: !76)
!76 = !{!36}
!77 = !DIGlobalVariable(name: "elapsed", scope: !70, file: !74, line: 28, type: !75, isLocal: true, isDefinition: true, variable: [64 x double]* @elapsed)
!78 = !DIGlobalVariable(name: "count", scope: !70, file: !74, line: 29, type: !79, isLocal: true, isDefinition: true, variable: [64 x i32]* @count)
!79 = !DICompositeType(tag: DW_TAG_array_type, baseType: !80, size: 2048, align: 32, elements: !76)
!80 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!81 = distinct !DICompileUnit(language: DW_LANG_C99, file: !82, producer: "clang version 3.9.0 (trunk)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !68, globals: !83)
!82 = !DIFile(filename: "../common/wtime.c", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common")
!83 = !{!84}
!84 = !DIGlobalVariable(name: "sec", scope: !85, file: !82, line: 10, type: !23, isLocal: true, isDefinition: true, variable: i32* @wtime_.sec)
!85 = distinct !DISubprogram(name: "wtime_", scope: !82, file: !82, line: 7, type: !86, isLocal: false, isDefinition: true, scopeLine: 8, flags: DIFlagPrototyped, isOptimized: false, unit: !81, variables: !68)
!86 = !DISubroutineType(types: !87)
!87 = !{null, !21}
!88 = !{!"clang version 3.9.0 (trunk)"}
!89 = !{i32 2, !"Dwarf Version", i32 4}
!90 = !{i32 2, !"Debug Info Version", i32 3}
!91 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 107, type: !92, isLocal: false, isDefinition: true, scopeLine: 108, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !68)
!92 = !DISubroutineType(types: !93)
!93 = !{!23, !23, !94}
!94 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64, align: 64)
!95 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !96, size: 64, align: 64)
!96 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!97 = !DILocalVariable(name: "argc", arg: 1, scope: !91, file: !1, line: 107, type: !23)
!98 = !DIExpression()
!99 = !DILocation(line: 107, column: 14, scope: !91)
!100 = !DILocalVariable(name: "argv", arg: 2, scope: !91, file: !1, line: 107, type: !94)
!101 = !DILocation(line: 107, column: 26, scope: !91)
!102 = !DILocalVariable(name: "i", scope: !91, file: !1, line: 109, type: !23)
!103 = !DILocation(line: 109, column: 7, scope: !91)
!104 = !DILocalVariable(name: "iter", scope: !91, file: !1, line: 110, type: !23)
!105 = !DILocation(line: 110, column: 7, scope: !91)
!106 = !DILocalVariable(name: "total_time", scope: !91, file: !1, line: 111, type: !9)
!107 = !DILocation(line: 111, column: 10, scope: !91)
!108 = !DILocalVariable(name: "mflops", scope: !91, file: !1, line: 111, type: !9)
!109 = !DILocation(line: 111, column: 22, scope: !91)
!110 = !DILocalVariable(name: "verified", scope: !91, file: !1, line: 112, type: !31)
!111 = !DILocation(line: 112, column: 11, scope: !91)
!112 = !DILocalVariable(name: "Class", scope: !91, file: !1, line: 113, type: !96)
!113 = !DILocation(line: 113, column: 8, scope: !91)
!114 = !DILocation(line: 120, column: 10, scope: !115)
!115 = distinct !DILexicalBlock(scope: !91, file: !1, line: 120, column: 3)
!116 = !DILocation(line: 120, column: 8, scope: !115)
!117 = !DILocation(line: 120, column: 15, scope: !118)
!118 = !DILexicalBlockFile(scope: !119, file: !1, discriminator: 1)
!119 = distinct !DILexicalBlock(scope: !115, file: !1, line: 120, column: 3)
!120 = !DILocation(line: 120, column: 17, scope: !118)
!121 = !DILocation(line: 120, column: 3, scope: !118)
!122 = !DILocation(line: 121, column: 17, scope: !123)
!123 = distinct !DILexicalBlock(scope: !119, file: !1, line: 120, column: 32)
!124 = !DILocation(line: 121, column: 5, scope: !123)
!125 = !DILocation(line: 122, column: 3, scope: !123)
!126 = !DILocation(line: 120, column: 28, scope: !127)
!127 = !DILexicalBlockFile(scope: !119, file: !1, discriminator: 2)
!128 = !DILocation(line: 120, column: 3, scope: !127)
!129 = !DILocation(line: 123, column: 3, scope: !91)
!130 = !DILocation(line: 124, column: 28, scope: !91)
!131 = !DILocation(line: 124, column: 37, scope: !91)
!132 = !DILocation(line: 124, column: 46, scope: !91)
!133 = !DILocation(line: 124, column: 3, scope: !91)
!134 = !DILocation(line: 125, column: 29, scope: !91)
!135 = !DILocation(line: 125, column: 38, scope: !91)
!136 = !DILocation(line: 125, column: 47, scope: !91)
!137 = !DILocation(line: 125, column: 3, scope: !91)
!138 = !DILocation(line: 126, column: 34, scope: !91)
!139 = !DILocation(line: 126, column: 43, scope: !91)
!140 = !DILocation(line: 126, column: 52, scope: !91)
!141 = !DILocation(line: 126, column: 3, scope: !91)
!142 = !DILocation(line: 127, column: 12, scope: !91)
!143 = !DILocation(line: 127, column: 3, scope: !91)
!144 = !DILocation(line: 128, column: 3, scope: !91)
!145 = !DILocation(line: 134, column: 10, scope: !146)
!146 = distinct !DILexicalBlock(scope: !91, file: !1, line: 134, column: 3)
!147 = !DILocation(line: 134, column: 8, scope: !146)
!148 = !DILocation(line: 134, column: 15, scope: !149)
!149 = !DILexicalBlockFile(scope: !150, file: !1, discriminator: 1)
!150 = distinct !DILexicalBlock(scope: !146, file: !1, line: 134, column: 3)
!151 = !DILocation(line: 134, column: 17, scope: !149)
!152 = !DILocation(line: 134, column: 3, scope: !149)
!153 = !DILocation(line: 135, column: 17, scope: !154)
!154 = distinct !DILexicalBlock(scope: !150, file: !1, line: 134, column: 32)
!155 = !DILocation(line: 135, column: 5, scope: !154)
!156 = !DILocation(line: 136, column: 3, scope: !154)
!157 = !DILocation(line: 134, column: 28, scope: !158)
!158 = !DILexicalBlockFile(scope: !150, file: !1, discriminator: 2)
!159 = !DILocation(line: 134, column: 3, scope: !158)
!160 = !DILocation(line: 138, column: 3, scope: !91)
!161 = !DILocation(line: 139, column: 7, scope: !162)
!162 = distinct !DILexicalBlock(scope: !91, file: !1, line: 139, column: 7)
!163 = !DILocation(line: 139, column: 7, scope: !91)
!164 = !DILocation(line: 139, column: 23, scope: !165)
!165 = !DILexicalBlockFile(scope: !162, file: !1, discriminator: 1)
!166 = !DILocation(line: 141, column: 29, scope: !91)
!167 = !DILocation(line: 141, column: 38, scope: !91)
!168 = !DILocation(line: 141, column: 47, scope: !91)
!169 = !DILocation(line: 141, column: 3, scope: !91)
!170 = !DILocation(line: 143, column: 34, scope: !91)
!171 = !DILocation(line: 143, column: 43, scope: !91)
!172 = !DILocation(line: 143, column: 52, scope: !91)
!173 = !DILocation(line: 143, column: 3, scope: !91)
!174 = !DILocation(line: 145, column: 12, scope: !91)
!175 = !DILocation(line: 145, column: 3, scope: !91)
!176 = !DILocation(line: 147, column: 7, scope: !177)
!177 = distinct !DILexicalBlock(scope: !91, file: !1, line: 147, column: 7)
!178 = !DILocation(line: 147, column: 7, scope: !91)
!179 = !DILocation(line: 147, column: 23, scope: !180)
!180 = !DILexicalBlockFile(scope: !177, file: !1, discriminator: 1)
!181 = !DILocation(line: 148, column: 7, scope: !182)
!182 = distinct !DILexicalBlock(scope: !91, file: !1, line: 148, column: 7)
!183 = !DILocation(line: 148, column: 7, scope: !91)
!184 = !DILocation(line: 148, column: 23, scope: !185)
!185 = !DILexicalBlockFile(scope: !182, file: !1, discriminator: 1)
!186 = !DILocation(line: 149, column: 3, scope: !91)
!187 = !DILocation(line: 150, column: 7, scope: !188)
!188 = distinct !DILexicalBlock(scope: !91, file: !1, line: 150, column: 7)
!189 = !DILocation(line: 150, column: 7, scope: !91)
!190 = !DILocation(line: 150, column: 23, scope: !191)
!191 = !DILexicalBlockFile(scope: !188, file: !1, discriminator: 1)
!192 = !DILocation(line: 152, column: 13, scope: !193)
!193 = distinct !DILexicalBlock(scope: !91, file: !1, line: 152, column: 3)
!194 = !DILocation(line: 152, column: 8, scope: !193)
!195 = !DILocation(line: 152, column: 18, scope: !196)
!196 = !DILexicalBlockFile(scope: !197, file: !1, discriminator: 1)
!197 = distinct !DILexicalBlock(scope: !193, file: !1, line: 152, column: 3)
!198 = !DILocation(line: 152, column: 26, scope: !196)
!199 = !DILocation(line: 152, column: 23, scope: !196)
!200 = !DILocation(line: 152, column: 3, scope: !196)
!201 = !DILocation(line: 153, column: 9, scope: !202)
!202 = distinct !DILexicalBlock(scope: !203, file: !1, line: 153, column: 9)
!203 = distinct !DILexicalBlock(scope: !197, file: !1, line: 152, column: 41)
!204 = !DILocation(line: 153, column: 9, scope: !203)
!205 = !DILocation(line: 153, column: 25, scope: !206)
!206 = !DILexicalBlockFile(scope: !202, file: !1, discriminator: 1)
!207 = !DILocation(line: 154, column: 29, scope: !203)
!208 = !DILocation(line: 154, column: 38, scope: !203)
!209 = !DILocation(line: 154, column: 47, scope: !203)
!210 = !DILocation(line: 154, column: 5, scope: !203)
!211 = !DILocation(line: 155, column: 9, scope: !212)
!212 = distinct !DILexicalBlock(scope: !203, file: !1, line: 155, column: 9)
!213 = !DILocation(line: 155, column: 9, scope: !203)
!214 = !DILocation(line: 155, column: 25, scope: !215)
!215 = !DILexicalBlockFile(scope: !212, file: !1, discriminator: 1)
!216 = !DILocation(line: 156, column: 9, scope: !217)
!217 = distinct !DILexicalBlock(scope: !203, file: !1, line: 156, column: 9)
!218 = !DILocation(line: 156, column: 9, scope: !203)
!219 = !DILocation(line: 156, column: 25, scope: !220)
!220 = !DILexicalBlockFile(scope: !217, file: !1, discriminator: 1)
!221 = !DILocation(line: 158, column: 5, scope: !203)
!222 = !DILocation(line: 159, column: 9, scope: !223)
!223 = distinct !DILexicalBlock(scope: !203, file: !1, line: 159, column: 9)
!224 = !DILocation(line: 159, column: 9, scope: !203)
!225 = !DILocation(line: 159, column: 25, scope: !226)
!226 = !DILexicalBlockFile(scope: !223, file: !1, discriminator: 1)
!227 = !DILocation(line: 160, column: 9, scope: !228)
!228 = distinct !DILexicalBlock(scope: !203, file: !1, line: 160, column: 9)
!229 = !DILocation(line: 160, column: 9, scope: !203)
!230 = !DILocation(line: 160, column: 25, scope: !231)
!231 = !DILexicalBlockFile(scope: !228, file: !1, discriminator: 1)
!232 = !DILocation(line: 162, column: 14, scope: !203)
!233 = !DILocation(line: 162, column: 24, scope: !203)
!234 = !DILocation(line: 162, column: 33, scope: !203)
!235 = !DILocation(line: 162, column: 42, scope: !203)
!236 = !DILocation(line: 162, column: 5, scope: !203)
!237 = !DILocation(line: 163, column: 9, scope: !238)
!238 = distinct !DILexicalBlock(scope: !203, file: !1, line: 163, column: 9)
!239 = !DILocation(line: 163, column: 9, scope: !203)
!240 = !DILocation(line: 163, column: 25, scope: !241)
!241 = !DILexicalBlockFile(scope: !238, file: !1, discriminator: 1)
!242 = !DILocation(line: 164, column: 3, scope: !203)
!243 = !DILocation(line: 152, column: 37, scope: !244)
!244 = !DILexicalBlockFile(scope: !197, file: !1, discriminator: 2)
!245 = !DILocation(line: 152, column: 3, scope: !244)
!246 = !DILocation(line: 166, column: 22, scope: !91)
!247 = !DILocation(line: 166, column: 3, scope: !91)
!248 = !DILocation(line: 168, column: 3, scope: !91)
!249 = !DILocation(line: 169, column: 16, scope: !91)
!250 = !DILocation(line: 169, column: 14, scope: !91)
!251 = !DILocation(line: 171, column: 7, scope: !252)
!252 = distinct !DILexicalBlock(scope: !91, file: !1, line: 171, column: 7)
!253 = !DILocation(line: 171, column: 18, scope: !252)
!254 = !DILocation(line: 171, column: 7, scope: !91)
!255 = !DILocation(line: 173, column: 34, scope: !256)
!256 = distinct !DILexicalBlock(scope: !252, file: !1, line: 171, column: 26)
!257 = !DILocation(line: 173, column: 32, scope: !256)
!258 = !DILocation(line: 173, column: 22, scope: !256)
!259 = !DILocation(line: 174, column: 36, scope: !256)
!260 = !DILocation(line: 174, column: 34, scope: !256)
!261 = !DILocation(line: 174, column: 24, scope: !256)
!262 = !DILocation(line: 174, column: 59, scope: !256)
!263 = !DILocation(line: 174, column: 57, scope: !256)
!264 = !DILocation(line: 174, column: 13, scope: !256)
!265 = !DILocation(line: 172, column: 38, scope: !256)
!266 = !DILocation(line: 175, column: 15, scope: !256)
!267 = !DILocation(line: 175, column: 13, scope: !256)
!268 = !DILocation(line: 172, column: 12, scope: !256)
!269 = !DILocation(line: 176, column: 3, scope: !256)
!270 = !DILocation(line: 177, column: 12, scope: !271)
!271 = distinct !DILexicalBlock(scope: !252, file: !1, line: 176, column: 10)
!272 = !DILocation(line: 179, column: 23, scope: !91)
!273 = !DILocation(line: 179, column: 42, scope: !91)
!274 = !DILocation(line: 180, column: 17, scope: !91)
!275 = !DILocation(line: 180, column: 29, scope: !91)
!276 = !DILocation(line: 180, column: 65, scope: !91)
!277 = !DILocation(line: 179, column: 3, scope: !91)
!278 = !DILocation(line: 182, column: 7, scope: !279)
!279 = distinct !DILexicalBlock(scope: !91, file: !1, line: 182, column: 7)
!280 = !DILocation(line: 182, column: 7, scope: !91)
!281 = !DILocation(line: 182, column: 23, scope: !282)
!282 = !DILexicalBlockFile(scope: !279, file: !1, discriminator: 1)
!283 = !DILocation(line: 184, column: 3, scope: !91)
!284 = distinct !DISubprogram(name: "setup", scope: !1, file: !1, line: 308, type: !285, isLocal: true, isDefinition: true, scopeLine: 309, isOptimized: false, unit: !0, variables: !68)
!285 = !DISubroutineType(types: !286)
!286 = !{null}
!287 = !DILocalVariable(name: "fp", scope: !284, file: !1, line: 310, type: !288)
!288 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !289, size: 64, align: 64)
!289 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !290, line: 48, baseType: !291)
!290 = !DIFile(filename: "/usr/include/stdio.h", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT")
!291 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !292, line: 245, size: 1728, align: 64, elements: !293)
!292 = !DIFile(filename: "/usr/include/libio.h", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT")
!293 = !{!294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !314, !315, !316, !317, !321, !323, !325, !329, !332, !334, !335, !336, !337, !338, !342, !343}
!294 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !291, file: !292, line: 246, baseType: !23, size: 32, align: 32)
!295 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !291, file: !292, line: 251, baseType: !95, size: 64, align: 64, offset: 64)
!296 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !291, file: !292, line: 252, baseType: !95, size: 64, align: 64, offset: 128)
!297 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !291, file: !292, line: 253, baseType: !95, size: 64, align: 64, offset: 192)
!298 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !291, file: !292, line: 254, baseType: !95, size: 64, align: 64, offset: 256)
!299 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !291, file: !292, line: 255, baseType: !95, size: 64, align: 64, offset: 320)
!300 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !291, file: !292, line: 256, baseType: !95, size: 64, align: 64, offset: 384)
!301 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !291, file: !292, line: 257, baseType: !95, size: 64, align: 64, offset: 448)
!302 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !291, file: !292, line: 258, baseType: !95, size: 64, align: 64, offset: 512)
!303 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !291, file: !292, line: 260, baseType: !95, size: 64, align: 64, offset: 576)
!304 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !291, file: !292, line: 261, baseType: !95, size: 64, align: 64, offset: 640)
!305 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !291, file: !292, line: 262, baseType: !95, size: 64, align: 64, offset: 704)
!306 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !291, file: !292, line: 264, baseType: !307, size: 64, align: 64, offset: 768)
!307 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !308, size: 64, align: 64)
!308 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !292, line: 160, size: 192, align: 64, elements: !309)
!309 = !{!310, !311, !313}
!310 = !DIDerivedType(tag: DW_TAG_member, name: "_next", scope: !308, file: !292, line: 161, baseType: !307, size: 64, align: 64)
!311 = !DIDerivedType(tag: DW_TAG_member, name: "_sbuf", scope: !308, file: !292, line: 162, baseType: !312, size: 64, align: 64, offset: 64)
!312 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !291, size: 64, align: 64)
!313 = !DIDerivedType(tag: DW_TAG_member, name: "_pos", scope: !308, file: !292, line: 166, baseType: !23, size: 32, align: 32, offset: 128)
!314 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !291, file: !292, line: 266, baseType: !312, size: 64, align: 64, offset: 832)
!315 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !291, file: !292, line: 268, baseType: !23, size: 32, align: 32, offset: 896)
!316 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !291, file: !292, line: 272, baseType: !23, size: 32, align: 32, offset: 928)
!317 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !291, file: !292, line: 274, baseType: !318, size: 64, align: 64, offset: 960)
!318 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !319, line: 131, baseType: !320)
!319 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT")
!320 = !DIBasicType(name: "long int", size: 64, align: 64, encoding: DW_ATE_signed)
!321 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !291, file: !292, line: 278, baseType: !322, size: 16, align: 16, offset: 1024)
!322 = !DIBasicType(name: "unsigned short", size: 16, align: 16, encoding: DW_ATE_unsigned)
!323 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !291, file: !292, line: 279, baseType: !324, size: 8, align: 8, offset: 1040)
!324 = !DIBasicType(name: "signed char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!325 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !291, file: !292, line: 280, baseType: !326, size: 8, align: 8, offset: 1048)
!326 = !DICompositeType(tag: DW_TAG_array_type, baseType: !96, size: 8, align: 8, elements: !327)
!327 = !{!328}
!328 = !DISubrange(count: 1)
!329 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !291, file: !292, line: 284, baseType: !330, size: 64, align: 64, offset: 1088)
!330 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !331, size: 64, align: 64)
!331 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !292, line: 154, baseType: null)
!332 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !291, file: !292, line: 293, baseType: !333, size: 64, align: 64, offset: 1152)
!333 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !319, line: 132, baseType: !320)
!334 = !DIDerivedType(tag: DW_TAG_member, name: "__pad1", scope: !291, file: !292, line: 302, baseType: !22, size: 64, align: 64, offset: 1216)
!335 = !DIDerivedType(tag: DW_TAG_member, name: "__pad2", scope: !291, file: !292, line: 303, baseType: !22, size: 64, align: 64, offset: 1280)
!336 = !DIDerivedType(tag: DW_TAG_member, name: "__pad3", scope: !291, file: !292, line: 304, baseType: !22, size: 64, align: 64, offset: 1344)
!337 = !DIDerivedType(tag: DW_TAG_member, name: "__pad4", scope: !291, file: !292, line: 305, baseType: !22, size: 64, align: 64, offset: 1408)
!338 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !291, file: !292, line: 306, baseType: !339, size: 64, align: 64, offset: 1472)
!339 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !340, line: 62, baseType: !341)
!340 = !DIFile(filename: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/llvm-3.8/build/bin/../lib/clang/3.9.0/include/stddef.h", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/FT")
!341 = !DIBasicType(name: "long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!342 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !291, file: !292, line: 308, baseType: !23, size: 32, align: 32, offset: 1536)
!343 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !291, file: !292, line: 310, baseType: !344, size: 160, align: 8, offset: 1568)
!344 = !DICompositeType(tag: DW_TAG_array_type, baseType: !96, size: 160, align: 8, elements: !345)
!345 = !{!346}
!346 = !DISubrange(count: 20)
!347 = !DILocation(line: 310, column: 9, scope: !284)
!348 = !DILocation(line: 311, column: 9, scope: !284)
!349 = !DILocation(line: 313, column: 13, scope: !350)
!350 = distinct !DILexicalBlock(scope: !284, file: !1, line: 313, column: 7)
!351 = !DILocation(line: 313, column: 11, scope: !350)
!352 = !DILocation(line: 313, column: 39, scope: !350)
!353 = !DILocation(line: 313, column: 7, scope: !284)
!354 = !DILocation(line: 314, column: 20, scope: !355)
!355 = distinct !DILexicalBlock(scope: !350, file: !1, line: 313, column: 48)
!356 = !DILocation(line: 315, column: 12, scope: !355)
!357 = !DILocation(line: 315, column: 5, scope: !355)
!358 = !DILocation(line: 316, column: 3, scope: !355)
!359 = !DILocation(line: 317, column: 20, scope: !360)
!360 = distinct !DILexicalBlock(scope: !350, file: !1, line: 316, column: 10)
!361 = !DILocation(line: 320, column: 9, scope: !284)
!362 = !DILocation(line: 322, column: 3, scope: !284)
!363 = !DILocation(line: 323, column: 3, scope: !284)
!364 = !DILocation(line: 324, column: 49, scope: !284)
!365 = !DILocation(line: 324, column: 3, scope: !284)
!366 = !DILocation(line: 325, column: 49, scope: !284)
!367 = !DILocation(line: 325, column: 3, scope: !368)
!368 = !DILexicalBlockFile(scope: !284, file: !1, discriminator: 1)
!369 = !DILocation(line: 326, column: 3, scope: !284)
!370 = !DILocation(line: 328, column: 11, scope: !284)
!371 = !DILocation(line: 329, column: 11, scope: !284)
!372 = !DILocation(line: 330, column: 11, scope: !284)
!373 = !DILocation(line: 347, column: 12, scope: !284)
!374 = !DILocation(line: 348, column: 15, scope: !284)
!375 = !DILocation(line: 350, column: 7, scope: !376)
!376 = distinct !DILexicalBlock(scope: !284, file: !1, line: 350, column: 7)
!377 = !DILocation(line: 350, column: 16, scope: !376)
!378 = !DILocation(line: 350, column: 7, scope: !284)
!379 = !DILocation(line: 350, column: 51, scope: !380)
!380 = !DILexicalBlockFile(scope: !376, file: !1, discriminator: 1)
!381 = !DILocation(line: 350, column: 59, scope: !380)
!382 = !DILocation(line: 350, column: 49, scope: !380)
!383 = !DILocation(line: 350, column: 37, scope: !380)
!384 = !DILocation(line: 351, column: 1, scope: !284)
!385 = distinct !DISubprogram(name: "init_ui", scope: !1, file: !1, line: 191, type: !386, isLocal: true, isDefinition: true, scopeLine: 192, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !68)
!386 = !DISubroutineType(types: !387)
!387 = !{null, !22, !22, !22, !23, !23, !23}
!388 = !DILocalVariable(name: "ou0", arg: 1, scope: !385, file: !1, line: 191, type: !22)
!389 = !DILocation(line: 191, column: 27, scope: !385)
!390 = !DILocalVariable(name: "ou1", arg: 2, scope: !385, file: !1, line: 191, type: !22)
!391 = !DILocation(line: 191, column: 38, scope: !385)
!392 = !DILocalVariable(name: "ot", arg: 3, scope: !385, file: !1, line: 191, type: !22)
!393 = !DILocation(line: 191, column: 49, scope: !385)
!394 = !DILocalVariable(name: "d1", arg: 4, scope: !385, file: !1, line: 191, type: !23)
!395 = !DILocation(line: 191, column: 57, scope: !385)
!396 = !DILocalVariable(name: "d2", arg: 5, scope: !385, file: !1, line: 191, type: !23)
!397 = !DILocation(line: 191, column: 65, scope: !385)
!398 = !DILocalVariable(name: "d3", arg: 6, scope: !385, file: !1, line: 191, type: !23)
!399 = !DILocation(line: 191, column: 73, scope: !385)
!400 = !DILocation(line: 193, column: 18, scope: !385)
!401 = !DILocation(line: 193, column: 3, scope: !385)
!402 = !DILocation(line: 193, column: 22, scope: !385)
!403 = !DILocation(line: 193, column: 24, scope: !385)
!404 = !DILocalVariable(name: "u0", scope: !385, file: !1, line: 193, type: !10)
!405 = !DILocation(line: 193, column: 14, scope: !385)
!406 = !DILocation(line: 193, column: 44, scope: !385)
!407 = !DILocation(line: 193, column: 30, scope: !385)
!408 = !DILocation(line: 193, column: 48, scope: !385)
!409 = !DILocation(line: 193, column: 50, scope: !385)
!410 = !DILocation(line: 193, column: 54, scope: !385)
!411 = !DILocation(line: 194, column: 18, scope: !385)
!412 = !DILocation(line: 194, column: 3, scope: !385)
!413 = !DILocation(line: 194, column: 22, scope: !385)
!414 = !DILocation(line: 194, column: 24, scope: !385)
!415 = !DILocalVariable(name: "u1", scope: !385, file: !1, line: 194, type: !10)
!416 = !DILocation(line: 194, column: 14, scope: !385)
!417 = !DILocation(line: 194, column: 44, scope: !385)
!418 = !DILocation(line: 194, column: 30, scope: !385)
!419 = !DILocation(line: 194, column: 48, scope: !385)
!420 = !DILocation(line: 194, column: 50, scope: !385)
!421 = !DILocation(line: 194, column: 54, scope: !385)
!422 = !DILocation(line: 195, column: 21, scope: !385)
!423 = !DILocation(line: 195, column: 3, scope: !385)
!424 = !DILocation(line: 195, column: 25, scope: !385)
!425 = !DILocation(line: 195, column: 27, scope: !385)
!426 = !DILocalVariable(name: "twiddle", scope: !385, file: !1, line: 195, type: !19)
!427 = !DILocation(line: 195, column: 12, scope: !385)
!428 = !DILocation(line: 195, column: 45, scope: !385)
!429 = !DILocation(line: 195, column: 33, scope: !385)
!430 = !DILocation(line: 195, column: 49, scope: !385)
!431 = !DILocation(line: 195, column: 51, scope: !385)
!432 = !DILocation(line: 195, column: 55, scope: !385)
!433 = !DILocalVariable(name: "i", scope: !385, file: !1, line: 197, type: !23)
!434 = !DILocation(line: 197, column: 7, scope: !385)
!435 = !DILocalVariable(name: "j", scope: !385, file: !1, line: 197, type: !23)
!436 = !DILocation(line: 197, column: 10, scope: !385)
!437 = !DILocalVariable(name: "k", scope: !385, file: !1, line: 197, type: !23)
!438 = !DILocation(line: 197, column: 13, scope: !385)
!439 = !DILocation(line: 199, column: 11, scope: !385)
!440 = !DILocation(line: 209, column: 1, scope: !385)
!441 = distinct !DISubprogram(name: ".omp_outlined.", scope: !1, file: !1, line: 205, type: !442, isLocal: true, isDefinition: true, scopeLine: 200, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !68)
!442 = !DISubroutineType(types: !443)
!443 = !{null, !444, !444, !447, !447, !447, !341, !341, !448, !341, !341, !448, !341, !341, !449}
!444 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !445)
!445 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !446)
!446 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !23, size: 64, align: 64)
!447 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !23, size: 64, align: 64)
!448 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !10, size: 64, align: 64)
!449 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !19, size: 64, align: 64)
!450 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !441, type: !444, flags: DIFlagArtificial | DIFlagObjectPointer)
!451 = !DILocation(line: 0, scope: !441)
!452 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !441, type: !444, flags: DIFlagArtificial)
!453 = !DILocalVariable(name: "d3", arg: 3, scope: !441, type: !447, flags: DIFlagArtificial)
!454 = !DILocalVariable(name: "d2", arg: 4, scope: !441, type: !447, flags: DIFlagArtificial)
!455 = !DILocalVariable(name: "d1", arg: 5, scope: !441, type: !447, flags: DIFlagArtificial)
!456 = !DILocalVariable(name: "vla", arg: 6, scope: !441, type: !341, flags: DIFlagArtificial)
!457 = !DILocalVariable(name: "vla", arg: 7, scope: !441, type: !341, flags: DIFlagArtificial)
!458 = !DILocalVariable(name: "u0", arg: 8, scope: !441, type: !448, flags: DIFlagArtificial)
!459 = !DILocalVariable(name: "vla", arg: 9, scope: !441, type: !341, flags: DIFlagArtificial)
!460 = !DILocalVariable(name: "vla", arg: 10, scope: !441, type: !341, flags: DIFlagArtificial)
!461 = !DILocalVariable(name: "u1", arg: 11, scope: !441, type: !448, flags: DIFlagArtificial)
!462 = !DILocalVariable(name: "vla", arg: 12, scope: !441, type: !341, flags: DIFlagArtificial)
!463 = !DILocalVariable(name: "vla", arg: 13, scope: !441, type: !341, flags: DIFlagArtificial)
!464 = !DILocalVariable(name: "twiddle", arg: 14, scope: !441, type: !449, flags: DIFlagArtificial)
!465 = !DILocation(line: 200, column: 3, scope: !441)
!466 = !DILocalVariable(name: ".omp.iv", scope: !441, type: !23, flags: DIFlagArtificial)
!467 = !DILocalVariable(name: ".omp.last.iteration", scope: !441, type: !23, flags: DIFlagArtificial)
!468 = !DILocation(line: 200, column: 19, scope: !441)
!469 = !DILocalVariable(name: "k", scope: !441, type: !23, flags: DIFlagArtificial)
!470 = !DILocation(line: 200, column: 23, scope: !441)
!471 = !DILocalVariable(name: ".omp.lb", scope: !441, type: !23, flags: DIFlagArtificial)
!472 = !DILocation(line: 200, column: 8, scope: !473)
!473 = !DILexicalBlockFile(scope: !441, file: !1, discriminator: 1)
!474 = !DILocalVariable(name: ".omp.ub", scope: !441, type: !23, flags: DIFlagArtificial)
!475 = !DILocation(line: 0, scope: !473)
!476 = !DILocalVariable(name: ".omp.stride", scope: !441, type: !23, flags: DIFlagArtificial)
!477 = !DILocalVariable(name: ".omp.is_last", scope: !441, type: !23, flags: DIFlagArtificial)
!478 = !DILocalVariable(name: "i", scope: !441, type: !23, flags: DIFlagArtificial)
!479 = !DILocalVariable(name: "j", scope: !441, type: !23, flags: DIFlagArtificial)
!480 = !DILocation(line: 200, column: 3, scope: !473)
!481 = !DILocation(line: 0, scope: !482)
!482 = !DILexicalBlockFile(scope: !441, file: !1, discriminator: 2)
!483 = !DILocation(line: 200, column: 8, scope: !482)
!484 = !DILocation(line: 200, column: 8, scope: !485)
!485 = !DILexicalBlockFile(scope: !441, file: !1, discriminator: 3)
!486 = !DILocation(line: 200, column: 8, scope: !487)
!487 = !DILexicalBlockFile(scope: !441, file: !1, discriminator: 4)
!488 = !DILocation(line: 200, column: 3, scope: !487)
!489 = !DILocation(line: 200, column: 8, scope: !490)
!490 = !DILexicalBlockFile(scope: !441, file: !1, discriminator: 5)
!491 = !DILocation(line: 0, scope: !485)
!492 = !DILocation(line: 200, column: 3, scope: !490)
!493 = !DILocation(line: 200, column: 8, scope: !494)
!494 = !DILexicalBlockFile(scope: !441, file: !1, discriminator: 6)
!495 = !DILocation(line: 200, column: 23, scope: !494)
!496 = !DILocation(line: 201, column: 12, scope: !497)
!497 = distinct !DILexicalBlock(scope: !498, file: !1, line: 201, column: 5)
!498 = distinct !DILexicalBlock(scope: !441, file: !1, line: 200, column: 28)
!499 = !DILocation(line: 201, column: 10, scope: !497)
!500 = !DILocation(line: 201, column: 17, scope: !501)
!501 = !DILexicalBlockFile(scope: !502, file: !1, discriminator: 1)
!502 = distinct !DILexicalBlock(scope: !497, file: !1, line: 201, column: 5)
!503 = !DILocation(line: 201, column: 21, scope: !501)
!504 = !DILocation(line: 201, column: 19, scope: !501)
!505 = !DILocation(line: 201, column: 5, scope: !501)
!506 = !DILocation(line: 202, column: 14, scope: !507)
!507 = distinct !DILexicalBlock(scope: !508, file: !1, line: 202, column: 7)
!508 = distinct !DILexicalBlock(scope: !502, file: !1, line: 201, column: 30)
!509 = !DILocation(line: 202, column: 12, scope: !507)
!510 = !DILocation(line: 202, column: 19, scope: !511)
!511 = !DILexicalBlockFile(scope: !512, file: !1, discriminator: 1)
!512 = distinct !DILexicalBlock(scope: !507, file: !1, line: 202, column: 7)
!513 = !DILocation(line: 202, column: 23, scope: !511)
!514 = !DILocation(line: 202, column: 21, scope: !511)
!515 = !DILocation(line: 202, column: 7, scope: !511)
!516 = !DILocation(line: 203, column: 18, scope: !517)
!517 = distinct !DILexicalBlock(scope: !512, file: !1, line: 202, column: 32)
!518 = !DILocation(line: 203, column: 9, scope: !517)
!519 = !DILocation(line: 203, column: 15, scope: !517)
!520 = !DILocation(line: 203, column: 12, scope: !517)
!521 = !DILocation(line: 203, column: 23, scope: !517)
!522 = !DILocation(line: 204, column: 18, scope: !517)
!523 = !DILocation(line: 204, column: 9, scope: !517)
!524 = !DILocation(line: 204, column: 15, scope: !517)
!525 = !DILocation(line: 204, column: 12, scope: !517)
!526 = !DILocation(line: 204, column: 23, scope: !517)
!527 = !DILocation(line: 205, column: 23, scope: !517)
!528 = !DILocation(line: 205, column: 9, scope: !517)
!529 = !DILocation(line: 205, column: 20, scope: !517)
!530 = !DILocation(line: 205, column: 17, scope: !517)
!531 = !DILocation(line: 205, column: 26, scope: !517)
!532 = !DILocation(line: 206, column: 7, scope: !517)
!533 = !DILocation(line: 202, column: 28, scope: !534)
!534 = !DILexicalBlockFile(scope: !512, file: !1, discriminator: 2)
!535 = !DILocation(line: 202, column: 7, scope: !534)
!536 = !DILocation(line: 207, column: 5, scope: !508)
!537 = !DILocation(line: 201, column: 26, scope: !538)
!538 = !DILexicalBlockFile(scope: !502, file: !1, discriminator: 2)
!539 = !DILocation(line: 201, column: 5, scope: !538)
!540 = !DILocation(line: 208, column: 3, scope: !498)
!541 = !DILocation(line: 199, column: 11, scope: !441)
!542 = !DILocation(line: 200, column: 8, scope: !543)
!543 = !DILexicalBlockFile(scope: !441, file: !1, discriminator: 7)
!544 = !DILocation(line: 0, scope: !487)
!545 = !DILocation(line: 199, column: 11, scope: !473)
!546 = !DILocation(line: 199, column: 11, scope: !482)
!547 = !DILocation(line: 199, column: 11, scope: !485)
!548 = !DILocation(line: 208, column: 3, scope: !473)
!549 = distinct !DISubprogram(name: "compute_indexmap", scope: !1, file: !1, line: 358, type: !550, isLocal: true, isDefinition: true, scopeLine: 359, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !68)
!550 = !DISubroutineType(types: !551)
!551 = !{null, !22, !23, !23, !23}
!552 = !DILocalVariable(name: "ot", arg: 1, scope: !549, file: !1, line: 358, type: !22)
!553 = !DILocation(line: 358, column: 36, scope: !549)
!554 = !DILocalVariable(name: "d1", arg: 2, scope: !549, file: !1, line: 358, type: !23)
!555 = !DILocation(line: 358, column: 44, scope: !549)
!556 = !DILocalVariable(name: "d2", arg: 3, scope: !549, file: !1, line: 358, type: !23)
!557 = !DILocation(line: 358, column: 52, scope: !549)
!558 = !DILocalVariable(name: "d3", arg: 4, scope: !549, file: !1, line: 358, type: !23)
!559 = !DILocation(line: 358, column: 60, scope: !549)
!560 = !DILocation(line: 360, column: 21, scope: !549)
!561 = !DILocation(line: 360, column: 3, scope: !549)
!562 = !DILocation(line: 360, column: 25, scope: !549)
!563 = !DILocation(line: 360, column: 27, scope: !549)
!564 = !DILocalVariable(name: "twiddle", scope: !549, file: !1, line: 360, type: !19)
!565 = !DILocation(line: 360, column: 12, scope: !549)
!566 = !DILocation(line: 360, column: 45, scope: !549)
!567 = !DILocation(line: 360, column: 33, scope: !549)
!568 = !DILocation(line: 360, column: 49, scope: !549)
!569 = !DILocation(line: 360, column: 51, scope: !549)
!570 = !DILocation(line: 360, column: 55, scope: !549)
!571 = !DILocalVariable(name: "i", scope: !549, file: !1, line: 362, type: !23)
!572 = !DILocation(line: 362, column: 7, scope: !549)
!573 = !DILocalVariable(name: "j", scope: !549, file: !1, line: 362, type: !23)
!574 = !DILocation(line: 362, column: 10, scope: !549)
!575 = !DILocalVariable(name: "k", scope: !549, file: !1, line: 362, type: !23)
!576 = !DILocation(line: 362, column: 13, scope: !549)
!577 = !DILocalVariable(name: "kk", scope: !549, file: !1, line: 362, type: !23)
!578 = !DILocation(line: 362, column: 16, scope: !549)
!579 = !DILocalVariable(name: "kk2", scope: !549, file: !1, line: 362, type: !23)
!580 = !DILocation(line: 362, column: 20, scope: !549)
!581 = !DILocalVariable(name: "jj", scope: !549, file: !1, line: 362, type: !23)
!582 = !DILocation(line: 362, column: 25, scope: !549)
!583 = !DILocalVariable(name: "kj2", scope: !549, file: !1, line: 362, type: !23)
!584 = !DILocation(line: 362, column: 29, scope: !549)
!585 = !DILocalVariable(name: "ii", scope: !549, file: !1, line: 362, type: !23)
!586 = !DILocation(line: 362, column: 34, scope: !549)
!587 = !DILocalVariable(name: "ap", scope: !549, file: !1, line: 363, type: !9)
!588 = !DILocation(line: 363, column: 10, scope: !549)
!589 = !DILocation(line: 374, column: 6, scope: !549)
!590 = !DILocation(line: 376, column: 11, scope: !549)
!591 = !DILocation(line: 389, column: 1, scope: !549)
!592 = distinct !DISubprogram(name: ".omp_outlined..17", scope: !1, file: !1, line: 385, type: !593, isLocal: true, isDefinition: true, scopeLine: 377, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !68)
!593 = !DISubroutineType(types: !594)
!594 = !{null, !444, !444, !341, !341, !449, !595}
!595 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !9, size: 64, align: 64)
!596 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !592, type: !444, flags: DIFlagArtificial | DIFlagObjectPointer)
!597 = !DILocation(line: 0, scope: !592)
!598 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !592, type: !444, flags: DIFlagArtificial)
!599 = !DILocalVariable(name: "vla", arg: 3, scope: !592, type: !341, flags: DIFlagArtificial)
!600 = !DILocalVariable(name: "vla", arg: 4, scope: !592, type: !341, flags: DIFlagArtificial)
!601 = !DILocalVariable(name: "twiddle", arg: 5, scope: !592, type: !449, flags: DIFlagArtificial)
!602 = !DILocalVariable(name: "ap", arg: 6, scope: !592, type: !595, flags: DIFlagArtificial)
!603 = !DILocation(line: 377, column: 3, scope: !592)
!604 = !DILocalVariable(name: ".omp.iv", scope: !592, type: !23, flags: DIFlagArtificial)
!605 = !DILocalVariable(name: ".omp.last.iteration", scope: !592, type: !23, flags: DIFlagArtificial)
!606 = !DILocation(line: 377, column: 19, scope: !592)
!607 = !DILocalVariable(name: "k", scope: !592, type: !23, flags: DIFlagArtificial)
!608 = !DILocation(line: 377, column: 28, scope: !592)
!609 = !DILocalVariable(name: ".omp.lb", scope: !592, type: !23, flags: DIFlagArtificial)
!610 = !DILocation(line: 377, column: 8, scope: !611)
!611 = !DILexicalBlockFile(scope: !592, file: !1, discriminator: 1)
!612 = !DILocalVariable(name: ".omp.ub", scope: !592, type: !23, flags: DIFlagArtificial)
!613 = !DILocation(line: 0, scope: !614)
!614 = !DILexicalBlockFile(scope: !592, file: !1, discriminator: 13)
!615 = !DILocalVariable(name: ".omp.stride", scope: !592, type: !23, flags: DIFlagArtificial)
!616 = !DILocalVariable(name: ".omp.is_last", scope: !592, type: !23, flags: DIFlagArtificial)
!617 = !DILocalVariable(name: "i", scope: !592, type: !23, flags: DIFlagArtificial)
!618 = !DILocalVariable(name: "j", scope: !592, type: !23, flags: DIFlagArtificial)
!619 = !DILocalVariable(name: "kk", scope: !592, type: !23, flags: DIFlagArtificial)
!620 = !DILocalVariable(name: "kk2", scope: !592, type: !23, flags: DIFlagArtificial)
!621 = !DILocalVariable(name: "jj", scope: !592, type: !23, flags: DIFlagArtificial)
!622 = !DILocalVariable(name: "kj2", scope: !592, type: !23, flags: DIFlagArtificial)
!623 = !DILocalVariable(name: "ii", scope: !592, type: !23, flags: DIFlagArtificial)
!624 = !DILocation(line: 377, column: 3, scope: !611)
!625 = !DILocation(line: 0, scope: !626)
!626 = !DILexicalBlockFile(scope: !592, file: !1, discriminator: 14)
!627 = !DILocation(line: 377, column: 8, scope: !628)
!628 = !DILexicalBlockFile(scope: !592, file: !1, discriminator: 2)
!629 = !DILocation(line: 377, column: 8, scope: !630)
!630 = !DILexicalBlockFile(scope: !592, file: !1, discriminator: 3)
!631 = !DILocation(line: 377, column: 8, scope: !632)
!632 = !DILexicalBlockFile(scope: !592, file: !1, discriminator: 4)
!633 = !DILocation(line: 377, column: 3, scope: !632)
!634 = !DILocation(line: 377, column: 8, scope: !635)
!635 = !DILexicalBlockFile(scope: !592, file: !1, discriminator: 5)
!636 = !DILocation(line: 0, scope: !637)
!637 = !DILexicalBlockFile(scope: !592, file: !1, discriminator: 15)
!638 = !DILocation(line: 377, column: 3, scope: !635)
!639 = !DILocation(line: 377, column: 8, scope: !640)
!640 = !DILexicalBlockFile(scope: !592, file: !1, discriminator: 6)
!641 = !DILocation(line: 377, column: 28, scope: !640)
!642 = !DILocation(line: 378, column: 12, scope: !643)
!643 = distinct !DILexicalBlock(scope: !592, file: !1, line: 377, column: 33)
!644 = !DILocation(line: 378, column: 14, scope: !643)
!645 = !DILocation(line: 378, column: 22, scope: !643)
!646 = !DILocation(line: 378, column: 28, scope: !643)
!647 = !DILocation(line: 378, column: 8, scope: !643)
!648 = !DILocation(line: 379, column: 11, scope: !643)
!649 = !DILocation(line: 379, column: 14, scope: !643)
!650 = !DILocation(line: 379, column: 13, scope: !643)
!651 = !DILocation(line: 379, column: 9, scope: !643)
!652 = !DILocation(line: 380, column: 12, scope: !653)
!653 = distinct !DILexicalBlock(scope: !643, file: !1, line: 380, column: 5)
!654 = !DILocation(line: 380, column: 10, scope: !653)
!655 = !DILocation(line: 380, column: 17, scope: !656)
!656 = !DILexicalBlockFile(scope: !657, file: !1, discriminator: 1)
!657 = distinct !DILexicalBlock(scope: !653, file: !1, line: 380, column: 5)
!658 = !DILocation(line: 380, column: 21, scope: !656)
!659 = !DILocation(line: 380, column: 19, scope: !656)
!660 = !DILocation(line: 380, column: 5, scope: !656)
!661 = !DILocation(line: 381, column: 14, scope: !662)
!662 = distinct !DILexicalBlock(scope: !657, file: !1, line: 380, column: 35)
!663 = !DILocation(line: 381, column: 16, scope: !662)
!664 = !DILocation(line: 381, column: 24, scope: !662)
!665 = !DILocation(line: 381, column: 30, scope: !662)
!666 = !DILocation(line: 381, column: 10, scope: !662)
!667 = !DILocation(line: 382, column: 13, scope: !662)
!668 = !DILocation(line: 382, column: 16, scope: !662)
!669 = !DILocation(line: 382, column: 15, scope: !662)
!670 = !DILocation(line: 382, column: 21, scope: !662)
!671 = !DILocation(line: 382, column: 19, scope: !662)
!672 = !DILocation(line: 382, column: 11, scope: !662)
!673 = !DILocation(line: 383, column: 14, scope: !674)
!674 = distinct !DILexicalBlock(scope: !662, file: !1, line: 383, column: 7)
!675 = !DILocation(line: 383, column: 12, scope: !674)
!676 = !DILocation(line: 383, column: 19, scope: !677)
!677 = !DILexicalBlockFile(scope: !678, file: !1, discriminator: 1)
!678 = distinct !DILexicalBlock(scope: !674, file: !1, line: 383, column: 7)
!679 = !DILocation(line: 383, column: 23, scope: !677)
!680 = !DILocation(line: 383, column: 21, scope: !677)
!681 = !DILocation(line: 383, column: 7, scope: !677)
!682 = !DILocation(line: 384, column: 16, scope: !683)
!683 = distinct !DILexicalBlock(scope: !678, file: !1, line: 383, column: 37)
!684 = !DILocation(line: 384, column: 18, scope: !683)
!685 = !DILocation(line: 384, column: 26, scope: !683)
!686 = !DILocation(line: 384, column: 32, scope: !683)
!687 = !DILocation(line: 384, column: 12, scope: !683)
!688 = !DILocation(line: 385, column: 32, scope: !683)
!689 = !DILocation(line: 385, column: 46, scope: !683)
!690 = !DILocation(line: 385, column: 49, scope: !683)
!691 = !DILocation(line: 385, column: 48, scope: !683)
!692 = !DILocation(line: 385, column: 52, scope: !683)
!693 = !DILocation(line: 385, column: 51, scope: !683)
!694 = !DILocation(line: 385, column: 37, scope: !683)
!695 = !DILocation(line: 385, column: 35, scope: !683)
!696 = !DILocation(line: 385, column: 28, scope: !683)
!697 = !DILocation(line: 385, column: 23, scope: !683)
!698 = !DILocation(line: 385, column: 9, scope: !683)
!699 = !DILocation(line: 385, column: 20, scope: !683)
!700 = !DILocation(line: 385, column: 17, scope: !683)
!701 = !DILocation(line: 385, column: 26, scope: !683)
!702 = !DILocation(line: 386, column: 7, scope: !683)
!703 = !DILocation(line: 383, column: 33, scope: !704)
!704 = !DILexicalBlockFile(scope: !678, file: !1, discriminator: 2)
!705 = !DILocation(line: 383, column: 7, scope: !704)
!706 = !DILocation(line: 387, column: 5, scope: !662)
!707 = !DILocation(line: 380, column: 31, scope: !708)
!708 = !DILexicalBlockFile(scope: !657, file: !1, discriminator: 2)
!709 = !DILocation(line: 380, column: 5, scope: !708)
!710 = !DILocation(line: 388, column: 3, scope: !643)
!711 = !DILocation(line: 376, column: 11, scope: !592)
!712 = !DILocation(line: 377, column: 8, scope: !713)
!713 = !DILexicalBlockFile(scope: !592, file: !1, discriminator: 7)
!714 = !DILocation(line: 0, scope: !715)
!715 = !DILexicalBlockFile(scope: !592, file: !1, discriminator: 16)
!716 = !DILocation(line: 376, column: 11, scope: !611)
!717 = !DILocation(line: 376, column: 11, scope: !628)
!718 = !DILocation(line: 376, column: 11, scope: !630)
!719 = !DILocation(line: 388, column: 3, scope: !611)
!720 = distinct !DISubprogram(name: "compute_initial_conditions", scope: !1, file: !1, line: 239, type: !550, isLocal: true, isDefinition: true, scopeLine: 240, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !68)
!721 = !DILocalVariable(name: "ou0", arg: 1, scope: !720, file: !1, line: 239, type: !22)
!722 = !DILocation(line: 239, column: 46, scope: !720)
!723 = !DILocalVariable(name: "d1", arg: 2, scope: !720, file: !1, line: 239, type: !23)
!724 = !DILocation(line: 239, column: 55, scope: !720)
!725 = !DILocalVariable(name: "d2", arg: 3, scope: !720, file: !1, line: 239, type: !23)
!726 = !DILocation(line: 239, column: 63, scope: !720)
!727 = !DILocalVariable(name: "d3", arg: 4, scope: !720, file: !1, line: 239, type: !23)
!728 = !DILocation(line: 239, column: 71, scope: !720)
!729 = !DILocation(line: 241, column: 18, scope: !720)
!730 = !DILocation(line: 241, column: 3, scope: !720)
!731 = !DILocation(line: 241, column: 22, scope: !720)
!732 = !DILocation(line: 241, column: 24, scope: !720)
!733 = !DILocalVariable(name: "u0", scope: !720, file: !1, line: 241, type: !10)
!734 = !DILocation(line: 241, column: 14, scope: !720)
!735 = !DILocation(line: 241, column: 44, scope: !720)
!736 = !DILocation(line: 241, column: 30, scope: !720)
!737 = !DILocation(line: 241, column: 48, scope: !720)
!738 = !DILocation(line: 241, column: 50, scope: !720)
!739 = !DILocation(line: 241, column: 54, scope: !720)
!740 = !DILocalVariable(name: "k", scope: !720, file: !1, line: 243, type: !23)
!741 = !DILocation(line: 243, column: 7, scope: !720)
!742 = !DILocalVariable(name: "j", scope: !720, file: !1, line: 243, type: !23)
!743 = !DILocation(line: 243, column: 10, scope: !720)
!744 = !DILocalVariable(name: "x0", scope: !720, file: !1, line: 244, type: !9)
!745 = !DILocation(line: 244, column: 10, scope: !720)
!746 = !DILocalVariable(name: "start", scope: !720, file: !1, line: 244, type: !9)
!747 = !DILocation(line: 244, column: 14, scope: !720)
!748 = !DILocalVariable(name: "an", scope: !720, file: !1, line: 244, type: !9)
!749 = !DILocation(line: 244, column: 21, scope: !720)
!750 = !DILocalVariable(name: "dummy", scope: !720, file: !1, line: 244, type: !9)
!751 = !DILocation(line: 244, column: 25, scope: !720)
!752 = !DILocalVariable(name: "starts", scope: !720, file: !1, line: 244, type: !75)
!753 = !DILocation(line: 244, column: 32, scope: !720)
!754 = !DILocation(line: 246, column: 9, scope: !720)
!755 = !DILocation(line: 250, column: 8, scope: !720)
!756 = !DILocation(line: 250, column: 6, scope: !720)
!757 = !DILocation(line: 251, column: 26, scope: !720)
!758 = !DILocation(line: 251, column: 11, scope: !720)
!759 = !DILocation(line: 251, column: 9, scope: !720)
!760 = !DILocation(line: 252, column: 8, scope: !720)
!761 = !DILocation(line: 252, column: 6, scope: !720)
!762 = !DILocation(line: 254, column: 15, scope: !720)
!763 = !DILocation(line: 254, column: 3, scope: !720)
!764 = !DILocation(line: 254, column: 13, scope: !720)
!765 = !DILocation(line: 255, column: 10, scope: !766)
!766 = distinct !DILexicalBlock(scope: !720, file: !1, line: 255, column: 3)
!767 = !DILocation(line: 255, column: 8, scope: !766)
!768 = !DILocation(line: 255, column: 15, scope: !769)
!769 = !DILexicalBlockFile(scope: !770, file: !1, discriminator: 1)
!770 = distinct !DILexicalBlock(scope: !766, file: !1, line: 255, column: 3)
!771 = !DILocation(line: 255, column: 19, scope: !769)
!772 = !DILocation(line: 255, column: 17, scope: !769)
!773 = !DILocation(line: 255, column: 3, scope: !769)
!774 = !DILocation(line: 256, column: 28, scope: !775)
!775 = distinct !DILexicalBlock(scope: !770, file: !1, line: 255, column: 33)
!776 = !DILocation(line: 256, column: 13, scope: !775)
!777 = !DILocation(line: 256, column: 11, scope: !775)
!778 = !DILocation(line: 257, column: 17, scope: !775)
!779 = !DILocation(line: 257, column: 12, scope: !775)
!780 = !DILocation(line: 257, column: 5, scope: !775)
!781 = !DILocation(line: 257, column: 15, scope: !775)
!782 = !DILocation(line: 258, column: 3, scope: !775)
!783 = !DILocation(line: 255, column: 29, scope: !784)
!784 = !DILexicalBlockFile(scope: !770, file: !1, discriminator: 2)
!785 = !DILocation(line: 255, column: 3, scope: !784)
!786 = !DILocation(line: 263, column: 11, scope: !720)
!787 = !DILocation(line: 270, column: 1, scope: !720)
!788 = distinct !DISubprogram(name: "ipow46", scope: !1, file: !1, line: 276, type: !789, isLocal: true, isDefinition: true, scopeLine: 277, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !68)
!789 = !DISubroutineType(types: !790)
!790 = !{!9, !9, !23}
!791 = !DILocalVariable(name: "a", arg: 1, scope: !788, file: !1, line: 276, type: !9)
!792 = !DILocation(line: 276, column: 29, scope: !788)
!793 = !DILocalVariable(name: "exponent", arg: 2, scope: !788, file: !1, line: 276, type: !23)
!794 = !DILocation(line: 276, column: 36, scope: !788)
!795 = !DILocalVariable(name: "result", scope: !788, file: !1, line: 278, type: !9)
!796 = !DILocation(line: 278, column: 10, scope: !788)
!797 = !DILocalVariable(name: "dummy", scope: !788, file: !1, line: 278, type: !9)
!798 = !DILocation(line: 278, column: 18, scope: !788)
!799 = !DILocalVariable(name: "q", scope: !788, file: !1, line: 278, type: !9)
!800 = !DILocation(line: 278, column: 25, scope: !788)
!801 = !DILocalVariable(name: "r", scope: !788, file: !1, line: 278, type: !9)
!802 = !DILocation(line: 278, column: 28, scope: !788)
!803 = !DILocalVariable(name: "n", scope: !788, file: !1, line: 279, type: !23)
!804 = !DILocation(line: 279, column: 7, scope: !788)
!805 = !DILocalVariable(name: "n2", scope: !788, file: !1, line: 279, type: !23)
!806 = !DILocation(line: 279, column: 10, scope: !788)
!807 = !DILocation(line: 286, column: 10, scope: !788)
!808 = !DILocation(line: 287, column: 7, scope: !809)
!809 = distinct !DILexicalBlock(scope: !788, file: !1, line: 287, column: 7)
!810 = !DILocation(line: 287, column: 16, scope: !809)
!811 = !DILocation(line: 287, column: 7, scope: !788)
!812 = !DILocation(line: 287, column: 29, scope: !813)
!813 = !DILexicalBlockFile(scope: !809, file: !1, discriminator: 1)
!814 = !DILocation(line: 287, column: 22, scope: !813)
!815 = !DILocation(line: 288, column: 7, scope: !788)
!816 = !DILocation(line: 288, column: 5, scope: !788)
!817 = !DILocation(line: 289, column: 5, scope: !788)
!818 = !DILocation(line: 290, column: 7, scope: !788)
!819 = !DILocation(line: 290, column: 5, scope: !788)
!820 = !DILocation(line: 292, column: 3, scope: !788)
!821 = !DILocation(line: 292, column: 10, scope: !822)
!822 = !DILexicalBlockFile(scope: !788, file: !1, discriminator: 1)
!823 = !DILocation(line: 292, column: 12, scope: !822)
!824 = !DILocation(line: 292, column: 3, scope: !822)
!825 = !DILocation(line: 293, column: 10, scope: !826)
!826 = distinct !DILexicalBlock(scope: !788, file: !1, line: 292, column: 17)
!827 = !DILocation(line: 293, column: 12, scope: !826)
!828 = !DILocation(line: 293, column: 8, scope: !826)
!829 = !DILocation(line: 294, column: 9, scope: !830)
!830 = distinct !DILexicalBlock(scope: !826, file: !1, line: 294, column: 9)
!831 = !DILocation(line: 294, column: 12, scope: !830)
!832 = !DILocation(line: 294, column: 19, scope: !830)
!833 = !DILocation(line: 294, column: 16, scope: !830)
!834 = !DILocation(line: 294, column: 9, scope: !826)
!835 = !DILocation(line: 295, column: 26, scope: !836)
!836 = distinct !DILexicalBlock(scope: !830, file: !1, line: 294, column: 22)
!837 = !DILocation(line: 295, column: 15, scope: !836)
!838 = !DILocation(line: 295, column: 13, scope: !836)
!839 = !DILocation(line: 296, column: 11, scope: !836)
!840 = !DILocation(line: 296, column: 9, scope: !836)
!841 = !DILocation(line: 297, column: 5, scope: !836)
!842 = !DILocation(line: 298, column: 26, scope: !843)
!843 = distinct !DILexicalBlock(scope: !830, file: !1, line: 297, column: 12)
!844 = !DILocation(line: 298, column: 15, scope: !843)
!845 = !DILocation(line: 298, column: 13, scope: !843)
!846 = !DILocation(line: 299, column: 11, scope: !843)
!847 = !DILocation(line: 299, column: 12, scope: !843)
!848 = !DILocation(line: 299, column: 9, scope: !843)
!849 = !DILocation(line: 292, column: 3, scope: !850)
!850 = !DILexicalBlockFile(scope: !788, file: !1, discriminator: 2)
!851 = !DILocation(line: 302, column: 22, scope: !788)
!852 = !DILocation(line: 302, column: 11, scope: !788)
!853 = !DILocation(line: 302, column: 9, scope: !788)
!854 = !DILocation(line: 303, column: 12, scope: !788)
!855 = !DILocation(line: 303, column: 10, scope: !788)
!856 = !DILocation(line: 304, column: 10, scope: !788)
!857 = !DILocation(line: 304, column: 3, scope: !788)
!858 = !DILocation(line: 305, column: 1, scope: !788)
!859 = distinct !DISubprogram(name: ".omp_outlined..9", scope: !1, file: !1, line: 267, type: !860, isLocal: true, isDefinition: true, scopeLine: 264, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !68)
!860 = !DISubroutineType(types: !861)
!861 = !{null, !444, !444, !862, !341, !341, !448}
!862 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !75, size: 64, align: 64)
!863 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !859, type: !444, flags: DIFlagArtificial | DIFlagObjectPointer)
!864 = !DILocation(line: 0, scope: !859)
!865 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !859, type: !444, flags: DIFlagArtificial)
!866 = !DILocalVariable(name: "starts", arg: 3, scope: !859, type: !862, flags: DIFlagArtificial)
!867 = !DILocalVariable(name: "vla", arg: 4, scope: !859, type: !341, flags: DIFlagArtificial)
!868 = !DILocalVariable(name: "vla", arg: 5, scope: !859, type: !341, flags: DIFlagArtificial)
!869 = !DILocalVariable(name: "u0", arg: 6, scope: !859, type: !448, flags: DIFlagArtificial)
!870 = !DILocation(line: 264, column: 3, scope: !859)
!871 = !DILocalVariable(name: ".omp.iv", scope: !859, type: !23, flags: DIFlagArtificial)
!872 = !DILocalVariable(name: ".omp.last.iteration", scope: !859, type: !23, flags: DIFlagArtificial)
!873 = !DILocation(line: 264, column: 19, scope: !859)
!874 = !DILocalVariable(name: "k", scope: !859, type: !23, flags: DIFlagArtificial)
!875 = !DILocation(line: 264, column: 28, scope: !859)
!876 = !DILocalVariable(name: ".omp.lb", scope: !859, type: !23, flags: DIFlagArtificial)
!877 = !DILocation(line: 264, column: 8, scope: !878)
!878 = !DILexicalBlockFile(scope: !859, file: !1, discriminator: 1)
!879 = !DILocalVariable(name: ".omp.ub", scope: !859, type: !23, flags: DIFlagArtificial)
!880 = !DILocation(line: 0, scope: !881)
!881 = !DILexicalBlockFile(scope: !859, file: !1, discriminator: 9)
!882 = !DILocalVariable(name: ".omp.stride", scope: !859, type: !23, flags: DIFlagArtificial)
!883 = !DILocalVariable(name: ".omp.is_last", scope: !859, type: !23, flags: DIFlagArtificial)
!884 = !DILocalVariable(name: "j", scope: !859, type: !23, flags: DIFlagArtificial)
!885 = !DILocalVariable(name: "x0", scope: !859, type: !9, flags: DIFlagArtificial)
!886 = !DILocation(line: 264, column: 3, scope: !878)
!887 = !DILocation(line: 0, scope: !888)
!888 = !DILexicalBlockFile(scope: !859, file: !1, discriminator: 10)
!889 = !DILocation(line: 264, column: 8, scope: !890)
!890 = !DILexicalBlockFile(scope: !859, file: !1, discriminator: 2)
!891 = !DILocation(line: 264, column: 8, scope: !892)
!892 = !DILexicalBlockFile(scope: !859, file: !1, discriminator: 3)
!893 = !DILocation(line: 264, column: 8, scope: !894)
!894 = !DILexicalBlockFile(scope: !859, file: !1, discriminator: 4)
!895 = !DILocation(line: 264, column: 3, scope: !894)
!896 = !DILocation(line: 264, column: 8, scope: !897)
!897 = !DILexicalBlockFile(scope: !859, file: !1, discriminator: 5)
!898 = !DILocation(line: 0, scope: !899)
!899 = !DILexicalBlockFile(scope: !859, file: !1, discriminator: 11)
!900 = !DILocation(line: 264, column: 3, scope: !897)
!901 = !DILocation(line: 264, column: 8, scope: !902)
!902 = !DILexicalBlockFile(scope: !859, file: !1, discriminator: 6)
!903 = !DILocation(line: 264, column: 28, scope: !902)
!904 = !DILocation(line: 265, column: 17, scope: !905)
!905 = distinct !DILexicalBlock(scope: !859, file: !1, line: 264, column: 33)
!906 = !DILocation(line: 265, column: 10, scope: !905)
!907 = !DILocation(line: 265, column: 8, scope: !905)
!908 = !DILocation(line: 266, column: 12, scope: !909)
!909 = distinct !DILexicalBlock(scope: !905, file: !1, line: 266, column: 5)
!910 = !DILocation(line: 266, column: 10, scope: !909)
!911 = !DILocation(line: 266, column: 17, scope: !912)
!912 = !DILexicalBlockFile(scope: !913, file: !1, discriminator: 1)
!913 = distinct !DILexicalBlock(scope: !909, file: !1, line: 266, column: 5)
!914 = !DILocation(line: 266, column: 21, scope: !912)
!915 = !DILocation(line: 266, column: 19, scope: !912)
!916 = !DILocation(line: 266, column: 5, scope: !912)
!917 = !DILocation(line: 267, column: 45, scope: !918)
!918 = distinct !DILexicalBlock(scope: !913, file: !1, line: 266, column: 35)
!919 = !DILocation(line: 267, column: 39, scope: !918)
!920 = !DILocation(line: 267, column: 42, scope: !918)
!921 = !DILocation(line: 267, column: 28, scope: !918)
!922 = !DILocation(line: 267, column: 7, scope: !918)
!923 = !DILocation(line: 268, column: 5, scope: !918)
!924 = !DILocation(line: 266, column: 31, scope: !925)
!925 = !DILexicalBlockFile(scope: !913, file: !1, discriminator: 2)
!926 = !DILocation(line: 266, column: 5, scope: !925)
!927 = !DILocation(line: 269, column: 3, scope: !905)
!928 = !DILocation(line: 263, column: 11, scope: !859)
!929 = !DILocation(line: 264, column: 8, scope: !930)
!930 = !DILexicalBlockFile(scope: !859, file: !1, discriminator: 7)
!931 = !DILocation(line: 0, scope: !932)
!932 = !DILexicalBlockFile(scope: !859, file: !1, discriminator: 12)
!933 = !DILocation(line: 263, column: 11, scope: !878)
!934 = !DILocation(line: 263, column: 11, scope: !890)
!935 = !DILocation(line: 263, column: 11, scope: !892)
!936 = !DILocation(line: 269, column: 3, scope: !878)
!937 = distinct !DISubprogram(name: "fft_init", scope: !1, file: !1, line: 538, type: !938, isLocal: true, isDefinition: true, scopeLine: 539, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !68)
!938 = !DISubroutineType(types: !939)
!939 = !{null, !23}
!940 = !DILocalVariable(name: "n", arg: 1, scope: !937, file: !1, line: 538, type: !23)
!941 = !DILocation(line: 538, column: 26, scope: !937)
!942 = !DILocalVariable(name: "m", scope: !937, file: !1, line: 540, type: !23)
!943 = !DILocation(line: 540, column: 7, scope: !937)
!944 = !DILocalVariable(name: "nu", scope: !937, file: !1, line: 540, type: !23)
!945 = !DILocation(line: 540, column: 10, scope: !937)
!946 = !DILocalVariable(name: "ku", scope: !937, file: !1, line: 540, type: !23)
!947 = !DILocation(line: 540, column: 14, scope: !937)
!948 = !DILocalVariable(name: "i", scope: !937, file: !1, line: 540, type: !23)
!949 = !DILocation(line: 540, column: 18, scope: !937)
!950 = !DILocalVariable(name: "j", scope: !937, file: !1, line: 540, type: !23)
!951 = !DILocation(line: 540, column: 21, scope: !937)
!952 = !DILocalVariable(name: "ln", scope: !937, file: !1, line: 540, type: !23)
!953 = !DILocation(line: 540, column: 24, scope: !937)
!954 = !DILocalVariable(name: "t", scope: !937, file: !1, line: 541, type: !9)
!955 = !DILocation(line: 541, column: 10, scope: !937)
!956 = !DILocalVariable(name: "ti", scope: !937, file: !1, line: 541, type: !9)
!957 = !DILocation(line: 541, column: 13, scope: !937)
!958 = !DILocation(line: 547, column: 8, scope: !937)
!959 = !DILocation(line: 547, column: 6, scope: !937)
!960 = !DILocation(line: 548, column: 13, scope: !937)
!961 = !DILocation(line: 548, column: 7, scope: !937)
!962 = !DILocation(line: 548, column: 5, scope: !937)
!963 = !DILocation(line: 549, column: 10, scope: !937)
!964 = !DILocation(line: 550, column: 6, scope: !937)
!965 = !DILocation(line: 551, column: 6, scope: !937)
!966 = !DILocation(line: 553, column: 10, scope: !967)
!967 = distinct !DILexicalBlock(scope: !937, file: !1, line: 553, column: 3)
!968 = !DILocation(line: 553, column: 8, scope: !967)
!969 = !DILocation(line: 553, column: 15, scope: !970)
!970 = !DILexicalBlockFile(scope: !971, file: !1, discriminator: 1)
!971 = distinct !DILexicalBlock(scope: !967, file: !1, line: 553, column: 3)
!972 = !DILocation(line: 553, column: 20, scope: !970)
!973 = !DILocation(line: 553, column: 17, scope: !970)
!974 = !DILocation(line: 553, column: 3, scope: !970)
!975 = !DILocation(line: 554, column: 14, scope: !976)
!976 = distinct !DILexicalBlock(scope: !971, file: !1, line: 553, column: 28)
!977 = !DILocation(line: 554, column: 12, scope: !976)
!978 = !DILocation(line: 554, column: 7, scope: !976)
!979 = !DILocation(line: 556, column: 12, scope: !980)
!980 = distinct !DILexicalBlock(scope: !976, file: !1, line: 556, column: 5)
!981 = !DILocation(line: 556, column: 10, scope: !980)
!982 = !DILocation(line: 556, column: 17, scope: !983)
!983 = !DILexicalBlockFile(scope: !984, file: !1, discriminator: 1)
!984 = distinct !DILexicalBlock(scope: !980, file: !1, line: 556, column: 5)
!985 = !DILocation(line: 556, column: 22, scope: !983)
!986 = !DILocation(line: 556, column: 25, scope: !983)
!987 = !DILocation(line: 556, column: 19, scope: !983)
!988 = !DILocation(line: 556, column: 5, scope: !983)
!989 = !DILocation(line: 557, column: 12, scope: !990)
!990 = distinct !DILexicalBlock(scope: !984, file: !1, line: 556, column: 35)
!991 = !DILocation(line: 557, column: 16, scope: !990)
!992 = !DILocation(line: 557, column: 14, scope: !990)
!993 = !DILocation(line: 557, column: 10, scope: !990)
!994 = !DILocation(line: 558, column: 9, scope: !990)
!995 = !DILocation(line: 558, column: 11, scope: !990)
!996 = !DILocation(line: 558, column: 10, scope: !990)
!997 = !DILocation(line: 558, column: 13, scope: !990)
!998 = !DILocation(line: 558, column: 7, scope: !990)
!999 = !DILocation(line: 558, column: 19, scope: !990)
!1000 = !DILocation(line: 558, column: 19, scope: !1001)
!1001 = !DILexicalBlockFile(scope: !990, file: !1, discriminator: 1)
!1002 = !DILocation(line: 558, column: 19, scope: !1003)
!1003 = !DILexicalBlockFile(scope: !990, file: !1, discriminator: 2)
!1004 = !DILocation(line: 559, column: 5, scope: !990)
!1005 = !DILocation(line: 556, column: 31, scope: !1006)
!1006 = !DILexicalBlockFile(scope: !984, file: !1, discriminator: 2)
!1007 = !DILocation(line: 556, column: 5, scope: !1006)
!1008 = !DILocation(line: 561, column: 10, scope: !976)
!1009 = !DILocation(line: 561, column: 15, scope: !976)
!1010 = !DILocation(line: 561, column: 13, scope: !976)
!1011 = !DILocation(line: 561, column: 8, scope: !976)
!1012 = !DILocation(line: 562, column: 14, scope: !976)
!1013 = !DILocation(line: 562, column: 12, scope: !976)
!1014 = !DILocation(line: 562, column: 8, scope: !976)
!1015 = !DILocation(line: 563, column: 3, scope: !976)
!1016 = !DILocation(line: 553, column: 24, scope: !1017)
!1017 = !DILexicalBlockFile(scope: !971, file: !1, discriminator: 2)
!1018 = !DILocation(line: 553, column: 3, scope: !1017)
!1019 = !DILocation(line: 564, column: 1, scope: !937)
!1020 = distinct !DISubprogram(name: "ilog2", scope: !1, file: !1, line: 655, type: !1021, isLocal: true, isDefinition: true, scopeLine: 656, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !68)
!1021 = !DISubroutineType(types: !1022)
!1022 = !{!23, !23}
!1023 = !DILocalVariable(name: "n", arg: 1, scope: !1020, file: !1, line: 655, type: !23)
!1024 = !DILocation(line: 655, column: 22, scope: !1020)
!1025 = !DILocalVariable(name: "nn", scope: !1020, file: !1, line: 657, type: !23)
!1026 = !DILocation(line: 657, column: 7, scope: !1020)
!1027 = !DILocalVariable(name: "lg", scope: !1020, file: !1, line: 657, type: !23)
!1028 = !DILocation(line: 657, column: 11, scope: !1020)
!1029 = !DILocation(line: 658, column: 7, scope: !1030)
!1030 = distinct !DILexicalBlock(scope: !1020, file: !1, line: 658, column: 7)
!1031 = !DILocation(line: 658, column: 9, scope: !1030)
!1032 = !DILocation(line: 658, column: 7, scope: !1020)
!1033 = !DILocation(line: 658, column: 15, scope: !1034)
!1034 = !DILexicalBlockFile(scope: !1030, file: !1, discriminator: 1)
!1035 = !DILocation(line: 659, column: 6, scope: !1020)
!1036 = !DILocation(line: 660, column: 6, scope: !1020)
!1037 = !DILocation(line: 661, column: 3, scope: !1020)
!1038 = !DILocation(line: 661, column: 10, scope: !1039)
!1039 = !DILexicalBlockFile(scope: !1020, file: !1, discriminator: 1)
!1040 = !DILocation(line: 661, column: 15, scope: !1039)
!1041 = !DILocation(line: 661, column: 13, scope: !1039)
!1042 = !DILocation(line: 661, column: 3, scope: !1039)
!1043 = !DILocation(line: 662, column: 10, scope: !1044)
!1044 = distinct !DILexicalBlock(scope: !1020, file: !1, line: 661, column: 18)
!1045 = !DILocation(line: 662, column: 12, scope: !1044)
!1046 = !DILocation(line: 662, column: 8, scope: !1044)
!1047 = !DILocation(line: 663, column: 10, scope: !1044)
!1048 = !DILocation(line: 663, column: 12, scope: !1044)
!1049 = !DILocation(line: 663, column: 8, scope: !1044)
!1050 = !DILocation(line: 661, column: 3, scope: !1051)
!1051 = !DILexicalBlockFile(scope: !1020, file: !1, discriminator: 2)
!1052 = !DILocation(line: 665, column: 10, scope: !1020)
!1053 = !DILocation(line: 665, column: 3, scope: !1020)
!1054 = !DILocation(line: 666, column: 1, scope: !1020)
!1055 = distinct !DISubprogram(name: "fft", scope: !1, file: !1, line: 422, type: !1056, isLocal: true, isDefinition: true, scopeLine: 423, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !68)
!1056 = !DISubroutineType(types: !1057)
!1057 = !{null, !23, !1058, !1058}
!1058 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64, align: 64)
!1059 = !DILocalVariable(name: "dir", arg: 1, scope: !1055, file: !1, line: 422, type: !23)
!1060 = !DILocation(line: 422, column: 21, scope: !1055)
!1061 = !DILocalVariable(name: "x1", arg: 2, scope: !1055, file: !1, line: 422, type: !1058)
!1062 = !DILocation(line: 422, column: 35, scope: !1055)
!1063 = !DILocalVariable(name: "x2", arg: 3, scope: !1055, file: !1, line: 422, type: !1058)
!1064 = !DILocation(line: 422, column: 57, scope: !1055)
!1065 = !DILocation(line: 424, column: 7, scope: !1066)
!1066 = distinct !DILexicalBlock(scope: !1055, file: !1, line: 424, column: 7)
!1067 = !DILocation(line: 424, column: 11, scope: !1066)
!1068 = !DILocation(line: 424, column: 7, scope: !1055)
!1069 = !DILocation(line: 425, column: 15, scope: !1070)
!1070 = distinct !DILexicalBlock(scope: !1066, file: !1, line: 424, column: 17)
!1071 = !DILocation(line: 425, column: 24, scope: !1070)
!1072 = !DILocation(line: 425, column: 33, scope: !1070)
!1073 = !DILocation(line: 425, column: 42, scope: !1070)
!1074 = !DILocation(line: 425, column: 46, scope: !1070)
!1075 = !DILocation(line: 425, column: 5, scope: !1070)
!1076 = !DILocation(line: 426, column: 15, scope: !1070)
!1077 = !DILocation(line: 426, column: 24, scope: !1070)
!1078 = !DILocation(line: 426, column: 33, scope: !1070)
!1079 = !DILocation(line: 426, column: 42, scope: !1070)
!1080 = !DILocation(line: 426, column: 46, scope: !1070)
!1081 = !DILocation(line: 426, column: 5, scope: !1070)
!1082 = !DILocation(line: 427, column: 15, scope: !1070)
!1083 = !DILocation(line: 427, column: 24, scope: !1070)
!1084 = !DILocation(line: 427, column: 33, scope: !1070)
!1085 = !DILocation(line: 427, column: 42, scope: !1070)
!1086 = !DILocation(line: 427, column: 46, scope: !1070)
!1087 = !DILocation(line: 427, column: 5, scope: !1070)
!1088 = !DILocation(line: 428, column: 3, scope: !1070)
!1089 = !DILocation(line: 429, column: 16, scope: !1090)
!1090 = distinct !DILexicalBlock(scope: !1066, file: !1, line: 428, column: 10)
!1091 = !DILocation(line: 429, column: 25, scope: !1090)
!1092 = !DILocation(line: 429, column: 34, scope: !1090)
!1093 = !DILocation(line: 429, column: 43, scope: !1090)
!1094 = !DILocation(line: 429, column: 47, scope: !1090)
!1095 = !DILocation(line: 429, column: 5, scope: !1090)
!1096 = !DILocation(line: 430, column: 16, scope: !1090)
!1097 = !DILocation(line: 430, column: 25, scope: !1090)
!1098 = !DILocation(line: 430, column: 34, scope: !1090)
!1099 = !DILocation(line: 430, column: 43, scope: !1090)
!1100 = !DILocation(line: 430, column: 47, scope: !1090)
!1101 = !DILocation(line: 430, column: 5, scope: !1090)
!1102 = !DILocation(line: 431, column: 16, scope: !1090)
!1103 = !DILocation(line: 431, column: 25, scope: !1090)
!1104 = !DILocation(line: 431, column: 34, scope: !1090)
!1105 = !DILocation(line: 431, column: 43, scope: !1090)
!1106 = !DILocation(line: 431, column: 47, scope: !1090)
!1107 = !DILocation(line: 431, column: 5, scope: !1090)
!1108 = !DILocation(line: 433, column: 1, scope: !1055)
!1109 = distinct !DISubprogram(name: "cffts1", scope: !1, file: !1, line: 436, type: !1110, isLocal: true, isDefinition: true, scopeLine: 437, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !68)
!1110 = !DISubroutineType(types: !1111)
!1111 = !{null, !23, !23, !23, !23, !22, !22}
!1112 = !DILocalVariable(name: "is", arg: 1, scope: !1109, file: !1, line: 436, type: !23)
!1113 = !DILocation(line: 436, column: 24, scope: !1109)
!1114 = !DILocalVariable(name: "d1", arg: 2, scope: !1109, file: !1, line: 436, type: !23)
!1115 = !DILocation(line: 436, column: 32, scope: !1109)
!1116 = !DILocalVariable(name: "d2", arg: 3, scope: !1109, file: !1, line: 436, type: !23)
!1117 = !DILocation(line: 436, column: 40, scope: !1109)
!1118 = !DILocalVariable(name: "d3", arg: 4, scope: !1109, file: !1, line: 436, type: !23)
!1119 = !DILocation(line: 436, column: 48, scope: !1109)
!1120 = !DILocalVariable(name: "ox", arg: 5, scope: !1109, file: !1, line: 436, type: !22)
!1121 = !DILocation(line: 436, column: 58, scope: !1109)
!1122 = !DILocalVariable(name: "oxout", arg: 6, scope: !1109, file: !1, line: 436, type: !22)
!1123 = !DILocation(line: 436, column: 68, scope: !1109)
!1124 = !DILocation(line: 438, column: 17, scope: !1109)
!1125 = !DILocation(line: 438, column: 3, scope: !1109)
!1126 = !DILocation(line: 438, column: 21, scope: !1109)
!1127 = !DILocation(line: 438, column: 23, scope: !1109)
!1128 = !DILocalVariable(name: "x", scope: !1109, file: !1, line: 438, type: !10)
!1129 = !DILocation(line: 438, column: 14, scope: !1109)
!1130 = !DILocation(line: 438, column: 43, scope: !1109)
!1131 = !DILocation(line: 438, column: 29, scope: !1109)
!1132 = !DILocation(line: 438, column: 47, scope: !1109)
!1133 = !DILocation(line: 438, column: 49, scope: !1109)
!1134 = !DILocation(line: 438, column: 53, scope: !1109)
!1135 = !DILocation(line: 439, column: 20, scope: !1109)
!1136 = !DILocation(line: 439, column: 3, scope: !1109)
!1137 = !DILocation(line: 439, column: 24, scope: !1109)
!1138 = !DILocation(line: 439, column: 26, scope: !1109)
!1139 = !DILocalVariable(name: "xout", scope: !1109, file: !1, line: 439, type: !10)
!1140 = !DILocation(line: 439, column: 14, scope: !1109)
!1141 = !DILocation(line: 439, column: 46, scope: !1109)
!1142 = !DILocation(line: 439, column: 32, scope: !1109)
!1143 = !DILocation(line: 439, column: 50, scope: !1109)
!1144 = !DILocation(line: 439, column: 52, scope: !1109)
!1145 = !DILocation(line: 439, column: 56, scope: !1109)
!1146 = !DILocalVariable(name: "logd1", scope: !1109, file: !1, line: 441, type: !23)
!1147 = !DILocation(line: 441, column: 7, scope: !1109)
!1148 = !DILocalVariable(name: "i", scope: !1109, file: !1, line: 442, type: !23)
!1149 = !DILocation(line: 442, column: 7, scope: !1109)
!1150 = !DILocalVariable(name: "j", scope: !1109, file: !1, line: 442, type: !23)
!1151 = !DILocation(line: 442, column: 10, scope: !1109)
!1152 = !DILocalVariable(name: "k", scope: !1109, file: !1, line: 442, type: !23)
!1153 = !DILocation(line: 442, column: 13, scope: !1109)
!1154 = !DILocalVariable(name: "jj", scope: !1109, file: !1, line: 442, type: !23)
!1155 = !DILocation(line: 442, column: 16, scope: !1109)
!1156 = !DILocation(line: 444, column: 17, scope: !1109)
!1157 = !DILocation(line: 444, column: 11, scope: !1109)
!1158 = !DILocation(line: 444, column: 9, scope: !1109)
!1159 = !DILocation(line: 446, column: 7, scope: !1160)
!1160 = distinct !DILexicalBlock(scope: !1109, file: !1, line: 446, column: 7)
!1161 = !DILocation(line: 446, column: 7, scope: !1109)
!1162 = !DILocation(line: 446, column: 23, scope: !1163)
!1163 = !DILexicalBlockFile(scope: !1160, file: !1, discriminator: 1)
!1164 = !DILocation(line: 447, column: 11, scope: !1109)
!1165 = !DILocation(line: 465, column: 7, scope: !1166)
!1166 = distinct !DILexicalBlock(scope: !1109, file: !1, line: 465, column: 7)
!1167 = !DILocation(line: 465, column: 7, scope: !1109)
!1168 = !DILocation(line: 465, column: 23, scope: !1169)
!1169 = !DILexicalBlockFile(scope: !1166, file: !1, discriminator: 1)
!1170 = !DILocation(line: 466, column: 1, scope: !1109)
!1171 = distinct !DISubprogram(name: ".omp_outlined..27", scope: !1, file: !1, line: 460, type: !1172, isLocal: true, isDefinition: true, scopeLine: 448, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !68)
!1172 = !DISubroutineType(types: !1173)
!1173 = !{null, !444, !444, !447, !447, !447, !341, !341, !448, !447, !447, !341, !341, !448}
!1174 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !1171, type: !444, flags: DIFlagArtificial | DIFlagObjectPointer)
!1175 = !DILocation(line: 0, scope: !1171)
!1176 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !1171, type: !444, flags: DIFlagArtificial)
!1177 = !DILocalVariable(name: "d3", arg: 3, scope: !1171, type: !447, flags: DIFlagArtificial)
!1178 = !DILocalVariable(name: "d2", arg: 4, scope: !1171, type: !447, flags: DIFlagArtificial)
!1179 = !DILocalVariable(name: "d1", arg: 5, scope: !1171, type: !447, flags: DIFlagArtificial)
!1180 = !DILocalVariable(name: "vla", arg: 6, scope: !1171, type: !341, flags: DIFlagArtificial)
!1181 = !DILocalVariable(name: "vla", arg: 7, scope: !1171, type: !341, flags: DIFlagArtificial)
!1182 = !DILocalVariable(name: "x", arg: 8, scope: !1171, type: !448, flags: DIFlagArtificial)
!1183 = !DILocalVariable(name: "is", arg: 9, scope: !1171, type: !447, flags: DIFlagArtificial)
!1184 = !DILocalVariable(name: "logd1", arg: 10, scope: !1171, type: !447, flags: DIFlagArtificial)
!1185 = !DILocalVariable(name: "vla", arg: 11, scope: !1171, type: !341, flags: DIFlagArtificial)
!1186 = !DILocalVariable(name: "vla", arg: 12, scope: !1171, type: !341, flags: DIFlagArtificial)
!1187 = !DILocalVariable(name: "xout", arg: 13, scope: !1171, type: !448, flags: DIFlagArtificial)
!1188 = !DILocation(line: 448, column: 3, scope: !1171)
!1189 = !DILocalVariable(name: ".omp.iv", scope: !1171, type: !23, flags: DIFlagArtificial)
!1190 = !DILocalVariable(name: ".omp.last.iteration", scope: !1171, type: !23, flags: DIFlagArtificial)
!1191 = !DILocation(line: 448, column: 19, scope: !1171)
!1192 = !DILocalVariable(name: "k", scope: !1171, type: !23, flags: DIFlagArtificial)
!1193 = !DILocation(line: 448, column: 23, scope: !1171)
!1194 = !DILocalVariable(name: ".omp.lb", scope: !1171, type: !23, flags: DIFlagArtificial)
!1195 = !DILocation(line: 448, column: 8, scope: !1196)
!1196 = !DILexicalBlockFile(scope: !1171, file: !1, discriminator: 1)
!1197 = !DILocalVariable(name: ".omp.ub", scope: !1171, type: !23, flags: DIFlagArtificial)
!1198 = !DILocation(line: 0, scope: !1199)
!1199 = !DILexicalBlockFile(scope: !1171, file: !1, discriminator: 17)
!1200 = !DILocalVariable(name: ".omp.stride", scope: !1171, type: !23, flags: DIFlagArtificial)
!1201 = !DILocalVariable(name: ".omp.is_last", scope: !1171, type: !23, flags: DIFlagArtificial)
!1202 = !DILocalVariable(name: "i", scope: !1171, type: !23, flags: DIFlagArtificial)
!1203 = !DILocalVariable(name: "j", scope: !1171, type: !23, flags: DIFlagArtificial)
!1204 = !DILocalVariable(name: "jj", scope: !1171, type: !23, flags: DIFlagArtificial)
!1205 = !DILocation(line: 448, column: 3, scope: !1196)
!1206 = !DILocation(line: 0, scope: !1207)
!1207 = !DILexicalBlockFile(scope: !1171, file: !1, discriminator: 18)
!1208 = !DILocation(line: 448, column: 8, scope: !1209)
!1209 = !DILexicalBlockFile(scope: !1171, file: !1, discriminator: 2)
!1210 = !DILocation(line: 448, column: 8, scope: !1211)
!1211 = !DILexicalBlockFile(scope: !1171, file: !1, discriminator: 3)
!1212 = !DILocation(line: 448, column: 8, scope: !1213)
!1213 = !DILexicalBlockFile(scope: !1171, file: !1, discriminator: 4)
!1214 = !DILocation(line: 448, column: 3, scope: !1213)
!1215 = !DILocation(line: 448, column: 8, scope: !1216)
!1216 = !DILexicalBlockFile(scope: !1171, file: !1, discriminator: 5)
!1217 = !DILocation(line: 0, scope: !1218)
!1218 = !DILexicalBlockFile(scope: !1171, file: !1, discriminator: 19)
!1219 = !DILocation(line: 448, column: 3, scope: !1216)
!1220 = !DILocation(line: 448, column: 8, scope: !1221)
!1221 = !DILexicalBlockFile(scope: !1171, file: !1, discriminator: 6)
!1222 = !DILocation(line: 448, column: 23, scope: !1221)
!1223 = !DILocation(line: 449, column: 13, scope: !1224)
!1224 = distinct !DILexicalBlock(scope: !1225, file: !1, line: 449, column: 5)
!1225 = distinct !DILexicalBlock(scope: !1171, file: !1, line: 448, column: 28)
!1226 = !DILocation(line: 449, column: 10, scope: !1224)
!1227 = !DILocation(line: 449, column: 18, scope: !1228)
!1228 = !DILexicalBlockFile(scope: !1229, file: !1, discriminator: 1)
!1229 = distinct !DILexicalBlock(scope: !1224, file: !1, line: 449, column: 5)
!1230 = !DILocation(line: 449, column: 24, scope: !1228)
!1231 = !DILocation(line: 449, column: 29, scope: !1228)
!1232 = !DILocation(line: 449, column: 27, scope: !1228)
!1233 = !DILocation(line: 449, column: 21, scope: !1228)
!1234 = !DILocation(line: 449, column: 5, scope: !1228)
!1235 = !DILocation(line: 450, column: 14, scope: !1236)
!1236 = distinct !DILexicalBlock(scope: !1237, file: !1, line: 450, column: 7)
!1237 = distinct !DILexicalBlock(scope: !1229, file: !1, line: 449, column: 55)
!1238 = !DILocation(line: 450, column: 12, scope: !1236)
!1239 = !DILocation(line: 450, column: 19, scope: !1240)
!1240 = !DILexicalBlockFile(scope: !1241, file: !1, discriminator: 1)
!1241 = distinct !DILexicalBlock(scope: !1236, file: !1, line: 450, column: 7)
!1242 = !DILocation(line: 450, column: 23, scope: !1240)
!1243 = !DILocation(line: 450, column: 21, scope: !1240)
!1244 = !DILocation(line: 450, column: 7, scope: !1240)
!1245 = !DILocation(line: 451, column: 16, scope: !1246)
!1246 = distinct !DILexicalBlock(scope: !1247, file: !1, line: 451, column: 9)
!1247 = distinct !DILexicalBlock(scope: !1241, file: !1, line: 450, column: 38)
!1248 = !DILocation(line: 451, column: 14, scope: !1246)
!1249 = !DILocation(line: 451, column: 21, scope: !1250)
!1250 = !DILexicalBlockFile(scope: !1251, file: !1, discriminator: 1)
!1251 = distinct !DILexicalBlock(scope: !1246, file: !1, line: 451, column: 9)
!1252 = !DILocation(line: 451, column: 25, scope: !1250)
!1253 = !DILocation(line: 451, column: 23, scope: !1250)
!1254 = !DILocation(line: 451, column: 9, scope: !1250)
!1255 = !DILocation(line: 452, column: 18, scope: !1256)
!1256 = distinct !DILexicalBlock(scope: !1251, file: !1, line: 451, column: 34)
!1257 = !DILocation(line: 452, column: 11, scope: !1256)
!1258 = !DILocation(line: 452, column: 15, scope: !1256)
!1259 = !DILocation(line: 452, column: 34, scope: !1256)
!1260 = !DILocation(line: 452, column: 23, scope: !1256)
!1261 = !DILocation(line: 452, column: 28, scope: !1256)
!1262 = !DILocation(line: 452, column: 30, scope: !1256)
!1263 = !DILocation(line: 452, column: 29, scope: !1256)
!1264 = !DILocation(line: 452, column: 25, scope: !1256)
!1265 = !DILocation(line: 452, column: 23, scope: !1266)
!1266 = !DILexicalBlockFile(scope: !1256, file: !1, discriminator: 1)
!1267 = !DILocation(line: 453, column: 9, scope: !1256)
!1268 = !DILocation(line: 451, column: 30, scope: !1269)
!1269 = !DILexicalBlockFile(scope: !1251, file: !1, discriminator: 2)
!1270 = !DILocation(line: 451, column: 9, scope: !1269)
!1271 = !DILocation(line: 454, column: 7, scope: !1247)
!1272 = !DILocation(line: 450, column: 34, scope: !1273)
!1273 = !DILexicalBlockFile(scope: !1241, file: !1, discriminator: 2)
!1274 = !DILocation(line: 450, column: 7, scope: !1273)
!1275 = !DILocation(line: 456, column: 13, scope: !1237)
!1276 = !DILocation(line: 456, column: 17, scope: !1237)
!1277 = !DILocation(line: 456, column: 24, scope: !1237)
!1278 = !DILocation(line: 456, column: 28, scope: !1237)
!1279 = !DILocation(line: 456, column: 33, scope: !1280)
!1280 = !DILexicalBlockFile(scope: !1237, file: !1, discriminator: 1)
!1281 = !DILocation(line: 456, column: 33, scope: !1237)
!1282 = !DILocation(line: 456, column: 7, scope: !1283)
!1283 = !DILexicalBlockFile(scope: !1237, file: !1, discriminator: 2)
!1284 = !DILocation(line: 458, column: 14, scope: !1285)
!1285 = distinct !DILexicalBlock(scope: !1237, file: !1, line: 458, column: 7)
!1286 = !DILocation(line: 458, column: 12, scope: !1285)
!1287 = !DILocation(line: 458, column: 19, scope: !1288)
!1288 = !DILexicalBlockFile(scope: !1289, file: !1, discriminator: 1)
!1289 = distinct !DILexicalBlock(scope: !1285, file: !1, line: 458, column: 7)
!1290 = !DILocation(line: 458, column: 23, scope: !1288)
!1291 = !DILocation(line: 458, column: 21, scope: !1288)
!1292 = !DILocation(line: 458, column: 7, scope: !1288)
!1293 = !DILocation(line: 459, column: 16, scope: !1294)
!1294 = distinct !DILexicalBlock(scope: !1295, file: !1, line: 459, column: 9)
!1295 = distinct !DILexicalBlock(scope: !1289, file: !1, line: 458, column: 38)
!1296 = !DILocation(line: 459, column: 14, scope: !1294)
!1297 = !DILocation(line: 459, column: 21, scope: !1298)
!1298 = !DILexicalBlockFile(scope: !1299, file: !1, discriminator: 1)
!1299 = distinct !DILexicalBlock(scope: !1294, file: !1, line: 459, column: 9)
!1300 = !DILocation(line: 459, column: 25, scope: !1298)
!1301 = !DILocation(line: 459, column: 23, scope: !1298)
!1302 = !DILocation(line: 459, column: 9, scope: !1298)
!1303 = !DILocation(line: 460, column: 25, scope: !1304)
!1304 = distinct !DILexicalBlock(scope: !1299, file: !1, line: 459, column: 34)
!1305 = !DILocation(line: 460, column: 11, scope: !1304)
!1306 = !DILocation(line: 460, column: 19, scope: !1304)
!1307 = !DILocation(line: 460, column: 21, scope: !1304)
!1308 = !DILocation(line: 460, column: 20, scope: !1304)
!1309 = !DILocation(line: 460, column: 16, scope: !1304)
!1310 = !DILocation(line: 460, column: 37, scope: !1304)
!1311 = !DILocation(line: 460, column: 30, scope: !1304)
!1312 = !DILocation(line: 460, column: 34, scope: !1304)
!1313 = !DILocation(line: 460, column: 30, scope: !1314)
!1314 = !DILexicalBlockFile(scope: !1304, file: !1, discriminator: 1)
!1315 = !DILocation(line: 461, column: 9, scope: !1304)
!1316 = !DILocation(line: 459, column: 30, scope: !1317)
!1317 = !DILexicalBlockFile(scope: !1299, file: !1, discriminator: 2)
!1318 = !DILocation(line: 459, column: 9, scope: !1317)
!1319 = !DILocation(line: 462, column: 7, scope: !1295)
!1320 = !DILocation(line: 458, column: 34, scope: !1321)
!1321 = !DILexicalBlockFile(scope: !1289, file: !1, discriminator: 2)
!1322 = !DILocation(line: 458, column: 7, scope: !1321)
!1323 = !DILocation(line: 463, column: 5, scope: !1237)
!1324 = !DILocation(line: 449, column: 45, scope: !1325)
!1325 = !DILexicalBlockFile(scope: !1229, file: !1, discriminator: 2)
!1326 = !DILocation(line: 449, column: 42, scope: !1325)
!1327 = !DILocation(line: 449, column: 5, scope: !1325)
!1328 = !DILocation(line: 464, column: 3, scope: !1225)
!1329 = !DILocation(line: 447, column: 11, scope: !1171)
!1330 = !DILocation(line: 448, column: 8, scope: !1331)
!1331 = !DILexicalBlockFile(scope: !1171, file: !1, discriminator: 7)
!1332 = !DILocation(line: 0, scope: !1333)
!1333 = !DILexicalBlockFile(scope: !1171, file: !1, discriminator: 20)
!1334 = !DILocation(line: 447, column: 11, scope: !1196)
!1335 = !DILocation(line: 447, column: 11, scope: !1209)
!1336 = !DILocation(line: 447, column: 11, scope: !1211)
!1337 = !DILocation(line: 464, column: 3, scope: !1196)
!1338 = distinct !DISubprogram(name: "cfftz", scope: !1, file: !1, line: 575, type: !1339, isLocal: true, isDefinition: true, scopeLine: 577, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !68)
!1339 = !DISubroutineType(types: !1340)
!1340 = !{null, !23, !23, !23, !1341, !1341}
!1341 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1342, size: 64, align: 64)
!1342 = !DICompositeType(tag: DW_TAG_array_type, baseType: !12, align: 64, elements: !1343)
!1343 = !{!18}
!1344 = !DILocalVariable(name: "is", arg: 1, scope: !1338, file: !1, line: 575, type: !23)
!1345 = !DILocation(line: 575, column: 23, scope: !1338)
!1346 = !DILocalVariable(name: "m", arg: 2, scope: !1338, file: !1, line: 575, type: !23)
!1347 = !DILocation(line: 575, column: 31, scope: !1338)
!1348 = !DILocalVariable(name: "n", arg: 3, scope: !1338, file: !1, line: 575, type: !23)
!1349 = !DILocation(line: 575, column: 38, scope: !1338)
!1350 = !DILocalVariable(name: "x", arg: 4, scope: !1338, file: !1, line: 576, type: !1341)
!1351 = !DILocation(line: 576, column: 28, scope: !1338)
!1352 = !DILocalVariable(name: "y", arg: 5, scope: !1338, file: !1, line: 576, type: !1341)
!1353 = !DILocation(line: 576, column: 56, scope: !1338)
!1354 = !DILocation(line: 576, column: 30, scope: !1338)
!1355 = !DILocation(line: 576, column: 33, scope: !1338)
!1356 = !DILocation(line: 576, column: 58, scope: !1338)
!1357 = !DILocation(line: 576, column: 61, scope: !1338)
!1358 = !DILocalVariable(name: "i", scope: !1338, file: !1, line: 578, type: !23)
!1359 = !DILocation(line: 578, column: 7, scope: !1338)
!1360 = !DILocalVariable(name: "j", scope: !1338, file: !1, line: 578, type: !23)
!1361 = !DILocation(line: 578, column: 10, scope: !1338)
!1362 = !DILocalVariable(name: "l", scope: !1338, file: !1, line: 578, type: !23)
!1363 = !DILocation(line: 578, column: 13, scope: !1338)
!1364 = !DILocalVariable(name: "mx", scope: !1338, file: !1, line: 578, type: !23)
!1365 = !DILocation(line: 578, column: 16, scope: !1338)
!1366 = !DILocation(line: 583, column: 19, scope: !1338)
!1367 = !DILocation(line: 583, column: 8, scope: !1338)
!1368 = !DILocation(line: 583, column: 6, scope: !1338)
!1369 = !DILocation(line: 584, column: 8, scope: !1370)
!1370 = distinct !DILexicalBlock(scope: !1338, file: !1, line: 584, column: 7)
!1371 = !DILocation(line: 584, column: 11, scope: !1370)
!1372 = !DILocation(line: 584, column: 16, scope: !1370)
!1373 = !DILocation(line: 584, column: 19, scope: !1374)
!1374 = !DILexicalBlockFile(scope: !1370, file: !1, discriminator: 1)
!1375 = !DILocation(line: 584, column: 22, scope: !1374)
!1376 = !DILocation(line: 584, column: 29, scope: !1374)
!1377 = !DILocation(line: 584, column: 32, scope: !1378)
!1378 = !DILexicalBlockFile(scope: !1370, file: !1, discriminator: 2)
!1379 = !DILocation(line: 584, column: 34, scope: !1378)
!1380 = !DILocation(line: 584, column: 38, scope: !1378)
!1381 = !DILocation(line: 584, column: 41, scope: !1382)
!1382 = !DILexicalBlockFile(scope: !1370, file: !1, discriminator: 3)
!1383 = !DILocation(line: 584, column: 45, scope: !1382)
!1384 = !DILocation(line: 584, column: 43, scope: !1382)
!1385 = !DILocation(line: 584, column: 7, scope: !1382)
!1386 = !DILocation(line: 586, column: 65, scope: !1387)
!1387 = distinct !DILexicalBlock(scope: !1370, file: !1, line: 584, column: 49)
!1388 = !DILocation(line: 586, column: 69, scope: !1387)
!1389 = !DILocation(line: 586, column: 72, scope: !1387)
!1390 = !DILocation(line: 585, column: 5, scope: !1387)
!1391 = !DILocation(line: 587, column: 5, scope: !1387)
!1392 = !DILocation(line: 593, column: 10, scope: !1393)
!1393 = distinct !DILexicalBlock(scope: !1338, file: !1, line: 593, column: 3)
!1394 = !DILocation(line: 593, column: 8, scope: !1393)
!1395 = !DILocation(line: 593, column: 15, scope: !1396)
!1396 = !DILexicalBlockFile(scope: !1397, file: !1, discriminator: 1)
!1397 = distinct !DILexicalBlock(scope: !1393, file: !1, line: 593, column: 3)
!1398 = !DILocation(line: 593, column: 20, scope: !1396)
!1399 = !DILocation(line: 593, column: 17, scope: !1396)
!1400 = !DILocation(line: 593, column: 3, scope: !1396)
!1401 = !DILocation(line: 594, column: 11, scope: !1402)
!1402 = distinct !DILexicalBlock(scope: !1397, file: !1, line: 593, column: 31)
!1403 = !DILocation(line: 594, column: 15, scope: !1402)
!1404 = !DILocation(line: 594, column: 18, scope: !1402)
!1405 = !DILocation(line: 594, column: 21, scope: !1402)
!1406 = !DILocation(line: 594, column: 24, scope: !1402)
!1407 = !DILocation(line: 594, column: 34, scope: !1402)
!1408 = !DILocation(line: 594, column: 50, scope: !1402)
!1409 = !DILocation(line: 594, column: 53, scope: !1402)
!1410 = !DILocation(line: 594, column: 5, scope: !1402)
!1411 = !DILocation(line: 595, column: 9, scope: !1412)
!1412 = distinct !DILexicalBlock(scope: !1402, file: !1, line: 595, column: 9)
!1413 = !DILocation(line: 595, column: 14, scope: !1412)
!1414 = !DILocation(line: 595, column: 11, scope: !1412)
!1415 = !DILocation(line: 595, column: 9, scope: !1402)
!1416 = !DILocation(line: 599, column: 14, scope: !1417)
!1417 = distinct !DILexicalBlock(scope: !1418, file: !1, line: 599, column: 7)
!1418 = distinct !DILexicalBlock(scope: !1412, file: !1, line: 595, column: 17)
!1419 = !DILocation(line: 599, column: 12, scope: !1417)
!1420 = !DILocation(line: 599, column: 19, scope: !1421)
!1421 = !DILexicalBlockFile(scope: !1422, file: !1, discriminator: 1)
!1422 = distinct !DILexicalBlock(scope: !1417, file: !1, line: 599, column: 7)
!1423 = !DILocation(line: 599, column: 23, scope: !1421)
!1424 = !DILocation(line: 599, column: 21, scope: !1421)
!1425 = !DILocation(line: 599, column: 7, scope: !1421)
!1426 = !DILocation(line: 600, column: 16, scope: !1427)
!1427 = distinct !DILexicalBlock(scope: !1428, file: !1, line: 600, column: 9)
!1428 = distinct !DILexicalBlock(scope: !1422, file: !1, line: 599, column: 31)
!1429 = !DILocation(line: 600, column: 14, scope: !1427)
!1430 = !DILocation(line: 600, column: 21, scope: !1431)
!1431 = !DILexicalBlockFile(scope: !1432, file: !1, discriminator: 1)
!1432 = distinct !DILexicalBlock(scope: !1427, file: !1, line: 600, column: 9)
!1433 = !DILocation(line: 600, column: 25, scope: !1431)
!1434 = !DILocation(line: 600, column: 23, scope: !1431)
!1435 = !DILocation(line: 600, column: 9, scope: !1431)
!1436 = !DILocation(line: 601, column: 16, scope: !1437)
!1437 = distinct !DILexicalBlock(scope: !1432, file: !1, line: 600, column: 40)
!1438 = !DILocation(line: 601, column: 11, scope: !1437)
!1439 = !DILocation(line: 601, column: 13, scope: !1437)
!1440 = !DILocation(line: 601, column: 26, scope: !1437)
!1441 = !DILocation(line: 601, column: 21, scope: !1437)
!1442 = !DILocation(line: 601, column: 23, scope: !1437)
!1443 = !DILocation(line: 602, column: 9, scope: !1437)
!1444 = !DILocation(line: 600, column: 36, scope: !1445)
!1445 = !DILexicalBlockFile(scope: !1432, file: !1, discriminator: 2)
!1446 = !DILocation(line: 600, column: 9, scope: !1445)
!1447 = !DILocation(line: 603, column: 7, scope: !1428)
!1448 = !DILocation(line: 599, column: 27, scope: !1449)
!1449 = !DILexicalBlockFile(scope: !1422, file: !1, discriminator: 2)
!1450 = !DILocation(line: 599, column: 7, scope: !1449)
!1451 = !DILocation(line: 604, column: 7, scope: !1418)
!1452 = !DILocation(line: 606, column: 11, scope: !1402)
!1453 = !DILocation(line: 606, column: 15, scope: !1402)
!1454 = !DILocation(line: 606, column: 17, scope: !1402)
!1455 = !DILocation(line: 606, column: 22, scope: !1402)
!1456 = !DILocation(line: 606, column: 25, scope: !1402)
!1457 = !DILocation(line: 606, column: 28, scope: !1402)
!1458 = !DILocation(line: 606, column: 38, scope: !1402)
!1459 = !DILocation(line: 606, column: 54, scope: !1402)
!1460 = !DILocation(line: 606, column: 57, scope: !1402)
!1461 = !DILocation(line: 606, column: 5, scope: !1402)
!1462 = !DILocation(line: 607, column: 3, scope: !1402)
!1463 = !DILocation(line: 593, column: 25, scope: !1464)
!1464 = !DILexicalBlockFile(scope: !1397, file: !1, discriminator: 2)
!1465 = !DILocation(line: 593, column: 3, scope: !1464)
!1466 = !DILocation(line: 608, column: 1, scope: !1338)
!1467 = distinct !DISubprogram(name: "fftz2", scope: !1, file: !1, line: 614, type: !1468, isLocal: true, isDefinition: true, scopeLine: 616, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !68)
!1468 = !DISubroutineType(types: !1469)
!1469 = !{null, !23, !23, !23, !23, !23, !23, !1058, !1341, !1341}
!1470 = !DILocalVariable(name: "is", arg: 1, scope: !1467, file: !1, line: 614, type: !23)
!1471 = !DILocation(line: 614, column: 23, scope: !1467)
!1472 = !DILocalVariable(name: "l", arg: 2, scope: !1467, file: !1, line: 614, type: !23)
!1473 = !DILocation(line: 614, column: 31, scope: !1467)
!1474 = !DILocalVariable(name: "m", arg: 3, scope: !1467, file: !1, line: 614, type: !23)
!1475 = !DILocation(line: 614, column: 38, scope: !1467)
!1476 = !DILocalVariable(name: "n", arg: 4, scope: !1467, file: !1, line: 614, type: !23)
!1477 = !DILocation(line: 614, column: 45, scope: !1467)
!1478 = !DILocalVariable(name: "ny", arg: 5, scope: !1467, file: !1, line: 614, type: !23)
!1479 = !DILocation(line: 614, column: 52, scope: !1467)
!1480 = !DILocalVariable(name: "ny1", arg: 6, scope: !1467, file: !1, line: 614, type: !23)
!1481 = !DILocation(line: 614, column: 60, scope: !1467)
!1482 = !DILocalVariable(name: "u", arg: 7, scope: !1467, file: !1, line: 615, type: !1058)
!1483 = !DILocation(line: 615, column: 28, scope: !1467)
!1484 = !DILocalVariable(name: "x", arg: 8, scope: !1467, file: !1, line: 615, type: !1341)
!1485 = !DILocation(line: 615, column: 43, scope: !1467)
!1486 = !DILocalVariable(name: "y", arg: 9, scope: !1467, file: !1, line: 615, type: !1341)
!1487 = !DILocation(line: 615, column: 63, scope: !1467)
!1488 = !DILocation(line: 615, column: 30, scope: !1467)
!1489 = !DILocation(line: 615, column: 45, scope: !1467)
!1490 = !DILocation(line: 615, column: 48, scope: !1467)
!1491 = !DILocation(line: 615, column: 65, scope: !1467)
!1492 = !DILocation(line: 615, column: 68, scope: !1467)
!1493 = !DILocalVariable(name: "k", scope: !1467, file: !1, line: 617, type: !23)
!1494 = !DILocation(line: 617, column: 7, scope: !1467)
!1495 = !DILocalVariable(name: "n1", scope: !1467, file: !1, line: 617, type: !23)
!1496 = !DILocation(line: 617, column: 10, scope: !1467)
!1497 = !DILocalVariable(name: "li", scope: !1467, file: !1, line: 617, type: !23)
!1498 = !DILocation(line: 617, column: 14, scope: !1467)
!1499 = !DILocalVariable(name: "lj", scope: !1467, file: !1, line: 617, type: !23)
!1500 = !DILocation(line: 617, column: 18, scope: !1467)
!1501 = !DILocalVariable(name: "lk", scope: !1467, file: !1, line: 617, type: !23)
!1502 = !DILocation(line: 617, column: 22, scope: !1467)
!1503 = !DILocalVariable(name: "ku", scope: !1467, file: !1, line: 617, type: !23)
!1504 = !DILocation(line: 617, column: 26, scope: !1467)
!1505 = !DILocalVariable(name: "i", scope: !1467, file: !1, line: 617, type: !23)
!1506 = !DILocation(line: 617, column: 30, scope: !1467)
!1507 = !DILocalVariable(name: "j", scope: !1467, file: !1, line: 617, type: !23)
!1508 = !DILocation(line: 617, column: 33, scope: !1467)
!1509 = !DILocalVariable(name: "i11", scope: !1467, file: !1, line: 617, type: !23)
!1510 = !DILocation(line: 617, column: 36, scope: !1467)
!1511 = !DILocalVariable(name: "i12", scope: !1467, file: !1, line: 617, type: !23)
!1512 = !DILocation(line: 617, column: 41, scope: !1467)
!1513 = !DILocalVariable(name: "i21", scope: !1467, file: !1, line: 617, type: !23)
!1514 = !DILocation(line: 617, column: 46, scope: !1467)
!1515 = !DILocalVariable(name: "i22", scope: !1467, file: !1, line: 617, type: !23)
!1516 = !DILocation(line: 617, column: 51, scope: !1467)
!1517 = !DILocalVariable(name: "u1", scope: !1467, file: !1, line: 618, type: !12)
!1518 = !DILocation(line: 618, column: 12, scope: !1467)
!1519 = !DILocalVariable(name: "x11", scope: !1467, file: !1, line: 618, type: !12)
!1520 = !DILocation(line: 618, column: 16, scope: !1467)
!1521 = !DILocalVariable(name: "x21", scope: !1467, file: !1, line: 618, type: !12)
!1522 = !DILocation(line: 618, column: 21, scope: !1467)
!1523 = !DILocation(line: 623, column: 8, scope: !1467)
!1524 = !DILocation(line: 623, column: 10, scope: !1467)
!1525 = !DILocation(line: 623, column: 6, scope: !1467)
!1526 = !DILocation(line: 624, column: 14, scope: !1467)
!1527 = !DILocation(line: 624, column: 16, scope: !1467)
!1528 = !DILocation(line: 624, column: 10, scope: !1467)
!1529 = !DILocation(line: 624, column: 6, scope: !1467)
!1530 = !DILocation(line: 625, column: 14, scope: !1467)
!1531 = !DILocation(line: 625, column: 18, scope: !1467)
!1532 = !DILocation(line: 625, column: 16, scope: !1467)
!1533 = !DILocation(line: 625, column: 10, scope: !1467)
!1534 = !DILocation(line: 625, column: 6, scope: !1467)
!1535 = !DILocation(line: 626, column: 12, scope: !1467)
!1536 = !DILocation(line: 626, column: 10, scope: !1467)
!1537 = !DILocation(line: 626, column: 6, scope: !1467)
!1538 = !DILocation(line: 627, column: 8, scope: !1467)
!1539 = !DILocation(line: 627, column: 6, scope: !1467)
!1540 = !DILocation(line: 629, column: 10, scope: !1541)
!1541 = distinct !DILexicalBlock(scope: !1467, file: !1, line: 629, column: 3)
!1542 = !DILocation(line: 629, column: 8, scope: !1541)
!1543 = !DILocation(line: 629, column: 15, scope: !1544)
!1544 = !DILexicalBlockFile(scope: !1545, file: !1, discriminator: 1)
!1545 = distinct !DILexicalBlock(scope: !1541, file: !1, line: 629, column: 3)
!1546 = !DILocation(line: 629, column: 20, scope: !1544)
!1547 = !DILocation(line: 629, column: 23, scope: !1544)
!1548 = !DILocation(line: 629, column: 17, scope: !1544)
!1549 = !DILocation(line: 629, column: 3, scope: !1544)
!1550 = !DILocation(line: 630, column: 11, scope: !1551)
!1551 = distinct !DILexicalBlock(scope: !1545, file: !1, line: 629, column: 33)
!1552 = !DILocation(line: 630, column: 15, scope: !1551)
!1553 = !DILocation(line: 630, column: 13, scope: !1551)
!1554 = !DILocation(line: 630, column: 9, scope: !1551)
!1555 = !DILocation(line: 631, column: 11, scope: !1551)
!1556 = !DILocation(line: 631, column: 17, scope: !1551)
!1557 = !DILocation(line: 631, column: 15, scope: !1551)
!1558 = !DILocation(line: 631, column: 9, scope: !1551)
!1559 = !DILocation(line: 632, column: 11, scope: !1551)
!1560 = !DILocation(line: 632, column: 15, scope: !1551)
!1561 = !DILocation(line: 632, column: 13, scope: !1551)
!1562 = !DILocation(line: 632, column: 9, scope: !1551)
!1563 = !DILocation(line: 633, column: 11, scope: !1551)
!1564 = !DILocation(line: 633, column: 17, scope: !1551)
!1565 = !DILocation(line: 633, column: 15, scope: !1551)
!1566 = !DILocation(line: 633, column: 9, scope: !1551)
!1567 = !DILocation(line: 634, column: 9, scope: !1568)
!1568 = distinct !DILexicalBlock(scope: !1551, file: !1, line: 634, column: 9)
!1569 = !DILocation(line: 634, column: 12, scope: !1568)
!1570 = !DILocation(line: 634, column: 9, scope: !1551)
!1571 = !DILocation(line: 635, column: 14, scope: !1572)
!1572 = distinct !DILexicalBlock(scope: !1568, file: !1, line: 634, column: 18)
!1573 = !DILocation(line: 635, column: 17, scope: !1572)
!1574 = !DILocation(line: 635, column: 16, scope: !1572)
!1575 = !DILocation(line: 635, column: 12, scope: !1572)
!1576 = !DILocation(line: 636, column: 5, scope: !1572)
!1577 = !DILocation(line: 637, column: 12, scope: !1578)
!1578 = distinct !DILexicalBlock(scope: !1568, file: !1, line: 636, column: 12)
!1579 = !DILocation(line: 643, column: 12, scope: !1580)
!1580 = distinct !DILexicalBlock(scope: !1551, file: !1, line: 643, column: 5)
!1581 = !DILocation(line: 643, column: 10, scope: !1580)
!1582 = !DILocation(line: 643, column: 17, scope: !1583)
!1583 = !DILexicalBlockFile(scope: !1584, file: !1, discriminator: 1)
!1584 = distinct !DILexicalBlock(scope: !1580, file: !1, line: 643, column: 5)
!1585 = !DILocation(line: 643, column: 22, scope: !1583)
!1586 = !DILocation(line: 643, column: 25, scope: !1583)
!1587 = !DILocation(line: 643, column: 19, scope: !1583)
!1588 = !DILocation(line: 643, column: 5, scope: !1583)
!1589 = !DILocation(line: 644, column: 14, scope: !1590)
!1590 = distinct !DILexicalBlock(scope: !1591, file: !1, line: 644, column: 7)
!1591 = distinct !DILexicalBlock(scope: !1584, file: !1, line: 643, column: 35)
!1592 = !DILocation(line: 644, column: 12, scope: !1590)
!1593 = !DILocation(line: 644, column: 19, scope: !1594)
!1594 = !DILexicalBlockFile(scope: !1595, file: !1, discriminator: 1)
!1595 = distinct !DILexicalBlock(scope: !1590, file: !1, line: 644, column: 7)
!1596 = !DILocation(line: 644, column: 23, scope: !1594)
!1597 = !DILocation(line: 644, column: 21, scope: !1594)
!1598 = !DILocation(line: 644, column: 7, scope: !1594)
!1599 = !DILocation(line: 645, column: 24, scope: !1600)
!1600 = distinct !DILexicalBlock(scope: !1595, file: !1, line: 644, column: 32)
!1601 = !DILocation(line: 645, column: 15, scope: !1600)
!1602 = !DILocation(line: 645, column: 17, scope: !1600)
!1603 = !DILocation(line: 645, column: 21, scope: !1600)
!1604 = !DILocation(line: 645, column: 20, scope: !1600)
!1605 = !DILocation(line: 646, column: 24, scope: !1600)
!1606 = !DILocation(line: 646, column: 15, scope: !1600)
!1607 = !DILocation(line: 646, column: 17, scope: !1600)
!1608 = !DILocation(line: 646, column: 21, scope: !1600)
!1609 = !DILocation(line: 646, column: 20, scope: !1600)
!1610 = !DILocation(line: 647, column: 18, scope: !1600)
!1611 = !DILocation(line: 647, column: 9, scope: !1600)
!1612 = !DILocation(line: 647, column: 11, scope: !1600)
!1613 = !DILocation(line: 647, column: 15, scope: !1600)
!1614 = !DILocation(line: 647, column: 14, scope: !1600)
!1615 = !DILocation(line: 647, column: 23, scope: !1600)
!1616 = !DILocation(line: 648, column: 18, scope: !1600)
!1617 = !DILocation(line: 648, column: 9, scope: !1600)
!1618 = !DILocation(line: 648, column: 11, scope: !1600)
!1619 = !DILocation(line: 648, column: 15, scope: !1600)
!1620 = !DILocation(line: 648, column: 14, scope: !1600)
!1621 = !DILocation(line: 648, column: 23, scope: !1600)
!1622 = !DILocation(line: 649, column: 7, scope: !1600)
!1623 = !DILocation(line: 644, column: 28, scope: !1624)
!1624 = !DILexicalBlockFile(scope: !1595, file: !1, discriminator: 2)
!1625 = !DILocation(line: 644, column: 7, scope: !1624)
!1626 = !DILocation(line: 650, column: 5, scope: !1591)
!1627 = !DILocation(line: 643, column: 31, scope: !1628)
!1628 = !DILexicalBlockFile(scope: !1584, file: !1, discriminator: 2)
!1629 = !DILocation(line: 643, column: 5, scope: !1628)
!1630 = !DILocation(line: 651, column: 3, scope: !1551)
!1631 = !DILocation(line: 629, column: 29, scope: !1632)
!1632 = !DILexicalBlockFile(scope: !1545, file: !1, discriminator: 2)
!1633 = !DILocation(line: 629, column: 3, scope: !1632)
!1634 = !DILocation(line: 652, column: 1, scope: !1467)
!1635 = distinct !DISubprogram(name: "cffts2", scope: !1, file: !1, line: 469, type: !1110, isLocal: true, isDefinition: true, scopeLine: 470, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !68)
!1636 = !DILocalVariable(name: "is", arg: 1, scope: !1635, file: !1, line: 469, type: !23)
!1637 = !DILocation(line: 469, column: 24, scope: !1635)
!1638 = !DILocalVariable(name: "d1", arg: 2, scope: !1635, file: !1, line: 469, type: !23)
!1639 = !DILocation(line: 469, column: 32, scope: !1635)
!1640 = !DILocalVariable(name: "d2", arg: 3, scope: !1635, file: !1, line: 469, type: !23)
!1641 = !DILocation(line: 469, column: 40, scope: !1635)
!1642 = !DILocalVariable(name: "d3", arg: 4, scope: !1635, file: !1, line: 469, type: !23)
!1643 = !DILocation(line: 469, column: 48, scope: !1635)
!1644 = !DILocalVariable(name: "ox", arg: 5, scope: !1635, file: !1, line: 469, type: !22)
!1645 = !DILocation(line: 469, column: 58, scope: !1635)
!1646 = !DILocalVariable(name: "oxout", arg: 6, scope: !1635, file: !1, line: 469, type: !22)
!1647 = !DILocation(line: 469, column: 68, scope: !1635)
!1648 = !DILocation(line: 471, column: 17, scope: !1635)
!1649 = !DILocation(line: 471, column: 3, scope: !1635)
!1650 = !DILocation(line: 471, column: 21, scope: !1635)
!1651 = !DILocation(line: 471, column: 23, scope: !1635)
!1652 = !DILocalVariable(name: "x", scope: !1635, file: !1, line: 471, type: !10)
!1653 = !DILocation(line: 471, column: 14, scope: !1635)
!1654 = !DILocation(line: 471, column: 43, scope: !1635)
!1655 = !DILocation(line: 471, column: 29, scope: !1635)
!1656 = !DILocation(line: 471, column: 47, scope: !1635)
!1657 = !DILocation(line: 471, column: 49, scope: !1635)
!1658 = !DILocation(line: 471, column: 53, scope: !1635)
!1659 = !DILocation(line: 472, column: 20, scope: !1635)
!1660 = !DILocation(line: 472, column: 3, scope: !1635)
!1661 = !DILocation(line: 472, column: 24, scope: !1635)
!1662 = !DILocation(line: 472, column: 26, scope: !1635)
!1663 = !DILocalVariable(name: "xout", scope: !1635, file: !1, line: 472, type: !10)
!1664 = !DILocation(line: 472, column: 14, scope: !1635)
!1665 = !DILocation(line: 472, column: 46, scope: !1635)
!1666 = !DILocation(line: 472, column: 32, scope: !1635)
!1667 = !DILocation(line: 472, column: 50, scope: !1635)
!1668 = !DILocation(line: 472, column: 52, scope: !1635)
!1669 = !DILocation(line: 472, column: 56, scope: !1635)
!1670 = !DILocalVariable(name: "logd2", scope: !1635, file: !1, line: 474, type: !23)
!1671 = !DILocation(line: 474, column: 7, scope: !1635)
!1672 = !DILocalVariable(name: "i", scope: !1635, file: !1, line: 475, type: !23)
!1673 = !DILocation(line: 475, column: 7, scope: !1635)
!1674 = !DILocalVariable(name: "j", scope: !1635, file: !1, line: 475, type: !23)
!1675 = !DILocation(line: 475, column: 10, scope: !1635)
!1676 = !DILocalVariable(name: "k", scope: !1635, file: !1, line: 475, type: !23)
!1677 = !DILocation(line: 475, column: 13, scope: !1635)
!1678 = !DILocalVariable(name: "ii", scope: !1635, file: !1, line: 475, type: !23)
!1679 = !DILocation(line: 475, column: 16, scope: !1635)
!1680 = !DILocation(line: 477, column: 17, scope: !1635)
!1681 = !DILocation(line: 477, column: 11, scope: !1635)
!1682 = !DILocation(line: 477, column: 9, scope: !1635)
!1683 = !DILocation(line: 479, column: 7, scope: !1684)
!1684 = distinct !DILexicalBlock(scope: !1635, file: !1, line: 479, column: 7)
!1685 = !DILocation(line: 479, column: 7, scope: !1635)
!1686 = !DILocation(line: 479, column: 23, scope: !1687)
!1687 = !DILexicalBlockFile(scope: !1684, file: !1, discriminator: 1)
!1688 = !DILocation(line: 480, column: 11, scope: !1635)
!1689 = !DILocation(line: 498, column: 7, scope: !1690)
!1690 = distinct !DILexicalBlock(scope: !1635, file: !1, line: 498, column: 7)
!1691 = !DILocation(line: 498, column: 7, scope: !1635)
!1692 = !DILocation(line: 498, column: 23, scope: !1693)
!1693 = !DILexicalBlockFile(scope: !1690, file: !1, discriminator: 1)
!1694 = !DILocation(line: 499, column: 1, scope: !1635)
!1695 = distinct !DISubprogram(name: ".omp_outlined..29", scope: !1, file: !1, line: 493, type: !1172, isLocal: true, isDefinition: true, scopeLine: 481, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !68)
!1696 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !1695, type: !444, flags: DIFlagArtificial | DIFlagObjectPointer)
!1697 = !DILocation(line: 0, scope: !1695)
!1698 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !1695, type: !444, flags: DIFlagArtificial)
!1699 = !DILocalVariable(name: "d3", arg: 3, scope: !1695, type: !447, flags: DIFlagArtificial)
!1700 = !DILocalVariable(name: "d1", arg: 4, scope: !1695, type: !447, flags: DIFlagArtificial)
!1701 = !DILocalVariable(name: "d2", arg: 5, scope: !1695, type: !447, flags: DIFlagArtificial)
!1702 = !DILocalVariable(name: "vla", arg: 6, scope: !1695, type: !341, flags: DIFlagArtificial)
!1703 = !DILocalVariable(name: "vla", arg: 7, scope: !1695, type: !341, flags: DIFlagArtificial)
!1704 = !DILocalVariable(name: "x", arg: 8, scope: !1695, type: !448, flags: DIFlagArtificial)
!1705 = !DILocalVariable(name: "is", arg: 9, scope: !1695, type: !447, flags: DIFlagArtificial)
!1706 = !DILocalVariable(name: "logd2", arg: 10, scope: !1695, type: !447, flags: DIFlagArtificial)
!1707 = !DILocalVariable(name: "vla", arg: 11, scope: !1695, type: !341, flags: DIFlagArtificial)
!1708 = !DILocalVariable(name: "vla", arg: 12, scope: !1695, type: !341, flags: DIFlagArtificial)
!1709 = !DILocalVariable(name: "xout", arg: 13, scope: !1695, type: !448, flags: DIFlagArtificial)
!1710 = !DILocation(line: 481, column: 3, scope: !1695)
!1711 = !DILocalVariable(name: ".omp.iv", scope: !1695, type: !23, flags: DIFlagArtificial)
!1712 = !DILocalVariable(name: ".omp.last.iteration", scope: !1695, type: !23, flags: DIFlagArtificial)
!1713 = !DILocation(line: 481, column: 19, scope: !1695)
!1714 = !DILocalVariable(name: "k", scope: !1695, type: !23, flags: DIFlagArtificial)
!1715 = !DILocation(line: 481, column: 23, scope: !1695)
!1716 = !DILocalVariable(name: ".omp.lb", scope: !1695, type: !23, flags: DIFlagArtificial)
!1717 = !DILocation(line: 481, column: 8, scope: !1718)
!1718 = !DILexicalBlockFile(scope: !1695, file: !1, discriminator: 1)
!1719 = !DILocalVariable(name: ".omp.ub", scope: !1695, type: !23, flags: DIFlagArtificial)
!1720 = !DILocation(line: 0, scope: !1721)
!1721 = !DILexicalBlockFile(scope: !1695, file: !1, discriminator: 21)
!1722 = !DILocalVariable(name: ".omp.stride", scope: !1695, type: !23, flags: DIFlagArtificial)
!1723 = !DILocalVariable(name: ".omp.is_last", scope: !1695, type: !23, flags: DIFlagArtificial)
!1724 = !DILocalVariable(name: "i", scope: !1695, type: !23, flags: DIFlagArtificial)
!1725 = !DILocalVariable(name: "j", scope: !1695, type: !23, flags: DIFlagArtificial)
!1726 = !DILocalVariable(name: "ii", scope: !1695, type: !23, flags: DIFlagArtificial)
!1727 = !DILocation(line: 481, column: 3, scope: !1718)
!1728 = !DILocation(line: 0, scope: !1729)
!1729 = !DILexicalBlockFile(scope: !1695, file: !1, discriminator: 22)
!1730 = !DILocation(line: 481, column: 8, scope: !1731)
!1731 = !DILexicalBlockFile(scope: !1695, file: !1, discriminator: 2)
!1732 = !DILocation(line: 481, column: 8, scope: !1733)
!1733 = !DILexicalBlockFile(scope: !1695, file: !1, discriminator: 3)
!1734 = !DILocation(line: 481, column: 8, scope: !1735)
!1735 = !DILexicalBlockFile(scope: !1695, file: !1, discriminator: 4)
!1736 = !DILocation(line: 481, column: 3, scope: !1735)
!1737 = !DILocation(line: 481, column: 8, scope: !1738)
!1738 = !DILexicalBlockFile(scope: !1695, file: !1, discriminator: 5)
!1739 = !DILocation(line: 0, scope: !1740)
!1740 = !DILexicalBlockFile(scope: !1695, file: !1, discriminator: 23)
!1741 = !DILocation(line: 481, column: 3, scope: !1738)
!1742 = !DILocation(line: 481, column: 8, scope: !1743)
!1743 = !DILexicalBlockFile(scope: !1695, file: !1, discriminator: 6)
!1744 = !DILocation(line: 481, column: 23, scope: !1743)
!1745 = !DILocation(line: 482, column: 13, scope: !1746)
!1746 = distinct !DILexicalBlock(scope: !1747, file: !1, line: 482, column: 5)
!1747 = distinct !DILexicalBlock(scope: !1695, file: !1, line: 481, column: 28)
!1748 = !DILocation(line: 482, column: 10, scope: !1746)
!1749 = !DILocation(line: 482, column: 18, scope: !1750)
!1750 = !DILexicalBlockFile(scope: !1751, file: !1, discriminator: 1)
!1751 = distinct !DILexicalBlock(scope: !1746, file: !1, line: 482, column: 5)
!1752 = !DILocation(line: 482, column: 24, scope: !1750)
!1753 = !DILocation(line: 482, column: 29, scope: !1750)
!1754 = !DILocation(line: 482, column: 27, scope: !1750)
!1755 = !DILocation(line: 482, column: 21, scope: !1750)
!1756 = !DILocation(line: 482, column: 5, scope: !1750)
!1757 = !DILocation(line: 483, column: 14, scope: !1758)
!1758 = distinct !DILexicalBlock(scope: !1759, file: !1, line: 483, column: 7)
!1759 = distinct !DILexicalBlock(scope: !1751, file: !1, line: 482, column: 55)
!1760 = !DILocation(line: 483, column: 12, scope: !1758)
!1761 = !DILocation(line: 483, column: 19, scope: !1762)
!1762 = !DILexicalBlockFile(scope: !1763, file: !1, discriminator: 1)
!1763 = distinct !DILexicalBlock(scope: !1758, file: !1, line: 483, column: 7)
!1764 = !DILocation(line: 483, column: 23, scope: !1762)
!1765 = !DILocation(line: 483, column: 21, scope: !1762)
!1766 = !DILocation(line: 483, column: 7, scope: !1762)
!1767 = !DILocation(line: 484, column: 16, scope: !1768)
!1768 = distinct !DILexicalBlock(scope: !1769, file: !1, line: 484, column: 9)
!1769 = distinct !DILexicalBlock(scope: !1763, file: !1, line: 483, column: 32)
!1770 = !DILocation(line: 484, column: 14, scope: !1768)
!1771 = !DILocation(line: 484, column: 21, scope: !1772)
!1772 = !DILexicalBlockFile(scope: !1773, file: !1, discriminator: 1)
!1773 = distinct !DILexicalBlock(scope: !1768, file: !1, line: 484, column: 9)
!1774 = !DILocation(line: 484, column: 25, scope: !1772)
!1775 = !DILocation(line: 484, column: 23, scope: !1772)
!1776 = !DILocation(line: 484, column: 9, scope: !1772)
!1777 = !DILocation(line: 485, column: 18, scope: !1778)
!1778 = distinct !DILexicalBlock(scope: !1773, file: !1, line: 484, column: 40)
!1779 = !DILocation(line: 485, column: 11, scope: !1778)
!1780 = !DILocation(line: 485, column: 15, scope: !1778)
!1781 = !DILocation(line: 485, column: 31, scope: !1778)
!1782 = !DILocation(line: 485, column: 33, scope: !1778)
!1783 = !DILocation(line: 485, column: 32, scope: !1778)
!1784 = !DILocation(line: 485, column: 23, scope: !1778)
!1785 = !DILocation(line: 485, column: 28, scope: !1778)
!1786 = !DILocation(line: 485, column: 25, scope: !1778)
!1787 = !DILocation(line: 485, column: 23, scope: !1788)
!1788 = !DILexicalBlockFile(scope: !1778, file: !1, discriminator: 1)
!1789 = !DILocation(line: 486, column: 9, scope: !1778)
!1790 = !DILocation(line: 484, column: 36, scope: !1791)
!1791 = !DILexicalBlockFile(scope: !1773, file: !1, discriminator: 2)
!1792 = !DILocation(line: 484, column: 9, scope: !1791)
!1793 = !DILocation(line: 487, column: 7, scope: !1769)
!1794 = !DILocation(line: 483, column: 28, scope: !1795)
!1795 = !DILexicalBlockFile(scope: !1763, file: !1, discriminator: 2)
!1796 = !DILocation(line: 483, column: 7, scope: !1795)
!1797 = !DILocation(line: 489, column: 13, scope: !1759)
!1798 = !DILocation(line: 489, column: 17, scope: !1759)
!1799 = !DILocation(line: 489, column: 24, scope: !1759)
!1800 = !DILocation(line: 489, column: 28, scope: !1759)
!1801 = !DILocation(line: 489, column: 33, scope: !1802)
!1802 = !DILexicalBlockFile(scope: !1759, file: !1, discriminator: 1)
!1803 = !DILocation(line: 489, column: 33, scope: !1759)
!1804 = !DILocation(line: 489, column: 7, scope: !1805)
!1805 = !DILexicalBlockFile(scope: !1759, file: !1, discriminator: 2)
!1806 = !DILocation(line: 491, column: 14, scope: !1807)
!1807 = distinct !DILexicalBlock(scope: !1759, file: !1, line: 491, column: 7)
!1808 = !DILocation(line: 491, column: 12, scope: !1807)
!1809 = !DILocation(line: 491, column: 19, scope: !1810)
!1810 = !DILexicalBlockFile(scope: !1811, file: !1, discriminator: 1)
!1811 = distinct !DILexicalBlock(scope: !1807, file: !1, line: 491, column: 7)
!1812 = !DILocation(line: 491, column: 23, scope: !1810)
!1813 = !DILocation(line: 491, column: 21, scope: !1810)
!1814 = !DILocation(line: 491, column: 7, scope: !1810)
!1815 = !DILocation(line: 492, column: 16, scope: !1816)
!1816 = distinct !DILexicalBlock(scope: !1817, file: !1, line: 492, column: 9)
!1817 = distinct !DILexicalBlock(scope: !1811, file: !1, line: 491, column: 32)
!1818 = !DILocation(line: 492, column: 14, scope: !1816)
!1819 = !DILocation(line: 492, column: 21, scope: !1820)
!1820 = !DILexicalBlockFile(scope: !1821, file: !1, discriminator: 1)
!1821 = distinct !DILexicalBlock(scope: !1816, file: !1, line: 492, column: 9)
!1822 = !DILocation(line: 492, column: 25, scope: !1820)
!1823 = !DILocation(line: 492, column: 23, scope: !1820)
!1824 = !DILocation(line: 492, column: 9, scope: !1820)
!1825 = !DILocation(line: 493, column: 22, scope: !1826)
!1826 = distinct !DILexicalBlock(scope: !1821, file: !1, line: 492, column: 40)
!1827 = !DILocation(line: 493, column: 24, scope: !1826)
!1828 = !DILocation(line: 493, column: 23, scope: !1826)
!1829 = !DILocation(line: 493, column: 11, scope: !1826)
!1830 = !DILocation(line: 493, column: 19, scope: !1826)
!1831 = !DILocation(line: 493, column: 16, scope: !1826)
!1832 = !DILocation(line: 493, column: 37, scope: !1826)
!1833 = !DILocation(line: 493, column: 30, scope: !1826)
!1834 = !DILocation(line: 493, column: 34, scope: !1826)
!1835 = !DILocation(line: 493, column: 30, scope: !1836)
!1836 = !DILexicalBlockFile(scope: !1826, file: !1, discriminator: 1)
!1837 = !DILocation(line: 494, column: 9, scope: !1826)
!1838 = !DILocation(line: 492, column: 36, scope: !1839)
!1839 = !DILexicalBlockFile(scope: !1821, file: !1, discriminator: 2)
!1840 = !DILocation(line: 492, column: 9, scope: !1839)
!1841 = !DILocation(line: 495, column: 7, scope: !1817)
!1842 = !DILocation(line: 491, column: 28, scope: !1843)
!1843 = !DILexicalBlockFile(scope: !1811, file: !1, discriminator: 2)
!1844 = !DILocation(line: 491, column: 7, scope: !1843)
!1845 = !DILocation(line: 496, column: 5, scope: !1759)
!1846 = !DILocation(line: 482, column: 45, scope: !1847)
!1847 = !DILexicalBlockFile(scope: !1751, file: !1, discriminator: 2)
!1848 = !DILocation(line: 482, column: 42, scope: !1847)
!1849 = !DILocation(line: 482, column: 5, scope: !1847)
!1850 = !DILocation(line: 497, column: 3, scope: !1747)
!1851 = !DILocation(line: 480, column: 11, scope: !1695)
!1852 = !DILocation(line: 481, column: 8, scope: !1853)
!1853 = !DILexicalBlockFile(scope: !1695, file: !1, discriminator: 7)
!1854 = !DILocation(line: 0, scope: !1855)
!1855 = !DILexicalBlockFile(scope: !1695, file: !1, discriminator: 24)
!1856 = !DILocation(line: 480, column: 11, scope: !1718)
!1857 = !DILocation(line: 480, column: 11, scope: !1731)
!1858 = !DILocation(line: 480, column: 11, scope: !1733)
!1859 = !DILocation(line: 497, column: 3, scope: !1718)
!1860 = distinct !DISubprogram(name: "cffts3", scope: !1, file: !1, line: 502, type: !1110, isLocal: true, isDefinition: true, scopeLine: 503, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !68)
!1861 = !DILocalVariable(name: "is", arg: 1, scope: !1860, file: !1, line: 502, type: !23)
!1862 = !DILocation(line: 502, column: 24, scope: !1860)
!1863 = !DILocalVariable(name: "d1", arg: 2, scope: !1860, file: !1, line: 502, type: !23)
!1864 = !DILocation(line: 502, column: 32, scope: !1860)
!1865 = !DILocalVariable(name: "d2", arg: 3, scope: !1860, file: !1, line: 502, type: !23)
!1866 = !DILocation(line: 502, column: 40, scope: !1860)
!1867 = !DILocalVariable(name: "d3", arg: 4, scope: !1860, file: !1, line: 502, type: !23)
!1868 = !DILocation(line: 502, column: 48, scope: !1860)
!1869 = !DILocalVariable(name: "ox", arg: 5, scope: !1860, file: !1, line: 502, type: !22)
!1870 = !DILocation(line: 502, column: 58, scope: !1860)
!1871 = !DILocalVariable(name: "oxout", arg: 6, scope: !1860, file: !1, line: 502, type: !22)
!1872 = !DILocation(line: 502, column: 68, scope: !1860)
!1873 = !DILocation(line: 504, column: 17, scope: !1860)
!1874 = !DILocation(line: 504, column: 3, scope: !1860)
!1875 = !DILocation(line: 504, column: 21, scope: !1860)
!1876 = !DILocation(line: 504, column: 23, scope: !1860)
!1877 = !DILocalVariable(name: "x", scope: !1860, file: !1, line: 504, type: !10)
!1878 = !DILocation(line: 504, column: 14, scope: !1860)
!1879 = !DILocation(line: 504, column: 43, scope: !1860)
!1880 = !DILocation(line: 504, column: 29, scope: !1860)
!1881 = !DILocation(line: 504, column: 47, scope: !1860)
!1882 = !DILocation(line: 504, column: 49, scope: !1860)
!1883 = !DILocation(line: 504, column: 53, scope: !1860)
!1884 = !DILocation(line: 505, column: 20, scope: !1860)
!1885 = !DILocation(line: 505, column: 3, scope: !1860)
!1886 = !DILocation(line: 505, column: 24, scope: !1860)
!1887 = !DILocation(line: 505, column: 26, scope: !1860)
!1888 = !DILocalVariable(name: "xout", scope: !1860, file: !1, line: 505, type: !10)
!1889 = !DILocation(line: 505, column: 14, scope: !1860)
!1890 = !DILocation(line: 505, column: 46, scope: !1860)
!1891 = !DILocation(line: 505, column: 32, scope: !1860)
!1892 = !DILocation(line: 505, column: 50, scope: !1860)
!1893 = !DILocation(line: 505, column: 52, scope: !1860)
!1894 = !DILocation(line: 505, column: 56, scope: !1860)
!1895 = !DILocalVariable(name: "logd3", scope: !1860, file: !1, line: 507, type: !23)
!1896 = !DILocation(line: 507, column: 7, scope: !1860)
!1897 = !DILocalVariable(name: "i", scope: !1860, file: !1, line: 508, type: !23)
!1898 = !DILocation(line: 508, column: 7, scope: !1860)
!1899 = !DILocalVariable(name: "j", scope: !1860, file: !1, line: 508, type: !23)
!1900 = !DILocation(line: 508, column: 10, scope: !1860)
!1901 = !DILocalVariable(name: "k", scope: !1860, file: !1, line: 508, type: !23)
!1902 = !DILocation(line: 508, column: 13, scope: !1860)
!1903 = !DILocalVariable(name: "ii", scope: !1860, file: !1, line: 508, type: !23)
!1904 = !DILocation(line: 508, column: 16, scope: !1860)
!1905 = !DILocation(line: 510, column: 17, scope: !1860)
!1906 = !DILocation(line: 510, column: 11, scope: !1860)
!1907 = !DILocation(line: 510, column: 9, scope: !1860)
!1908 = !DILocation(line: 512, column: 7, scope: !1909)
!1909 = distinct !DILexicalBlock(scope: !1860, file: !1, line: 512, column: 7)
!1910 = !DILocation(line: 512, column: 7, scope: !1860)
!1911 = !DILocation(line: 512, column: 23, scope: !1912)
!1912 = !DILexicalBlockFile(scope: !1909, file: !1, discriminator: 1)
!1913 = !DILocation(line: 513, column: 11, scope: !1860)
!1914 = !DILocation(line: 531, column: 7, scope: !1915)
!1915 = distinct !DILexicalBlock(scope: !1860, file: !1, line: 531, column: 7)
!1916 = !DILocation(line: 531, column: 7, scope: !1860)
!1917 = !DILocation(line: 531, column: 23, scope: !1918)
!1918 = !DILexicalBlockFile(scope: !1915, file: !1, discriminator: 1)
!1919 = !DILocation(line: 532, column: 1, scope: !1860)
!1920 = distinct !DISubprogram(name: ".omp_outlined..30", scope: !1, file: !1, line: 526, type: !1172, isLocal: true, isDefinition: true, scopeLine: 514, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !68)
!1921 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !1920, type: !444, flags: DIFlagArtificial | DIFlagObjectPointer)
!1922 = !DILocation(line: 0, scope: !1920)
!1923 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !1920, type: !444, flags: DIFlagArtificial)
!1924 = !DILocalVariable(name: "d2", arg: 3, scope: !1920, type: !447, flags: DIFlagArtificial)
!1925 = !DILocalVariable(name: "d1", arg: 4, scope: !1920, type: !447, flags: DIFlagArtificial)
!1926 = !DILocalVariable(name: "d3", arg: 5, scope: !1920, type: !447, flags: DIFlagArtificial)
!1927 = !DILocalVariable(name: "vla", arg: 6, scope: !1920, type: !341, flags: DIFlagArtificial)
!1928 = !DILocalVariable(name: "vla", arg: 7, scope: !1920, type: !341, flags: DIFlagArtificial)
!1929 = !DILocalVariable(name: "x", arg: 8, scope: !1920, type: !448, flags: DIFlagArtificial)
!1930 = !DILocalVariable(name: "is", arg: 9, scope: !1920, type: !447, flags: DIFlagArtificial)
!1931 = !DILocalVariable(name: "logd3", arg: 10, scope: !1920, type: !447, flags: DIFlagArtificial)
!1932 = !DILocalVariable(name: "vla", arg: 11, scope: !1920, type: !341, flags: DIFlagArtificial)
!1933 = !DILocalVariable(name: "vla", arg: 12, scope: !1920, type: !341, flags: DIFlagArtificial)
!1934 = !DILocalVariable(name: "xout", arg: 13, scope: !1920, type: !448, flags: DIFlagArtificial)
!1935 = !DILocation(line: 514, column: 3, scope: !1920)
!1936 = !DILocalVariable(name: ".omp.iv", scope: !1920, type: !23, flags: DIFlagArtificial)
!1937 = !DILocalVariable(name: ".omp.last.iteration", scope: !1920, type: !23, flags: DIFlagArtificial)
!1938 = !DILocation(line: 514, column: 19, scope: !1920)
!1939 = !DILocalVariable(name: "j", scope: !1920, type: !23, flags: DIFlagArtificial)
!1940 = !DILocation(line: 514, column: 23, scope: !1920)
!1941 = !DILocalVariable(name: ".omp.lb", scope: !1920, type: !23, flags: DIFlagArtificial)
!1942 = !DILocation(line: 514, column: 8, scope: !1943)
!1943 = !DILexicalBlockFile(scope: !1920, file: !1, discriminator: 1)
!1944 = !DILocalVariable(name: ".omp.ub", scope: !1920, type: !23, flags: DIFlagArtificial)
!1945 = !DILocation(line: 0, scope: !1946)
!1946 = !DILexicalBlockFile(scope: !1920, file: !1, discriminator: 25)
!1947 = !DILocalVariable(name: ".omp.stride", scope: !1920, type: !23, flags: DIFlagArtificial)
!1948 = !DILocalVariable(name: ".omp.is_last", scope: !1920, type: !23, flags: DIFlagArtificial)
!1949 = !DILocalVariable(name: "i", scope: !1920, type: !23, flags: DIFlagArtificial)
!1950 = !DILocalVariable(name: "k", scope: !1920, type: !23, flags: DIFlagArtificial)
!1951 = !DILocalVariable(name: "ii", scope: !1920, type: !23, flags: DIFlagArtificial)
!1952 = !DILocation(line: 514, column: 3, scope: !1943)
!1953 = !DILocation(line: 0, scope: !1954)
!1954 = !DILexicalBlockFile(scope: !1920, file: !1, discriminator: 26)
!1955 = !DILocation(line: 514, column: 8, scope: !1956)
!1956 = !DILexicalBlockFile(scope: !1920, file: !1, discriminator: 2)
!1957 = !DILocation(line: 514, column: 8, scope: !1958)
!1958 = !DILexicalBlockFile(scope: !1920, file: !1, discriminator: 3)
!1959 = !DILocation(line: 514, column: 8, scope: !1960)
!1960 = !DILexicalBlockFile(scope: !1920, file: !1, discriminator: 4)
!1961 = !DILocation(line: 514, column: 3, scope: !1960)
!1962 = !DILocation(line: 514, column: 8, scope: !1963)
!1963 = !DILexicalBlockFile(scope: !1920, file: !1, discriminator: 5)
!1964 = !DILocation(line: 0, scope: !1965)
!1965 = !DILexicalBlockFile(scope: !1920, file: !1, discriminator: 27)
!1966 = !DILocation(line: 514, column: 3, scope: !1963)
!1967 = !DILocation(line: 514, column: 8, scope: !1968)
!1968 = !DILexicalBlockFile(scope: !1920, file: !1, discriminator: 6)
!1969 = !DILocation(line: 514, column: 23, scope: !1968)
!1970 = !DILocation(line: 515, column: 13, scope: !1971)
!1971 = distinct !DILexicalBlock(scope: !1972, file: !1, line: 515, column: 5)
!1972 = distinct !DILexicalBlock(scope: !1920, file: !1, line: 514, column: 28)
!1973 = !DILocation(line: 515, column: 10, scope: !1971)
!1974 = !DILocation(line: 515, column: 18, scope: !1975)
!1975 = !DILexicalBlockFile(scope: !1976, file: !1, discriminator: 1)
!1976 = distinct !DILexicalBlock(scope: !1971, file: !1, line: 515, column: 5)
!1977 = !DILocation(line: 515, column: 24, scope: !1975)
!1978 = !DILocation(line: 515, column: 29, scope: !1975)
!1979 = !DILocation(line: 515, column: 27, scope: !1975)
!1980 = !DILocation(line: 515, column: 21, scope: !1975)
!1981 = !DILocation(line: 515, column: 5, scope: !1975)
!1982 = !DILocation(line: 516, column: 14, scope: !1983)
!1983 = distinct !DILexicalBlock(scope: !1984, file: !1, line: 516, column: 7)
!1984 = distinct !DILexicalBlock(scope: !1976, file: !1, line: 515, column: 55)
!1985 = !DILocation(line: 516, column: 12, scope: !1983)
!1986 = !DILocation(line: 516, column: 19, scope: !1987)
!1987 = !DILexicalBlockFile(scope: !1988, file: !1, discriminator: 1)
!1988 = distinct !DILexicalBlock(scope: !1983, file: !1, line: 516, column: 7)
!1989 = !DILocation(line: 516, column: 23, scope: !1987)
!1990 = !DILocation(line: 516, column: 21, scope: !1987)
!1991 = !DILocation(line: 516, column: 7, scope: !1987)
!1992 = !DILocation(line: 517, column: 16, scope: !1993)
!1993 = distinct !DILexicalBlock(scope: !1994, file: !1, line: 517, column: 9)
!1994 = distinct !DILexicalBlock(scope: !1988, file: !1, line: 516, column: 32)
!1995 = !DILocation(line: 517, column: 14, scope: !1993)
!1996 = !DILocation(line: 517, column: 21, scope: !1997)
!1997 = !DILexicalBlockFile(scope: !1998, file: !1, discriminator: 1)
!1998 = distinct !DILexicalBlock(scope: !1993, file: !1, line: 517, column: 9)
!1999 = !DILocation(line: 517, column: 25, scope: !1997)
!2000 = !DILocation(line: 517, column: 23, scope: !1997)
!2001 = !DILocation(line: 517, column: 9, scope: !1997)
!2002 = !DILocation(line: 518, column: 18, scope: !2003)
!2003 = distinct !DILexicalBlock(scope: !1998, file: !1, line: 517, column: 40)
!2004 = !DILocation(line: 518, column: 11, scope: !2003)
!2005 = !DILocation(line: 518, column: 15, scope: !2003)
!2006 = !DILocation(line: 518, column: 31, scope: !2003)
!2007 = !DILocation(line: 518, column: 33, scope: !2003)
!2008 = !DILocation(line: 518, column: 32, scope: !2003)
!2009 = !DILocation(line: 518, column: 23, scope: !2003)
!2010 = !DILocation(line: 518, column: 28, scope: !2003)
!2011 = !DILocation(line: 518, column: 25, scope: !2003)
!2012 = !DILocation(line: 518, column: 23, scope: !2013)
!2013 = !DILexicalBlockFile(scope: !2003, file: !1, discriminator: 1)
!2014 = !DILocation(line: 519, column: 9, scope: !2003)
!2015 = !DILocation(line: 517, column: 36, scope: !2016)
!2016 = !DILexicalBlockFile(scope: !1998, file: !1, discriminator: 2)
!2017 = !DILocation(line: 517, column: 9, scope: !2016)
!2018 = !DILocation(line: 520, column: 7, scope: !1994)
!2019 = !DILocation(line: 516, column: 28, scope: !2020)
!2020 = !DILexicalBlockFile(scope: !1988, file: !1, discriminator: 2)
!2021 = !DILocation(line: 516, column: 7, scope: !2020)
!2022 = !DILocation(line: 522, column: 13, scope: !1984)
!2023 = !DILocation(line: 522, column: 17, scope: !1984)
!2024 = !DILocation(line: 522, column: 24, scope: !1984)
!2025 = !DILocation(line: 522, column: 28, scope: !1984)
!2026 = !DILocation(line: 522, column: 33, scope: !2027)
!2027 = !DILexicalBlockFile(scope: !1984, file: !1, discriminator: 1)
!2028 = !DILocation(line: 522, column: 33, scope: !1984)
!2029 = !DILocation(line: 522, column: 7, scope: !2030)
!2030 = !DILexicalBlockFile(scope: !1984, file: !1, discriminator: 2)
!2031 = !DILocation(line: 524, column: 14, scope: !2032)
!2032 = distinct !DILexicalBlock(scope: !1984, file: !1, line: 524, column: 7)
!2033 = !DILocation(line: 524, column: 12, scope: !2032)
!2034 = !DILocation(line: 524, column: 19, scope: !2035)
!2035 = !DILexicalBlockFile(scope: !2036, file: !1, discriminator: 1)
!2036 = distinct !DILexicalBlock(scope: !2032, file: !1, line: 524, column: 7)
!2037 = !DILocation(line: 524, column: 23, scope: !2035)
!2038 = !DILocation(line: 524, column: 21, scope: !2035)
!2039 = !DILocation(line: 524, column: 7, scope: !2035)
!2040 = !DILocation(line: 525, column: 16, scope: !2041)
!2041 = distinct !DILexicalBlock(scope: !2042, file: !1, line: 525, column: 9)
!2042 = distinct !DILexicalBlock(scope: !2036, file: !1, line: 524, column: 32)
!2043 = !DILocation(line: 525, column: 14, scope: !2041)
!2044 = !DILocation(line: 525, column: 21, scope: !2045)
!2045 = !DILexicalBlockFile(scope: !2046, file: !1, discriminator: 1)
!2046 = distinct !DILexicalBlock(scope: !2041, file: !1, line: 525, column: 9)
!2047 = !DILocation(line: 525, column: 25, scope: !2045)
!2048 = !DILocation(line: 525, column: 23, scope: !2045)
!2049 = !DILocation(line: 525, column: 9, scope: !2045)
!2050 = !DILocation(line: 526, column: 22, scope: !2051)
!2051 = distinct !DILexicalBlock(scope: !2046, file: !1, line: 525, column: 40)
!2052 = !DILocation(line: 526, column: 24, scope: !2051)
!2053 = !DILocation(line: 526, column: 23, scope: !2051)
!2054 = !DILocation(line: 526, column: 11, scope: !2051)
!2055 = !DILocation(line: 526, column: 19, scope: !2051)
!2056 = !DILocation(line: 526, column: 16, scope: !2051)
!2057 = !DILocation(line: 526, column: 37, scope: !2051)
!2058 = !DILocation(line: 526, column: 30, scope: !2051)
!2059 = !DILocation(line: 526, column: 34, scope: !2051)
!2060 = !DILocation(line: 526, column: 30, scope: !2061)
!2061 = !DILexicalBlockFile(scope: !2051, file: !1, discriminator: 1)
!2062 = !DILocation(line: 527, column: 9, scope: !2051)
!2063 = !DILocation(line: 525, column: 36, scope: !2064)
!2064 = !DILexicalBlockFile(scope: !2046, file: !1, discriminator: 2)
!2065 = !DILocation(line: 525, column: 9, scope: !2064)
!2066 = !DILocation(line: 528, column: 7, scope: !2042)
!2067 = !DILocation(line: 524, column: 28, scope: !2068)
!2068 = !DILexicalBlockFile(scope: !2036, file: !1, discriminator: 2)
!2069 = !DILocation(line: 524, column: 7, scope: !2068)
!2070 = !DILocation(line: 529, column: 5, scope: !1984)
!2071 = !DILocation(line: 515, column: 45, scope: !2072)
!2072 = !DILexicalBlockFile(scope: !1976, file: !1, discriminator: 2)
!2073 = !DILocation(line: 515, column: 42, scope: !2072)
!2074 = !DILocation(line: 515, column: 5, scope: !2072)
!2075 = !DILocation(line: 530, column: 3, scope: !1972)
!2076 = !DILocation(line: 513, column: 11, scope: !1920)
!2077 = !DILocation(line: 514, column: 8, scope: !2078)
!2078 = !DILexicalBlockFile(scope: !1920, file: !1, discriminator: 7)
!2079 = !DILocation(line: 0, scope: !2080)
!2080 = !DILexicalBlockFile(scope: !1920, file: !1, discriminator: 28)
!2081 = !DILocation(line: 513, column: 11, scope: !1943)
!2082 = !DILocation(line: 513, column: 11, scope: !1956)
!2083 = !DILocation(line: 513, column: 11, scope: !1958)
!2084 = !DILocation(line: 530, column: 3, scope: !1943)
!2085 = distinct !DISubprogram(name: "evolve", scope: !1, file: !1, line: 215, type: !386, isLocal: true, isDefinition: true, scopeLine: 216, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !68)
!2086 = !DILocalVariable(name: "ou0", arg: 1, scope: !2085, file: !1, line: 215, type: !22)
!2087 = !DILocation(line: 215, column: 26, scope: !2085)
!2088 = !DILocalVariable(name: "ou1", arg: 2, scope: !2085, file: !1, line: 215, type: !22)
!2089 = !DILocation(line: 215, column: 37, scope: !2085)
!2090 = !DILocalVariable(name: "ot", arg: 3, scope: !2085, file: !1, line: 215, type: !22)
!2091 = !DILocation(line: 215, column: 48, scope: !2085)
!2092 = !DILocalVariable(name: "d1", arg: 4, scope: !2085, file: !1, line: 215, type: !23)
!2093 = !DILocation(line: 215, column: 56, scope: !2085)
!2094 = !DILocalVariable(name: "d2", arg: 5, scope: !2085, file: !1, line: 215, type: !23)
!2095 = !DILocation(line: 215, column: 64, scope: !2085)
!2096 = !DILocalVariable(name: "d3", arg: 6, scope: !2085, file: !1, line: 215, type: !23)
!2097 = !DILocation(line: 215, column: 72, scope: !2085)
!2098 = !DILocation(line: 217, column: 18, scope: !2085)
!2099 = !DILocation(line: 217, column: 3, scope: !2085)
!2100 = !DILocation(line: 217, column: 22, scope: !2085)
!2101 = !DILocation(line: 217, column: 24, scope: !2085)
!2102 = !DILocalVariable(name: "u0", scope: !2085, file: !1, line: 217, type: !10)
!2103 = !DILocation(line: 217, column: 14, scope: !2085)
!2104 = !DILocation(line: 217, column: 44, scope: !2085)
!2105 = !DILocation(line: 217, column: 30, scope: !2085)
!2106 = !DILocation(line: 217, column: 48, scope: !2085)
!2107 = !DILocation(line: 217, column: 50, scope: !2085)
!2108 = !DILocation(line: 217, column: 54, scope: !2085)
!2109 = !DILocation(line: 218, column: 18, scope: !2085)
!2110 = !DILocation(line: 218, column: 3, scope: !2085)
!2111 = !DILocation(line: 218, column: 22, scope: !2085)
!2112 = !DILocation(line: 218, column: 24, scope: !2085)
!2113 = !DILocalVariable(name: "u1", scope: !2085, file: !1, line: 218, type: !10)
!2114 = !DILocation(line: 218, column: 14, scope: !2085)
!2115 = !DILocation(line: 218, column: 44, scope: !2085)
!2116 = !DILocation(line: 218, column: 30, scope: !2085)
!2117 = !DILocation(line: 218, column: 48, scope: !2085)
!2118 = !DILocation(line: 218, column: 50, scope: !2085)
!2119 = !DILocation(line: 218, column: 54, scope: !2085)
!2120 = !DILocation(line: 219, column: 21, scope: !2085)
!2121 = !DILocation(line: 219, column: 3, scope: !2085)
!2122 = !DILocation(line: 219, column: 25, scope: !2085)
!2123 = !DILocation(line: 219, column: 27, scope: !2085)
!2124 = !DILocalVariable(name: "twiddle", scope: !2085, file: !1, line: 219, type: !19)
!2125 = !DILocation(line: 219, column: 12, scope: !2085)
!2126 = !DILocation(line: 219, column: 45, scope: !2085)
!2127 = !DILocation(line: 219, column: 33, scope: !2085)
!2128 = !DILocation(line: 219, column: 49, scope: !2085)
!2129 = !DILocation(line: 219, column: 51, scope: !2085)
!2130 = !DILocation(line: 219, column: 55, scope: !2085)
!2131 = !DILocalVariable(name: "i", scope: !2085, file: !1, line: 221, type: !23)
!2132 = !DILocation(line: 221, column: 7, scope: !2085)
!2133 = !DILocalVariable(name: "j", scope: !2085, file: !1, line: 221, type: !23)
!2134 = !DILocation(line: 221, column: 10, scope: !2085)
!2135 = !DILocalVariable(name: "k", scope: !2085, file: !1, line: 221, type: !23)
!2136 = !DILocation(line: 221, column: 13, scope: !2085)
!2137 = !DILocation(line: 223, column: 11, scope: !2085)
!2138 = !DILocation(line: 232, column: 1, scope: !2085)
!2139 = distinct !DISubprogram(name: ".omp_outlined..8", scope: !1, file: !1, line: 228, type: !2140, isLocal: true, isDefinition: true, scopeLine: 224, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !68)
!2140 = !DISubroutineType(types: !2141)
!2141 = !{null, !444, !444, !447, !447, !447, !341, !341, !448, !341, !341, !449, !341, !341, !448}
!2142 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !2139, type: !444, flags: DIFlagArtificial | DIFlagObjectPointer)
!2143 = !DILocation(line: 0, scope: !2139)
!2144 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !2139, type: !444, flags: DIFlagArtificial)
!2145 = !DILocalVariable(name: "d3", arg: 3, scope: !2139, type: !447, flags: DIFlagArtificial)
!2146 = !DILocalVariable(name: "d2", arg: 4, scope: !2139, type: !447, flags: DIFlagArtificial)
!2147 = !DILocalVariable(name: "d1", arg: 5, scope: !2139, type: !447, flags: DIFlagArtificial)
!2148 = !DILocalVariable(name: "vla", arg: 6, scope: !2139, type: !341, flags: DIFlagArtificial)
!2149 = !DILocalVariable(name: "vla", arg: 7, scope: !2139, type: !341, flags: DIFlagArtificial)
!2150 = !DILocalVariable(name: "u0", arg: 8, scope: !2139, type: !448, flags: DIFlagArtificial)
!2151 = !DILocalVariable(name: "vla", arg: 9, scope: !2139, type: !341, flags: DIFlagArtificial)
!2152 = !DILocalVariable(name: "vla", arg: 10, scope: !2139, type: !341, flags: DIFlagArtificial)
!2153 = !DILocalVariable(name: "twiddle", arg: 11, scope: !2139, type: !449, flags: DIFlagArtificial)
!2154 = !DILocalVariable(name: "vla", arg: 12, scope: !2139, type: !341, flags: DIFlagArtificial)
!2155 = !DILocalVariable(name: "vla", arg: 13, scope: !2139, type: !341, flags: DIFlagArtificial)
!2156 = !DILocalVariable(name: "u1", arg: 14, scope: !2139, type: !448, flags: DIFlagArtificial)
!2157 = !DILocation(line: 224, column: 3, scope: !2139)
!2158 = !DILocalVariable(name: ".omp.iv", scope: !2139, type: !23, flags: DIFlagArtificial)
!2159 = !DILocalVariable(name: ".omp.last.iteration", scope: !2139, type: !23, flags: DIFlagArtificial)
!2160 = !DILocation(line: 224, column: 19, scope: !2139)
!2161 = !DILocalVariable(name: "k", scope: !2139, type: !23, flags: DIFlagArtificial)
!2162 = !DILocation(line: 224, column: 23, scope: !2139)
!2163 = !DILocalVariable(name: ".omp.lb", scope: !2139, type: !23, flags: DIFlagArtificial)
!2164 = !DILocation(line: 224, column: 8, scope: !2165)
!2165 = !DILexicalBlockFile(scope: !2139, file: !1, discriminator: 1)
!2166 = !DILocalVariable(name: ".omp.ub", scope: !2139, type: !23, flags: DIFlagArtificial)
!2167 = !DILocation(line: 0, scope: !2168)
!2168 = !DILexicalBlockFile(scope: !2139, file: !1, discriminator: 5)
!2169 = !DILocalVariable(name: ".omp.stride", scope: !2139, type: !23, flags: DIFlagArtificial)
!2170 = !DILocalVariable(name: ".omp.is_last", scope: !2139, type: !23, flags: DIFlagArtificial)
!2171 = !DILocalVariable(name: "i", scope: !2139, type: !23, flags: DIFlagArtificial)
!2172 = !DILocalVariable(name: "j", scope: !2139, type: !23, flags: DIFlagArtificial)
!2173 = !DILocation(line: 224, column: 3, scope: !2165)
!2174 = !DILocation(line: 0, scope: !2175)
!2175 = !DILexicalBlockFile(scope: !2139, file: !1, discriminator: 6)
!2176 = !DILocation(line: 224, column: 8, scope: !2177)
!2177 = !DILexicalBlockFile(scope: !2139, file: !1, discriminator: 2)
!2178 = !DILocation(line: 224, column: 8, scope: !2179)
!2179 = !DILexicalBlockFile(scope: !2139, file: !1, discriminator: 3)
!2180 = !DILocation(line: 224, column: 8, scope: !2181)
!2181 = !DILexicalBlockFile(scope: !2139, file: !1, discriminator: 4)
!2182 = !DILocation(line: 224, column: 3, scope: !2181)
!2183 = !DILocation(line: 224, column: 8, scope: !2168)
!2184 = !DILocation(line: 0, scope: !2185)
!2185 = !DILexicalBlockFile(scope: !2139, file: !1, discriminator: 7)
!2186 = !DILocation(line: 224, column: 3, scope: !2168)
!2187 = !DILocation(line: 224, column: 8, scope: !2175)
!2188 = !DILocation(line: 224, column: 23, scope: !2175)
!2189 = !DILocation(line: 225, column: 12, scope: !2190)
!2190 = distinct !DILexicalBlock(scope: !2191, file: !1, line: 225, column: 5)
!2191 = distinct !DILexicalBlock(scope: !2139, file: !1, line: 224, column: 28)
!2192 = !DILocation(line: 225, column: 10, scope: !2190)
!2193 = !DILocation(line: 225, column: 17, scope: !2194)
!2194 = !DILexicalBlockFile(scope: !2195, file: !1, discriminator: 1)
!2195 = distinct !DILexicalBlock(scope: !2190, file: !1, line: 225, column: 5)
!2196 = !DILocation(line: 225, column: 21, scope: !2194)
!2197 = !DILocation(line: 225, column: 19, scope: !2194)
!2198 = !DILocation(line: 225, column: 5, scope: !2194)
!2199 = !DILocation(line: 226, column: 14, scope: !2200)
!2200 = distinct !DILexicalBlock(scope: !2201, file: !1, line: 226, column: 7)
!2201 = distinct !DILexicalBlock(scope: !2195, file: !1, line: 225, column: 30)
!2202 = !DILocation(line: 226, column: 12, scope: !2200)
!2203 = !DILocation(line: 226, column: 19, scope: !2204)
!2204 = !DILexicalBlockFile(scope: !2205, file: !1, discriminator: 1)
!2205 = distinct !DILexicalBlock(scope: !2200, file: !1, line: 226, column: 7)
!2206 = !DILocation(line: 226, column: 23, scope: !2204)
!2207 = !DILocation(line: 226, column: 21, scope: !2204)
!2208 = !DILocation(line: 226, column: 7, scope: !2204)
!2209 = !DILocation(line: 227, column: 18, scope: !2210)
!2210 = distinct !DILexicalBlock(scope: !2205, file: !1, line: 226, column: 32)
!2211 = !DILocation(line: 227, column: 9, scope: !2210)
!2212 = !DILocation(line: 227, column: 15, scope: !2210)
!2213 = !DILocation(line: 227, column: 12, scope: !2210)
!2214 = !DILocation(line: 227, column: 23, scope: !2210)
!2215 = !DILocation(line: 228, column: 18, scope: !2210)
!2216 = !DILocation(line: 228, column: 9, scope: !2210)
!2217 = !DILocation(line: 228, column: 15, scope: !2210)
!2218 = !DILocation(line: 228, column: 12, scope: !2210)
!2219 = !DILocation(line: 228, column: 32, scope: !2210)
!2220 = !DILocation(line: 228, column: 23, scope: !2210)
!2221 = !DILocation(line: 228, column: 29, scope: !2210)
!2222 = !DILocation(line: 228, column: 26, scope: !2210)
!2223 = !DILocation(line: 229, column: 7, scope: !2210)
!2224 = !DILocation(line: 226, column: 28, scope: !2225)
!2225 = !DILexicalBlockFile(scope: !2205, file: !1, discriminator: 2)
!2226 = !DILocation(line: 226, column: 7, scope: !2225)
!2227 = !DILocation(line: 230, column: 5, scope: !2201)
!2228 = !DILocation(line: 225, column: 26, scope: !2229)
!2229 = !DILexicalBlockFile(scope: !2195, file: !1, discriminator: 2)
!2230 = !DILocation(line: 225, column: 5, scope: !2229)
!2231 = !DILocation(line: 231, column: 3, scope: !2191)
!2232 = !DILocation(line: 223, column: 11, scope: !2139)
!2233 = !DILocation(line: 224, column: 8, scope: !2185)
!2234 = !DILocation(line: 0, scope: !2235)
!2235 = !DILexicalBlockFile(scope: !2139, file: !1, discriminator: 8)
!2236 = !DILocation(line: 223, column: 11, scope: !2165)
!2237 = !DILocation(line: 223, column: 11, scope: !2177)
!2238 = !DILocation(line: 223, column: 11, scope: !2179)
!2239 = !DILocation(line: 231, column: 3, scope: !2165)
!2240 = distinct !DISubprogram(name: "checksum", scope: !1, file: !1, line: 669, type: !2241, isLocal: true, isDefinition: true, scopeLine: 670, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !68)
!2241 = !DISubroutineType(types: !2242)
!2242 = !{null, !23, !22, !23, !23, !23}
!2243 = !DILocalVariable(name: "i", arg: 1, scope: !2240, file: !1, line: 669, type: !23)
!2244 = !DILocation(line: 669, column: 26, scope: !2240)
!2245 = !DILocalVariable(name: "ou1", arg: 2, scope: !2240, file: !1, line: 669, type: !22)
!2246 = !DILocation(line: 669, column: 35, scope: !2240)
!2247 = !DILocalVariable(name: "d1", arg: 3, scope: !2240, file: !1, line: 669, type: !23)
!2248 = !DILocation(line: 669, column: 44, scope: !2240)
!2249 = !DILocalVariable(name: "d2", arg: 4, scope: !2240, file: !1, line: 669, type: !23)
!2250 = !DILocation(line: 669, column: 52, scope: !2240)
!2251 = !DILocalVariable(name: "d3", arg: 5, scope: !2240, file: !1, line: 669, type: !23)
!2252 = !DILocation(line: 669, column: 60, scope: !2240)
!2253 = !DILocation(line: 671, column: 18, scope: !2240)
!2254 = !DILocation(line: 671, column: 3, scope: !2240)
!2255 = !DILocation(line: 671, column: 22, scope: !2240)
!2256 = !DILocation(line: 671, column: 24, scope: !2240)
!2257 = !DILocalVariable(name: "u1", scope: !2240, file: !1, line: 671, type: !10)
!2258 = !DILocation(line: 671, column: 14, scope: !2240)
!2259 = !DILocation(line: 671, column: 44, scope: !2240)
!2260 = !DILocation(line: 671, column: 30, scope: !2240)
!2261 = !DILocation(line: 671, column: 48, scope: !2240)
!2262 = !DILocation(line: 671, column: 50, scope: !2240)
!2263 = !DILocation(line: 671, column: 54, scope: !2240)
!2264 = !DILocalVariable(name: "j", scope: !2240, file: !1, line: 673, type: !23)
!2265 = !DILocation(line: 673, column: 7, scope: !2240)
!2266 = !DILocalVariable(name: "q", scope: !2240, file: !1, line: 673, type: !23)
!2267 = !DILocation(line: 673, column: 10, scope: !2240)
!2268 = !DILocalVariable(name: "r", scope: !2240, file: !1, line: 673, type: !23)
!2269 = !DILocation(line: 673, column: 13, scope: !2240)
!2270 = !DILocalVariable(name: "s", scope: !2240, file: !1, line: 673, type: !23)
!2271 = !DILocation(line: 673, column: 16, scope: !2240)
!2272 = !DILocalVariable(name: "chk", scope: !2240, file: !1, line: 674, type: !12)
!2273 = !DILocation(line: 674, column: 12, scope: !2240)
!2274 = !DILocation(line: 676, column: 11, scope: !2240)
!2275 = !DILocation(line: 694, column: 9, scope: !2240)
!2276 = !DILocation(line: 696, column: 52, scope: !2240)
!2277 = !DILocation(line: 696, column: 59, scope: !2240)
!2278 = !DILocation(line: 696, column: 69, scope: !2240)
!2279 = !DILocation(line: 696, column: 3, scope: !2240)
!2280 = !DILocation(line: 697, column: 8, scope: !2240)
!2281 = !DILocation(line: 697, column: 3, scope: !2240)
!2282 = !DILocation(line: 697, column: 13, scope: !2240)
!2283 = !DILocation(line: 698, column: 1, scope: !2240)
!2284 = distinct !DISubprogram(name: ".omp_outlined..31", scope: !1, file: !1, line: 690, type: !2285, isLocal: true, isDefinition: true, scopeLine: 677, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !68)
!2285 = !DISubroutineType(types: !2286)
!2286 = !{null, !444, !444, !447, !341, !341, !448, !2287}
!2287 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !12, size: 64, align: 64)
!2288 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !2284, type: !444, flags: DIFlagArtificial | DIFlagObjectPointer)
!2289 = !DILocation(line: 0, scope: !2284)
!2290 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !2284, type: !444, flags: DIFlagArtificial)
!2291 = !DILocalVariable(name: "j", arg: 3, scope: !2284, type: !447, flags: DIFlagArtificial)
!2292 = !DILocalVariable(name: "vla", arg: 4, scope: !2284, type: !341, flags: DIFlagArtificial)
!2293 = !DILocalVariable(name: "vla", arg: 5, scope: !2284, type: !341, flags: DIFlagArtificial)
!2294 = !DILocalVariable(name: "u1", arg: 6, scope: !2284, type: !448, flags: DIFlagArtificial)
!2295 = !DILocalVariable(name: "chk", arg: 7, scope: !2284, type: !2287, flags: DIFlagArtificial)
!2296 = !DILocation(line: 677, column: 3, scope: !2284)
!2297 = !DILocalVariable(name: "i", scope: !2284, type: !23, flags: DIFlagArtificial)
!2298 = !DILocalVariable(name: "q", scope: !2284, type: !23, flags: DIFlagArtificial)
!2299 = !DILocalVariable(name: "r", scope: !2284, type: !23, flags: DIFlagArtificial)
!2300 = !DILocalVariable(name: "s", scope: !2284, type: !23, flags: DIFlagArtificial)
!2301 = !DILocalVariable(name: "my_chk", scope: !2302, file: !1, line: 678, type: !12)
!2302 = distinct !DILexicalBlock(scope: !2284, file: !1, line: 677, column: 3)
!2303 = !DILocation(line: 678, column: 14, scope: !2302)
!2304 = !DILocalVariable(name: ".omp.iv", scope: !2305, type: !23, flags: DIFlagArtificial)
!2305 = distinct !DILexicalBlock(scope: !2302, file: !1, line: 680, column: 13)
!2306 = !DILocation(line: 0, scope: !2305)
!2307 = !DILocalVariable(name: ".omp.lb", scope: !2305, type: !23, flags: DIFlagArtificial)
!2308 = !DILocation(line: 681, column: 10, scope: !2305)
!2309 = !DILocalVariable(name: ".omp.ub", scope: !2305, type: !23, flags: DIFlagArtificial)
!2310 = !DILocalVariable(name: ".omp.stride", scope: !2305, type: !23, flags: DIFlagArtificial)
!2311 = !DILocalVariable(name: ".omp.is_last", scope: !2305, type: !23, flags: DIFlagArtificial)
!2312 = !DILocalVariable(name: "j", scope: !2305, type: !23, flags: DIFlagArtificial)
!2313 = !DILocation(line: 680, column: 13, scope: !2302)
!2314 = !DILocation(line: 681, column: 10, scope: !2315)
!2315 = !DILexicalBlockFile(scope: !2305, file: !1, discriminator: 1)
!2316 = !DILocation(line: 681, column: 10, scope: !2317)
!2317 = !DILexicalBlockFile(scope: !2305, file: !1, discriminator: 2)
!2318 = !DILocation(line: 681, column: 10, scope: !2319)
!2319 = !DILexicalBlockFile(scope: !2305, file: !1, discriminator: 3)
!2320 = !DILocation(line: 680, column: 13, scope: !2321)
!2321 = !DILexicalBlockFile(scope: !2302, file: !1, discriminator: 1)
!2322 = !DILocation(line: 681, column: 10, scope: !2323)
!2323 = !DILexicalBlockFile(scope: !2305, file: !1, discriminator: 4)
!2324 = !DILocation(line: 680, column: 13, scope: !2325)
!2325 = !DILexicalBlockFile(scope: !2302, file: !1, discriminator: 2)
!2326 = !DILocation(line: 681, column: 10, scope: !2327)
!2327 = !DILexicalBlockFile(scope: !2305, file: !1, discriminator: 5)
!2328 = !DILocation(line: 681, column: 28, scope: !2327)
!2329 = !DILocation(line: 682, column: 11, scope: !2330)
!2330 = distinct !DILexicalBlock(scope: !2305, file: !1, line: 681, column: 33)
!2331 = !DILocation(line: 682, column: 13, scope: !2330)
!2332 = !DILocation(line: 682, column: 9, scope: !2330)
!2333 = !DILocation(line: 683, column: 13, scope: !2330)
!2334 = !DILocation(line: 683, column: 12, scope: !2330)
!2335 = !DILocation(line: 683, column: 15, scope: !2330)
!2336 = !DILocation(line: 683, column: 9, scope: !2330)
!2337 = !DILocation(line: 684, column: 13, scope: !2330)
!2338 = !DILocation(line: 684, column: 12, scope: !2330)
!2339 = !DILocation(line: 684, column: 15, scope: !2330)
!2340 = !DILocation(line: 684, column: 9, scope: !2330)
!2341 = !DILocation(line: 685, column: 16, scope: !2330)
!2342 = !DILocation(line: 686, column: 5, scope: !2330)
!2343 = !DILocation(line: 680, column: 13, scope: !2319)
!2344 = !DILocation(line: 681, column: 10, scope: !2345)
!2345 = !DILexicalBlockFile(scope: !2305, file: !1, discriminator: 6)
!2346 = !DILocation(line: 0, scope: !2347)
!2347 = !DILexicalBlockFile(scope: !2305, file: !1, discriminator: 29)
!2348 = !DILocation(line: 680, column: 13, scope: !2323)
!2349 = !DILocation(line: 680, column: 13, scope: !2327)
!2350 = !DILocation(line: 680, column: 13, scope: !2345)
!2351 = !DILocation(line: 688, column: 13, scope: !2302)
!2352 = !DILocation(line: 690, column: 13, scope: !2353)
!2353 = distinct !DILexicalBlock(scope: !2354, file: !1, line: 689, column: 5)
!2354 = distinct !DILexicalBlock(scope: !2302, file: !1, line: 688, column: 13)
!2355 = !DILocation(line: 691, column: 5, scope: !2353)
!2356 = !DILocation(line: 692, column: 3, scope: !2284)
!2357 = distinct !DISubprogram(name: "verify", scope: !1, file: !1, line: 701, type: !2358, isLocal: true, isDefinition: true, scopeLine: 703, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !68)
!2358 = !DISubroutineType(types: !2359)
!2359 = !{null, !23, !23, !23, !23, !2360, !95}
!2360 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !31, size: 64, align: 64)
!2361 = !DILocalVariable(name: "d1", arg: 1, scope: !2357, file: !1, line: 701, type: !23)
!2362 = !DILocation(line: 701, column: 24, scope: !2357)
!2363 = !DILocalVariable(name: "d2", arg: 2, scope: !2357, file: !1, line: 701, type: !23)
!2364 = !DILocation(line: 701, column: 32, scope: !2357)
!2365 = !DILocalVariable(name: "d3", arg: 3, scope: !2357, file: !1, line: 701, type: !23)
!2366 = !DILocation(line: 701, column: 40, scope: !2357)
!2367 = !DILocalVariable(name: "nt", arg: 4, scope: !2357, file: !1, line: 701, type: !23)
!2368 = !DILocation(line: 701, column: 48, scope: !2357)
!2369 = !DILocalVariable(name: "verified", arg: 5, scope: !2357, file: !1, line: 702, type: !2360)
!2370 = !DILocation(line: 702, column: 29, scope: !2357)
!2371 = !DILocalVariable(name: "Class", arg: 6, scope: !2357, file: !1, line: 702, type: !95)
!2372 = !DILocation(line: 702, column: 45, scope: !2357)
!2373 = !DILocalVariable(name: "i", scope: !2357, file: !1, line: 704, type: !23)
!2374 = !DILocation(line: 704, column: 7, scope: !2357)
!2375 = !DILocalVariable(name: "err", scope: !2357, file: !1, line: 705, type: !9)
!2376 = !DILocation(line: 705, column: 10, scope: !2357)
!2377 = !DILocalVariable(name: "epsilon", scope: !2357, file: !1, line: 705, type: !9)
!2378 = !DILocation(line: 705, column: 15, scope: !2357)
!2379 = !DILocalVariable(name: "csum_ref", scope: !2357, file: !1, line: 710, type: !2380)
!2380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !12, size: 3328, align: 64, elements: !2381)
!2381 = !{!2382}
!2382 = !DISubrange(count: 26)
!2383 = !DILocation(line: 710, column: 12, scope: !2357)
!2384 = !DILocation(line: 712, column: 4, scope: !2357)
!2385 = !DILocation(line: 712, column: 10, scope: !2357)
!2386 = !DILocation(line: 714, column: 11, scope: !2357)
!2387 = !DILocation(line: 715, column: 4, scope: !2357)
!2388 = !DILocation(line: 715, column: 13, scope: !2357)
!2389 = !DILocation(line: 717, column: 7, scope: !2390)
!2390 = distinct !DILexicalBlock(scope: !2357, file: !1, line: 717, column: 7)
!2391 = !DILocation(line: 717, column: 10, scope: !2390)
!2392 = !DILocation(line: 717, column: 16, scope: !2390)
!2393 = !DILocation(line: 717, column: 19, scope: !2394)
!2394 = !DILexicalBlockFile(scope: !2390, file: !1, discriminator: 1)
!2395 = !DILocation(line: 717, column: 22, scope: !2394)
!2396 = !DILocation(line: 717, column: 28, scope: !2394)
!2397 = !DILocation(line: 717, column: 31, scope: !2398)
!2398 = !DILexicalBlockFile(scope: !2390, file: !1, discriminator: 2)
!2399 = !DILocation(line: 717, column: 34, scope: !2398)
!2400 = !DILocation(line: 717, column: 40, scope: !2398)
!2401 = !DILocation(line: 717, column: 43, scope: !2402)
!2402 = !DILexicalBlockFile(scope: !2390, file: !1, discriminator: 3)
!2403 = !DILocation(line: 717, column: 46, scope: !2402)
!2404 = !DILocation(line: 717, column: 7, scope: !2402)
!2405 = !DILocation(line: 721, column: 6, scope: !2406)
!2406 = distinct !DILexicalBlock(scope: !2390, file: !1, line: 717, column: 52)
!2407 = !DILocation(line: 721, column: 12, scope: !2406)
!2408 = !DILocation(line: 722, column: 5, scope: !2406)
!2409 = !DILocation(line: 722, column: 19, scope: !2406)
!2410 = !DILocation(line: 723, column: 5, scope: !2406)
!2411 = !DILocation(line: 723, column: 19, scope: !2406)
!2412 = !DILocation(line: 724, column: 5, scope: !2406)
!2413 = !DILocation(line: 724, column: 19, scope: !2406)
!2414 = !DILocation(line: 725, column: 5, scope: !2406)
!2415 = !DILocation(line: 725, column: 19, scope: !2406)
!2416 = !DILocation(line: 726, column: 5, scope: !2406)
!2417 = !DILocation(line: 726, column: 19, scope: !2406)
!2418 = !DILocation(line: 727, column: 5, scope: !2406)
!2419 = !DILocation(line: 727, column: 19, scope: !2406)
!2420 = !DILocation(line: 729, column: 3, scope: !2406)
!2421 = !DILocation(line: 729, column: 14, scope: !2422)
!2422 = !DILexicalBlockFile(scope: !2423, file: !1, discriminator: 1)
!2423 = distinct !DILexicalBlock(scope: !2390, file: !1, line: 729, column: 14)
!2424 = !DILocation(line: 729, column: 17, scope: !2422)
!2425 = !DILocation(line: 729, column: 24, scope: !2422)
!2426 = !DILocation(line: 729, column: 27, scope: !2427)
!2427 = !DILexicalBlockFile(scope: !2423, file: !1, discriminator: 2)
!2428 = !DILocation(line: 729, column: 30, scope: !2427)
!2429 = !DILocation(line: 729, column: 37, scope: !2427)
!2430 = !DILocation(line: 729, column: 40, scope: !2431)
!2431 = !DILexicalBlockFile(scope: !2423, file: !1, discriminator: 3)
!2432 = !DILocation(line: 729, column: 43, scope: !2431)
!2433 = !DILocation(line: 729, column: 49, scope: !2431)
!2434 = !DILocation(line: 729, column: 52, scope: !2435)
!2435 = !DILexicalBlockFile(scope: !2423, file: !1, discriminator: 4)
!2436 = !DILocation(line: 729, column: 55, scope: !2435)
!2437 = !DILocation(line: 729, column: 14, scope: !2435)
!2438 = !DILocation(line: 733, column: 6, scope: !2439)
!2439 = distinct !DILexicalBlock(scope: !2423, file: !1, line: 729, column: 61)
!2440 = !DILocation(line: 733, column: 12, scope: !2439)
!2441 = !DILocation(line: 734, column: 5, scope: !2439)
!2442 = !DILocation(line: 734, column: 19, scope: !2439)
!2443 = !DILocation(line: 735, column: 5, scope: !2439)
!2444 = !DILocation(line: 735, column: 19, scope: !2439)
!2445 = !DILocation(line: 736, column: 5, scope: !2439)
!2446 = !DILocation(line: 736, column: 19, scope: !2439)
!2447 = !DILocation(line: 737, column: 5, scope: !2439)
!2448 = !DILocation(line: 737, column: 19, scope: !2439)
!2449 = !DILocation(line: 738, column: 5, scope: !2439)
!2450 = !DILocation(line: 738, column: 19, scope: !2439)
!2451 = !DILocation(line: 739, column: 5, scope: !2439)
!2452 = !DILocation(line: 739, column: 19, scope: !2439)
!2453 = !DILocation(line: 741, column: 3, scope: !2439)
!2454 = !DILocation(line: 741, column: 14, scope: !2455)
!2455 = !DILexicalBlockFile(scope: !2456, file: !1, discriminator: 1)
!2456 = distinct !DILexicalBlock(scope: !2423, file: !1, line: 741, column: 14)
!2457 = !DILocation(line: 741, column: 17, scope: !2455)
!2458 = !DILocation(line: 741, column: 24, scope: !2455)
!2459 = !DILocation(line: 741, column: 27, scope: !2460)
!2460 = !DILexicalBlockFile(scope: !2456, file: !1, discriminator: 2)
!2461 = !DILocation(line: 741, column: 30, scope: !2460)
!2462 = !DILocation(line: 741, column: 37, scope: !2460)
!2463 = !DILocation(line: 741, column: 40, scope: !2464)
!2464 = !DILexicalBlockFile(scope: !2456, file: !1, discriminator: 3)
!2465 = !DILocation(line: 741, column: 43, scope: !2464)
!2466 = !DILocation(line: 741, column: 50, scope: !2464)
!2467 = !DILocation(line: 741, column: 53, scope: !2468)
!2468 = !DILexicalBlockFile(scope: !2456, file: !1, discriminator: 4)
!2469 = !DILocation(line: 741, column: 56, scope: !2468)
!2470 = !DILocation(line: 741, column: 14, scope: !2468)
!2471 = !DILocation(line: 745, column: 6, scope: !2472)
!2472 = distinct !DILexicalBlock(scope: !2456, file: !1, line: 741, column: 62)
!2473 = !DILocation(line: 745, column: 12, scope: !2472)
!2474 = !DILocation(line: 746, column: 5, scope: !2472)
!2475 = !DILocation(line: 746, column: 19, scope: !2472)
!2476 = !DILocation(line: 747, column: 5, scope: !2472)
!2477 = !DILocation(line: 747, column: 19, scope: !2472)
!2478 = !DILocation(line: 748, column: 5, scope: !2472)
!2479 = !DILocation(line: 748, column: 19, scope: !2472)
!2480 = !DILocation(line: 749, column: 5, scope: !2472)
!2481 = !DILocation(line: 749, column: 19, scope: !2472)
!2482 = !DILocation(line: 750, column: 5, scope: !2472)
!2483 = !DILocation(line: 750, column: 19, scope: !2472)
!2484 = !DILocation(line: 751, column: 5, scope: !2472)
!2485 = !DILocation(line: 751, column: 19, scope: !2472)
!2486 = !DILocation(line: 753, column: 3, scope: !2472)
!2487 = !DILocation(line: 753, column: 14, scope: !2488)
!2488 = !DILexicalBlockFile(scope: !2489, file: !1, discriminator: 1)
!2489 = distinct !DILexicalBlock(scope: !2456, file: !1, line: 753, column: 14)
!2490 = !DILocation(line: 753, column: 17, scope: !2488)
!2491 = !DILocation(line: 753, column: 24, scope: !2488)
!2492 = !DILocation(line: 753, column: 27, scope: !2493)
!2493 = !DILexicalBlockFile(scope: !2489, file: !1, discriminator: 2)
!2494 = !DILocation(line: 753, column: 30, scope: !2493)
!2495 = !DILocation(line: 753, column: 37, scope: !2493)
!2496 = !DILocation(line: 753, column: 40, scope: !2497)
!2497 = !DILexicalBlockFile(scope: !2489, file: !1, discriminator: 3)
!2498 = !DILocation(line: 753, column: 43, scope: !2497)
!2499 = !DILocation(line: 753, column: 50, scope: !2497)
!2500 = !DILocation(line: 753, column: 53, scope: !2501)
!2501 = !DILexicalBlockFile(scope: !2489, file: !1, discriminator: 4)
!2502 = !DILocation(line: 753, column: 56, scope: !2501)
!2503 = !DILocation(line: 753, column: 14, scope: !2501)
!2504 = !DILocation(line: 757, column: 6, scope: !2505)
!2505 = distinct !DILexicalBlock(scope: !2489, file: !1, line: 753, column: 63)
!2506 = !DILocation(line: 757, column: 12, scope: !2505)
!2507 = !DILocation(line: 758, column: 5, scope: !2505)
!2508 = !DILocation(line: 758, column: 20, scope: !2505)
!2509 = !DILocation(line: 759, column: 5, scope: !2505)
!2510 = !DILocation(line: 759, column: 20, scope: !2505)
!2511 = !DILocation(line: 760, column: 5, scope: !2505)
!2512 = !DILocation(line: 760, column: 20, scope: !2505)
!2513 = !DILocation(line: 761, column: 5, scope: !2505)
!2514 = !DILocation(line: 761, column: 20, scope: !2505)
!2515 = !DILocation(line: 762, column: 5, scope: !2505)
!2516 = !DILocation(line: 762, column: 20, scope: !2505)
!2517 = !DILocation(line: 763, column: 5, scope: !2505)
!2518 = !DILocation(line: 763, column: 20, scope: !2505)
!2519 = !DILocation(line: 764, column: 5, scope: !2505)
!2520 = !DILocation(line: 764, column: 20, scope: !2505)
!2521 = !DILocation(line: 765, column: 5, scope: !2505)
!2522 = !DILocation(line: 765, column: 20, scope: !2505)
!2523 = !DILocation(line: 766, column: 5, scope: !2505)
!2524 = !DILocation(line: 766, column: 20, scope: !2505)
!2525 = !DILocation(line: 767, column: 5, scope: !2505)
!2526 = !DILocation(line: 767, column: 20, scope: !2505)
!2527 = !DILocation(line: 768, column: 5, scope: !2505)
!2528 = !DILocation(line: 768, column: 20, scope: !2505)
!2529 = !DILocation(line: 769, column: 5, scope: !2505)
!2530 = !DILocation(line: 769, column: 20, scope: !2505)
!2531 = !DILocation(line: 770, column: 5, scope: !2505)
!2532 = !DILocation(line: 770, column: 20, scope: !2505)
!2533 = !DILocation(line: 771, column: 5, scope: !2505)
!2534 = !DILocation(line: 771, column: 20, scope: !2505)
!2535 = !DILocation(line: 772, column: 5, scope: !2505)
!2536 = !DILocation(line: 772, column: 20, scope: !2505)
!2537 = !DILocation(line: 773, column: 5, scope: !2505)
!2538 = !DILocation(line: 773, column: 20, scope: !2505)
!2539 = !DILocation(line: 774, column: 5, scope: !2505)
!2540 = !DILocation(line: 774, column: 20, scope: !2505)
!2541 = !DILocation(line: 775, column: 5, scope: !2505)
!2542 = !DILocation(line: 775, column: 20, scope: !2505)
!2543 = !DILocation(line: 776, column: 5, scope: !2505)
!2544 = !DILocation(line: 776, column: 20, scope: !2505)
!2545 = !DILocation(line: 777, column: 5, scope: !2505)
!2546 = !DILocation(line: 777, column: 20, scope: !2505)
!2547 = !DILocation(line: 779, column: 3, scope: !2505)
!2548 = !DILocation(line: 779, column: 14, scope: !2549)
!2549 = !DILexicalBlockFile(scope: !2550, file: !1, discriminator: 1)
!2550 = distinct !DILexicalBlock(scope: !2489, file: !1, line: 779, column: 14)
!2551 = !DILocation(line: 779, column: 17, scope: !2549)
!2552 = !DILocation(line: 779, column: 24, scope: !2549)
!2553 = !DILocation(line: 779, column: 27, scope: !2554)
!2554 = !DILexicalBlockFile(scope: !2550, file: !1, discriminator: 2)
!2555 = !DILocation(line: 779, column: 30, scope: !2554)
!2556 = !DILocation(line: 779, column: 37, scope: !2554)
!2557 = !DILocation(line: 779, column: 40, scope: !2558)
!2558 = !DILexicalBlockFile(scope: !2550, file: !1, discriminator: 3)
!2559 = !DILocation(line: 779, column: 43, scope: !2558)
!2560 = !DILocation(line: 779, column: 50, scope: !2558)
!2561 = !DILocation(line: 779, column: 53, scope: !2562)
!2562 = !DILexicalBlockFile(scope: !2550, file: !1, discriminator: 4)
!2563 = !DILocation(line: 779, column: 56, scope: !2562)
!2564 = !DILocation(line: 779, column: 14, scope: !2562)
!2565 = !DILocation(line: 783, column: 6, scope: !2566)
!2566 = distinct !DILexicalBlock(scope: !2550, file: !1, line: 779, column: 63)
!2567 = !DILocation(line: 783, column: 12, scope: !2566)
!2568 = !DILocation(line: 784, column: 5, scope: !2566)
!2569 = !DILocation(line: 784, column: 20, scope: !2566)
!2570 = !DILocation(line: 785, column: 5, scope: !2566)
!2571 = !DILocation(line: 785, column: 20, scope: !2566)
!2572 = !DILocation(line: 786, column: 5, scope: !2566)
!2573 = !DILocation(line: 786, column: 20, scope: !2566)
!2574 = !DILocation(line: 787, column: 5, scope: !2566)
!2575 = !DILocation(line: 787, column: 20, scope: !2566)
!2576 = !DILocation(line: 788, column: 5, scope: !2566)
!2577 = !DILocation(line: 788, column: 20, scope: !2566)
!2578 = !DILocation(line: 789, column: 5, scope: !2566)
!2579 = !DILocation(line: 789, column: 20, scope: !2566)
!2580 = !DILocation(line: 790, column: 5, scope: !2566)
!2581 = !DILocation(line: 790, column: 20, scope: !2566)
!2582 = !DILocation(line: 791, column: 5, scope: !2566)
!2583 = !DILocation(line: 791, column: 20, scope: !2566)
!2584 = !DILocation(line: 792, column: 5, scope: !2566)
!2585 = !DILocation(line: 792, column: 20, scope: !2566)
!2586 = !DILocation(line: 793, column: 5, scope: !2566)
!2587 = !DILocation(line: 793, column: 20, scope: !2566)
!2588 = !DILocation(line: 794, column: 5, scope: !2566)
!2589 = !DILocation(line: 794, column: 20, scope: !2566)
!2590 = !DILocation(line: 795, column: 5, scope: !2566)
!2591 = !DILocation(line: 795, column: 20, scope: !2566)
!2592 = !DILocation(line: 796, column: 5, scope: !2566)
!2593 = !DILocation(line: 796, column: 20, scope: !2566)
!2594 = !DILocation(line: 797, column: 5, scope: !2566)
!2595 = !DILocation(line: 797, column: 20, scope: !2566)
!2596 = !DILocation(line: 798, column: 5, scope: !2566)
!2597 = !DILocation(line: 798, column: 20, scope: !2566)
!2598 = !DILocation(line: 799, column: 5, scope: !2566)
!2599 = !DILocation(line: 799, column: 20, scope: !2566)
!2600 = !DILocation(line: 800, column: 5, scope: !2566)
!2601 = !DILocation(line: 800, column: 20, scope: !2566)
!2602 = !DILocation(line: 801, column: 5, scope: !2566)
!2603 = !DILocation(line: 801, column: 20, scope: !2566)
!2604 = !DILocation(line: 802, column: 5, scope: !2566)
!2605 = !DILocation(line: 802, column: 20, scope: !2566)
!2606 = !DILocation(line: 803, column: 5, scope: !2566)
!2607 = !DILocation(line: 803, column: 20, scope: !2566)
!2608 = !DILocation(line: 805, column: 3, scope: !2566)
!2609 = !DILocation(line: 805, column: 14, scope: !2610)
!2610 = !DILexicalBlockFile(scope: !2611, file: !1, discriminator: 1)
!2611 = distinct !DILexicalBlock(scope: !2550, file: !1, line: 805, column: 14)
!2612 = !DILocation(line: 805, column: 17, scope: !2610)
!2613 = !DILocation(line: 805, column: 25, scope: !2610)
!2614 = !DILocation(line: 805, column: 28, scope: !2615)
!2615 = !DILexicalBlockFile(scope: !2611, file: !1, discriminator: 2)
!2616 = !DILocation(line: 805, column: 31, scope: !2615)
!2617 = !DILocation(line: 805, column: 39, scope: !2615)
!2618 = !DILocation(line: 805, column: 42, scope: !2619)
!2619 = !DILexicalBlockFile(scope: !2611, file: !1, discriminator: 3)
!2620 = !DILocation(line: 805, column: 45, scope: !2619)
!2621 = !DILocation(line: 805, column: 53, scope: !2619)
!2622 = !DILocation(line: 805, column: 56, scope: !2623)
!2623 = !DILexicalBlockFile(scope: !2611, file: !1, discriminator: 4)
!2624 = !DILocation(line: 805, column: 59, scope: !2623)
!2625 = !DILocation(line: 805, column: 14, scope: !2623)
!2626 = !DILocation(line: 809, column: 6, scope: !2627)
!2627 = distinct !DILexicalBlock(scope: !2611, file: !1, line: 805, column: 66)
!2628 = !DILocation(line: 809, column: 12, scope: !2627)
!2629 = !DILocation(line: 810, column: 5, scope: !2627)
!2630 = !DILocation(line: 810, column: 20, scope: !2627)
!2631 = !DILocation(line: 811, column: 5, scope: !2627)
!2632 = !DILocation(line: 811, column: 20, scope: !2627)
!2633 = !DILocation(line: 812, column: 5, scope: !2627)
!2634 = !DILocation(line: 812, column: 20, scope: !2627)
!2635 = !DILocation(line: 813, column: 5, scope: !2627)
!2636 = !DILocation(line: 813, column: 20, scope: !2627)
!2637 = !DILocation(line: 814, column: 5, scope: !2627)
!2638 = !DILocation(line: 814, column: 20, scope: !2627)
!2639 = !DILocation(line: 815, column: 5, scope: !2627)
!2640 = !DILocation(line: 815, column: 20, scope: !2627)
!2641 = !DILocation(line: 816, column: 5, scope: !2627)
!2642 = !DILocation(line: 816, column: 20, scope: !2627)
!2643 = !DILocation(line: 817, column: 5, scope: !2627)
!2644 = !DILocation(line: 817, column: 20, scope: !2627)
!2645 = !DILocation(line: 818, column: 5, scope: !2627)
!2646 = !DILocation(line: 818, column: 20, scope: !2627)
!2647 = !DILocation(line: 819, column: 5, scope: !2627)
!2648 = !DILocation(line: 819, column: 20, scope: !2627)
!2649 = !DILocation(line: 820, column: 5, scope: !2627)
!2650 = !DILocation(line: 820, column: 20, scope: !2627)
!2651 = !DILocation(line: 821, column: 5, scope: !2627)
!2652 = !DILocation(line: 821, column: 20, scope: !2627)
!2653 = !DILocation(line: 822, column: 5, scope: !2627)
!2654 = !DILocation(line: 822, column: 20, scope: !2627)
!2655 = !DILocation(line: 823, column: 5, scope: !2627)
!2656 = !DILocation(line: 823, column: 20, scope: !2627)
!2657 = !DILocation(line: 824, column: 5, scope: !2627)
!2658 = !DILocation(line: 824, column: 20, scope: !2627)
!2659 = !DILocation(line: 825, column: 5, scope: !2627)
!2660 = !DILocation(line: 825, column: 20, scope: !2627)
!2661 = !DILocation(line: 826, column: 5, scope: !2627)
!2662 = !DILocation(line: 826, column: 20, scope: !2627)
!2663 = !DILocation(line: 827, column: 5, scope: !2627)
!2664 = !DILocation(line: 827, column: 20, scope: !2627)
!2665 = !DILocation(line: 828, column: 5, scope: !2627)
!2666 = !DILocation(line: 828, column: 20, scope: !2627)
!2667 = !DILocation(line: 829, column: 5, scope: !2627)
!2668 = !DILocation(line: 829, column: 20, scope: !2627)
!2669 = !DILocation(line: 830, column: 5, scope: !2627)
!2670 = !DILocation(line: 830, column: 20, scope: !2627)
!2671 = !DILocation(line: 831, column: 5, scope: !2627)
!2672 = !DILocation(line: 831, column: 20, scope: !2627)
!2673 = !DILocation(line: 832, column: 5, scope: !2627)
!2674 = !DILocation(line: 832, column: 20, scope: !2627)
!2675 = !DILocation(line: 833, column: 5, scope: !2627)
!2676 = !DILocation(line: 833, column: 20, scope: !2627)
!2677 = !DILocation(line: 834, column: 5, scope: !2627)
!2678 = !DILocation(line: 834, column: 20, scope: !2627)
!2679 = !DILocation(line: 836, column: 3, scope: !2627)
!2680 = !DILocation(line: 836, column: 14, scope: !2681)
!2681 = !DILexicalBlockFile(scope: !2682, file: !1, discriminator: 1)
!2682 = distinct !DILexicalBlock(scope: !2611, file: !1, line: 836, column: 14)
!2683 = !DILocation(line: 836, column: 17, scope: !2681)
!2684 = !DILocation(line: 836, column: 25, scope: !2681)
!2685 = !DILocation(line: 836, column: 28, scope: !2686)
!2686 = !DILexicalBlockFile(scope: !2682, file: !1, discriminator: 2)
!2687 = !DILocation(line: 836, column: 31, scope: !2686)
!2688 = !DILocation(line: 836, column: 39, scope: !2686)
!2689 = !DILocation(line: 836, column: 42, scope: !2690)
!2690 = !DILexicalBlockFile(scope: !2682, file: !1, discriminator: 3)
!2691 = !DILocation(line: 836, column: 45, scope: !2690)
!2692 = !DILocation(line: 836, column: 53, scope: !2690)
!2693 = !DILocation(line: 836, column: 56, scope: !2694)
!2694 = !DILexicalBlockFile(scope: !2682, file: !1, discriminator: 4)
!2695 = !DILocation(line: 836, column: 59, scope: !2694)
!2696 = !DILocation(line: 836, column: 14, scope: !2694)
!2697 = !DILocation(line: 840, column: 6, scope: !2698)
!2698 = distinct !DILexicalBlock(scope: !2682, file: !1, line: 836, column: 66)
!2699 = !DILocation(line: 840, column: 12, scope: !2698)
!2700 = !DILocation(line: 841, column: 5, scope: !2698)
!2701 = !DILocation(line: 841, column: 20, scope: !2698)
!2702 = !DILocation(line: 842, column: 5, scope: !2698)
!2703 = !DILocation(line: 842, column: 20, scope: !2698)
!2704 = !DILocation(line: 843, column: 5, scope: !2698)
!2705 = !DILocation(line: 843, column: 20, scope: !2698)
!2706 = !DILocation(line: 844, column: 5, scope: !2698)
!2707 = !DILocation(line: 844, column: 20, scope: !2698)
!2708 = !DILocation(line: 845, column: 5, scope: !2698)
!2709 = !DILocation(line: 845, column: 20, scope: !2698)
!2710 = !DILocation(line: 846, column: 5, scope: !2698)
!2711 = !DILocation(line: 846, column: 20, scope: !2698)
!2712 = !DILocation(line: 847, column: 5, scope: !2698)
!2713 = !DILocation(line: 847, column: 20, scope: !2698)
!2714 = !DILocation(line: 848, column: 5, scope: !2698)
!2715 = !DILocation(line: 848, column: 20, scope: !2698)
!2716 = !DILocation(line: 849, column: 5, scope: !2698)
!2717 = !DILocation(line: 849, column: 20, scope: !2698)
!2718 = !DILocation(line: 850, column: 5, scope: !2698)
!2719 = !DILocation(line: 850, column: 20, scope: !2698)
!2720 = !DILocation(line: 851, column: 5, scope: !2698)
!2721 = !DILocation(line: 851, column: 20, scope: !2698)
!2722 = !DILocation(line: 852, column: 5, scope: !2698)
!2723 = !DILocation(line: 852, column: 20, scope: !2698)
!2724 = !DILocation(line: 853, column: 5, scope: !2698)
!2725 = !DILocation(line: 853, column: 20, scope: !2698)
!2726 = !DILocation(line: 854, column: 5, scope: !2698)
!2727 = !DILocation(line: 854, column: 20, scope: !2698)
!2728 = !DILocation(line: 855, column: 5, scope: !2698)
!2729 = !DILocation(line: 855, column: 20, scope: !2698)
!2730 = !DILocation(line: 856, column: 5, scope: !2698)
!2731 = !DILocation(line: 856, column: 20, scope: !2698)
!2732 = !DILocation(line: 857, column: 5, scope: !2698)
!2733 = !DILocation(line: 857, column: 20, scope: !2698)
!2734 = !DILocation(line: 858, column: 5, scope: !2698)
!2735 = !DILocation(line: 858, column: 20, scope: !2698)
!2736 = !DILocation(line: 859, column: 5, scope: !2698)
!2737 = !DILocation(line: 859, column: 20, scope: !2698)
!2738 = !DILocation(line: 860, column: 5, scope: !2698)
!2739 = !DILocation(line: 860, column: 20, scope: !2698)
!2740 = !DILocation(line: 861, column: 5, scope: !2698)
!2741 = !DILocation(line: 861, column: 20, scope: !2698)
!2742 = !DILocation(line: 862, column: 5, scope: !2698)
!2743 = !DILocation(line: 862, column: 20, scope: !2698)
!2744 = !DILocation(line: 863, column: 5, scope: !2698)
!2745 = !DILocation(line: 863, column: 20, scope: !2698)
!2746 = !DILocation(line: 864, column: 5, scope: !2698)
!2747 = !DILocation(line: 864, column: 20, scope: !2698)
!2748 = !DILocation(line: 865, column: 5, scope: !2698)
!2749 = !DILocation(line: 865, column: 20, scope: !2698)
!2750 = !DILocation(line: 866, column: 3, scope: !2698)
!2751 = !DILocation(line: 868, column: 8, scope: !2752)
!2752 = distinct !DILexicalBlock(scope: !2357, file: !1, line: 868, column: 7)
!2753 = !DILocation(line: 868, column: 7, scope: !2752)
!2754 = !DILocation(line: 868, column: 14, scope: !2752)
!2755 = !DILocation(line: 868, column: 7, scope: !2357)
!2756 = !DILocation(line: 869, column: 6, scope: !2757)
!2757 = distinct !DILexicalBlock(scope: !2752, file: !1, line: 868, column: 22)
!2758 = !DILocation(line: 869, column: 15, scope: !2757)
!2759 = !DILocation(line: 870, column: 12, scope: !2760)
!2760 = distinct !DILexicalBlock(scope: !2757, file: !1, line: 870, column: 5)
!2761 = !DILocation(line: 870, column: 10, scope: !2760)
!2762 = !DILocation(line: 870, column: 17, scope: !2763)
!2763 = !DILexicalBlockFile(scope: !2764, file: !1, discriminator: 1)
!2764 = distinct !DILexicalBlock(scope: !2760, file: !1, line: 870, column: 5)
!2765 = !DILocation(line: 870, column: 22, scope: !2763)
!2766 = !DILocation(line: 870, column: 19, scope: !2763)
!2767 = !DILocation(line: 870, column: 5, scope: !2763)
!2768 = !DILocation(line: 871, column: 13, scope: !2769)
!2769 = distinct !DILexicalBlock(scope: !2764, file: !1, line: 870, column: 31)
!2770 = !DILocation(line: 871, column: 13, scope: !2771)
!2771 = !DILexicalBlockFile(scope: !2769, file: !1, discriminator: 1)
!2772 = !DILocation(line: 871, column: 13, scope: !2773)
!2773 = !DILexicalBlockFile(scope: !2769, file: !1, discriminator: 2)
!2774 = !DILocation(line: 871, column: 13, scope: !2775)
!2775 = !DILexicalBlockFile(scope: !2769, file: !1, discriminator: 3)
!2776 = !DILocation(line: 871, column: 13, scope: !2777)
!2777 = !DILexicalBlockFile(scope: !2769, file: !1, discriminator: 4)
!2778 = !DILocation(line: 871, column: 11, scope: !2769)
!2779 = !DILocation(line: 873, column: 13, scope: !2780)
!2780 = distinct !DILexicalBlock(scope: !2769, file: !1, line: 873, column: 11)
!2781 = !DILocation(line: 873, column: 20, scope: !2780)
!2782 = !DILocation(line: 873, column: 17, scope: !2780)
!2783 = !DILocation(line: 873, column: 11, scope: !2769)
!2784 = !DILocation(line: 874, column: 10, scope: !2785)
!2785 = distinct !DILexicalBlock(scope: !2780, file: !1, line: 873, column: 30)
!2786 = !DILocation(line: 874, column: 19, scope: !2785)
!2787 = !DILocation(line: 875, column: 9, scope: !2785)
!2788 = !DILocation(line: 877, column: 5, scope: !2769)
!2789 = !DILocation(line: 870, column: 27, scope: !2790)
!2790 = !DILexicalBlockFile(scope: !2764, file: !1, discriminator: 2)
!2791 = !DILocation(line: 870, column: 5, scope: !2790)
!2792 = !DILocation(line: 878, column: 3, scope: !2757)
!2793 = !DILocation(line: 880, column: 8, scope: !2794)
!2794 = distinct !DILexicalBlock(scope: !2357, file: !1, line: 880, column: 7)
!2795 = !DILocation(line: 880, column: 7, scope: !2794)
!2796 = !DILocation(line: 880, column: 14, scope: !2794)
!2797 = !DILocation(line: 880, column: 7, scope: !2357)
!2798 = !DILocation(line: 881, column: 10, scope: !2799)
!2799 = distinct !DILexicalBlock(scope: !2800, file: !1, line: 881, column: 9)
!2800 = distinct !DILexicalBlock(scope: !2794, file: !1, line: 880, column: 22)
!2801 = !DILocation(line: 881, column: 9, scope: !2799)
!2802 = !DILocation(line: 881, column: 9, scope: !2800)
!2803 = !DILocation(line: 882, column: 7, scope: !2804)
!2804 = distinct !DILexicalBlock(scope: !2799, file: !1, line: 881, column: 20)
!2805 = !DILocation(line: 883, column: 5, scope: !2804)
!2806 = !DILocation(line: 884, column: 7, scope: !2807)
!2807 = distinct !DILexicalBlock(scope: !2799, file: !1, line: 883, column: 12)
!2808 = !DILocation(line: 886, column: 3, scope: !2800)
!2809 = !DILocation(line: 887, column: 28, scope: !2357)
!2810 = !DILocation(line: 887, column: 27, scope: !2357)
!2811 = !DILocation(line: 887, column: 3, scope: !2357)
!2812 = !DILocation(line: 888, column: 1, scope: !2357)
!2813 = distinct !DISubprogram(name: "dcmplx_div", scope: !26, file: !26, line: 133, type: !2814, isLocal: true, isDefinition: true, scopeLine: 133, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !68)
!2814 = !DISubroutineType(types: !2815)
!2815 = !{!12, !12, !12}
!2816 = !DILocalVariable(name: "z1", arg: 1, scope: !2813, file: !26, line: 133, type: !12)
!2817 = !DILocation(line: 133, column: 44, scope: !2813)
!2818 = !DILocalVariable(name: "z2", arg: 2, scope: !2813, file: !26, line: 133, type: !12)
!2819 = !DILocation(line: 133, column: 57, scope: !2813)
!2820 = !DILocalVariable(name: "a", scope: !2813, file: !26, line: 134, type: !9)
!2821 = !DILocation(line: 134, column: 10, scope: !2813)
!2822 = !DILocation(line: 134, column: 17, scope: !2813)
!2823 = !DILocalVariable(name: "b", scope: !2813, file: !26, line: 135, type: !9)
!2824 = !DILocation(line: 135, column: 10, scope: !2813)
!2825 = !DILocation(line: 135, column: 17, scope: !2813)
!2826 = !DILocalVariable(name: "c", scope: !2813, file: !26, line: 136, type: !9)
!2827 = !DILocation(line: 136, column: 10, scope: !2813)
!2828 = !DILocation(line: 136, column: 17, scope: !2813)
!2829 = !DILocalVariable(name: "d", scope: !2813, file: !26, line: 137, type: !9)
!2830 = !DILocation(line: 137, column: 10, scope: !2813)
!2831 = !DILocation(line: 137, column: 17, scope: !2813)
!2832 = !DILocalVariable(name: "divisor", scope: !2813, file: !26, line: 139, type: !9)
!2833 = !DILocation(line: 139, column: 10, scope: !2813)
!2834 = !DILocation(line: 139, column: 20, scope: !2813)
!2835 = !DILocation(line: 139, column: 22, scope: !2813)
!2836 = !DILocation(line: 139, column: 21, scope: !2813)
!2837 = !DILocation(line: 139, column: 26, scope: !2813)
!2838 = !DILocation(line: 139, column: 28, scope: !2813)
!2839 = !DILocation(line: 139, column: 27, scope: !2813)
!2840 = !DILocation(line: 139, column: 24, scope: !2813)
!2841 = !DILocalVariable(name: "real", scope: !2813, file: !26, line: 140, type: !9)
!2842 = !DILocation(line: 140, column: 10, scope: !2813)
!2843 = !DILocation(line: 140, column: 18, scope: !2813)
!2844 = !DILocation(line: 140, column: 20, scope: !2813)
!2845 = !DILocation(line: 140, column: 19, scope: !2813)
!2846 = !DILocation(line: 140, column: 24, scope: !2813)
!2847 = !DILocation(line: 140, column: 26, scope: !2813)
!2848 = !DILocation(line: 140, column: 25, scope: !2813)
!2849 = !DILocation(line: 140, column: 22, scope: !2813)
!2850 = !DILocation(line: 140, column: 31, scope: !2813)
!2851 = !DILocation(line: 140, column: 29, scope: !2813)
!2852 = !DILocalVariable(name: "imag", scope: !2813, file: !26, line: 141, type: !9)
!2853 = !DILocation(line: 141, column: 10, scope: !2813)
!2854 = !DILocation(line: 141, column: 18, scope: !2813)
!2855 = !DILocation(line: 141, column: 20, scope: !2813)
!2856 = !DILocation(line: 141, column: 19, scope: !2813)
!2857 = !DILocation(line: 141, column: 24, scope: !2813)
!2858 = !DILocation(line: 141, column: 26, scope: !2813)
!2859 = !DILocation(line: 141, column: 25, scope: !2813)
!2860 = !DILocation(line: 141, column: 22, scope: !2813)
!2861 = !DILocation(line: 141, column: 31, scope: !2813)
!2862 = !DILocation(line: 141, column: 29, scope: !2813)
!2863 = !DILocalVariable(name: "result", scope: !2813, file: !26, line: 142, type: !12)
!2864 = !DILocation(line: 142, column: 12, scope: !2813)
!2865 = !DILocation(line: 142, column: 31, scope: !2813)
!2866 = !DILocation(line: 142, column: 32, scope: !2813)
!2867 = !DILocation(line: 142, column: 38, scope: !2813)
!2868 = !DILocation(line: 143, column: 10, scope: !2813)
!2869 = !DILocation(line: 143, column: 3, scope: !2813)
!2870 = distinct !DISubprogram(name: "print_timers", scope: !1, file: !1, line: 392, type: !285, isLocal: true, isDefinition: true, scopeLine: 393, isOptimized: false, unit: !0, variables: !68)
!2871 = !DILocalVariable(name: "i", scope: !2870, file: !1, line: 394, type: !23)
!2872 = !DILocation(line: 394, column: 7, scope: !2870)
!2873 = !DILocalVariable(name: "t", scope: !2870, file: !1, line: 395, type: !9)
!2874 = !DILocation(line: 395, column: 10, scope: !2870)
!2875 = !DILocalVariable(name: "t_m", scope: !2870, file: !1, line: 395, type: !9)
!2876 = !DILocation(line: 395, column: 13, scope: !2870)
!2877 = !DILocalVariable(name: "tstrings", scope: !2870, file: !1, line: 396, type: !2878)
!2878 = !DICompositeType(tag: DW_TAG_array_type, baseType: !95, size: 576, align: 64, elements: !2879)
!2879 = !{!2880}
!2880 = !DISubrange(count: 9)
!2881 = !DILocation(line: 396, column: 9, scope: !2870)
!2882 = !DILocation(line: 397, column: 3, scope: !2870)
!2883 = !DILocation(line: 397, column: 15, scope: !2870)
!2884 = !DILocation(line: 398, column: 3, scope: !2870)
!2885 = !DILocation(line: 398, column: 15, scope: !2870)
!2886 = !DILocation(line: 399, column: 3, scope: !2870)
!2887 = !DILocation(line: 399, column: 15, scope: !2870)
!2888 = !DILocation(line: 400, column: 3, scope: !2870)
!2889 = !DILocation(line: 400, column: 15, scope: !2870)
!2890 = !DILocation(line: 401, column: 3, scope: !2870)
!2891 = !DILocation(line: 401, column: 15, scope: !2870)
!2892 = !DILocation(line: 402, column: 3, scope: !2870)
!2893 = !DILocation(line: 402, column: 15, scope: !2870)
!2894 = !DILocation(line: 403, column: 3, scope: !2870)
!2895 = !DILocation(line: 403, column: 15, scope: !2870)
!2896 = !DILocation(line: 404, column: 3, scope: !2870)
!2897 = !DILocation(line: 404, column: 15, scope: !2870)
!2898 = !DILocation(line: 406, column: 9, scope: !2870)
!2899 = !DILocation(line: 406, column: 7, scope: !2870)
!2900 = !DILocation(line: 407, column: 7, scope: !2901)
!2901 = distinct !DILexicalBlock(scope: !2870, file: !1, line: 407, column: 7)
!2902 = !DILocation(line: 407, column: 11, scope: !2901)
!2903 = !DILocation(line: 407, column: 7, scope: !2870)
!2904 = !DILocation(line: 407, column: 23, scope: !2905)
!2905 = !DILexicalBlockFile(scope: !2901, file: !1, discriminator: 1)
!2906 = !DILocation(line: 407, column: 19, scope: !2905)
!2907 = !DILocation(line: 408, column: 10, scope: !2908)
!2908 = distinct !DILexicalBlock(scope: !2870, file: !1, line: 408, column: 3)
!2909 = !DILocation(line: 408, column: 8, scope: !2908)
!2910 = !DILocation(line: 408, column: 15, scope: !2911)
!2911 = !DILexicalBlockFile(scope: !2912, file: !1, discriminator: 1)
!2912 = distinct !DILexicalBlock(scope: !2908, file: !1, line: 408, column: 3)
!2913 = !DILocation(line: 408, column: 17, scope: !2911)
!2914 = !DILocation(line: 408, column: 3, scope: !2911)
!2915 = !DILocation(line: 409, column: 20, scope: !2916)
!2916 = distinct !DILexicalBlock(scope: !2912, file: !1, line: 408, column: 32)
!2917 = !DILocation(line: 409, column: 9, scope: !2916)
!2918 = !DILocation(line: 409, column: 7, scope: !2916)
!2919 = !DILocation(line: 411, column: 9, scope: !2916)
!2920 = !DILocation(line: 411, column: 21, scope: !2916)
!2921 = !DILocation(line: 411, column: 12, scope: !2916)
!2922 = !DILocation(line: 411, column: 25, scope: !2916)
!2923 = !DILocation(line: 411, column: 28, scope: !2916)
!2924 = !DILocation(line: 411, column: 29, scope: !2916)
!2925 = !DILocation(line: 411, column: 36, scope: !2916)
!2926 = !DILocation(line: 411, column: 35, scope: !2916)
!2927 = !DILocation(line: 410, column: 5, scope: !2916)
!2928 = !DILocation(line: 412, column: 3, scope: !2916)
!2929 = !DILocation(line: 408, column: 28, scope: !2930)
!2930 = !DILexicalBlockFile(scope: !2912, file: !1, discriminator: 2)
!2931 = !DILocation(line: 408, column: 3, scope: !2930)
!2932 = !DILocation(line: 413, column: 1, scope: !2870)
!2933 = distinct !DISubprogram(name: "print_results", scope: !2934, file: !2934, line: 10, type: !2935, isLocal: false, isDefinition: true, scopeLine: 14, flags: DIFlagPrototyped, isOptimized: false, unit: !60, variables: !68)
!2934 = !DIFile(filename: "print_results.c", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common")
!2935 = !DISubroutineType(types: !2936)
!2936 = !{null, !95, !96, !23, !23, !23, !23, !9, !9, !95, !2937, !95, !95, !95, !95, !95, !95, !95, !95, !95}
!2937 = !DIDerivedType(tag: DW_TAG_typedef, name: "logical", file: !64, line: 4, baseType: !63)
!2938 = !DILocalVariable(name: "name", arg: 1, scope: !2933, file: !2934, line: 10, type: !95)
!2939 = !DILocation(line: 10, column: 26, scope: !2933)
!2940 = !DILocalVariable(name: "class", arg: 2, scope: !2933, file: !2934, line: 10, type: !96)
!2941 = !DILocation(line: 10, column: 37, scope: !2933)
!2942 = !DILocalVariable(name: "n1", arg: 3, scope: !2933, file: !2934, line: 10, type: !23)
!2943 = !DILocation(line: 10, column: 48, scope: !2933)
!2944 = !DILocalVariable(name: "n2", arg: 4, scope: !2933, file: !2934, line: 10, type: !23)
!2945 = !DILocation(line: 10, column: 56, scope: !2933)
!2946 = !DILocalVariable(name: "n3", arg: 5, scope: !2933, file: !2934, line: 10, type: !23)
!2947 = !DILocation(line: 10, column: 64, scope: !2933)
!2948 = !DILocalVariable(name: "niter", arg: 6, scope: !2933, file: !2934, line: 10, type: !23)
!2949 = !DILocation(line: 10, column: 72, scope: !2933)
!2950 = !DILocalVariable(name: "t", arg: 7, scope: !2933, file: !2934, line: 11, type: !9)
!2951 = !DILocation(line: 11, column: 12, scope: !2933)
!2952 = !DILocalVariable(name: "mops", arg: 8, scope: !2933, file: !2934, line: 11, type: !9)
!2953 = !DILocation(line: 11, column: 22, scope: !2933)
!2954 = !DILocalVariable(name: "optype", arg: 9, scope: !2933, file: !2934, line: 11, type: !95)
!2955 = !DILocation(line: 11, column: 34, scope: !2933)
!2956 = !DILocalVariable(name: "verified", arg: 10, scope: !2933, file: !2934, line: 11, type: !2937)
!2957 = !DILocation(line: 11, column: 50, scope: !2933)
!2958 = !DILocalVariable(name: "npbversion", arg: 11, scope: !2933, file: !2934, line: 11, type: !95)
!2959 = !DILocation(line: 11, column: 66, scope: !2933)
!2960 = !DILocalVariable(name: "compiletime", arg: 12, scope: !2933, file: !2934, line: 12, type: !95)
!2961 = !DILocation(line: 12, column: 11, scope: !2933)
!2962 = !DILocalVariable(name: "cs1", arg: 13, scope: !2933, file: !2934, line: 12, type: !95)
!2963 = !DILocation(line: 12, column: 30, scope: !2933)
!2964 = !DILocalVariable(name: "cs2", arg: 14, scope: !2933, file: !2934, line: 12, type: !95)
!2965 = !DILocation(line: 12, column: 41, scope: !2933)
!2966 = !DILocalVariable(name: "cs3", arg: 15, scope: !2933, file: !2934, line: 12, type: !95)
!2967 = !DILocation(line: 12, column: 52, scope: !2933)
!2968 = !DILocalVariable(name: "cs4", arg: 16, scope: !2933, file: !2934, line: 12, type: !95)
!2969 = !DILocation(line: 12, column: 63, scope: !2933)
!2970 = !DILocalVariable(name: "cs5", arg: 17, scope: !2933, file: !2934, line: 12, type: !95)
!2971 = !DILocation(line: 12, column: 74, scope: !2933)
!2972 = !DILocalVariable(name: "cs6", arg: 18, scope: !2933, file: !2934, line: 13, type: !95)
!2973 = !DILocation(line: 13, column: 11, scope: !2933)
!2974 = !DILocalVariable(name: "cs7", arg: 19, scope: !2933, file: !2934, line: 13, type: !95)
!2975 = !DILocation(line: 13, column: 22, scope: !2933)
!2976 = !DILocalVariable(name: "size", scope: !2933, file: !2934, line: 15, type: !2977)
!2977 = !DICompositeType(tag: DW_TAG_array_type, baseType: !96, size: 128, align: 8, elements: !2978)
!2978 = !{!2979}
!2979 = !DISubrange(count: 16)
!2980 = !DILocation(line: 15, column: 8, scope: !2933)
!2981 = !DILocalVariable(name: "j", scope: !2933, file: !2934, line: 16, type: !23)
!2982 = !DILocation(line: 16, column: 7, scope: !2933)
!2983 = !DILocalVariable(name: "num_threads", scope: !2933, file: !2934, line: 17, type: !23)
!2984 = !DILocation(line: 17, column: 7, scope: !2933)
!2985 = !DILocalVariable(name: "max_threads", scope: !2933, file: !2934, line: 17, type: !23)
!2986 = !DILocation(line: 17, column: 20, scope: !2933)
!2987 = !DILocation(line: 19, column: 15, scope: !2933)
!2988 = !DILocation(line: 20, column: 15, scope: !2933)
!2989 = !DILocation(line: 24, column: 17, scope: !2933)
!2990 = !DILocation(line: 24, column: 15, scope: !2933)
!2991 = !DILocation(line: 25, column: 9, scope: !2933)
!2992 = !DILocation(line: 33, column: 45, scope: !2933)
!2993 = !DILocation(line: 33, column: 3, scope: !2933)
!2994 = !DILocation(line: 34, column: 52, scope: !2933)
!2995 = !DILocation(line: 34, column: 3, scope: !2933)
!2996 = !DILocation(line: 41, column: 10, scope: !2997)
!2997 = distinct !DILexicalBlock(scope: !2933, file: !2934, line: 41, column: 8)
!2998 = !DILocation(line: 41, column: 13, scope: !2997)
!2999 = !DILocation(line: 41, column: 20, scope: !2997)
!3000 = !DILocation(line: 41, column: 25, scope: !3001)
!3001 = !DILexicalBlockFile(scope: !2997, file: !2934, discriminator: 1)
!3002 = !DILocation(line: 41, column: 28, scope: !3001)
!3003 = !DILocation(line: 41, column: 8, scope: !3001)
!3004 = !DILocation(line: 42, column: 12, scope: !3005)
!3005 = distinct !DILexicalBlock(scope: !3006, file: !2934, line: 42, column: 10)
!3006 = distinct !DILexicalBlock(scope: !2997, file: !2934, line: 41, column: 37)
!3007 = !DILocation(line: 42, column: 20, scope: !3005)
!3008 = !DILocation(line: 42, column: 29, scope: !3005)
!3009 = !DILocation(line: 42, column: 34, scope: !3010)
!3010 = !DILexicalBlockFile(scope: !3005, file: !2934, discriminator: 1)
!3011 = !DILocation(line: 42, column: 42, scope: !3010)
!3012 = !DILocation(line: 42, column: 10, scope: !3010)
!3013 = !DILocation(line: 43, column: 16, scope: !3014)
!3014 = distinct !DILexicalBlock(scope: !3005, file: !2934, line: 42, column: 53)
!3015 = !DILocation(line: 43, column: 42, scope: !3014)
!3016 = !DILocation(line: 43, column: 33, scope: !3014)
!3017 = !DILocation(line: 43, column: 7, scope: !3018)
!3018 = !DILexicalBlockFile(scope: !3014, file: !2934, discriminator: 1)
!3019 = !DILocation(line: 44, column: 9, scope: !3014)
!3020 = !DILocation(line: 45, column: 17, scope: !3021)
!3021 = distinct !DILexicalBlock(scope: !3014, file: !2934, line: 45, column: 12)
!3022 = !DILocation(line: 45, column: 12, scope: !3021)
!3023 = !DILocation(line: 45, column: 20, scope: !3021)
!3024 = !DILocation(line: 45, column: 12, scope: !3014)
!3025 = !DILocation(line: 46, column: 14, scope: !3026)
!3026 = distinct !DILexicalBlock(scope: !3021, file: !2934, line: 45, column: 29)
!3027 = !DILocation(line: 46, column: 9, scope: !3026)
!3028 = !DILocation(line: 46, column: 17, scope: !3026)
!3029 = !DILocation(line: 47, column: 10, scope: !3026)
!3030 = !DILocation(line: 48, column: 7, scope: !3026)
!3031 = !DILocation(line: 49, column: 12, scope: !3014)
!3032 = !DILocation(line: 49, column: 13, scope: !3014)
!3033 = !DILocation(line: 49, column: 7, scope: !3014)
!3034 = !DILocation(line: 49, column: 17, scope: !3014)
!3035 = !DILocation(line: 50, column: 53, scope: !3014)
!3036 = !DILocation(line: 50, column: 7, scope: !3014)
!3037 = !DILocation(line: 51, column: 5, scope: !3014)
!3038 = !DILocation(line: 52, column: 56, scope: !3039)
!3039 = distinct !DILexicalBlock(scope: !3005, file: !2934, line: 51, column: 12)
!3040 = !DILocation(line: 52, column: 7, scope: !3039)
!3041 = !DILocation(line: 54, column: 3, scope: !3006)
!3042 = !DILocation(line: 55, column: 59, scope: !3043)
!3043 = distinct !DILexicalBlock(scope: !2997, file: !2934, line: 54, column: 10)
!3044 = !DILocation(line: 55, column: 63, scope: !3043)
!3045 = !DILocation(line: 55, column: 67, scope: !3043)
!3046 = !DILocation(line: 55, column: 5, scope: !3043)
!3047 = !DILocation(line: 58, column: 52, scope: !2933)
!3048 = !DILocation(line: 58, column: 3, scope: !2933)
!3049 = !DILocation(line: 59, column: 55, scope: !2933)
!3050 = !DILocation(line: 59, column: 3, scope: !2933)
!3051 = !DILocation(line: 61, column: 52, scope: !2933)
!3052 = !DILocation(line: 61, column: 3, scope: !2933)
!3053 = !DILocation(line: 62, column: 52, scope: !2933)
!3054 = !DILocation(line: 62, column: 3, scope: !2933)
!3055 = !DILocation(line: 63, column: 8, scope: !3056)
!3056 = distinct !DILexicalBlock(scope: !2933, file: !2934, line: 63, column: 8)
!3057 = !DILocation(line: 63, column: 23, scope: !3056)
!3058 = !DILocation(line: 63, column: 20, scope: !3056)
!3059 = !DILocation(line: 63, column: 8, scope: !2933)
!3060 = !DILocation(line: 64, column: 5, scope: !3056)
!3061 = !DILocation(line: 66, column: 52, scope: !2933)
!3062 = !DILocation(line: 66, column: 3, scope: !2933)
!3063 = !DILocation(line: 67, column: 52, scope: !2933)
!3064 = !DILocation(line: 67, column: 65, scope: !2933)
!3065 = !DILocation(line: 67, column: 57, scope: !2933)
!3066 = !DILocation(line: 67, column: 56, scope: !2933)
!3067 = !DILocation(line: 67, column: 3, scope: !2933)
!3068 = !DILocation(line: 69, column: 40, scope: !2933)
!3069 = !DILocation(line: 69, column: 3, scope: !2933)
!3070 = !DILocation(line: 70, column: 8, scope: !3071)
!3071 = distinct !DILexicalBlock(scope: !2933, file: !2934, line: 70, column: 8)
!3072 = !DILocation(line: 70, column: 8, scope: !2933)
!3073 = !DILocation(line: 71, column: 5, scope: !3071)
!3074 = !DILocation(line: 73, column: 5, scope: !3071)
!3075 = !DILocation(line: 74, column: 52, scope: !2933)
!3076 = !DILocation(line: 74, column: 3, scope: !2933)
!3077 = !DILocation(line: 75, column: 52, scope: !2933)
!3078 = !DILocation(line: 75, column: 3, scope: !2933)
!3079 = !DILocation(line: 78, column: 38, scope: !2933)
!3080 = !DILocation(line: 77, column: 3, scope: !2933)
!3081 = !DILocation(line: 79, column: 38, scope: !2933)
!3082 = !DILocation(line: 79, column: 3, scope: !2933)
!3083 = !DILocation(line: 80, column: 38, scope: !2933)
!3084 = !DILocation(line: 80, column: 3, scope: !2933)
!3085 = !DILocation(line: 81, column: 38, scope: !2933)
!3086 = !DILocation(line: 81, column: 3, scope: !2933)
!3087 = !DILocation(line: 82, column: 38, scope: !2933)
!3088 = !DILocation(line: 82, column: 3, scope: !2933)
!3089 = !DILocation(line: 83, column: 38, scope: !2933)
!3090 = !DILocation(line: 83, column: 3, scope: !2933)
!3091 = !DILocation(line: 84, column: 38, scope: !2933)
!3092 = !DILocation(line: 84, column: 3, scope: !2933)
!3093 = !DILocation(line: 86, column: 3, scope: !2933)
!3094 = !DILocation(line: 92, column: 1, scope: !2933)
!3095 = distinct !DISubprogram(name: ".omp_outlined.", scope: !61, file: !61, line: 28, type: !3096, isLocal: true, isDefinition: true, scopeLine: 26, flags: DIFlagPrototyped, isOptimized: false, unit: !60, variables: !68)
!3096 = !DISubroutineType(types: !3097)
!3097 = !{null, !444, !444, !447}
!3098 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !3095, type: !444, flags: DIFlagArtificial | DIFlagObjectPointer)
!3099 = !DILocation(line: 0, scope: !3095)
!3100 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !3095, type: !444, flags: DIFlagArtificial)
!3101 = !DILocalVariable(name: "num_threads", arg: 3, scope: !3095, type: !447, flags: DIFlagArtificial)
!3102 = !DILocation(line: 26, column: 3, scope: !3103)
!3103 = !DILexicalBlockFile(scope: !3095, file: !2934, discriminator: 0)
!3104 = !DILocation(line: 27, column: 13, scope: !3105)
!3105 = distinct !DILexicalBlock(scope: !3103, file: !2934, line: 26, column: 3)
!3106 = !DILocation(line: 28, column: 19, scope: !3107)
!3107 = distinct !DILexicalBlock(scope: !3105, file: !2934, line: 27, column: 13)
!3108 = !DILocation(line: 28, column: 17, scope: !3107)
!3109 = !DILocation(line: 28, column: 5, scope: !3110)
!3110 = !DILexicalBlockFile(scope: !3107, file: !2934, discriminator: 1)
!3111 = !DILocation(line: 28, column: 5, scope: !3107)
!3112 = !DILocation(line: 29, column: 3, scope: !3103)
!3113 = distinct !DISubprogram(name: "randlc", scope: !3114, file: !3114, line: 4, type: !3115, isLocal: false, isDefinition: true, scopeLine: 5, flags: DIFlagPrototyped, isOptimized: false, unit: !66, variables: !68)
!3114 = !DIFile(filename: "randdp.c", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common")
!3115 = !DISubroutineType(types: !3116)
!3116 = !{!9, !21, !9}
!3117 = !DILocalVariable(name: "x", arg: 1, scope: !3113, file: !3114, line: 4, type: !21)
!3118 = !DILocation(line: 4, column: 24, scope: !3113)
!3119 = !DILocalVariable(name: "a", arg: 2, scope: !3113, file: !3114, line: 4, type: !9)
!3120 = !DILocation(line: 4, column: 34, scope: !3113)
!3121 = !DILocalVariable(name: "r23", scope: !3113, file: !3114, line: 36, type: !3122)
!3122 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !9)
!3123 = !DILocation(line: 36, column: 16, scope: !3113)
!3124 = !DILocalVariable(name: "r46", scope: !3113, file: !3114, line: 37, type: !3122)
!3125 = !DILocation(line: 37, column: 16, scope: !3113)
!3126 = !DILocalVariable(name: "t23", scope: !3113, file: !3114, line: 38, type: !3122)
!3127 = !DILocation(line: 38, column: 16, scope: !3113)
!3128 = !DILocalVariable(name: "t46", scope: !3113, file: !3114, line: 39, type: !3122)
!3129 = !DILocation(line: 39, column: 16, scope: !3113)
!3130 = !DILocalVariable(name: "t1", scope: !3113, file: !3114, line: 41, type: !9)
!3131 = !DILocation(line: 41, column: 10, scope: !3113)
!3132 = !DILocalVariable(name: "t2", scope: !3113, file: !3114, line: 41, type: !9)
!3133 = !DILocation(line: 41, column: 14, scope: !3113)
!3134 = !DILocalVariable(name: "t3", scope: !3113, file: !3114, line: 41, type: !9)
!3135 = !DILocation(line: 41, column: 18, scope: !3113)
!3136 = !DILocalVariable(name: "t4", scope: !3113, file: !3114, line: 41, type: !9)
!3137 = !DILocation(line: 41, column: 22, scope: !3113)
!3138 = !DILocalVariable(name: "a1", scope: !3113, file: !3114, line: 41, type: !9)
!3139 = !DILocation(line: 41, column: 26, scope: !3113)
!3140 = !DILocalVariable(name: "a2", scope: !3113, file: !3114, line: 41, type: !9)
!3141 = !DILocation(line: 41, column: 30, scope: !3113)
!3142 = !DILocalVariable(name: "x1", scope: !3113, file: !3114, line: 41, type: !9)
!3143 = !DILocation(line: 41, column: 34, scope: !3113)
!3144 = !DILocalVariable(name: "x2", scope: !3113, file: !3114, line: 41, type: !9)
!3145 = !DILocation(line: 41, column: 38, scope: !3113)
!3146 = !DILocalVariable(name: "z", scope: !3113, file: !3114, line: 41, type: !9)
!3147 = !DILocation(line: 41, column: 42, scope: !3113)
!3148 = !DILocalVariable(name: "r", scope: !3113, file: !3114, line: 42, type: !9)
!3149 = !DILocation(line: 42, column: 10, scope: !3113)
!3150 = !DILocation(line: 47, column: 14, scope: !3113)
!3151 = !DILocation(line: 47, column: 12, scope: !3113)
!3152 = !DILocation(line: 47, column: 6, scope: !3113)
!3153 = !DILocation(line: 48, column: 14, scope: !3113)
!3154 = !DILocation(line: 48, column: 8, scope: !3113)
!3155 = !DILocation(line: 48, column: 6, scope: !3113)
!3156 = !DILocation(line: 49, column: 8, scope: !3113)
!3157 = !DILocation(line: 49, column: 18, scope: !3113)
!3158 = !DILocation(line: 49, column: 16, scope: !3113)
!3159 = !DILocation(line: 49, column: 10, scope: !3113)
!3160 = !DILocation(line: 49, column: 6, scope: !3113)
!3161 = !DILocation(line: 56, column: 16, scope: !3113)
!3162 = !DILocation(line: 56, column: 15, scope: !3113)
!3163 = !DILocation(line: 56, column: 12, scope: !3113)
!3164 = !DILocation(line: 56, column: 6, scope: !3113)
!3165 = !DILocation(line: 57, column: 14, scope: !3113)
!3166 = !DILocation(line: 57, column: 8, scope: !3113)
!3167 = !DILocation(line: 57, column: 6, scope: !3113)
!3168 = !DILocation(line: 58, column: 9, scope: !3113)
!3169 = !DILocation(line: 58, column: 8, scope: !3113)
!3170 = !DILocation(line: 58, column: 19, scope: !3113)
!3171 = !DILocation(line: 58, column: 17, scope: !3113)
!3172 = !DILocation(line: 58, column: 11, scope: !3113)
!3173 = !DILocation(line: 58, column: 6, scope: !3113)
!3174 = !DILocation(line: 59, column: 8, scope: !3113)
!3175 = !DILocation(line: 59, column: 13, scope: !3113)
!3176 = !DILocation(line: 59, column: 11, scope: !3113)
!3177 = !DILocation(line: 59, column: 18, scope: !3113)
!3178 = !DILocation(line: 59, column: 23, scope: !3113)
!3179 = !DILocation(line: 59, column: 21, scope: !3113)
!3180 = !DILocation(line: 59, column: 16, scope: !3113)
!3181 = !DILocation(line: 59, column: 6, scope: !3113)
!3182 = !DILocation(line: 60, column: 21, scope: !3113)
!3183 = !DILocation(line: 60, column: 19, scope: !3113)
!3184 = !DILocation(line: 60, column: 8, scope: !3113)
!3185 = !DILocation(line: 60, column: 6, scope: !3113)
!3186 = !DILocation(line: 61, column: 7, scope: !3113)
!3187 = !DILocation(line: 61, column: 18, scope: !3113)
!3188 = !DILocation(line: 61, column: 16, scope: !3113)
!3189 = !DILocation(line: 61, column: 10, scope: !3113)
!3190 = !DILocation(line: 61, column: 5, scope: !3113)
!3191 = !DILocation(line: 62, column: 14, scope: !3113)
!3192 = !DILocation(line: 62, column: 12, scope: !3113)
!3193 = !DILocation(line: 62, column: 18, scope: !3113)
!3194 = !DILocation(line: 62, column: 23, scope: !3113)
!3195 = !DILocation(line: 62, column: 21, scope: !3113)
!3196 = !DILocation(line: 62, column: 16, scope: !3113)
!3197 = !DILocation(line: 62, column: 6, scope: !3113)
!3198 = !DILocation(line: 63, column: 21, scope: !3113)
!3199 = !DILocation(line: 63, column: 19, scope: !3113)
!3200 = !DILocation(line: 63, column: 8, scope: !3113)
!3201 = !DILocation(line: 63, column: 6, scope: !3113)
!3202 = !DILocation(line: 64, column: 8, scope: !3113)
!3203 = !DILocation(line: 64, column: 19, scope: !3113)
!3204 = !DILocation(line: 64, column: 17, scope: !3113)
!3205 = !DILocation(line: 64, column: 11, scope: !3113)
!3206 = !DILocation(line: 64, column: 4, scope: !3113)
!3207 = !DILocation(line: 64, column: 6, scope: !3113)
!3208 = !DILocation(line: 65, column: 15, scope: !3113)
!3209 = !DILocation(line: 65, column: 14, scope: !3113)
!3210 = !DILocation(line: 65, column: 11, scope: !3113)
!3211 = !DILocation(line: 65, column: 5, scope: !3113)
!3212 = !DILocation(line: 67, column: 10, scope: !3113)
!3213 = !DILocation(line: 67, column: 3, scope: !3113)
!3214 = distinct !DISubprogram(name: "vranlc", scope: !3114, file: !3114, line: 71, type: !3215, isLocal: false, isDefinition: true, scopeLine: 72, flags: DIFlagPrototyped, isOptimized: false, unit: !66, variables: !68)
!3215 = !DISubroutineType(types: !3216)
!3216 = !{null, !23, !21, !9, !21}
!3217 = !DILocalVariable(name: "n", arg: 1, scope: !3214, file: !3114, line: 71, type: !23)
!3218 = !DILocation(line: 71, column: 18, scope: !3214)
!3219 = !DILocalVariable(name: "x", arg: 2, scope: !3214, file: !3114, line: 71, type: !21)
!3220 = !DILocation(line: 71, column: 29, scope: !3214)
!3221 = !DILocalVariable(name: "a", arg: 3, scope: !3214, file: !3114, line: 71, type: !9)
!3222 = !DILocation(line: 71, column: 39, scope: !3214)
!3223 = !DILocalVariable(name: "y", arg: 4, scope: !3214, file: !3114, line: 71, type: !21)
!3224 = !DILocation(line: 71, column: 49, scope: !3214)
!3225 = !DILocalVariable(name: "r23", scope: !3214, file: !3114, line: 103, type: !3122)
!3226 = !DILocation(line: 103, column: 16, scope: !3214)
!3227 = !DILocalVariable(name: "r46", scope: !3214, file: !3114, line: 104, type: !3122)
!3228 = !DILocation(line: 104, column: 16, scope: !3214)
!3229 = !DILocalVariable(name: "t23", scope: !3214, file: !3114, line: 105, type: !3122)
!3230 = !DILocation(line: 105, column: 16, scope: !3214)
!3231 = !DILocalVariable(name: "t46", scope: !3214, file: !3114, line: 106, type: !3122)
!3232 = !DILocation(line: 106, column: 16, scope: !3214)
!3233 = !DILocalVariable(name: "t1", scope: !3214, file: !3114, line: 108, type: !9)
!3234 = !DILocation(line: 108, column: 10, scope: !3214)
!3235 = !DILocalVariable(name: "t2", scope: !3214, file: !3114, line: 108, type: !9)
!3236 = !DILocation(line: 108, column: 14, scope: !3214)
!3237 = !DILocalVariable(name: "t3", scope: !3214, file: !3114, line: 108, type: !9)
!3238 = !DILocation(line: 108, column: 18, scope: !3214)
!3239 = !DILocalVariable(name: "t4", scope: !3214, file: !3114, line: 108, type: !9)
!3240 = !DILocation(line: 108, column: 22, scope: !3214)
!3241 = !DILocalVariable(name: "a1", scope: !3214, file: !3114, line: 108, type: !9)
!3242 = !DILocation(line: 108, column: 26, scope: !3214)
!3243 = !DILocalVariable(name: "a2", scope: !3214, file: !3114, line: 108, type: !9)
!3244 = !DILocation(line: 108, column: 30, scope: !3214)
!3245 = !DILocalVariable(name: "x1", scope: !3214, file: !3114, line: 108, type: !9)
!3246 = !DILocation(line: 108, column: 34, scope: !3214)
!3247 = !DILocalVariable(name: "x2", scope: !3214, file: !3114, line: 108, type: !9)
!3248 = !DILocation(line: 108, column: 38, scope: !3214)
!3249 = !DILocalVariable(name: "z", scope: !3214, file: !3114, line: 108, type: !9)
!3250 = !DILocation(line: 108, column: 42, scope: !3214)
!3251 = !DILocalVariable(name: "i", scope: !3214, file: !3114, line: 110, type: !23)
!3252 = !DILocation(line: 110, column: 7, scope: !3214)
!3253 = !DILocation(line: 115, column: 14, scope: !3214)
!3254 = !DILocation(line: 115, column: 12, scope: !3214)
!3255 = !DILocation(line: 115, column: 6, scope: !3214)
!3256 = !DILocation(line: 116, column: 14, scope: !3214)
!3257 = !DILocation(line: 116, column: 8, scope: !3214)
!3258 = !DILocation(line: 116, column: 6, scope: !3214)
!3259 = !DILocation(line: 117, column: 8, scope: !3214)
!3260 = !DILocation(line: 117, column: 18, scope: !3214)
!3261 = !DILocation(line: 117, column: 16, scope: !3214)
!3262 = !DILocation(line: 117, column: 10, scope: !3214)
!3263 = !DILocation(line: 117, column: 6, scope: !3214)
!3264 = !DILocation(line: 122, column: 11, scope: !3265)
!3265 = distinct !DILexicalBlock(scope: !3214, file: !3114, line: 122, column: 3)
!3266 = !DILocation(line: 122, column: 9, scope: !3265)
!3267 = !DILocation(line: 122, column: 16, scope: !3268)
!3268 = !DILexicalBlockFile(scope: !3269, file: !3114, discriminator: 1)
!3269 = distinct !DILexicalBlock(scope: !3265, file: !3114, line: 122, column: 3)
!3270 = !DILocation(line: 122, column: 20, scope: !3268)
!3271 = !DILocation(line: 122, column: 18, scope: !3268)
!3272 = !DILocation(line: 122, column: 3, scope: !3268)
!3273 = !DILocation(line: 128, column: 18, scope: !3274)
!3274 = distinct !DILexicalBlock(scope: !3269, file: !3114, line: 122, column: 29)
!3275 = !DILocation(line: 128, column: 17, scope: !3274)
!3276 = !DILocation(line: 128, column: 14, scope: !3274)
!3277 = !DILocation(line: 128, column: 8, scope: !3274)
!3278 = !DILocation(line: 129, column: 16, scope: !3274)
!3279 = !DILocation(line: 129, column: 10, scope: !3274)
!3280 = !DILocation(line: 129, column: 8, scope: !3274)
!3281 = !DILocation(line: 130, column: 11, scope: !3274)
!3282 = !DILocation(line: 130, column: 10, scope: !3274)
!3283 = !DILocation(line: 130, column: 21, scope: !3274)
!3284 = !DILocation(line: 130, column: 19, scope: !3274)
!3285 = !DILocation(line: 130, column: 13, scope: !3274)
!3286 = !DILocation(line: 130, column: 8, scope: !3274)
!3287 = !DILocation(line: 131, column: 10, scope: !3274)
!3288 = !DILocation(line: 131, column: 15, scope: !3274)
!3289 = !DILocation(line: 131, column: 13, scope: !3274)
!3290 = !DILocation(line: 131, column: 20, scope: !3274)
!3291 = !DILocation(line: 131, column: 25, scope: !3274)
!3292 = !DILocation(line: 131, column: 23, scope: !3274)
!3293 = !DILocation(line: 131, column: 18, scope: !3274)
!3294 = !DILocation(line: 131, column: 8, scope: !3274)
!3295 = !DILocation(line: 132, column: 23, scope: !3274)
!3296 = !DILocation(line: 132, column: 21, scope: !3274)
!3297 = !DILocation(line: 132, column: 10, scope: !3274)
!3298 = !DILocation(line: 132, column: 8, scope: !3274)
!3299 = !DILocation(line: 133, column: 9, scope: !3274)
!3300 = !DILocation(line: 133, column: 20, scope: !3274)
!3301 = !DILocation(line: 133, column: 18, scope: !3274)
!3302 = !DILocation(line: 133, column: 12, scope: !3274)
!3303 = !DILocation(line: 133, column: 7, scope: !3274)
!3304 = !DILocation(line: 134, column: 16, scope: !3274)
!3305 = !DILocation(line: 134, column: 14, scope: !3274)
!3306 = !DILocation(line: 134, column: 20, scope: !3274)
!3307 = !DILocation(line: 134, column: 25, scope: !3274)
!3308 = !DILocation(line: 134, column: 23, scope: !3274)
!3309 = !DILocation(line: 134, column: 18, scope: !3274)
!3310 = !DILocation(line: 134, column: 8, scope: !3274)
!3311 = !DILocation(line: 135, column: 23, scope: !3274)
!3312 = !DILocation(line: 135, column: 21, scope: !3274)
!3313 = !DILocation(line: 135, column: 10, scope: !3274)
!3314 = !DILocation(line: 135, column: 8, scope: !3274)
!3315 = !DILocation(line: 136, column: 10, scope: !3274)
!3316 = !DILocation(line: 136, column: 21, scope: !3274)
!3317 = !DILocation(line: 136, column: 19, scope: !3274)
!3318 = !DILocation(line: 136, column: 13, scope: !3274)
!3319 = !DILocation(line: 136, column: 6, scope: !3274)
!3320 = !DILocation(line: 136, column: 8, scope: !3274)
!3321 = !DILocation(line: 137, column: 20, scope: !3274)
!3322 = !DILocation(line: 137, column: 19, scope: !3274)
!3323 = !DILocation(line: 137, column: 16, scope: !3274)
!3324 = !DILocation(line: 137, column: 7, scope: !3274)
!3325 = !DILocation(line: 137, column: 5, scope: !3274)
!3326 = !DILocation(line: 137, column: 10, scope: !3274)
!3327 = !DILocation(line: 138, column: 3, scope: !3274)
!3328 = !DILocation(line: 122, column: 24, scope: !3329)
!3329 = !DILexicalBlockFile(scope: !3269, file: !3114, discriminator: 2)
!3330 = !DILocation(line: 122, column: 3, scope: !3329)
!3331 = !DILocation(line: 140, column: 3, scope: !3214)
!3332 = distinct !DISubprogram(name: "timer_clear", scope: !74, file: !74, line: 37, type: !938, isLocal: false, isDefinition: true, scopeLine: 38, flags: DIFlagPrototyped, isOptimized: false, unit: !70, variables: !68)
!3333 = !DILocalVariable(name: "n", arg: 1, scope: !3332, file: !74, line: 37, type: !23)
!3334 = !DILocation(line: 37, column: 23, scope: !3332)
!3335 = !DILocation(line: 39, column: 13, scope: !3332)
!3336 = !DILocation(line: 39, column: 5, scope: !3332)
!3337 = !DILocation(line: 39, column: 16, scope: !3332)
!3338 = !DILocation(line: 40, column: 11, scope: !3332)
!3339 = !DILocation(line: 40, column: 5, scope: !3332)
!3340 = !DILocation(line: 40, column: 14, scope: !3332)
!3341 = !DILocation(line: 41, column: 1, scope: !3332)
!3342 = distinct !DISubprogram(name: "timer_start", scope: !74, file: !74, line: 47, type: !938, isLocal: false, isDefinition: true, scopeLine: 48, flags: DIFlagPrototyped, isOptimized: false, unit: !70, variables: !68)
!3343 = !DILocalVariable(name: "n", arg: 1, scope: !3342, file: !74, line: 47, type: !23)
!3344 = !DILocation(line: 47, column: 23, scope: !3342)
!3345 = !DILocation(line: 49, column: 16, scope: !3342)
!3346 = !DILocation(line: 49, column: 11, scope: !3342)
!3347 = !DILocation(line: 49, column: 5, scope: !3342)
!3348 = !DILocation(line: 49, column: 5, scope: !3349)
!3349 = !DILexicalBlockFile(scope: !3342, file: !74, discriminator: 1)
!3350 = !DILocation(line: 49, column: 14, scope: !3342)
!3351 = !DILocation(line: 50, column: 1, scope: !3342)
!3352 = distinct !DISubprogram(name: "elapsed_time", scope: !74, file: !74, line: 14, type: !3353, isLocal: true, isDefinition: true, scopeLine: 15, flags: DIFlagPrototyped, isOptimized: false, unit: !70, variables: !68)
!3353 = !DISubroutineType(types: !65)
!3354 = !DILocalVariable(name: "t", scope: !3352, file: !74, line: 16, type: !9)
!3355 = !DILocation(line: 16, column: 12, scope: !3352)
!3356 = !DILocation(line: 20, column: 9, scope: !3352)
!3357 = !DILocation(line: 20, column: 7, scope: !3352)
!3358 = !DILocation(line: 24, column: 13, scope: !3352)
!3359 = !DILocation(line: 24, column: 5, scope: !3352)
!3360 = distinct !DISubprogram(name: "timer_stop", scope: !74, file: !74, line: 56, type: !938, isLocal: false, isDefinition: true, scopeLine: 57, flags: DIFlagPrototyped, isOptimized: false, unit: !70, variables: !68)
!3361 = !DILocalVariable(name: "n", arg: 1, scope: !3360, file: !74, line: 56, type: !23)
!3362 = !DILocation(line: 56, column: 22, scope: !3360)
!3363 = !DILocalVariable(name: "t", scope: !3360, file: !74, line: 58, type: !9)
!3364 = !DILocation(line: 58, column: 12, scope: !3360)
!3365 = !DILocalVariable(name: "now", scope: !3360, file: !74, line: 58, type: !9)
!3366 = !DILocation(line: 58, column: 15, scope: !3360)
!3367 = !DILocation(line: 60, column: 11, scope: !3360)
!3368 = !DILocation(line: 60, column: 9, scope: !3360)
!3369 = !DILocation(line: 61, column: 9, scope: !3360)
!3370 = !DILocation(line: 61, column: 21, scope: !3360)
!3371 = !DILocation(line: 61, column: 15, scope: !3360)
!3372 = !DILocation(line: 61, column: 13, scope: !3360)
!3373 = !DILocation(line: 61, column: 7, scope: !3360)
!3374 = !DILocation(line: 62, column: 19, scope: !3360)
!3375 = !DILocation(line: 62, column: 13, scope: !3360)
!3376 = !DILocation(line: 62, column: 5, scope: !3360)
!3377 = !DILocation(line: 62, column: 16, scope: !3360)
!3378 = !DILocation(line: 63, column: 11, scope: !3360)
!3379 = !DILocation(line: 63, column: 5, scope: !3360)
!3380 = !DILocation(line: 63, column: 13, scope: !3360)
!3381 = !DILocation(line: 65, column: 1, scope: !3360)
!3382 = distinct !DISubprogram(name: "timer_read", scope: !74, file: !74, line: 71, type: !3383, isLocal: false, isDefinition: true, scopeLine: 72, flags: DIFlagPrototyped, isOptimized: false, unit: !70, variables: !68)
!3383 = !DISubroutineType(types: !3384)
!3384 = !{!9, !23}
!3385 = !DILocalVariable(name: "n", arg: 1, scope: !3382, file: !74, line: 71, type: !23)
!3386 = !DILocation(line: 71, column: 24, scope: !3382)
!3387 = !DILocation(line: 73, column: 21, scope: !3382)
!3388 = !DILocation(line: 73, column: 13, scope: !3382)
!3389 = !DILocation(line: 73, column: 5, scope: !3382)
!3390 = distinct !DISubprogram(name: "timer_count", scope: !74, file: !74, line: 76, type: !3391, isLocal: false, isDefinition: true, scopeLine: 77, flags: DIFlagPrototyped, isOptimized: false, unit: !70, variables: !68)
!3391 = !DISubroutineType(types: !3392)
!3392 = !{!80, !23}
!3393 = !DILocalVariable(name: "n", arg: 1, scope: !3390, file: !74, line: 76, type: !23)
!3394 = !DILocation(line: 76, column: 27, scope: !3390)
!3395 = !DILocation(line: 78, column: 18, scope: !3390)
!3396 = !DILocation(line: 78, column: 12, scope: !3390)
!3397 = !DILocation(line: 78, column: 5, scope: !3390)
!3398 = !DILocalVariable(name: "t", arg: 1, scope: !85, file: !82, line: 7, type: !21)
!3399 = !DILocation(line: 7, column: 20, scope: !85)
!3400 = !DILocalVariable(name: "tv", scope: !85, file: !82, line: 11, type: !3401)
!3401 = !DICompositeType(tag: DW_TAG_structure_type, name: "timeval", file: !3402, line: 30, size: 128, align: 64, elements: !3403)
!3402 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/time.h", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common")
!3403 = !{!3404, !3407}
!3404 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !3401, file: !3402, line: 32, baseType: !3405, size: 64, align: 64)
!3405 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !3406, line: 139, baseType: !320)
!3406 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "/media/norouzi/90cafd61-f918-48a5-9298-db353cb6be30/software/benchmarks/NAS/NPB3.3-OMP-C/common")
!3407 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !3401, file: !3402, line: 33, baseType: !3408, size: 64, align: 64, offset: 64)
!3408 = !DIDerivedType(tag: DW_TAG_typedef, name: "__suseconds_t", file: !3406, line: 141, baseType: !320)
!3409 = !DILocation(line: 11, column: 19, scope: !85)
!3410 = !DILocation(line: 12, column: 4, scope: !85)
!3411 = !DILocation(line: 13, column: 8, scope: !3412)
!3412 = distinct !DILexicalBlock(scope: !85, file: !82, line: 13, column: 8)
!3413 = !DILocation(line: 13, column: 12, scope: !3412)
!3414 = !DILocation(line: 13, column: 8, scope: !85)
!3415 = !DILocation(line: 13, column: 26, scope: !3416)
!3416 = !DILexicalBlockFile(scope: !3412, file: !82, discriminator: 1)
!3417 = !DILocation(line: 13, column: 23, scope: !3416)
!3418 = !DILocation(line: 13, column: 21, scope: !3416)
!3419 = !DILocation(line: 13, column: 17, scope: !3416)
!3420 = !DILocation(line: 14, column: 13, scope: !85)
!3421 = !DILocation(line: 14, column: 22, scope: !85)
!3422 = !DILocation(line: 14, column: 20, scope: !85)
!3423 = !DILocation(line: 14, column: 9, scope: !85)
!3424 = !DILocation(line: 14, column: 39, scope: !85)
!3425 = !DILocation(line: 14, column: 36, scope: !85)
!3426 = !DILocation(line: 14, column: 35, scope: !85)
!3427 = !DILocation(line: 14, column: 27, scope: !85)
!3428 = !DILocation(line: 14, column: 5, scope: !85)
!3429 = !DILocation(line: 14, column: 7, scope: !85)
!3430 = !DILocation(line: 15, column: 1, scope: !85)
