; ModuleID = '<stdin>'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%ident_t = type { i32, i32, i32, i32, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.timeval = type { i64, i64 }
%struct.timezone = type { i32, i32 }

@.gomp_critical_user_.reduction.var = common global [8 x i32] zeroinitializer
@q = internal global [10 x double] zeroinitializer, align 16
@qq = internal thread_local global [10 x double] zeroinitializer, align 16
@x = internal thread_local global [131072 x double] zeroinitializer, align 16
@0 = private unnamed_addr constant %ident_t { i32 0, i32 2, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.6, i32 0, i32 0) }, align 8
@main.dum = private unnamed_addr constant [3 x double] [double 1.000000e+00, double 1.000000e+00, double 1.000000e+00], align 16
@.str = private unnamed_addr constant [11 x i8] c"timer.flag\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"%15.0lf\00", align 1
@.str.3 = private unnamed_addr constant [58 x i8] c"\0A\0A NAS Parallel Benchmarks (NPB3.3-OMP-C) - EP Benchmark\0A\00", align 1
@.str.4 = private unnamed_addr constant [44 x i8] c"\0A Number of random numbers generated: %15s\0A\00", align 1
@.str.5 = private unnamed_addr constant [46 x i8] c"\0A Number of available threads:          %13d\0A\00", align 1
@1 = private unnamed_addr constant [20 x i8] c";ep.c;main;130;11;;\00"
@2 = private unnamed_addr constant [20 x i8] c";ep.c;main;138;11;;\00"
@3 = private unnamed_addr constant [20 x i8] c";ep.c;main;177;11;;\00"
@.str.9 = private unnamed_addr constant [25 x i8] c"\0AEP Benchmark Results:\0A\0A\00", align 1
@.str.10 = private unnamed_addr constant [19 x i8] c"CPU Time =%10.4lf\0A\00", align 1
@.str.11 = private unnamed_addr constant [11 x i8] c"N = 2^%5d\0A\00", align 1
@.str.12 = private unnamed_addr constant [30 x i8] c"No. Gaussian Pairs = %15.0lf\0A\00", align 1
@.str.13 = private unnamed_addr constant [26 x i8] c"Sums = %25.15lE %25.15lE\0A\00", align 1
@.str.14 = private unnamed_addr constant [10 x i8] c"Counts: \0A\00", align 1
@.str.15 = private unnamed_addr constant [12 x i8] c"%3d%15.0lf\0A\00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c"EP\00", align 1
@.str.17 = private unnamed_addr constant [25 x i8] c"Random numbers generated\00", align 1
@.str.18 = private unnamed_addr constant [6 x i8] c"3.3.1\00", align 1
@.str.19 = private unnamed_addr constant [12 x i8] c"21 Feb 2017\00", align 1
@.str.20 = private unnamed_addr constant [7 x i8] c"(none)\00", align 1
@.str.21 = private unnamed_addr constant [47 x i8] c"-I ../common -I /home/amiryousefi/buildfori...\00", align 1
@.str.22 = private unnamed_addr constant [7 x i8] c"randdp\00", align 1
@.str.23 = private unnamed_addr constant [34 x i8] c"\0ATotal time:     %9.3lf (%6.2lf)\0A\00", align 1
@.str.24 = private unnamed_addr constant [33 x i8] c"Gaussian pairs: %9.3lf (%6.2lf)\0A\00", align 1
@.str.25 = private unnamed_addr constant [33 x i8] c"Random numbers: %9.3lf (%6.2lf)\0A\00", align 1
@4 = private unnamed_addr constant [20 x i8] c";ep.c;main;183;13;;\00"
@5 = private unnamed_addr constant [20 x i8] c";ep.c;main;183;64;;\00"
@.str.6 = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@6 = private unnamed_addr constant %ident_t { i32 0, i32 2, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.28, i32 0, i32 0) }, align 8
@7 = private unnamed_addr constant [38 x i8] c";print_results.c;print_results;25;9;;\00"
@.str.1.4 = private unnamed_addr constant [28 x i8] c"\0A\0A %s Benchmark Completed.\0A\00", align 1
@.str.2.5 = private unnamed_addr constant [37 x i8] c" Class           =             %12c\0A\00", align 1
@.str.3.6 = private unnamed_addr constant [8 x i8] c"%15.0lf\00", align 1
@.str.4.7 = private unnamed_addr constant [34 x i8] c" Size            =          %15s\0A\00", align 1
@.str.5.8 = private unnamed_addr constant [37 x i8] c" Size            =             %12d\0A\00", align 1
@.str.6.9 = private unnamed_addr constant [42 x i8] c" Size            =           %4dx%4dx%4d\0A\00", align 1
@.str.7 = private unnamed_addr constant [37 x i8] c" Iterations      =             %12d\0A\00", align 1
@.str.8 = private unnamed_addr constant [40 x i8] c" Time in seconds =             %12.2lf\0A\00", align 1
@.str.9.10 = private unnamed_addr constant [37 x i8] c" Total threads   =             %12d\0A\00", align 1
@.str.10.11 = private unnamed_addr constant [37 x i8] c" Avail threads   =             %12d\0A\00", align 1
@.str.11.12 = private unnamed_addr constant [54 x i8] c" Warning: Threads used differ from threads available\0A\00", align 1
@.str.12.13 = private unnamed_addr constant [37 x i8] c" Mop/s total     =          %15.2lf\0A\00", align 1
@.str.13.14 = private unnamed_addr constant [37 x i8] c" Mop/s/thread    =          %15.2lf\0A\00", align 1
@.str.14.15 = private unnamed_addr constant [25 x i8] c" Operation type  = %24s\0A\00", align 1
@.str.15.16 = private unnamed_addr constant [37 x i8] c" Verification    =             %12s\0A\00", align 1
@.str.16.17 = private unnamed_addr constant [11 x i8] c"SUCCESSFUL\00", align 1
@.str.17.18 = private unnamed_addr constant [13 x i8] c"UNSUCCESSFUL\00", align 1
@.str.18.19 = private unnamed_addr constant [37 x i8] c" Version         =             %12s\0A\00", align 1
@.str.19.20 = private unnamed_addr constant [37 x i8] c" Compile date    =             %12s\0A\00", align 1
@.str.20.21 = private unnamed_addr constant [42 x i8] c"\0A Compile options:\0A    CC           = %s\0A\00", align 1
@.str.21.22 = private unnamed_addr constant [23 x i8] c"    CLINK        = %s\0A\00", align 1
@.str.22.23 = private unnamed_addr constant [23 x i8] c"    C_LIB        = %s\0A\00", align 1
@.str.23.24 = private unnamed_addr constant [23 x i8] c"    C_INC        = %s\0A\00", align 1
@.str.24.25 = private unnamed_addr constant [23 x i8] c"    CFLAGS       = %s\0A\00", align 1
@.str.25.26 = private unnamed_addr constant [23 x i8] c"    CLINKFLAGS   = %s\0A\00", align 1
@.str.26 = private unnamed_addr constant [23 x i8] c"    RAND         = %s\0A\00", align 1
@.str.27 = private unnamed_addr constant [195 x i8] c"\0A--------------------------------------\0A Please send all errors/feedbacks to:\0A Center for Manycore Programming\0A cmp@aces.snu.ac.kr\0A http://aces.snu.ac.kr\0A--------------------------------------\0A\0A\00", align 1
@8 = private unnamed_addr constant [39 x i8] c";print_results.c;print_results;27;13;;\00"
@.str.28 = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@count = internal thread_local global [64 x i32] zeroinitializer, align 16
@elapsed = internal thread_local global [64 x double] zeroinitializer, align 16
@start = internal thread_local global [64 x double] zeroinitializer, align 16
@wtime_.sec = internal global i32 -1, align 4
@.str.29 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.30 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.31 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.32 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.33 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.34 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.35 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.36 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.37 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.38 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.39 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.40 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.41 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.42 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.43 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.44 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.45 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.46 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.47 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.48 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.49 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.50 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.51 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.52 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.53 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.54 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.55 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.56 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.57 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.58 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.59 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.60 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.61 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.62 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.63 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.64 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.65 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.66 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.67 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.68 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.69 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.70 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.71 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.72 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.73 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.74 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.75 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.76 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.77 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.78 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.79 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.80 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.81 = private unnamed_addr constant [5 x i8] c"main\00"
@.str.82 = private unnamed_addr constant [15 x i8] c".omp_outlined.\00"
@.str.83 = private unnamed_addr constant [15 x i8] c".omp_outlined.\00"
@9 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.84 = private unnamed_addr constant [15 x i8] c".omp_outlined.\00"
@10 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.85 = private unnamed_addr constant [17 x i8] c".omp_outlined..7\00"
@.str.86 = private unnamed_addr constant [17 x i8] c".omp_outlined..7\00"
@11 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.87 = private unnamed_addr constant [17 x i8] c".omp_outlined..7\00"
@12 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.88 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@.str.89 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@13 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.90 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@14 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.91 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@15 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.92 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@16 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.93 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@17 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.94 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@18 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.95 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@19 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.96 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@20 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.97 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@21 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.98 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@22 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.99 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@23 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.100 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@24 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.101 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@25 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.102 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@26 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.103 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@27 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.104 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@28 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.105 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@29 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.106 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@30 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.107 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@31 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.108 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@32 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.109 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@33 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.110 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@34 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.111 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@35 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.112 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@36 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.113 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@.str.114 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@37 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.115 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@38 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.116 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@39 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.117 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@40 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.118 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@41 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.119 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@42 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.120 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@43 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.121 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@44 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.122 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@45 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.123 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@46 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.124 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@47 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.125 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@48 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.126 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@49 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.127 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@50 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.128 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@51 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.129 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@52 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.130 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@53 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.131 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@54 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.132 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@55 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.133 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@56 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.134 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@57 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.135 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@58 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.136 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@59 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.137 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@60 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.138 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@61 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.139 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@62 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.140 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@63 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.141 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@64 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.142 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@65 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.143 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@66 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.144 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@67 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.145 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@68 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.146 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@69 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.147 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@70 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.148 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@71 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.149 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@72 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.150 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@73 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.151 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@74 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.152 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@75 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.153 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@76 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.154 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@77 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.155 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@78 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.156 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@79 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.157 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@80 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.158 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@81 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.159 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@82 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.160 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@83 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.161 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@84 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.162 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@85 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.163 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@86 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.164 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@87 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.165 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@88 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.166 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@89 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.167 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@90 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.168 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@91 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.169 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@92 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.170 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@93 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.171 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@94 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.172 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@95 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.173 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@96 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.174 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@97 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.175 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@98 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.176 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@99 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.177 = private unnamed_addr constant [17 x i8] c".omp_outlined..8\00"
@100 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.178 = private unnamed_addr constant [30 x i8] c".omp.reduction.reduction_func\00"
@.str.179 = private unnamed_addr constant [30 x i8] c".omp.reduction.reduction_func\00"
@.str.180 = private unnamed_addr constant [30 x i8] c".omp.reduction.reduction_func\00"
@.str.181 = private unnamed_addr constant [30 x i8] c".omp.reduction.reduction_func\00"
@.str.182 = private unnamed_addr constant [30 x i8] c".omp.reduction.reduction_func\00"
@.str.183 = private unnamed_addr constant [30 x i8] c".omp.reduction.reduction_func\00"
@.str.184 = private unnamed_addr constant [30 x i8] c".omp.reduction.reduction_func\00"
@101 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.185 = private unnamed_addr constant [30 x i8] c".omp.reduction.reduction_func\00"
@102 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.186 = private unnamed_addr constant [30 x i8] c".omp.reduction.reduction_func\00"
@103 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.187 = private unnamed_addr constant [30 x i8] c".omp.reduction.reduction_func\00"
@104 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.188 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.189 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.190 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.191 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.192 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.193 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.194 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.195 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.196 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.197 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.198 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.199 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.200 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.201 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.202 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.203 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.204 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.205 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.206 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.207 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.208 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.209 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.210 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.211 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.212 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.213 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.214 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.215 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.216 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.217 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.218 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.219 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.220 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.221 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.222 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.223 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.224 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.225 = private unnamed_addr constant [14 x i8] c"print_results\00"
@.str.226 = private unnamed_addr constant [17 x i8] c".omp_outlined..3\00"
@.str.227 = private unnamed_addr constant [17 x i8] c".omp_outlined..3\00"
@105 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.228 = private unnamed_addr constant [17 x i8] c".omp_outlined..3\00"
@106 = private unnamed_addr constant [5 x i8] c".str\00"
@.str.229 = private unnamed_addr constant [7 x i8] c"randlc\00"
@.str.230 = private unnamed_addr constant [7 x i8] c"randlc\00"
@.str.231 = private unnamed_addr constant [7 x i8] c"randlc\00"
@.str.232 = private unnamed_addr constant [7 x i8] c"randlc\00"
@.str.233 = private unnamed_addr constant [7 x i8] c"randlc\00"
@.str.234 = private unnamed_addr constant [7 x i8] c"randlc\00"
@.str.235 = private unnamed_addr constant [7 x i8] c"randlc\00"
@.str.236 = private unnamed_addr constant [7 x i8] c"randlc\00"
@.str.237 = private unnamed_addr constant [7 x i8] c"randlc\00"
@.str.238 = private unnamed_addr constant [7 x i8] c"randlc\00"
@.str.239 = private unnamed_addr constant [7 x i8] c"randlc\00"
@.str.240 = private unnamed_addr constant [7 x i8] c"randlc\00"
@.str.241 = private unnamed_addr constant [7 x i8] c"randlc\00"
@.str.242 = private unnamed_addr constant [7 x i8] c"randlc\00"
@.str.243 = private unnamed_addr constant [7 x i8] c"randlc\00"
@.str.244 = private unnamed_addr constant [7 x i8] c"randlc\00"
@.str.245 = private unnamed_addr constant [7 x i8] c"randlc\00"
@.str.246 = private unnamed_addr constant [7 x i8] c"randlc\00"
@.str.247 = private unnamed_addr constant [7 x i8] c"randlc\00"
@.str.248 = private unnamed_addr constant [7 x i8] c"randlc\00"
@.str.249 = private unnamed_addr constant [7 x i8] c"randlc\00"
@.str.250 = private unnamed_addr constant [7 x i8] c"randlc\00"
@.str.251 = private unnamed_addr constant [7 x i8] c"randlc\00"
@.str.252 = private unnamed_addr constant [7 x i8] c"randlc\00"
@.str.253 = private unnamed_addr constant [7 x i8] c"randlc\00"
@.str.254 = private unnamed_addr constant [7 x i8] c"randlc\00"
@.str.255 = private unnamed_addr constant [7 x i8] c"randlc\00"
@.str.256 = private unnamed_addr constant [7 x i8] c"vranlc\00"
@.str.257 = private unnamed_addr constant [7 x i8] c"vranlc\00"
@.str.258 = private unnamed_addr constant [7 x i8] c"vranlc\00"
@.str.259 = private unnamed_addr constant [7 x i8] c"vranlc\00"
@.str.260 = private unnamed_addr constant [7 x i8] c"vranlc\00"
@.str.261 = private unnamed_addr constant [7 x i8] c"vranlc\00"
@.str.262 = private unnamed_addr constant [7 x i8] c"vranlc\00"
@.str.263 = private unnamed_addr constant [7 x i8] c"vranlc\00"
@.str.264 = private unnamed_addr constant [7 x i8] c"vranlc\00"
@.str.265 = private unnamed_addr constant [7 x i8] c"vranlc\00"
@.str.266 = private unnamed_addr constant [7 x i8] c"vranlc\00"
@.str.267 = private unnamed_addr constant [7 x i8] c"vranlc\00"
@.str.268 = private unnamed_addr constant [7 x i8] c"vranlc\00"
@.str.269 = private unnamed_addr constant [7 x i8] c"vranlc\00"
@.str.270 = private unnamed_addr constant [7 x i8] c"vranlc\00"
@.str.271 = private unnamed_addr constant [7 x i8] c"vranlc\00"
@.str.272 = private unnamed_addr constant [7 x i8] c"vranlc\00"
@.str.273 = private unnamed_addr constant [7 x i8] c"vranlc\00"
@.str.274 = private unnamed_addr constant [7 x i8] c"vranlc\00"
@.str.275 = private unnamed_addr constant [7 x i8] c"vranlc\00"
@.str.276 = private unnamed_addr constant [7 x i8] c"vranlc\00"
@.str.277 = private unnamed_addr constant [7 x i8] c"vranlc\00"
@.str.278 = private unnamed_addr constant [7 x i8] c"vranlc\00"
@.str.279 = private unnamed_addr constant [7 x i8] c"vranlc\00"
@.str.280 = private unnamed_addr constant [7 x i8] c"vranlc\00"
@.str.281 = private unnamed_addr constant [7 x i8] c"vranlc\00"
@.str.282 = private unnamed_addr constant [7 x i8] c"vranlc\00"
@.str.283 = private unnamed_addr constant [7 x i8] c"vranlc\00"
@.str.284 = private unnamed_addr constant [7 x i8] c"vranlc\00"
@.str.285 = private unnamed_addr constant [7 x i8] c"vranlc\00"
@.str.286 = private unnamed_addr constant [7 x i8] c"vranlc\00"
@.str.287 = private unnamed_addr constant [12 x i8] c"timer_clear\00"
@.str.288 = private unnamed_addr constant [12 x i8] c"timer_clear\00"
@.str.289 = private unnamed_addr constant [12 x i8] c"timer_start\00"
@.str.290 = private unnamed_addr constant [13 x i8] c"elapsed_time\00"
@.str.291 = private unnamed_addr constant [11 x i8] c"timer_stop\00"
@.str.292 = private unnamed_addr constant [11 x i8] c"timer_stop\00"
@.str.293 = private unnamed_addr constant [11 x i8] c"timer_stop\00"
@.str.294 = private unnamed_addr constant [11 x i8] c"timer_stop\00"
@.str.295 = private unnamed_addr constant [11 x i8] c"timer_stop\00"
@.str.296 = private unnamed_addr constant [11 x i8] c"timer_stop\00"
@.str.297 = private unnamed_addr constant [11 x i8] c"timer_stop\00"
@.str.298 = private unnamed_addr constant [11 x i8] c"timer_stop\00"
@.str.299 = private unnamed_addr constant [11 x i8] c"timer_read\00"
@.str.300 = private unnamed_addr constant [11 x i8] c"timer_read\00"
@.str.301 = private unnamed_addr constant [12 x i8] c"timer_count\00"
@.str.302 = private unnamed_addr constant [12 x i8] c"timer_count\00"
@.str.303 = private unnamed_addr constant [7 x i8] c"wtime_\00"
@.str.304 = private unnamed_addr constant [7 x i8] c"wtime_\00"
@.str.305 = private unnamed_addr constant [7 x i8] c"wtime_\00"
@.str.306 = private unnamed_addr constant [7 x i8] c"wtime_\00"
@.str.307 = private unnamed_addr constant [7 x i8] c"wtime_\00"
@.str.308 = private unnamed_addr constant [7 x i8] c"wtime_\00"

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 !dbg !55 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %Mops = alloca double, align 8
  %t1 = alloca double, align 8
  %t2 = alloca double, align 8
  %t3 = alloca double, align 8
  %t4 = alloca double, align 8
  %x1 = alloca double, align 8
  %x2 = alloca double, align 8
  %sx = alloca double, align 8
  %sy = alloca double, align 8
  %tm = alloca double, align 8
  %an = alloca double, align 8
  %tt = alloca double, align 8
  %gc = alloca double, align 8
  %sx_verify_value = alloca double, align 8
  %sy_verify_value = alloca double, align 8
  %sx_err = alloca double, align 8
  %sy_err = alloca double, align 8
  %np = alloca i32, align 4
  %i = alloca i32, align 4
  %ik = alloca i32, align 4
  %kk = alloca i32, align 4
  %l = alloca i32, align 4
  %k = alloca i32, align 4
  %nit = alloca i32, align 4
  %k_offset = alloca i32, align 4
  %j = alloca i32, align 4
  %verified = alloca i32, align 4
  %timers_enabled = alloca i32, align 4
  %dum = alloca [3 x double], align 16
  %size = alloca [16 x i8], align 16
  %fp = alloca %struct._IO_FILE*, align 8
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  %2 = ptrtoint i32* %retval to i64
  store i32 0, i32* %retval, align 4
  %3 = ptrtoint i32* %argc.addr to i64
  store i32 %argc, i32* %argc.addr, align 4
  call void @__DiscoPoPOpenMPInitialize()
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !61, metadata !62), !dbg !63
  %4 = ptrtoint i8*** %argv.addr to i64
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !64, metadata !62), !dbg !65
  call void @llvm.dbg.declare(metadata double* %Mops, metadata !66, metadata !62), !dbg !67
  call void @llvm.dbg.declare(metadata double* %t1, metadata !68, metadata !62), !dbg !69
  call void @llvm.dbg.declare(metadata double* %t2, metadata !70, metadata !62), !dbg !71
  call void @llvm.dbg.declare(metadata double* %t3, metadata !72, metadata !62), !dbg !73
  call void @llvm.dbg.declare(metadata double* %t4, metadata !74, metadata !62), !dbg !75
  call void @llvm.dbg.declare(metadata double* %x1, metadata !76, metadata !62), !dbg !77
  call void @llvm.dbg.declare(metadata double* %x2, metadata !78, metadata !62), !dbg !79
  call void @llvm.dbg.declare(metadata double* %sx, metadata !80, metadata !62), !dbg !81
  call void @llvm.dbg.declare(metadata double* %sy, metadata !82, metadata !62), !dbg !83
  call void @llvm.dbg.declare(metadata double* %tm, metadata !84, metadata !62), !dbg !85
  call void @llvm.dbg.declare(metadata double* %an, metadata !86, metadata !62), !dbg !87
  call void @llvm.dbg.declare(metadata double* %tt, metadata !88, metadata !62), !dbg !89
  call void @llvm.dbg.declare(metadata double* %gc, metadata !90, metadata !62), !dbg !91
  call void @llvm.dbg.declare(metadata double* %sx_verify_value, metadata !92, metadata !62), !dbg !93
  call void @llvm.dbg.declare(metadata double* %sy_verify_value, metadata !94, metadata !62), !dbg !95
  call void @llvm.dbg.declare(metadata double* %sx_err, metadata !96, metadata !62), !dbg !97
  call void @llvm.dbg.declare(metadata double* %sy_err, metadata !98, metadata !62), !dbg !99
  call void @llvm.dbg.declare(metadata i32* %np, metadata !100, metadata !62), !dbg !101
  call void @llvm.dbg.declare(metadata i32* %i, metadata !102, metadata !62), !dbg !103
  call void @llvm.dbg.declare(metadata i32* %ik, metadata !104, metadata !62), !dbg !105
  call void @llvm.dbg.declare(metadata i32* %kk, metadata !106, metadata !62), !dbg !107
  call void @llvm.dbg.declare(metadata i32* %l, metadata !108, metadata !62), !dbg !109
  call void @llvm.dbg.declare(metadata i32* %k, metadata !110, metadata !62), !dbg !111
  call void @llvm.dbg.declare(metadata i32* %nit, metadata !112, metadata !62), !dbg !113
  call void @llvm.dbg.declare(metadata i32* %k_offset, metadata !114, metadata !62), !dbg !115
  call void @llvm.dbg.declare(metadata i32* %j, metadata !116, metadata !62), !dbg !117
  call void @llvm.dbg.declare(metadata i32* %verified, metadata !118, metadata !62), !dbg !120
  call void @llvm.dbg.declare(metadata i32* %timers_enabled, metadata !121, metadata !62), !dbg !122
  call void @llvm.dbg.declare(metadata [3 x double]* %dum, metadata !123, metadata !62), !dbg !127
  %5 = bitcast [3 x double]* %dum to i8*, !dbg !127
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %5, i8* bitcast ([3 x double]* @main.dum to i8*), i64 24, i32 16, i1 false), !dbg !127
  call void @llvm.dbg.declare(metadata [16 x i8]* %size, metadata !128, metadata !62), !dbg !132
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %fp, metadata !133, metadata !62), !dbg !193
  %call = call %struct._IO_FILE* @fopen(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0)), !dbg !194
  %6 = ptrtoint %struct._IO_FILE** %fp to i64
  store %struct._IO_FILE* %call, %struct._IO_FILE** %fp, align 8, !dbg !196
  %cmp = icmp eq %struct._IO_FILE* %call, null, !dbg !197
  br i1 %cmp, label %if.then, label %if.else, !dbg !198

if.then:                                          ; preds = %entry
  %7 = ptrtoint i32* %timers_enabled to i64
  store i32 0, i32* %timers_enabled, align 4, !dbg !199
  br label %if.end, !dbg !201

if.else:                                          ; preds = %entry
  %8 = ptrtoint i32* %timers_enabled to i64
  store i32 1, i32* %timers_enabled, align 4, !dbg !202
  %9 = ptrtoint %struct._IO_FILE** %fp to i64
  call void @__DiscoPoPOpenMPRead(i64 %9, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.29, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !204
  %call1 = call i32 @fclose(%struct._IO_FILE* %10), !dbg !205
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %size, i32 0, i32 0, !dbg !206
  %call2 = call double @pow(double 2.000000e+00, double 2.500000e+01) #7, !dbg !207
  %call3 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i32 0, i32 0), double %call2) #7, !dbg !208
  %11 = ptrtoint i32* %j to i64
  store i32 14, i32* %j, align 4, !dbg !210
  %12 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %12, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.30, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %13 = load i32, i32* %j, align 4, !dbg !211
  %idxprom = sext i32 %13 to i64, !dbg !213
  %arrayidx = getelementptr inbounds [16 x i8], [16 x i8]* %size, i64 0, i64 %idxprom, !dbg !213
  %14 = ptrtoint i8* %arrayidx to i64
  call void @__DiscoPoPOpenMPRead(i64 %14, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.31, i32 0, i32 0), i32 0, i32 -1, i32 1)
  %15 = load i8, i8* %arrayidx, align 1, !dbg !213
  %conv = sext i8 %15 to i32, !dbg !213
  %cmp4 = icmp eq i32 %conv, 46, !dbg !214
  br i1 %cmp4, label %if.then6, label %if.end7, !dbg !215

if.then6:                                         ; preds = %if.end
  %16 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %16, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.32, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %17 = load i32, i32* %j, align 4, !dbg !216
  %dec = add nsw i32 %17, -1, !dbg !216
  %18 = ptrtoint i32* %j to i64
  store i32 %dec, i32* %j, align 4, !dbg !216
  br label %if.end7, !dbg !218

if.end7:                                          ; preds = %if.then6, %if.end
  %19 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.33, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %20 = load i32, i32* %j, align 4, !dbg !219
  %add = add nsw i32 %20, 1, !dbg !220
  %idxprom8 = sext i32 %add to i64, !dbg !221
  %arrayidx9 = getelementptr inbounds [16 x i8], [16 x i8]* %size, i64 0, i64 %idxprom8, !dbg !221
  %21 = ptrtoint i8* %arrayidx9 to i64
  store i8 0, i8* %arrayidx9, align 1, !dbg !222
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.3, i32 0, i32 0)), !dbg !223
  %arraydecay11 = getelementptr inbounds [16 x i8], [16 x i8]* %size, i32 0, i32 0, !dbg !224
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.4, i32 0, i32 0), i8* %arraydecay11), !dbg !225
  %call13 = call i32 @omp_get_max_threads(), !dbg !226
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.5, i32 0, i32 0), i32 %call13), !dbg !227
  %22 = ptrtoint i32* %verified to i64
  store i32 0, i32* %verified, align 4, !dbg !228
  %23 = ptrtoint i32* %np to i64
  store i32 256, i32* %np, align 4, !dbg !229
  %arrayidx15 = getelementptr inbounds [3 x double], [3 x double]* %dum, i64 0, i64 0, !dbg !230
  %arrayidx16 = getelementptr inbounds [3 x double], [3 x double]* %dum, i64 0, i64 1, !dbg !231
  %24 = ptrtoint double* %arrayidx16 to i64
  call void @__DiscoPoPOpenMPRead(i64 %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.34, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %25 = load double, double* %arrayidx16, align 8, !dbg !231
  %arrayidx17 = getelementptr inbounds [3 x double], [3 x double]* %dum, i64 0, i64 2, !dbg !232
  call void @vranlc(i32 0, double* %arrayidx15, double %25, double* %arrayidx17), !dbg !233
  %arrayidx18 = getelementptr inbounds [3 x double], [3 x double]* %dum, i64 0, i64 1, !dbg !234
  %arrayidx19 = getelementptr inbounds [3 x double], [3 x double]* %dum, i64 0, i64 2, !dbg !235
  %26 = ptrtoint double* %arrayidx19 to i64
  call void @__DiscoPoPOpenMPRead(i64 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i32 0, i32 0), i32 0, i32 -1, i32 16)
  %27 = load double, double* %arrayidx19, align 16, !dbg !235
  %call20 = call double @randlc(double* %arrayidx18, double %27), !dbg !236
  %arrayidx21 = getelementptr inbounds [3 x double], [3 x double]* %dum, i64 0, i64 0, !dbg !237
  %28 = ptrtoint double* %arrayidx21 to i64
  store double %call20, double* %arrayidx21, align 16, !dbg !238
  %29 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !239
  %30 = ptrtoint i8** %29 to i64
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @1, i32 0, i32 0), i8** %29, align 8, !dbg !239
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* %.kmpc_loc.addr, i32 0, void (i32*, i32*, ...)* bitcast (void (i32*, i32*)* @.omp_outlined. to void (i32*, i32*, ...)*)), !dbg !239
  %call22 = call double @fabs(double 1.000000e+00) #2, !dbg !240
  %call23 = call double @sqrt(double %call22) #7, !dbg !241
  %call24 = call double @log(double %call23) #7, !dbg !242
  %31 = ptrtoint double* %Mops to i64
  store double %call24, double* %Mops, align 8, !dbg !244
  %32 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !245
  %33 = ptrtoint i8** %32 to i64
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @2, i32 0, i32 0), i8** %32, align 8, !dbg !245
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* %.kmpc_loc.addr, i32 1, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*)* @.omp_outlined..7 to void (i32*, i32*, ...)*), i32* %timers_enabled), !dbg !245
  call void @timer_start(i32 0), !dbg !246
  %34 = ptrtoint double* %t1 to i64
  store double 0x41D2309CE5400000, double* %t1, align 8, !dbg !247
  %35 = call [131072 x double]* @_ZTWL1x(), !dbg !248
  %arraydecay25 = getelementptr inbounds [131072 x double], [131072 x double]* %35, i32 0, i32 0, !dbg !248
  call void @vranlc(i32 0, double* %t1, double 0x41D2309CE5400000, double* %arraydecay25), !dbg !249
  %36 = ptrtoint double* %t1 to i64
  store double 0x41D2309CE5400000, double* %t1, align 8, !dbg !250
  %37 = ptrtoint i32* %i to i64
  store i32 0, i32* %i, align 4, !dbg !251
  br label %for.cond, !dbg !253

for.cond:                                         ; preds = %for.inc, %if.end7
  %38 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %38, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.36, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %39 = load i32, i32* %i, align 4, !dbg !254
  %cmp26 = icmp slt i32 %39, 17, !dbg !257
  br i1 %cmp26, label %for.body, label %for.end, !dbg !258

for.body:                                         ; preds = %for.cond
  %40 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %40, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.37, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %41 = load double, double* %t1, align 8, !dbg !259
  %call28 = call double @randlc(double* %t1, double %41), !dbg !261
  %42 = ptrtoint double* %t2 to i64
  store double %call28, double* %t2, align 8, !dbg !262
  br label %for.inc, !dbg !263

for.inc:                                          ; preds = %for.body
  %43 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %43, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.38, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %44 = load i32, i32* %i, align 4, !dbg !264
  %inc = add nsw i32 %44, 1, !dbg !264
  %45 = ptrtoint i32* %i to i64
  store i32 %inc, i32* %i, align 4, !dbg !264
  br label %for.cond, !dbg !266, !llvm.loop !267

for.end:                                          ; preds = %for.cond
  %46 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %46, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.39, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %47 = load double, double* %t1, align 8, !dbg !269
  %48 = ptrtoint double* %an to i64
  store double %47, double* %an, align 8, !dbg !270
  %49 = ptrtoint double* %tt to i64
  store double 0x41B033C4D7000000, double* %tt, align 8, !dbg !271
  %50 = ptrtoint double* %gc to i64
  store double 0.000000e+00, double* %gc, align 8, !dbg !272
  %51 = ptrtoint double* %sx to i64
  store double 0.000000e+00, double* %sx, align 8, !dbg !273
  %52 = ptrtoint double* %sy to i64
  store double 0.000000e+00, double* %sy, align 8, !dbg !274
  %53 = ptrtoint i32* %i to i64
  store i32 0, i32* %i, align 4, !dbg !275
  br label %for.cond29, !dbg !277

for.cond29:                                       ; preds = %for.inc35, %for.end
  %54 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %54, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.40, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %55 = load i32, i32* %i, align 4, !dbg !278
  %cmp30 = icmp slt i32 %55, 10, !dbg !281
  br i1 %cmp30, label %for.body32, label %for.end37, !dbg !282

for.body32:                                       ; preds = %for.cond29
  %56 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %56, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.41, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %57 = load i32, i32* %i, align 4, !dbg !283
  %idxprom33 = sext i32 %57 to i64, !dbg !285
  %arrayidx34 = getelementptr inbounds [10 x double], [10 x double]* @q, i64 0, i64 %idxprom33, !dbg !285
  %58 = ptrtoint double* %arrayidx34 to i64
  store double 0.000000e+00, double* %arrayidx34, align 8, !dbg !286
  br label %for.inc35, !dbg !287

for.inc35:                                        ; preds = %for.body32
  %59 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %59, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.42, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %60 = load i32, i32* %i, align 4, !dbg !288
  %inc36 = add nsw i32 %60, 1, !dbg !288
  %61 = ptrtoint i32* %i to i64
  store i32 %inc36, i32* %i, align 4, !dbg !288
  br label %for.cond29, !dbg !290, !llvm.loop !291

for.end37:                                        ; preds = %for.cond29
  %62 = ptrtoint i32* %k_offset to i64
  store i32 -1, i32* %k_offset, align 4, !dbg !293
  %63 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !294
  %64 = ptrtoint i8** %63 to i64
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @3, i32 0, i32 0), i8** %63, align 8, !dbg !294
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* %.kmpc_loc.addr, i32 6, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, double*, double*, i32*, i32*, double*, i32*)* @.omp_outlined..8 to void (i32*, i32*, ...)*), double* %sx, double* %sy, i32* %np, i32* %k_offset, double* %an, i32* %timers_enabled), !dbg !294
  %65 = ptrtoint i32* %i to i64
  store i32 0, i32* %i, align 4, !dbg !295
  br label %for.cond38, !dbg !297

for.cond38:                                       ; preds = %for.inc45, %for.end37
  %66 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %66, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.43, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %67 = load i32, i32* %i, align 4, !dbg !298
  %cmp39 = icmp slt i32 %67, 10, !dbg !301
  br i1 %cmp39, label %for.body41, label %for.end47, !dbg !302

for.body41:                                       ; preds = %for.cond38
  %68 = ptrtoint double* %gc to i64
  call void @__DiscoPoPOpenMPRead(i64 %68, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.44, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %69 = load double, double* %gc, align 8, !dbg !303
  %70 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %70, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.45, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %71 = load i32, i32* %i, align 4, !dbg !305
  %idxprom42 = sext i32 %71 to i64, !dbg !306
  %arrayidx43 = getelementptr inbounds [10 x double], [10 x double]* @q, i64 0, i64 %idxprom42, !dbg !306
  %72 = ptrtoint double* %arrayidx43 to i64
  call void @__DiscoPoPOpenMPRead(i64 %72, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.46, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %73 = load double, double* %arrayidx43, align 8, !dbg !306
  %add44 = fadd double %69, %73, !dbg !307
  %74 = ptrtoint double* %gc to i64
  store double %add44, double* %gc, align 8, !dbg !308
  br label %for.inc45, !dbg !309

for.inc45:                                        ; preds = %for.body41
  %75 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %75, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.47, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %76 = load i32, i32* %i, align 4, !dbg !310
  %inc46 = add nsw i32 %76, 1, !dbg !310
  %77 = ptrtoint i32* %i to i64
  store i32 %inc46, i32* %i, align 4, !dbg !310
  br label %for.cond38, !dbg !312, !llvm.loop !313

for.end47:                                        ; preds = %for.cond38
  call void @timer_stop(i32 0), !dbg !315
  %call48 = call double @timer_read(i32 0), !dbg !316
  %78 = ptrtoint double* %tm to i64
  store double %call48, double* %tm, align 8, !dbg !317
  %79 = ptrtoint i32* %nit to i64
  store i32 0, i32* %nit, align 4, !dbg !318
  %80 = ptrtoint i32* %verified to i64
  store i32 1, i32* %verified, align 4, !dbg !319
  %81 = ptrtoint double* %sx_verify_value to i64
  store double 0xC0A95FAB5782F17F, double* %sx_verify_value, align 8, !dbg !320
  %82 = ptrtoint double* %sy_verify_value to i64
  store double 0xC0BB2E683649F2E0, double* %sy_verify_value, align 8, !dbg !323
  %83 = ptrtoint i32* %verified to i64
  call void @__DiscoPoPOpenMPRead(i64 %83, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.48, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %84 = load i32, i32* %verified, align 4, !dbg !324
  %tobool = icmp ne i32 %84, 0, !dbg !324
  br i1 %tobool, label %if.then49, label %if.end58, !dbg !326

if.then49:                                        ; preds = %for.end47
  %85 = ptrtoint double* %sx to i64
  call void @__DiscoPoPOpenMPRead(i64 %85, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.49, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %86 = load double, double* %sx, align 8, !dbg !327
  %87 = ptrtoint double* %sx_verify_value to i64
  call void @__DiscoPoPOpenMPRead(i64 %87, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.50, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %88 = load double, double* %sx_verify_value, align 8, !dbg !329
  %sub = fsub double %86, %88, !dbg !330
  %89 = ptrtoint double* %sx_verify_value to i64
  call void @__DiscoPoPOpenMPRead(i64 %89, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %90 = load double, double* %sx_verify_value, align 8, !dbg !331
  %div = fdiv double %sub, %90, !dbg !332
  %call50 = call double @fabs(double %div) #2, !dbg !333
  %91 = ptrtoint double* %sx_err to i64
  store double %call50, double* %sx_err, align 8, !dbg !334
  %92 = ptrtoint double* %sy to i64
  call void @__DiscoPoPOpenMPRead(i64 %92, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.52, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %93 = load double, double* %sy, align 8, !dbg !335
  %94 = ptrtoint double* %sy_verify_value to i64
  call void @__DiscoPoPOpenMPRead(i64 %94, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %95 = load double, double* %sy_verify_value, align 8, !dbg !336
  %sub51 = fsub double %93, %95, !dbg !337
  %96 = ptrtoint double* %sy_verify_value to i64
  call void @__DiscoPoPOpenMPRead(i64 %96, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.54, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %97 = load double, double* %sy_verify_value, align 8, !dbg !338
  %div52 = fdiv double %sub51, %97, !dbg !339
  %call53 = call double @fabs(double %div52) #2, !dbg !340
  %98 = ptrtoint double* %sy_err to i64
  store double %call53, double* %sy_err, align 8, !dbg !341
  %99 = ptrtoint double* %sx_err to i64
  call void @__DiscoPoPOpenMPRead(i64 %99, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.55, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %100 = load double, double* %sx_err, align 8, !dbg !342
  %cmp54 = fcmp ole double %100, 1.000000e-08, !dbg !343
  br i1 %cmp54, label %land.rhs, label %land.end, !dbg !344

land.rhs:                                         ; preds = %if.then49
  %101 = ptrtoint double* %sy_err to i64
  call void @__DiscoPoPOpenMPRead(i64 %101, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.56, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %102 = load double, double* %sy_err, align 8, !dbg !345
  %cmp56 = fcmp ole double %102, 1.000000e-08, !dbg !347
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then49
  %103 = phi i1 [ false, %if.then49 ], [ %cmp56, %land.rhs ]
  %land.ext = zext i1 %103 to i32, !dbg !348
  %104 = ptrtoint i32* %verified to i64
  store i32 %land.ext, i32* %verified, align 4, !dbg !350
  br label %if.end58, !dbg !351

if.end58:                                         ; preds = %land.end, %for.end47
  %call59 = call double @pow(double 2.000000e+00, double 2.500000e+01) #7, !dbg !352
  %105 = ptrtoint double* %tm to i64
  call void @__DiscoPoPOpenMPRead(i64 %105, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.57, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %106 = load double, double* %tm, align 8, !dbg !353
  %div60 = fdiv double %call59, %106, !dbg !354
  %div61 = fdiv double %div60, 1.000000e+06, !dbg !355
  %107 = ptrtoint double* %Mops to i64
  store double %div61, double* %Mops, align 8, !dbg !356
  %call62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i32 0, i32 0)), !dbg !357
  %108 = ptrtoint double* %tm to i64
  call void @__DiscoPoPOpenMPRead(i64 %108, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.58, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %109 = load double, double* %tm, align 8, !dbg !358
  %call63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.10, i32 0, i32 0), double %109), !dbg !359
  %call64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i32 0, i32 0), i32 24), !dbg !360
  %110 = ptrtoint double* %gc to i64
  call void @__DiscoPoPOpenMPRead(i64 %110, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.59, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %111 = load double, double* %gc, align 8, !dbg !361
  %call65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.12, i32 0, i32 0), double %111), !dbg !362
  %112 = ptrtoint double* %sx to i64
  call void @__DiscoPoPOpenMPRead(i64 %112, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.60, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %113 = load double, double* %sx, align 8, !dbg !363
  %114 = ptrtoint double* %sy to i64
  call void @__DiscoPoPOpenMPRead(i64 %114, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.61, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %115 = load double, double* %sy, align 8, !dbg !364
  %call66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.13, i32 0, i32 0), double %113, double %115), !dbg !365
  %call67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i32 0, i32 0)), !dbg !366
  %116 = ptrtoint i32* %i to i64
  store i32 0, i32* %i, align 4, !dbg !367
  br label %for.cond68, !dbg !369

for.cond68:                                       ; preds = %for.inc75, %if.end58
  %117 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %117, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.62, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %118 = load i32, i32* %i, align 4, !dbg !370
  %cmp69 = icmp slt i32 %118, 10, !dbg !373
  br i1 %cmp69, label %for.body71, label %for.end77, !dbg !374

for.body71:                                       ; preds = %for.cond68
  %119 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %119, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.63, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %120 = load i32, i32* %i, align 4, !dbg !375
  %121 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %121, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.64, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %122 = load i32, i32* %i, align 4, !dbg !377
  %idxprom72 = sext i32 %122 to i64, !dbg !378
  %arrayidx73 = getelementptr inbounds [10 x double], [10 x double]* @q, i64 0, i64 %idxprom72, !dbg !378
  %123 = ptrtoint double* %arrayidx73 to i64
  call void @__DiscoPoPOpenMPRead(i64 %123, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.65, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %124 = load double, double* %arrayidx73, align 8, !dbg !378
  %call74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.15, i32 0, i32 0), i32 %120, double %124), !dbg !379
  br label %for.inc75, !dbg !380

for.inc75:                                        ; preds = %for.body71
  %125 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %125, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.66, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %126 = load i32, i32* %i, align 4, !dbg !381
  %inc76 = add nsw i32 %126, 1, !dbg !381
  %127 = ptrtoint i32* %i to i64
  store i32 %inc76, i32* %i, align 4, !dbg !381
  br label %for.cond68, !dbg !383, !llvm.loop !384

for.end77:                                        ; preds = %for.cond68
  %128 = ptrtoint i32* %nit to i64
  call void @__DiscoPoPOpenMPRead(i64 %128, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.67, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %129 = load i32, i32* %nit, align 4, !dbg !386
  %130 = ptrtoint double* %tm to i64
  call void @__DiscoPoPOpenMPRead(i64 %130, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.68, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %131 = load double, double* %tm, align 8, !dbg !387
  %132 = ptrtoint double* %Mops to i64
  call void @__DiscoPoPOpenMPRead(i64 %132, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.69, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %133 = load double, double* %Mops, align 8, !dbg !388
  %134 = ptrtoint i32* %verified to i64
  call void @__DiscoPoPOpenMPRead(i64 %134, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.70, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %135 = load i32, i32* %verified, align 4, !dbg !389
  call void @print_results(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0), i8 signext 83, i32 25, i32 0, i32 0, i32 %129, double %131, double %133, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.17, i32 0, i32 0), i32 %135, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i32 0, i32 0)), !dbg !390
  %136 = ptrtoint i32* %timers_enabled to i64
  call void @__DiscoPoPOpenMPRead(i64 %136, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.71, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %137 = load i32, i32* %timers_enabled, align 4, !dbg !391
  %tobool78 = icmp ne i32 %137, 0, !dbg !391
  br i1 %tobool78, label %if.then79, label %if.end95, !dbg !393

if.then79:                                        ; preds = %for.end77
  %138 = ptrtoint double* %tm to i64
  call void @__DiscoPoPOpenMPRead(i64 %138, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.72, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %139 = load double, double* %tm, align 8, !dbg !394
  %cmp80 = fcmp ole double %139, 0.000000e+00, !dbg !397
  br i1 %cmp80, label %if.then82, label %if.end83, !dbg !398

if.then82:                                        ; preds = %if.then79
  %140 = ptrtoint double* %tm to i64
  store double 1.000000e+00, double* %tm, align 8, !dbg !399
  br label %if.end83, !dbg !401

if.end83:                                         ; preds = %if.then82, %if.then79
  %call84 = call double @timer_read(i32 0), !dbg !402
  %141 = ptrtoint double* %tt to i64
  store double %call84, double* %tt, align 8, !dbg !403
  %142 = ptrtoint double* %tt to i64
  call void @__DiscoPoPOpenMPRead(i64 %142, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.73, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %143 = load double, double* %tt, align 8, !dbg !404
  %144 = ptrtoint double* %tt to i64
  call void @__DiscoPoPOpenMPRead(i64 %144, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.74, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %145 = load double, double* %tt, align 8, !dbg !405
  %mul = fmul double %145, 1.000000e+02, !dbg !406
  %146 = ptrtoint double* %tm to i64
  call void @__DiscoPoPOpenMPRead(i64 %146, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.75, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %147 = load double, double* %tm, align 8, !dbg !407
  %div85 = fdiv double %mul, %147, !dbg !408
  %call86 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.23, i32 0, i32 0), double %143, double %div85), !dbg !409
  %call87 = call double @timer_read(i32 1), !dbg !410
  %148 = ptrtoint double* %tt to i64
  store double %call87, double* %tt, align 8, !dbg !411
  %149 = ptrtoint double* %tt to i64
  call void @__DiscoPoPOpenMPRead(i64 %149, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.76, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %150 = load double, double* %tt, align 8, !dbg !412
  %151 = ptrtoint double* %tt to i64
  call void @__DiscoPoPOpenMPRead(i64 %151, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.77, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %152 = load double, double* %tt, align 8, !dbg !413
  %mul88 = fmul double %152, 1.000000e+02, !dbg !414
  %153 = ptrtoint double* %tm to i64
  call void @__DiscoPoPOpenMPRead(i64 %153, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.78, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %154 = load double, double* %tm, align 8, !dbg !415
  %div89 = fdiv double %mul88, %154, !dbg !416
  %call90 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.24, i32 0, i32 0), double %150, double %div89), !dbg !417
  %call91 = call double @timer_read(i32 2), !dbg !418
  %155 = ptrtoint double* %tt to i64
  store double %call91, double* %tt, align 8, !dbg !419
  %156 = ptrtoint double* %tt to i64
  call void @__DiscoPoPOpenMPRead(i64 %156, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.79, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %157 = load double, double* %tt, align 8, !dbg !420
  %158 = ptrtoint double* %tt to i64
  call void @__DiscoPoPOpenMPRead(i64 %158, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.80, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %159 = load double, double* %tt, align 8, !dbg !421
  %mul92 = fmul double %159, 1.000000e+02, !dbg !422
  %160 = ptrtoint double* %tm to i64
  call void @__DiscoPoPOpenMPRead(i64 %160, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.81, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %161 = load double, double* %tm, align 8, !dbg !423
  %div93 = fdiv double %mul92, %161, !dbg !424
  %call94 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.25, i32 0, i32 0), double %157, double %div93), !dbg !425
  br label %if.end95, !dbg !426

if.end95:                                         ; preds = %if.end83, %for.end77
  call void @__DiscoPoPOpenMPFinalize()
  ret i32 0, !dbg !427
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

declare %struct._IO_FILE* @fopen(i8*, i8*) #3

declare i32 @fclose(%struct._IO_FILE*) #3

; Function Attrs: nounwind
declare double @pow(double, double) #4

; Function Attrs: nounwind
declare i32 @sprintf(i8*, i8*, ...) #4

declare i32 @printf(i8*, ...) #3

declare i32 @omp_get_max_threads() #3

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined.(i32* noalias %.global_tid., i32* noalias %.bound_tid.) #0 !dbg !428 !omp.region.ID !434 {
entry:
  %.global_tid..addr = alloca i32*, align 8
  %.bound_tid..addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %0 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0)
  store i32* %.global_tid., i32** %.global_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.global_tid..addr, metadata !435, metadata !62), !dbg !436
  %1 = ptrtoint i32** %.bound_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %1)
  store i32* %.bound_tid., i32** %.bound_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.bound_tid..addr, metadata !437, metadata !62), !dbg !436
  call void @llvm.dbg.declare(metadata i32* %i, metadata !438, metadata !62), !dbg !436
  %2 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2)
  store i32 0, i32* %i, align 4, !dbg !439
  br label %for.cond, !dbg !442

for.cond:                                         ; preds = %for.inc, %entry
  %3 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %3, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.82, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %4 = load i32, i32* %i, align 4, !dbg !443
  %cmp = icmp slt i32 %4, 131072, !dbg !446
  br i1 %cmp, label %for.body, label %for.end, !dbg !447

for.body:                                         ; preds = %for.cond
  %5 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %5, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @9, i32 0, i32 0), i32 100, i32 -1, i32 4)
  %6 = load i32, i32* %i, align 4, !dbg !448
  %idxprom = sext i32 %6 to i64, !dbg !450
  %7 = call [131072 x double]* @_ZTWL1x(), !dbg !450
  %arrayidx = getelementptr inbounds [131072 x double], [131072 x double]* %7, i64 0, i64 %idxprom, !dbg !450
  %8 = ptrtoint double* %arrayidx to i64
  call void @__DiscoPoPOpenMPWrite(i64 %8)
  store double -1.000000e+99, double* %arrayidx, align 8, !dbg !451
  br label %for.inc, !dbg !452

for.inc:                                          ; preds = %for.body
  %9 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %9, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @10, i32 0, i32 0), i32 100, i32 -1, i32 4)
  %10 = load i32, i32* %i, align 4, !dbg !453
  %inc = add nsw i32 %10, 1, !dbg !453
  %11 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %11)
  store i32 %inc, i32* %i, align 4, !dbg !453
  br label %for.cond, !dbg !455, !llvm.loop !456

for.end:                                          ; preds = %for.cond
  ret void, !dbg !458
}

declare void @__kmpc_fork_call(%ident_t*, i32, void (i32*, i32*, ...)*, ...)

; Function Attrs: nounwind readnone
declare double @fabs(double) #5

; Function Attrs: nounwind
declare double @sqrt(double) #4

; Function Attrs: nounwind
declare double @log(double) #4

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..7(i32* noalias %.global_tid., i32* noalias %.bound_tid., i32* dereferenceable(4) %timers_enabled) #0 !dbg !459 !omp.region.ID !463 {
entry:
  %.global_tid..addr = alloca i32*, align 8
  %.bound_tid..addr = alloca i32*, align 8
  %timers_enabled.addr = alloca i32*, align 8
  %0 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0)
  store i32* %.global_tid., i32** %.global_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.global_tid..addr, metadata !464, metadata !62), !dbg !465
  %1 = ptrtoint i32** %.bound_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %1)
  store i32* %.bound_tid., i32** %.bound_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.bound_tid..addr, metadata !466, metadata !62), !dbg !465
  %2 = ptrtoint i32** %timers_enabled.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2)
  store i32* %timers_enabled, i32** %timers_enabled.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %timers_enabled.addr, metadata !467, metadata !62), !dbg !465
  %3 = ptrtoint i32** %timers_enabled.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %3, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.85, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %4 = load i32*, i32** %timers_enabled.addr, align 8, !dbg !468
  call void @timer_clear(i32 0), !dbg !469
  %5 = ptrtoint i32* %4 to i64
  call void @__DiscoPoPOpenMPRead(i64 %5, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i32 0, i32 0), i32 101, i32 -1, i32 4)
  %6 = load i32, i32* %4, align 4, !dbg !471
  %tobool = icmp ne i32 %6, 0, !dbg !471
  br i1 %tobool, label %if.then, label %if.end, !dbg !473

if.then:                                          ; preds = %entry
  call void @timer_clear(i32 1), !dbg !474
  br label %if.end, !dbg !474

if.end:                                           ; preds = %if.then, %entry
  %7 = ptrtoint i32* %4 to i64
  call void @__DiscoPoPOpenMPRead(i64 %7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @12, i32 0, i32 0), i32 101, i32 -1, i32 4)
  %8 = load i32, i32* %4, align 4, !dbg !476
  %tobool1 = icmp ne i32 %8, 0, !dbg !476
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !478

if.then2:                                         ; preds = %if.end
  call void @timer_clear(i32 2), !dbg !479
  br label %if.end3, !dbg !479

if.end3:                                          ; preds = %if.then2, %if.end
  ret void, !dbg !481
}

; Function Attrs: nounwind uwtable
define internal [131072 x double]* @_ZTWL1x() #6 {
  ret [131072 x double]* @x
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..8(i32* noalias %.global_tid., i32* noalias %.bound_tid., double* dereferenceable(8) %sx, double* dereferenceable(8) %sy, i32* dereferenceable(4) %np, i32* dereferenceable(4) %k_offset, double* dereferenceable(8) %an, i32* dereferenceable(4) %timers_enabled) #0 !dbg !482 !omp.region.ID !487 {
entry:
  %.global_tid..addr = alloca i32*, align 8
  %.bound_tid..addr = alloca i32*, align 8
  %sx.addr = alloca double*, align 8
  %sy.addr = alloca double*, align 8
  %np.addr = alloca i32*, align 8
  %k_offset.addr = alloca i32*, align 8
  %an.addr = alloca double*, align 8
  %timers_enabled.addr = alloca i32*, align 8
  %k = alloca i32, align 4
  %kk = alloca i32, align 4
  %t1 = alloca double, align 8
  %t2 = alloca double, align 8
  %t3 = alloca double, align 8
  %t4 = alloca double, align 8
  %i = alloca i32, align 4
  %ik = alloca i32, align 4
  %x1 = alloca double, align 8
  %x2 = alloca double, align 8
  %l = alloca i32, align 4
  %.omp.iv = alloca i32, align 4
  %.capture_expr. = alloca i32, align 4
  %.capture_expr.1 = alloca i32, align 4
  %k3 = alloca i32, align 4
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %sx5 = alloca double, align 8
  %sy6 = alloca double, align 8
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  %.omp.reduction.red_list = alloca [2 x i8*], align 8
  %atomic-temp = alloca double, align 8
  %tmp = alloca double, align 8
  %atomic-temp82 = alloca double, align 8
  %tmp83 = alloca double, align 8
  %atomic-temp96 = alloca double, align 8
  %2 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2)
  store i32* %.global_tid., i32** %.global_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.global_tid..addr, metadata !488, metadata !62), !dbg !489
  %3 = ptrtoint i32** %.bound_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3)
  store i32* %.bound_tid., i32** %.bound_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.bound_tid..addr, metadata !490, metadata !62), !dbg !489
  %4 = ptrtoint double** %sx.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4)
  store double* %sx, double** %sx.addr, align 8
  call void @llvm.dbg.declare(metadata double** %sx.addr, metadata !491, metadata !62), !dbg !489
  %5 = ptrtoint double** %sy.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5)
  store double* %sy, double** %sy.addr, align 8
  call void @llvm.dbg.declare(metadata double** %sy.addr, metadata !492, metadata !62), !dbg !489
  %6 = ptrtoint i32** %np.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6)
  store i32* %np, i32** %np.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %np.addr, metadata !493, metadata !62), !dbg !489
  %7 = ptrtoint i32** %k_offset.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %7)
  store i32* %k_offset, i32** %k_offset.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %k_offset.addr, metadata !494, metadata !62), !dbg !489
  %8 = ptrtoint double** %an.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %8)
  store double* %an, double** %an.addr, align 8
  call void @llvm.dbg.declare(metadata double** %an.addr, metadata !495, metadata !62), !dbg !489
  %9 = ptrtoint i32** %timers_enabled.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %9)
  store i32* %timers_enabled, i32** %timers_enabled.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %timers_enabled.addr, metadata !496, metadata !62), !dbg !489
  %10 = ptrtoint double** %sx.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %10, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.88, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %11 = load double*, double** %sx.addr, align 8, !dbg !497
  %12 = ptrtoint double** %sy.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %12, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @13, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %13 = load double*, double** %sy.addr, align 8, !dbg !497
  %14 = ptrtoint i32** %np.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %14, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @14, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %15 = load i32*, i32** %np.addr, align 8, !dbg !497
  %16 = ptrtoint i32** %k_offset.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %16, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @15, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %17 = load i32*, i32** %k_offset.addr, align 8, !dbg !497
  %18 = ptrtoint double** %an.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %18, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @16, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %19 = load double*, double** %an.addr, align 8, !dbg !497
  %20 = ptrtoint i32** %timers_enabled.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %20, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @17, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %21 = load i32*, i32** %timers_enabled.addr, align 8, !dbg !497
  call void @llvm.dbg.declare(metadata i32* %k, metadata !498, metadata !62), !dbg !489
  call void @llvm.dbg.declare(metadata i32* %kk, metadata !499, metadata !62), !dbg !489
  call void @llvm.dbg.declare(metadata double* %t1, metadata !500, metadata !62), !dbg !489
  call void @llvm.dbg.declare(metadata double* %t2, metadata !501, metadata !62), !dbg !489
  call void @llvm.dbg.declare(metadata double* %t3, metadata !502, metadata !62), !dbg !489
  call void @llvm.dbg.declare(metadata double* %t4, metadata !503, metadata !62), !dbg !489
  call void @llvm.dbg.declare(metadata i32* %i, metadata !504, metadata !62), !dbg !489
  call void @llvm.dbg.declare(metadata i32* %ik, metadata !505, metadata !62), !dbg !489
  call void @llvm.dbg.declare(metadata double* %x1, metadata !506, metadata !62), !dbg !489
  call void @llvm.dbg.declare(metadata double* %x2, metadata !507, metadata !62), !dbg !489
  call void @llvm.dbg.declare(metadata i32* %l, metadata !508, metadata !62), !dbg !489
  %22 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %22)
  store i32 0, i32* %i, align 4, !dbg !509
  br label %for.cond, !dbg !512

for.cond:                                         ; preds = %for.inc, %entry
  %23 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @18, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %24 = load i32, i32* %i, align 4, !dbg !513
  %cmp = icmp slt i32 %24, 10, !dbg !516
  br i1 %cmp, label %for.body, label %for.end, !dbg !517

for.body:                                         ; preds = %for.cond
  %25 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @19, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %26 = load i32, i32* %i, align 4, !dbg !518
  %idxprom = sext i32 %26 to i64, !dbg !520
  %27 = call [10 x double]* @_ZTWL2qq(), !dbg !520
  %arrayidx = getelementptr inbounds [10 x double], [10 x double]* %27, i64 0, i64 %idxprom, !dbg !520
  %28 = ptrtoint double* %arrayidx to i64
  call void @__DiscoPoPOpenMPWrite(i64 %28)
  store double 0.000000e+00, double* %arrayidx, align 8, !dbg !521
  br label %for.inc, !dbg !522

for.inc:                                          ; preds = %for.body
  %29 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %29, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @20, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %30 = load i32, i32* %i, align 4, !dbg !523
  %inc = add nsw i32 %30, 1, !dbg !523
  %31 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %31)
  store i32 %inc, i32* %i, align 4, !dbg !523
  br label %for.cond, !dbg !525, !llvm.loop !526

for.end:                                          ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %.omp.iv, metadata !528, metadata !62), !dbg !530
  call void @llvm.dbg.declare(metadata i32* %.capture_expr., metadata !531, metadata !62), !dbg !530
  %32 = ptrtoint i32* %15 to i64
  call void @__DiscoPoPOpenMPRead(i64 %32, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @21, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %33 = load i32, i32* %15, align 4, !dbg !532
  %34 = ptrtoint i32* %.capture_expr. to i64
  call void @__DiscoPoPOpenMPWrite(i64 %34)
  store i32 %33, i32* %.capture_expr., align 4, !dbg !530
  call void @llvm.dbg.declare(metadata i32* %.capture_expr.1, metadata !531, metadata !62), !dbg !530
  %35 = ptrtoint i32* %.capture_expr. to i64
  call void @__DiscoPoPOpenMPRead(i64 %35, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @22, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %36 = load i32, i32* %.capture_expr., align 4, !dbg !532
  %sub = sub nsw i32 %36, 1, !dbg !533
  %add = add nsw i32 %sub, 1, !dbg !533
  %div = sdiv i32 %add, 1, !dbg !533
  %sub2 = sub nsw i32 %div, 1, !dbg !530
  %37 = ptrtoint i32* %.capture_expr.1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %37)
  store i32 %sub2, i32* %.capture_expr.1, align 4, !dbg !530
  call void @llvm.dbg.declare(metadata i32* %k3, metadata !534, metadata !62), !dbg !530
  %38 = ptrtoint i32* %k3 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %38)
  store i32 1, i32* %k3, align 4, !dbg !535
  %39 = ptrtoint i32* %.capture_expr. to i64
  call void @__DiscoPoPOpenMPRead(i64 %39, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @23, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %40 = load i32, i32* %.capture_expr., align 4, !dbg !532
  %cmp4 = icmp sle i32 1, %40, !dbg !533
  br i1 %cmp4, label %omp.precond.then, label %omp.precond.end, !dbg !536

omp.precond.then:                                 ; preds = %for.end
  call void @llvm.dbg.declare(metadata i32* %.omp.lb, metadata !537, metadata !62), !dbg !530
  %41 = ptrtoint i32* %.omp.lb to i64
  call void @__DiscoPoPOpenMPWrite(i64 %41)
  store i32 0, i32* %.omp.lb, align 4, !dbg !538
  call void @llvm.dbg.declare(metadata i32* %.omp.ub, metadata !540, metadata !62), !dbg !530
  %42 = ptrtoint i32* %.capture_expr.1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %42, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @24, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %43 = load i32, i32* %.capture_expr.1, align 4, !dbg !541
  %44 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPWrite(i64 %44)
  store i32 %43, i32* %.omp.ub, align 4, !dbg !538
  call void @llvm.dbg.declare(metadata i32* %.omp.stride, metadata !542, metadata !62), !dbg !530
  %45 = ptrtoint i32* %.omp.stride to i64
  call void @__DiscoPoPOpenMPWrite(i64 %45)
  store i32 1, i32* %.omp.stride, align 4, !dbg !538
  call void @llvm.dbg.declare(metadata i32* %.omp.is_last, metadata !543, metadata !62), !dbg !530
  %46 = ptrtoint i32* %.omp.is_last to i64
  call void @__DiscoPoPOpenMPWrite(i64 %46)
  store i32 0, i32* %.omp.is_last, align 4, !dbg !538
  call void @llvm.dbg.declare(metadata double* %sx5, metadata !544, metadata !62), !dbg !530
  %47 = ptrtoint double* %sx5 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %47)
  store double 0.000000e+00, double* %sx5, align 8, !dbg !545
  call void @llvm.dbg.declare(metadata double* %sy6, metadata !546, metadata !62), !dbg !530
  %48 = ptrtoint double* %sy6 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %48)
  store double 0.000000e+00, double* %sy6, align 8, !dbg !547
  %49 = ptrtoint i32* %.capture_expr.1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %49, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @25, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %50 = load i32, i32* %.capture_expr.1, align 4, !dbg !541
  %51 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !548
  %52 = ptrtoint i8** %51 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %52)
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @4, i32 0, i32 0), i8** %51, align 8, !dbg !548
  %53 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %53, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @26, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %54 = load i32*, i32** %.global_tid..addr, align 8, !dbg !548
  %55 = ptrtoint i32* %54 to i64
  call void @__DiscoPoPOpenMPRead(i64 %55, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @27, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %56 = load i32, i32* %54, align 4, !dbg !548
  call void @__kmpc_dispatch_init_4(%ident_t* %.kmpc_loc.addr, i32 %56, i32 35, i32 0, i32 %50, i32 1, i32 1), !dbg !548
  br label %omp.dispatch.cond, !dbg !548

omp.dispatch.cond:                                ; preds = %omp.dispatch.inc, %omp.precond.then
  %57 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !549
  %58 = ptrtoint i8** %57 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %58)
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @4, i32 0, i32 0), i8** %57, align 8, !dbg !549
  %59 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %59, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @28, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %60 = load i32*, i32** %.global_tid..addr, align 8, !dbg !549
  %61 = ptrtoint i32* %60 to i64
  call void @__DiscoPoPOpenMPRead(i64 %61, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @29, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %62 = load i32, i32* %60, align 4, !dbg !549
  %63 = call i32 @__kmpc_dispatch_next_4(%ident_t* %.kmpc_loc.addr, i32 %62, i32* %.omp.is_last, i32* %.omp.lb, i32* %.omp.ub, i32* %.omp.stride), !dbg !549
  %tobool = icmp ne i32 %63, 0, !dbg !549
  br i1 %tobool, label %omp.dispatch.body, label %omp.dispatch.end, !dbg !549

omp.dispatch.body:                                ; preds = %omp.dispatch.cond
  %64 = ptrtoint i32* %.omp.lb to i64
  call void @__DiscoPoPOpenMPRead(i64 %64, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @30, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %65 = load i32, i32* %.omp.lb, align 4, !dbg !551
  %66 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPWrite(i64 %66)
  store i32 %65, i32* %.omp.iv, align 4, !dbg !551
  br label %omp.inner.for.cond, !dbg !553

omp.inner.for.cond:                               ; preds = %omp.inner.for.inc, %omp.dispatch.body
  %67 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %67, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @31, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %68 = load i32, i32* %.omp.iv, align 4, !dbg !555, !llvm.mem.parallel_loop_access !557
  %69 = ptrtoint i32* %.omp.ub to i64
  call void @__DiscoPoPOpenMPRead(i64 %69, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @32, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %70 = load i32, i32* %.omp.ub, align 4, !dbg !555, !llvm.mem.parallel_loop_access !557
  %cmp7 = icmp sle i32 %68, %70, !dbg !558
  br i1 %cmp7, label %omp.inner.for.body, label %omp.inner.for.end, !dbg !559

omp.inner.for.body:                               ; preds = %omp.inner.for.cond
  %71 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %71, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @33, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %72 = load i32, i32* %.omp.iv, align 4, !dbg !561, !llvm.mem.parallel_loop_access !557
  %mul = mul nsw i32 %72, 1, !dbg !563
  %add8 = add nsw i32 1, %mul, !dbg !563
  %73 = ptrtoint i32* %k3 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %73)
  store i32 %add8, i32* %k3, align 4, !dbg !563, !llvm.mem.parallel_loop_access !557
  %74 = ptrtoint i32* %17 to i64
  call void @__DiscoPoPOpenMPRead(i64 %74, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @34, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %75 = load i32, i32* %17, align 4, !dbg !564, !llvm.mem.parallel_loop_access !557
  %76 = ptrtoint i32* %k3 to i64
  call void @__DiscoPoPOpenMPRead(i64 %76, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @35, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %77 = load i32, i32* %k3, align 4, !dbg !566, !llvm.mem.parallel_loop_access !557
  %add9 = add nsw i32 %75, %77, !dbg !567
  %78 = ptrtoint i32* %kk to i64
  call void @__DiscoPoPOpenMPWrite(i64 %78)
  store i32 %add9, i32* %kk, align 4, !dbg !568, !llvm.mem.parallel_loop_access !557
  %79 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %79)
  store double 0x41B033C4D7000000, double* %t1, align 8, !dbg !569, !llvm.mem.parallel_loop_access !557
  %80 = ptrtoint double* %19 to i64
  call void @__DiscoPoPOpenMPRead(i64 %80, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @36, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %81 = load double, double* %19, align 8, !dbg !570, !llvm.mem.parallel_loop_access !557
  %82 = ptrtoint double* %t2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %82)
  store double %81, double* %t2, align 8, !dbg !571, !llvm.mem.parallel_loop_access !557
  %83 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %83)
  store i32 1, i32* %i, align 4, !dbg !572, !llvm.mem.parallel_loop_access !557
  br label %for.cond10, !dbg !574

for.cond10:                                       ; preds = %for.inc20, %omp.inner.for.body
  %84 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %84, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.113, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %85 = load i32, i32* %i, align 4, !dbg !575
  %cmp11 = icmp sle i32 %85, 100, !dbg !578
  br i1 %cmp11, label %for.body12, label %for.end22, !dbg !579

for.body12:                                       ; preds = %for.cond10
  %86 = ptrtoint i32* %kk to i64
  call void @__DiscoPoPOpenMPRead(i64 %86, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @37, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %87 = load i32, i32* %kk, align 4, !dbg !580
  %div13 = sdiv i32 %87, 2, !dbg !582
  %88 = ptrtoint i32* %ik to i64
  call void @__DiscoPoPOpenMPWrite(i64 %88)
  store i32 %div13, i32* %ik, align 4, !dbg !583
  %89 = ptrtoint i32* %ik to i64
  call void @__DiscoPoPOpenMPRead(i64 %89, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @38, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %90 = load i32, i32* %ik, align 4, !dbg !584
  %mul14 = mul nsw i32 2, %90, !dbg !586
  %91 = ptrtoint i32* %kk to i64
  call void @__DiscoPoPOpenMPRead(i64 %91, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @39, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %92 = load i32, i32* %kk, align 4, !dbg !587
  %cmp15 = icmp ne i32 %mul14, %92, !dbg !588
  br i1 %cmp15, label %if.then, label %if.end, !dbg !589

if.then:                                          ; preds = %for.body12
  %93 = ptrtoint double* %t2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %93, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @40, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %94 = load double, double* %t2, align 8, !dbg !590
  %call = call double @randlc(double* %t1, double %94), !dbg !592
  %95 = ptrtoint double* %t3 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %95)
  store double %call, double* %t3, align 8, !dbg !593
  br label %if.end, !dbg !594

if.end:                                           ; preds = %if.then, %for.body12
  %96 = ptrtoint i32* %ik to i64
  call void @__DiscoPoPOpenMPRead(i64 %96, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @41, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %97 = load i32, i32* %ik, align 4, !dbg !595
  %cmp16 = icmp eq i32 %97, 0, !dbg !597
  br i1 %cmp16, label %if.then17, label %if.end18, !dbg !598

if.then17:                                        ; preds = %if.end
  br label %for.end22, !dbg !599

if.end18:                                         ; preds = %if.end
  %98 = ptrtoint double* %t2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %98, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @42, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %99 = load double, double* %t2, align 8, !dbg !601
  %call19 = call double @randlc(double* %t2, double %99), !dbg !602
  %100 = ptrtoint double* %t3 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %100)
  store double %call19, double* %t3, align 8, !dbg !603
  %101 = ptrtoint i32* %ik to i64
  call void @__DiscoPoPOpenMPRead(i64 %101, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @43, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %102 = load i32, i32* %ik, align 4, !dbg !604
  %103 = ptrtoint i32* %kk to i64
  call void @__DiscoPoPOpenMPWrite(i64 %103)
  store i32 %102, i32* %kk, align 4, !dbg !605
  br label %for.inc20, !dbg !606

for.inc20:                                        ; preds = %if.end18
  %104 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %104, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @44, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %105 = load i32, i32* %i, align 4, !dbg !607
  %inc21 = add nsw i32 %105, 1, !dbg !607
  %106 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %106)
  store i32 %inc21, i32* %i, align 4, !dbg !607
  br label %for.cond10, !dbg !609, !llvm.loop !610

for.end22:                                        ; preds = %if.then17, %for.cond10
  %107 = ptrtoint i32* %21 to i64
  call void @__DiscoPoPOpenMPRead(i64 %107, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @45, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %108 = load i32, i32* %21, align 4, !dbg !612, !llvm.mem.parallel_loop_access !557
  %tobool23 = icmp ne i32 %108, 0, !dbg !612
  br i1 %tobool23, label %if.then24, label %if.end25, !dbg !614

if.then24:                                        ; preds = %for.end22
  call void @timer_start(i32 2), !dbg !615, !llvm.mem.parallel_loop_access !557
  br label %if.end25, !dbg !615

if.end25:                                         ; preds = %if.then24, %for.end22
  %109 = call [131072 x double]* @_ZTWL1x(), !dbg !617, !llvm.mem.parallel_loop_access !557
  %arraydecay = getelementptr inbounds [131072 x double], [131072 x double]* %109, i32 0, i32 0, !dbg !617
  call void @vranlc(i32 131072, double* %t1, double 0x41D2309CE5400000, double* %arraydecay), !dbg !618, !llvm.mem.parallel_loop_access !557
  %110 = ptrtoint i32* %21 to i64
  call void @__DiscoPoPOpenMPRead(i64 %110, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @46, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %111 = load i32, i32* %21, align 4, !dbg !620, !llvm.mem.parallel_loop_access !557
  %tobool26 = icmp ne i32 %111, 0, !dbg !620
  br i1 %tobool26, label %if.then27, label %if.end28, !dbg !622

if.then27:                                        ; preds = %if.end25
  call void @timer_stop(i32 2), !dbg !623, !llvm.mem.parallel_loop_access !557
  br label %if.end28, !dbg !623

if.end28:                                         ; preds = %if.then27, %if.end25
  %112 = ptrtoint i32* %21 to i64
  call void @__DiscoPoPOpenMPRead(i64 %112, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @47, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %113 = load i32, i32* %21, align 4, !dbg !625, !llvm.mem.parallel_loop_access !557
  %tobool29 = icmp ne i32 %113, 0, !dbg !625
  br i1 %tobool29, label %if.then30, label %if.end31, !dbg !627

if.then30:                                        ; preds = %if.end28
  call void @timer_start(i32 1), !dbg !628, !llvm.mem.parallel_loop_access !557
  br label %if.end31, !dbg !628

if.end31:                                         ; preds = %if.then30, %if.end28
  %114 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %114)
  store i32 0, i32* %i, align 4, !dbg !630, !llvm.mem.parallel_loop_access !557
  br label %for.cond32, !dbg !632

for.cond32:                                       ; preds = %for.inc70, %if.end31
  %115 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %115, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @48, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %116 = load i32, i32* %i, align 4, !dbg !633
  %cmp33 = icmp slt i32 %116, 65536, !dbg !636
  br i1 %cmp33, label %for.body34, label %for.end72, !dbg !637

for.body34:                                       ; preds = %for.cond32
  %117 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %117, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @49, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %118 = load i32, i32* %i, align 4, !dbg !638
  %mul35 = mul nsw i32 2, %118, !dbg !640
  %idxprom36 = sext i32 %mul35 to i64, !dbg !641
  %119 = call [131072 x double]* @_ZTWL1x(), !dbg !641
  %arrayidx37 = getelementptr inbounds [131072 x double], [131072 x double]* %119, i64 0, i64 %idxprom36, !dbg !641
  %120 = ptrtoint double* %arrayidx37 to i64
  call void @__DiscoPoPOpenMPRead(i64 %120, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @50, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %121 = load double, double* %arrayidx37, align 8, !dbg !641
  %mul38 = fmul double 2.000000e+00, %121, !dbg !642
  %sub39 = fsub double %mul38, 1.000000e+00, !dbg !643
  %122 = ptrtoint double* %x1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %122)
  store double %sub39, double* %x1, align 8, !dbg !644
  %123 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %123, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @51, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %124 = load i32, i32* %i, align 4, !dbg !645
  %mul40 = mul nsw i32 2, %124, !dbg !646
  %add41 = add nsw i32 %mul40, 1, !dbg !647
  %idxprom42 = sext i32 %add41 to i64, !dbg !648
  %125 = call [131072 x double]* @_ZTWL1x(), !dbg !648
  %arrayidx43 = getelementptr inbounds [131072 x double], [131072 x double]* %125, i64 0, i64 %idxprom42, !dbg !648
  %126 = ptrtoint double* %arrayidx43 to i64
  call void @__DiscoPoPOpenMPRead(i64 %126, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @52, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %127 = load double, double* %arrayidx43, align 8, !dbg !648
  %mul44 = fmul double 2.000000e+00, %127, !dbg !649
  %sub45 = fsub double %mul44, 1.000000e+00, !dbg !650
  %128 = ptrtoint double* %x2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %128)
  store double %sub45, double* %x2, align 8, !dbg !651
  %129 = ptrtoint double* %x1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %129, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @53, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %130 = load double, double* %x1, align 8, !dbg !652
  %131 = ptrtoint double* %x1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %131, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @54, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %132 = load double, double* %x1, align 8, !dbg !653
  %mul46 = fmul double %130, %132, !dbg !654
  %133 = ptrtoint double* %x2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %133, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @55, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %134 = load double, double* %x2, align 8, !dbg !655
  %135 = ptrtoint double* %x2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %135, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @56, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %136 = load double, double* %x2, align 8, !dbg !656
  %mul47 = fmul double %134, %136, !dbg !657
  %add48 = fadd double %mul46, %mul47, !dbg !658
  %137 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %137)
  store double %add48, double* %t1, align 8, !dbg !659
  %138 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %138, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @57, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %139 = load double, double* %t1, align 8, !dbg !660
  %cmp49 = fcmp ole double %139, 1.000000e+00, !dbg !662
  br i1 %cmp49, label %if.then50, label %if.end69, !dbg !663

if.then50:                                        ; preds = %for.body34
  %140 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %140, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @58, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %141 = load double, double* %t1, align 8, !dbg !664
  %call51 = call double @log(double %141) #7, !dbg !666
  %mul52 = fmul double -2.000000e+00, %call51, !dbg !667
  %142 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %142, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @59, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %143 = load double, double* %t1, align 8, !dbg !668
  %div53 = fdiv double %mul52, %143, !dbg !669
  %call54 = call double @sqrt(double %div53) #7, !dbg !670
  %144 = ptrtoint double* %t2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %144)
  store double %call54, double* %t2, align 8, !dbg !672
  %145 = ptrtoint double* %x1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %145, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @60, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %146 = load double, double* %x1, align 8, !dbg !673
  %147 = ptrtoint double* %t2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %147, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @61, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %148 = load double, double* %t2, align 8, !dbg !674
  %mul55 = fmul double %146, %148, !dbg !675
  %149 = ptrtoint double* %t3 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %149)
  store double %mul55, double* %t3, align 8, !dbg !676
  %150 = ptrtoint double* %x2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %150, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @62, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %151 = load double, double* %x2, align 8, !dbg !677
  %152 = ptrtoint double* %t2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %152, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @63, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %153 = load double, double* %t2, align 8, !dbg !678
  %mul56 = fmul double %151, %153, !dbg !679
  %154 = ptrtoint double* %t4 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %154)
  store double %mul56, double* %t4, align 8, !dbg !680
  %155 = ptrtoint double* %t3 to i64
  call void @__DiscoPoPOpenMPRead(i64 %155, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @64, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %156 = load double, double* %t3, align 8, !dbg !681
  %call57 = call double @fabs(double %156) #2, !dbg !681
  %157 = ptrtoint double* %t4 to i64
  call void @__DiscoPoPOpenMPRead(i64 %157, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @65, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %158 = load double, double* %t4, align 8, !dbg !681
  %call58 = call double @fabs(double %158) #2, !dbg !682
  %cmp59 = fcmp ogt double %call57, %call58, !dbg !681
  br i1 %cmp59, label %cond.true, label %cond.false, !dbg !681

cond.true:                                        ; preds = %if.then50
  %159 = ptrtoint double* %t3 to i64
  call void @__DiscoPoPOpenMPRead(i64 %159, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @66, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %160 = load double, double* %t3, align 8, !dbg !684
  %call60 = call double @fabs(double %160) #2, !dbg !684
  br label %cond.end, !dbg !684

cond.false:                                       ; preds = %if.then50
  %161 = ptrtoint double* %t4 to i64
  call void @__DiscoPoPOpenMPRead(i64 %161, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @67, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %162 = load double, double* %t4, align 8, !dbg !685
  %call61 = call double @fabs(double %162) #2, !dbg !685
  br label %cond.end, !dbg !685

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %call60, %cond.true ], [ %call61, %cond.false ], !dbg !687
  %conv = fptosi double %cond to i32, !dbg !687
  %163 = ptrtoint i32* %l to i64
  call void @__DiscoPoPOpenMPWrite(i64 %163)
  store i32 %conv, i32* %l, align 4, !dbg !689
  %164 = ptrtoint i32* %l to i64
  call void @__DiscoPoPOpenMPRead(i64 %164, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @68, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %165 = load i32, i32* %l, align 4, !dbg !690
  %idxprom62 = sext i32 %165 to i64, !dbg !691
  %166 = call [10 x double]* @_ZTWL2qq(), !dbg !691
  %arrayidx63 = getelementptr inbounds [10 x double], [10 x double]* %166, i64 0, i64 %idxprom62, !dbg !691
  %167 = ptrtoint double* %arrayidx63 to i64
  call void @__DiscoPoPOpenMPRead(i64 %167, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @69, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %168 = load double, double* %arrayidx63, align 8, !dbg !691
  %add64 = fadd double %168, 1.000000e+00, !dbg !692
  %169 = ptrtoint i32* %l to i64
  call void @__DiscoPoPOpenMPRead(i64 %169, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @70, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %170 = load i32, i32* %l, align 4, !dbg !693
  %idxprom65 = sext i32 %170 to i64, !dbg !694
  %171 = call [10 x double]* @_ZTWL2qq(), !dbg !695
  %arrayidx66 = getelementptr inbounds [10 x double], [10 x double]* %171, i64 0, i64 %idxprom65, !dbg !694
  %172 = ptrtoint double* %arrayidx66 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %172)
  store double %add64, double* %arrayidx66, align 8, !dbg !696
  %173 = ptrtoint double* %sx5 to i64
  call void @__DiscoPoPOpenMPRead(i64 %173, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @71, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %174 = load double, double* %sx5, align 8, !dbg !697
  %175 = ptrtoint double* %t3 to i64
  call void @__DiscoPoPOpenMPRead(i64 %175, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @72, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %176 = load double, double* %t3, align 8, !dbg !698
  %add67 = fadd double %174, %176, !dbg !699
  %177 = ptrtoint double* %sx5 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %177)
  store double %add67, double* %sx5, align 8, !dbg !700
  %178 = ptrtoint double* %sy6 to i64
  call void @__DiscoPoPOpenMPRead(i64 %178, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @73, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %179 = load double, double* %sy6, align 8, !dbg !701
  %180 = ptrtoint double* %t4 to i64
  call void @__DiscoPoPOpenMPRead(i64 %180, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @74, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %181 = load double, double* %t4, align 8, !dbg !702
  %add68 = fadd double %179, %181, !dbg !703
  %182 = ptrtoint double* %sy6 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %182)
  store double %add68, double* %sy6, align 8, !dbg !704
  br label %if.end69, !dbg !705

if.end69:                                         ; preds = %cond.end, %for.body34
  br label %for.inc70, !dbg !706

for.inc70:                                        ; preds = %if.end69
  %183 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %183, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @75, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %184 = load i32, i32* %i, align 4, !dbg !707
  %inc71 = add nsw i32 %184, 1, !dbg !707
  %185 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %185)
  store i32 %inc71, i32* %i, align 4, !dbg !707
  br label %for.cond32, !dbg !709, !llvm.loop !710

for.end72:                                        ; preds = %for.cond32
  %186 = ptrtoint i32* %21 to i64
  call void @__DiscoPoPOpenMPRead(i64 %186, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @76, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %187 = load i32, i32* %21, align 4, !dbg !712, !llvm.mem.parallel_loop_access !557
  %tobool73 = icmp ne i32 %187, 0, !dbg !712
  br i1 %tobool73, label %if.then74, label %if.end75, !dbg !714

if.then74:                                        ; preds = %for.end72
  call void @timer_stop(i32 1), !dbg !715, !llvm.mem.parallel_loop_access !557
  br label %if.end75, !dbg !715

if.end75:                                         ; preds = %if.then74, %for.end72
  br label %omp.body.continue, !dbg !717

omp.body.continue:                                ; preds = %if.end75
  br label %omp.inner.for.inc, !dbg !718

omp.inner.for.inc:                                ; preds = %omp.body.continue
  %188 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPRead(i64 %188, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @77, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %189 = load i32, i32* %.omp.iv, align 4, !dbg !720, !llvm.mem.parallel_loop_access !557
  %add76 = add nsw i32 %189, 1, !dbg !721
  %190 = ptrtoint i32* %.omp.iv to i64
  call void @__DiscoPoPOpenMPWrite(i64 %190)
  store i32 %add76, i32* %.omp.iv, align 4, !dbg !721, !llvm.mem.parallel_loop_access !557
  br label %omp.inner.for.cond, !dbg !722, !llvm.loop !557

omp.inner.for.end:                                ; preds = %omp.inner.for.cond
  br label %omp.dispatch.inc, !dbg !724

omp.dispatch.inc:                                 ; preds = %omp.inner.for.end
  br label %omp.dispatch.cond, !dbg !726, !llvm.loop !728

omp.dispatch.end:                                 ; preds = %omp.dispatch.cond
  %191 = getelementptr inbounds [2 x i8*], [2 x i8*]* %.omp.reduction.red_list, i64 0, i64 0, !dbg !729
  %192 = bitcast double* %sx5 to i8*, !dbg !729
  %193 = ptrtoint i8** %191 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %193)
  store i8* %192, i8** %191, align 8, !dbg !729
  %194 = getelementptr inbounds [2 x i8*], [2 x i8*]* %.omp.reduction.red_list, i64 0, i64 1, !dbg !729
  %195 = bitcast double* %sy6 to i8*, !dbg !729
  %196 = ptrtoint i8** %194 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %196)
  store i8* %195, i8** %194, align 8, !dbg !729
  %197 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !729
  %198 = ptrtoint i8** %197 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %198)
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @5, i32 0, i32 0), i8** %197, align 8, !dbg !729
  %199 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %199, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @78, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %200 = load i32*, i32** %.global_tid..addr, align 8, !dbg !729
  %201 = ptrtoint i32* %200 to i64
  call void @__DiscoPoPOpenMPRead(i64 %201, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @79, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %202 = load i32, i32* %200, align 4, !dbg !729
  %203 = bitcast [2 x i8*]* %.omp.reduction.red_list to i8*, !dbg !729
  %204 = call i32 @__kmpc_reduce_nowait(%ident_t* %.kmpc_loc.addr, i32 %202, i32 2, i64 16, i8* %203, void (i8*, i8*)* @.omp.reduction.reduction_func, [8 x i32]* @.gomp_critical_user_.reduction.var), !dbg !729
  switch i32 %204, label %.omp.reduction.default [
    i32 1, label %.omp.reduction.case1
    i32 2, label %.omp.reduction.case2
  ], !dbg !729

.omp.reduction.case1:                             ; preds = %omp.dispatch.end
  %205 = ptrtoint double* %11 to i64
  call void @__DiscoPoPOpenMPRead(i64 %205, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @80, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %206 = load double, double* %11, align 8, !dbg !731
  %207 = ptrtoint double* %sx5 to i64
  call void @__DiscoPoPOpenMPRead(i64 %207, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @81, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %208 = load double, double* %sx5, align 8, !dbg !731
  %add77 = fadd double %206, %208, !dbg !733
  %209 = ptrtoint double* %11 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %209)
  store double %add77, double* %11, align 8, !dbg !733
  %210 = ptrtoint double* %13 to i64
  call void @__DiscoPoPOpenMPRead(i64 %210, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @82, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %211 = load double, double* %13, align 8, !dbg !734
  %212 = ptrtoint double* %sy6 to i64
  call void @__DiscoPoPOpenMPRead(i64 %212, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @83, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %213 = load double, double* %sy6, align 8, !dbg !734
  %add78 = fadd double %211, %213, !dbg !733
  %214 = ptrtoint double* %13 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %214)
  store double %add78, double* %13, align 8, !dbg !733
  call void @__kmpc_end_reduce_nowait(%ident_t* %.kmpc_loc.addr, i32 %202, [8 x i32]* @.gomp_critical_user_.reduction.var), !dbg !735
  br label %.omp.reduction.default, !dbg !735

.omp.reduction.case2:                             ; preds = %omp.dispatch.end
  %215 = ptrtoint double* %sx5 to i64
  call void @__DiscoPoPOpenMPRead(i64 %215, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @84, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %216 = load double, double* %sx5, align 8, !dbg !736
  %217 = bitcast double* %11 to i64*, !dbg !738
  %218 = ptrtoint i64* %217 to i64
  call void @__DiscoPoPOpenMPRead(i64 %218, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @85, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %atomic-load = load atomic i64, i64* %217 monotonic, align 8, !dbg !738
  br label %atomic_cont, !dbg !738

atomic_cont:                                      ; preds = %atomic_cont, %.omp.reduction.case2
  %219 = phi i64 [ %atomic-load, %.omp.reduction.case2 ], [ %232, %atomic_cont ], !dbg !739
  %220 = bitcast double* %atomic-temp to i64*, !dbg !739
  %221 = bitcast i64 %219 to double, !dbg !739
  %222 = ptrtoint double* %tmp to i64
  call void @__DiscoPoPOpenMPWrite(i64 %222)
  store double %221, double* %tmp, align 8, !dbg !739
  %223 = ptrtoint double* %tmp to i64
  call void @__DiscoPoPOpenMPRead(i64 %223, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @86, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %224 = load double, double* %tmp, align 8, !dbg !741
  %225 = ptrtoint double* %sx5 to i64
  call void @__DiscoPoPOpenMPRead(i64 %225, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @87, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %226 = load double, double* %sx5, align 8, !dbg !741
  %add79 = fadd double %224, %226, !dbg !742
  %227 = ptrtoint double* %atomic-temp to i64
  call void @__DiscoPoPOpenMPWrite(i64 %227)
  store double %add79, double* %atomic-temp, align 8, !dbg !739
  %228 = ptrtoint i64* %220 to i64
  call void @__DiscoPoPOpenMPRead(i64 %228, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @88, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %229 = load i64, i64* %220, align 8, !dbg !739
  %230 = bitcast double* %11 to i64*, !dbg !739
  %231 = cmpxchg i64* %230, i64 %219, i64 %229 monotonic monotonic, !dbg !739
  %232 = extractvalue { i64, i1 } %231, 0, !dbg !739
  %233 = extractvalue { i64, i1 } %231, 1, !dbg !739
  br i1 %233, label %atomic_exit, label %atomic_cont, !dbg !739

atomic_exit:                                      ; preds = %atomic_cont
  %234 = ptrtoint double* %sy6 to i64
  call void @__DiscoPoPOpenMPRead(i64 %234, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @89, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %235 = load double, double* %sy6, align 8, !dbg !743
  %236 = bitcast double* %13 to i64*, !dbg !745
  %237 = ptrtoint i64* %236 to i64
  call void @__DiscoPoPOpenMPRead(i64 %237, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @90, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %atomic-load80 = load atomic i64, i64* %236 monotonic, align 8, !dbg !745
  br label %atomic_cont81, !dbg !745

atomic_cont81:                                    ; preds = %atomic_cont81, %atomic_exit
  %238 = phi i64 [ %atomic-load80, %atomic_exit ], [ %251, %atomic_cont81 ], !dbg !746
  %239 = bitcast double* %atomic-temp82 to i64*, !dbg !746
  %240 = bitcast i64 %238 to double, !dbg !746
  %241 = ptrtoint double* %tmp83 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %241)
  store double %240, double* %tmp83, align 8, !dbg !746
  %242 = ptrtoint double* %tmp83 to i64
  call void @__DiscoPoPOpenMPRead(i64 %242, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @91, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %243 = load double, double* %tmp83, align 8, !dbg !748
  %244 = ptrtoint double* %sy6 to i64
  call void @__DiscoPoPOpenMPRead(i64 %244, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @92, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %245 = load double, double* %sy6, align 8, !dbg !748
  %add84 = fadd double %243, %245, !dbg !749
  %246 = ptrtoint double* %atomic-temp82 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %246)
  store double %add84, double* %atomic-temp82, align 8, !dbg !746
  %247 = ptrtoint i64* %239 to i64
  call void @__DiscoPoPOpenMPRead(i64 %247, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @93, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %248 = load i64, i64* %239, align 8, !dbg !746
  %249 = bitcast double* %13 to i64*, !dbg !746
  %250 = cmpxchg i64* %249, i64 %238, i64 %248 monotonic monotonic, !dbg !746
  %251 = extractvalue { i64, i1 } %250, 0, !dbg !746
  %252 = extractvalue { i64, i1 } %250, 1, !dbg !746
  br i1 %252, label %atomic_exit85, label %atomic_cont81, !dbg !746

atomic_exit85:                                    ; preds = %atomic_cont81
  br label %.omp.reduction.default, !dbg !750

.omp.reduction.default:                           ; preds = %atomic_exit85, %.omp.reduction.case1, %omp.dispatch.end
  br label %omp.precond.end, !dbg !752

omp.precond.end:                                  ; preds = %.omp.reduction.default, %for.end
  %253 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %253)
  store i32 0, i32* %i, align 4, !dbg !754
  br label %for.cond86, !dbg !756

for.cond86:                                       ; preds = %for.inc99, %omp.precond.end
  %254 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %254, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @94, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %255 = load i32, i32* %i, align 4, !dbg !757
  %cmp87 = icmp slt i32 %255, 10, !dbg !760
  br i1 %cmp87, label %for.body89, label %for.end101, !dbg !761

for.body89:                                       ; preds = %for.cond86
  %256 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %256, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @95, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %257 = load i32, i32* %i, align 4, !dbg !762
  %idxprom90 = sext i32 %257 to i64, !dbg !765
  %arrayidx91 = getelementptr inbounds [10 x double], [10 x double]* @q, i64 0, i64 %idxprom90, !dbg !765
  %258 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %258, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @96, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %259 = load i32, i32* %i, align 4, !dbg !766
  %idxprom92 = sext i32 %259 to i64, !dbg !767
  %260 = call [10 x double]* @_ZTWL2qq(), !dbg !767
  %arrayidx93 = getelementptr inbounds [10 x double], [10 x double]* %260, i64 0, i64 %idxprom92, !dbg !767
  %261 = ptrtoint double* %arrayidx93 to i64
  call void @__DiscoPoPOpenMPRead(i64 %261, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @97, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %262 = load double, double* %arrayidx93, align 8, !dbg !767
  %263 = bitcast double* %arrayidx91 to i64*, !dbg !765
  %264 = ptrtoint i64* %263 to i64
  call void @__DiscoPoPOpenMPRead(i64 %264, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @98, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %atomic-load94 = load atomic i64, i64* %263 monotonic, align 8, !dbg !765
  br label %atomic_cont95, !dbg !765

atomic_cont95:                                    ; preds = %atomic_cont95, %for.body89
  %265 = phi i64 [ %atomic-load94, %for.body89 ], [ %273, %atomic_cont95 ], !dbg !768
  %266 = bitcast double* %atomic-temp96 to i64*, !dbg !768
  %267 = bitcast i64 %265 to double, !dbg !768
  %add97 = fadd double %267, %262, !dbg !770
  %268 = ptrtoint double* %atomic-temp96 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %268)
  store double %add97, double* %atomic-temp96, align 8, !dbg !768
  %269 = ptrtoint i64* %266 to i64
  call void @__DiscoPoPOpenMPRead(i64 %269, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @99, i32 0, i32 0), i32 102, i32 -1, i32 8)
  %270 = load i64, i64* %266, align 8, !dbg !768
  %271 = bitcast double* %arrayidx91 to i64*, !dbg !768
  %272 = cmpxchg i64* %271, i64 %265, i64 %270 monotonic monotonic, !dbg !768
  %273 = extractvalue { i64, i1 } %272, 0, !dbg !768
  %274 = extractvalue { i64, i1 } %272, 1, !dbg !768
  br i1 %274, label %atomic_exit98, label %atomic_cont95, !dbg !768

atomic_exit98:                                    ; preds = %atomic_cont95
  br label %for.inc99, !dbg !771

for.inc99:                                        ; preds = %atomic_exit98
  %275 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %275, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @100, i32 0, i32 0), i32 102, i32 -1, i32 4)
  %276 = load i32, i32* %i, align 4, !dbg !772
  %inc100 = add nsw i32 %276, 1, !dbg !772
  %277 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %277)
  store i32 %inc100, i32* %i, align 4, !dbg !772
  br label %for.cond86, !dbg !774, !llvm.loop !775

for.end101:                                       ; preds = %for.cond86
  ret void, !dbg !777
}

; Function Attrs: nounwind uwtable
define internal [10 x double]* @_ZTWL2qq() #6 {
  ret [10 x double]* @qq
}

declare void @__kmpc_dispatch_init_4(%ident_t*, i32, i32, i32, i32, i32, i32)

declare i32 @__kmpc_dispatch_next_4(%ident_t*, i32, i32*, i32*, i32*, i32*)

; Function Attrs: nounwind uwtable
define internal void @.omp.reduction.reduction_func(i8*, i8*) #0 !dbg !778 !omp.region.ID !780 {
entry:
  %.addr = alloca i8*, align 8
  %.addr1 = alloca i8*, align 8
  %2 = ptrtoint i8** %.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2)
  store i8* %0, i8** %.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %.addr, metadata !781, metadata !62), !dbg !782
  %3 = ptrtoint i8** %.addr1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3)
  store i8* %1, i8** %.addr1, align 8
  call void @llvm.dbg.declare(metadata i8** %.addr1, metadata !783, metadata !62), !dbg !782
  %4 = ptrtoint i8** %.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %4, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.178, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %5 = load i8*, i8** %.addr, align 8
  %6 = bitcast i8* %5 to [2 x i8*]*
  %7 = ptrtoint i8** %.addr1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %7, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.179, i32 0, i32 0), i32 103, i32 -1, i32 8)
  %8 = load i8*, i8** %.addr1, align 8
  %9 = bitcast i8* %8 to [2 x i8*]*
  %10 = getelementptr inbounds [2 x i8*], [2 x i8*]* %9, i64 0, i64 0
  %11 = ptrtoint i8** %10 to i64
  call void @__DiscoPoPOpenMPRead(i64 %11, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.180, i32 0, i32 0), i32 103, i32 -1, i32 8)
  %12 = load i8*, i8** %10, align 8
  %13 = bitcast i8* %12 to double*
  %14 = getelementptr inbounds [2 x i8*], [2 x i8*]* %6, i64 0, i64 0
  %15 = ptrtoint i8** %14 to i64
  call void @__DiscoPoPOpenMPRead(i64 %15, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.181, i32 0, i32 0), i32 103, i32 -1, i32 8)
  %16 = load i8*, i8** %14, align 8
  %17 = bitcast i8* %16 to double*
  %18 = getelementptr inbounds [2 x i8*], [2 x i8*]* %9, i64 0, i64 1
  %19 = ptrtoint i8** %18 to i64
  call void @__DiscoPoPOpenMPRead(i64 %19, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.182, i32 0, i32 0), i32 103, i32 -1, i32 8)
  %20 = load i8*, i8** %18, align 8
  %21 = bitcast i8* %20 to double*
  %22 = getelementptr inbounds [2 x i8*], [2 x i8*]* %6, i64 0, i64 1
  %23 = ptrtoint i8** %22 to i64
  call void @__DiscoPoPOpenMPRead(i64 %23, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.183, i32 0, i32 0), i32 103, i32 -1, i32 8)
  %24 = load i8*, i8** %22, align 8
  %25 = bitcast i8* %24 to double*
  %26 = ptrtoint double* %17 to i64
  call void @__DiscoPoPOpenMPRead(i64 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @101, i32 0, i32 0), i32 103, i32 -1, i32 8)
  %27 = load double, double* %17, align 8, !dbg !784
  %28 = ptrtoint double* %13 to i64
  call void @__DiscoPoPOpenMPRead(i64 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @102, i32 0, i32 0), i32 103, i32 -1, i32 8)
  %29 = load double, double* %13, align 8, !dbg !784
  %add = fadd double %27, %29, !dbg !785
  %30 = ptrtoint double* %17 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %30)
  store double %add, double* %17, align 8, !dbg !785
  %31 = ptrtoint double* %25 to i64
  call void @__DiscoPoPOpenMPRead(i64 %31, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @103, i32 0, i32 0), i32 103, i32 -1, i32 8)
  %32 = load double, double* %25, align 8, !dbg !786
  %33 = ptrtoint double* %21 to i64
  call void @__DiscoPoPOpenMPRead(i64 %33, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @104, i32 0, i32 0), i32 103, i32 -1, i32 8)
  %34 = load double, double* %21, align 8, !dbg !786
  %add2 = fadd double %32, %34, !dbg !785
  %35 = ptrtoint double* %25 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %35)
  store double %add2, double* %25, align 8, !dbg !785
  ret void, !dbg !786
}

declare i32 @__kmpc_reduce_nowait(%ident_t*, i32, i32, i64, i8*, void (i8*, i8*)*, [8 x i32]*)

declare void @__kmpc_end_reduce_nowait(%ident_t*, i32, [8 x i32]*)

; Function Attrs: nounwind uwtable
define void @print_results(i8* %name, i8 signext %class, i32 %n1, i32 %n2, i32 %n3, i32 %niter, double %t, double %mops, i8* %optype, i32 %verified, i8* %npbversion, i8* %compiletime, i8* %cs1, i8* %cs2, i8* %cs3, i8* %cs4, i8* %cs5, i8* %cs6, i8* %cs7) #0 !dbg !787 {
entry:
  %name.addr = alloca i8*, align 8
  %class.addr = alloca i8, align 1
  %n1.addr = alloca i32, align 4
  %n2.addr = alloca i32, align 4
  %n3.addr = alloca i32, align 4
  %niter.addr = alloca i32, align 4
  %t.addr = alloca double, align 8
  %mops.addr = alloca double, align 8
  %optype.addr = alloca i8*, align 8
  %verified.addr = alloca i32, align 4
  %npbversion.addr = alloca i8*, align 8
  %compiletime.addr = alloca i8*, align 8
  %cs1.addr = alloca i8*, align 8
  %cs2.addr = alloca i8*, align 8
  %cs3.addr = alloca i8*, align 8
  %cs4.addr = alloca i8*, align 8
  %cs5.addr = alloca i8*, align 8
  %cs6.addr = alloca i8*, align 8
  %cs7.addr = alloca i8*, align 8
  %size = alloca [16 x i8], align 16
  %j = alloca i32, align 4
  %num_threads = alloca i32, align 4
  %max_threads = alloca i32, align 4
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  %2 = ptrtoint i8** %name.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2)
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !792, metadata !62), !dbg !793
  %3 = ptrtoint i8* %class.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3)
  store i8 %class, i8* %class.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %class.addr, metadata !794, metadata !62), !dbg !795
  %4 = ptrtoint i32* %n1.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4)
  store i32 %n1, i32* %n1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n1.addr, metadata !796, metadata !62), !dbg !797
  %5 = ptrtoint i32* %n2.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5)
  store i32 %n2, i32* %n2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n2.addr, metadata !798, metadata !62), !dbg !799
  %6 = ptrtoint i32* %n3.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6)
  store i32 %n3, i32* %n3.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n3.addr, metadata !800, metadata !62), !dbg !801
  %7 = ptrtoint i32* %niter.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %7)
  store i32 %niter, i32* %niter.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %niter.addr, metadata !802, metadata !62), !dbg !803
  %8 = ptrtoint double* %t.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %8)
  store double %t, double* %t.addr, align 8
  call void @llvm.dbg.declare(metadata double* %t.addr, metadata !804, metadata !62), !dbg !805
  %9 = ptrtoint double* %mops.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %9)
  store double %mops, double* %mops.addr, align 8
  call void @llvm.dbg.declare(metadata double* %mops.addr, metadata !806, metadata !62), !dbg !807
  %10 = ptrtoint i8** %optype.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %10)
  store i8* %optype, i8** %optype.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optype.addr, metadata !808, metadata !62), !dbg !809
  %11 = ptrtoint i32* %verified.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %11)
  store i32 %verified, i32* %verified.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %verified.addr, metadata !810, metadata !62), !dbg !811
  %12 = ptrtoint i8** %npbversion.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %12)
  store i8* %npbversion, i8** %npbversion.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %npbversion.addr, metadata !812, metadata !62), !dbg !813
  %13 = ptrtoint i8** %compiletime.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %13)
  store i8* %compiletime, i8** %compiletime.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %compiletime.addr, metadata !814, metadata !62), !dbg !815
  %14 = ptrtoint i8** %cs1.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %14)
  store i8* %cs1, i8** %cs1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cs1.addr, metadata !816, metadata !62), !dbg !817
  %15 = ptrtoint i8** %cs2.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %15)
  store i8* %cs2, i8** %cs2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cs2.addr, metadata !818, metadata !62), !dbg !819
  %16 = ptrtoint i8** %cs3.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %16)
  store i8* %cs3, i8** %cs3.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cs3.addr, metadata !820, metadata !62), !dbg !821
  %17 = ptrtoint i8** %cs4.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %17)
  store i8* %cs4, i8** %cs4.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cs4.addr, metadata !822, metadata !62), !dbg !823
  %18 = ptrtoint i8** %cs5.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %18)
  store i8* %cs5, i8** %cs5.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cs5.addr, metadata !824, metadata !62), !dbg !825
  %19 = ptrtoint i8** %cs6.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %19)
  store i8* %cs6, i8** %cs6.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cs6.addr, metadata !826, metadata !62), !dbg !827
  %20 = ptrtoint i8** %cs7.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %20)
  store i8* %cs7, i8** %cs7.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cs7.addr, metadata !828, metadata !62), !dbg !829
  call void @llvm.dbg.declare(metadata [16 x i8]* %size, metadata !830, metadata !62), !dbg !831
  call void @llvm.dbg.declare(metadata i32* %j, metadata !832, metadata !62), !dbg !833
  call void @llvm.dbg.declare(metadata i32* %num_threads, metadata !834, metadata !62), !dbg !835
  call void @llvm.dbg.declare(metadata i32* %max_threads, metadata !836, metadata !62), !dbg !837
  %21 = ptrtoint i32* %max_threads to i64
  call void @__DiscoPoPOpenMPWrite(i64 %21)
  store i32 1, i32* %max_threads, align 4, !dbg !838
  %22 = ptrtoint i32* %num_threads to i64
  call void @__DiscoPoPOpenMPWrite(i64 %22)
  store i32 1, i32* %num_threads, align 4, !dbg !839
  %call = call i32 @omp_get_max_threads(), !dbg !840
  %23 = ptrtoint i32* %max_threads to i64
  call void @__DiscoPoPOpenMPWrite(i64 %23)
  store i32 %call, i32* %max_threads, align 4, !dbg !841
  %24 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !842
  %25 = ptrtoint i8** %24 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %25)
  store i8* getelementptr inbounds ([38 x i8], [38 x i8]* @7, i32 0, i32 0), i8** %24, align 8, !dbg !842
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* %.kmpc_loc.addr, i32 1, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*)* @.omp_outlined..3 to void (i32*, i32*, ...)*), i32* %num_threads), !dbg !842
  %26 = ptrtoint i8** %name.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %26, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.188, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %27 = load i8*, i8** %name.addr, align 8, !dbg !843
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1.4, i32 0, i32 0), i8* %27), !dbg !844
  %28 = ptrtoint i8* %class.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %28, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.189, i32 0, i32 0), i32 0, i32 -1, i32 1)
  %29 = load i8, i8* %class.addr, align 1, !dbg !845
  %conv = sext i8 %29 to i32, !dbg !845
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2.5, i32 0, i32 0), i32 %conv), !dbg !846
  %30 = ptrtoint i32* %n2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %30, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.190, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %31 = load i32, i32* %n2.addr, align 4, !dbg !847
  %cmp = icmp eq i32 %31, 0, !dbg !849
  br i1 %cmp, label %land.lhs.true, label %if.else31, !dbg !850

land.lhs.true:                                    ; preds = %entry
  %32 = ptrtoint i32* %n3.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %32, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.191, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %33 = load i32, i32* %n3.addr, align 4, !dbg !851
  %cmp4 = icmp eq i32 %33, 0, !dbg !853
  br i1 %cmp4, label %if.then, label %if.else31, !dbg !854

if.then:                                          ; preds = %land.lhs.true
  %34 = ptrtoint i8** %name.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %34, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.192, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %35 = load i8*, i8** %name.addr, align 8, !dbg !855
  %arrayidx = getelementptr inbounds i8, i8* %35, i64 0, !dbg !855
  %36 = ptrtoint i8* %arrayidx to i64
  call void @__DiscoPoPOpenMPRead(i64 %36, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.193, i32 0, i32 0), i32 0, i32 -1, i32 1)
  %37 = load i8, i8* %arrayidx, align 1, !dbg !855
  %conv6 = sext i8 %37 to i32, !dbg !855
  %cmp7 = icmp eq i32 %conv6, 69, !dbg !858
  br i1 %cmp7, label %land.lhs.true9, label %if.else, !dbg !859

land.lhs.true9:                                   ; preds = %if.then
  %38 = ptrtoint i8** %name.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %38, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.194, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %39 = load i8*, i8** %name.addr, align 8, !dbg !860
  %arrayidx10 = getelementptr inbounds i8, i8* %39, i64 1, !dbg !860
  %40 = ptrtoint i8* %arrayidx10 to i64
  call void @__DiscoPoPOpenMPRead(i64 %40, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.195, i32 0, i32 0), i32 0, i32 -1, i32 1)
  %41 = load i8, i8* %arrayidx10, align 1, !dbg !860
  %conv11 = sext i8 %41 to i32, !dbg !860
  %cmp12 = icmp eq i32 %conv11, 80, !dbg !862
  br i1 %cmp12, label %if.then14, label %if.else, !dbg !863

if.then14:                                        ; preds = %land.lhs.true9
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %size, i32 0, i32 0, !dbg !864
  %42 = ptrtoint i32* %n1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %42, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.196, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %43 = load i32, i32* %n1.addr, align 4, !dbg !866
  %conv15 = sitofp i32 %43 to double, !dbg !866
  %call16 = call double @pow(double 2.000000e+00, double %conv15) #7, !dbg !867
  %call17 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3.6, i32 0, i32 0), double %call16) #7, !dbg !868
  %44 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %44)
  store i32 14, i32* %j, align 4, !dbg !870
  %45 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %45, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.197, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %46 = load i32, i32* %j, align 4, !dbg !871
  %idxprom = sext i32 %46 to i64, !dbg !873
  %arrayidx18 = getelementptr inbounds [16 x i8], [16 x i8]* %size, i64 0, i64 %idxprom, !dbg !873
  %47 = ptrtoint i8* %arrayidx18 to i64
  call void @__DiscoPoPOpenMPRead(i64 %47, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.198, i32 0, i32 0), i32 0, i32 -1, i32 1)
  %48 = load i8, i8* %arrayidx18, align 1, !dbg !873
  %conv19 = sext i8 %48 to i32, !dbg !873
  %cmp20 = icmp eq i32 %conv19, 46, !dbg !874
  br i1 %cmp20, label %if.then22, label %if.end, !dbg !875

if.then22:                                        ; preds = %if.then14
  %49 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %49, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.199, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %50 = load i32, i32* %j, align 4, !dbg !876
  %idxprom23 = sext i32 %50 to i64, !dbg !878
  %arrayidx24 = getelementptr inbounds [16 x i8], [16 x i8]* %size, i64 0, i64 %idxprom23, !dbg !878
  %51 = ptrtoint i8* %arrayidx24 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %51)
  store i8 32, i8* %arrayidx24, align 1, !dbg !879
  %52 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %52, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.200, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %53 = load i32, i32* %j, align 4, !dbg !880
  %dec = add nsw i32 %53, -1, !dbg !880
  %54 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPWrite(i64 %54)
  store i32 %dec, i32* %j, align 4, !dbg !880
  br label %if.end, !dbg !881

if.end:                                           ; preds = %if.then22, %if.then14
  %55 = ptrtoint i32* %j to i64
  call void @__DiscoPoPOpenMPRead(i64 %55, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.201, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %56 = load i32, i32* %j, align 4, !dbg !882
  %add = add nsw i32 %56, 1, !dbg !883
  %idxprom25 = sext i32 %add to i64, !dbg !884
  %arrayidx26 = getelementptr inbounds [16 x i8], [16 x i8]* %size, i64 0, i64 %idxprom25, !dbg !884
  %57 = ptrtoint i8* %arrayidx26 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %57)
  store i8 0, i8* %arrayidx26, align 1, !dbg !885
  %arraydecay27 = getelementptr inbounds [16 x i8], [16 x i8]* %size, i32 0, i32 0, !dbg !886
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.4.7, i32 0, i32 0), i8* %arraydecay27), !dbg !887
  br label %if.end30, !dbg !888

if.else:                                          ; preds = %land.lhs.true9, %if.then
  %58 = ptrtoint i32* %n1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %58, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.202, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %59 = load i32, i32* %n1.addr, align 4, !dbg !889
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5.8, i32 0, i32 0), i32 %59), !dbg !891
  br label %if.end30

if.end30:                                         ; preds = %if.else, %if.end
  br label %if.end33, !dbg !892

if.else31:                                        ; preds = %land.lhs.true, %entry
  %60 = ptrtoint i32* %n1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %60, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.203, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %61 = load i32, i32* %n1.addr, align 4, !dbg !893
  %62 = ptrtoint i32* %n2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %62, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.204, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %63 = load i32, i32* %n2.addr, align 4, !dbg !895
  %64 = ptrtoint i32* %n3.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %64, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.205, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %65 = load i32, i32* %n3.addr, align 4, !dbg !896
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.6.9, i32 0, i32 0), i32 %61, i32 %63, i32 %65), !dbg !897
  br label %if.end33

if.end33:                                         ; preds = %if.else31, %if.end30
  %66 = ptrtoint i32* %niter.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %66, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.206, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %67 = load i32, i32* %niter.addr, align 4, !dbg !898
  %call34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.7, i32 0, i32 0), i32 %67), !dbg !899
  %68 = ptrtoint double* %t.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %68, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.207, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %69 = load double, double* %t.addr, align 8, !dbg !900
  %call35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.8, i32 0, i32 0), double %69), !dbg !901
  %70 = ptrtoint i32* %num_threads to i64
  call void @__DiscoPoPOpenMPRead(i64 %70, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.208, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %71 = load i32, i32* %num_threads, align 4, !dbg !902
  %call36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.9.10, i32 0, i32 0), i32 %71), !dbg !903
  %72 = ptrtoint i32* %max_threads to i64
  call void @__DiscoPoPOpenMPRead(i64 %72, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.209, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %73 = load i32, i32* %max_threads, align 4, !dbg !904
  %call37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.10.11, i32 0, i32 0), i32 %73), !dbg !905
  %74 = ptrtoint i32* %num_threads to i64
  call void @__DiscoPoPOpenMPRead(i64 %74, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.210, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %75 = load i32, i32* %num_threads, align 4, !dbg !906
  %76 = ptrtoint i32* %max_threads to i64
  call void @__DiscoPoPOpenMPRead(i64 %76, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.211, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %77 = load i32, i32* %max_threads, align 4, !dbg !908
  %cmp38 = icmp ne i32 %75, %77, !dbg !909
  br i1 %cmp38, label %if.then40, label %if.end42, !dbg !910

if.then40:                                        ; preds = %if.end33
  %call41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.11.12, i32 0, i32 0)), !dbg !911
  br label %if.end42, !dbg !911

if.end42:                                         ; preds = %if.then40, %if.end33
  %78 = ptrtoint double* %mops.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %78, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.212, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %79 = load double, double* %mops.addr, align 8, !dbg !912
  %call43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.12.13, i32 0, i32 0), double %79), !dbg !913
  %80 = ptrtoint double* %mops.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %80, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.213, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %81 = load double, double* %mops.addr, align 8, !dbg !914
  %82 = ptrtoint i32* %num_threads to i64
  call void @__DiscoPoPOpenMPRead(i64 %82, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.214, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %83 = load i32, i32* %num_threads, align 4, !dbg !915
  %conv44 = sitofp i32 %83 to double, !dbg !916
  %div = fdiv double %81, %conv44, !dbg !917
  %call45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.13.14, i32 0, i32 0), double %div), !dbg !918
  %84 = ptrtoint i8** %optype.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %84, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.215, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %85 = load i8*, i8** %optype.addr, align 8, !dbg !919
  %call46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.14.15, i32 0, i32 0), i8* %85), !dbg !920
  %86 = ptrtoint i32* %verified.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %86, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.216, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %87 = load i32, i32* %verified.addr, align 4, !dbg !921
  %tobool = icmp ne i32 %87, 0, !dbg !921
  br i1 %tobool, label %if.then47, label %if.else49, !dbg !923

if.then47:                                        ; preds = %if.end42
  %call48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.15.16, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16.17, i32 0, i32 0)), !dbg !924
  br label %if.end51, !dbg !924

if.else49:                                        ; preds = %if.end42
  %call50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.15.16, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.17.18, i32 0, i32 0)), !dbg !925
  br label %if.end51

if.end51:                                         ; preds = %if.else49, %if.then47
  %88 = ptrtoint i8** %npbversion.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %88, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.217, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %89 = load i8*, i8** %npbversion.addr, align 8, !dbg !926
  %call52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.18.19, i32 0, i32 0), i8* %89), !dbg !927
  %90 = ptrtoint i8** %compiletime.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %90, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.218, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %91 = load i8*, i8** %compiletime.addr, align 8, !dbg !928
  %call53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.19.20, i32 0, i32 0), i8* %91), !dbg !929
  %92 = ptrtoint i8** %cs1.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %92, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.219, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %93 = load i8*, i8** %cs1.addr, align 8, !dbg !930
  %call54 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.20.21, i32 0, i32 0), i8* %93), !dbg !931
  %94 = ptrtoint i8** %cs2.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %94, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.220, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %95 = load i8*, i8** %cs2.addr, align 8, !dbg !932
  %call55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.21.22, i32 0, i32 0), i8* %95), !dbg !933
  %96 = ptrtoint i8** %cs3.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %96, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.221, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %97 = load i8*, i8** %cs3.addr, align 8, !dbg !934
  %call56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.22.23, i32 0, i32 0), i8* %97), !dbg !935
  %98 = ptrtoint i8** %cs4.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %98, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.222, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %99 = load i8*, i8** %cs4.addr, align 8, !dbg !936
  %call57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.23.24, i32 0, i32 0), i8* %99), !dbg !937
  %100 = ptrtoint i8** %cs5.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %100, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.223, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %101 = load i8*, i8** %cs5.addr, align 8, !dbg !938
  %call58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.24.25, i32 0, i32 0), i8* %101), !dbg !939
  %102 = ptrtoint i8** %cs6.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %102, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.224, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %103 = load i8*, i8** %cs6.addr, align 8, !dbg !940
  %call59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.25.26, i32 0, i32 0), i8* %103), !dbg !941
  %104 = ptrtoint i8** %cs7.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %104, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.225, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %105 = load i8*, i8** %cs7.addr, align 8, !dbg !942
  %call60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.26, i32 0, i32 0), i8* %105), !dbg !943
  %call61 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([195 x i8], [195 x i8]* @.str.27, i32 0, i32 0)), !dbg !944
  ret void, !dbg !945
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..3(i32* noalias %.global_tid., i32* noalias %.bound_tid., i32* dereferenceable(4) %num_threads) #0 !dbg !946 !omp.region.ID !949 {
entry:
  %.global_tid..addr = alloca i32*, align 8
  %.bound_tid..addr = alloca i32*, align 8
  %num_threads.addr = alloca i32*, align 8
  %.kmpc_loc.addr = alloca %ident_t, align 8
  %0 = bitcast %ident_t* %.kmpc_loc.addr to i8*
  %1 = bitcast %ident_t* @6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false)
  %2 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2)
  store i32* %.global_tid., i32** %.global_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.global_tid..addr, metadata !950, metadata !62), !dbg !951
  %3 = ptrtoint i32** %.bound_tid..addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3)
  store i32* %.bound_tid., i32** %.bound_tid..addr, align 8
  call void @llvm.dbg.declare(metadata i32** %.bound_tid..addr, metadata !952, metadata !62), !dbg !951
  %4 = ptrtoint i32** %num_threads.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4)
  store i32* %num_threads, i32** %num_threads.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %num_threads.addr, metadata !953, metadata !62), !dbg !951
  %5 = ptrtoint i32** %num_threads.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %5, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.226, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %6 = load i32*, i32** %num_threads.addr, align 8, !dbg !954
  %7 = getelementptr inbounds %ident_t, %ident_t* %.kmpc_loc.addr, i32 0, i32 4, !dbg !956
  %8 = ptrtoint i8** %7 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %8)
  store i8* getelementptr inbounds ([39 x i8], [39 x i8]* @8, i32 0, i32 0), i8** %7, align 8, !dbg !956
  %9 = ptrtoint i32** %.global_tid..addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %9, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @105, i32 0, i32 0), i32 104, i32 -1, i32 8)
  %10 = load i32*, i32** %.global_tid..addr, align 8, !dbg !956
  %11 = ptrtoint i32* %10 to i64
  call void @__DiscoPoPOpenMPRead(i64 %11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @106, i32 0, i32 0), i32 104, i32 -1, i32 4)
  %12 = load i32, i32* %10, align 4, !dbg !956
  %13 = call i32 @__kmpc_master(%ident_t* %.kmpc_loc.addr, i32 %12), !dbg !956
  %14 = icmp ne i32 %13, 0, !dbg !956
  br i1 %14, label %omp_if.then, label %omp_if.end, !dbg !956

omp_if.then:                                      ; preds = %entry
  %call = call i32 @omp_get_num_threads(), !dbg !958
  %15 = ptrtoint i32* %6 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %15)
  store i32 %call, i32* %6, align 4, !dbg !960
  call void @__kmpc_end_master(%ident_t* %.kmpc_loc.addr, i32 %12), !dbg !961
  br label %omp_if.end, !dbg !963

omp_if.end:                                       ; preds = %omp_if.then, %entry
  ret void, !dbg !964
}

declare i32 @__kmpc_master(%ident_t*, i32)

declare i32 @omp_get_num_threads() #3

declare void @__kmpc_end_master(%ident_t*, i32)

; Function Attrs: nounwind uwtable
define double @randlc(double* %x, double %a) #0 !dbg !965 {
entry:
  %x.addr = alloca double*, align 8
  %a.addr = alloca double, align 8
  %r23 = alloca double, align 8
  %r46 = alloca double, align 8
  %t23 = alloca double, align 8
  %t46 = alloca double, align 8
  %t1 = alloca double, align 8
  %t2 = alloca double, align 8
  %t3 = alloca double, align 8
  %t4 = alloca double, align 8
  %a1 = alloca double, align 8
  %a2 = alloca double, align 8
  %x1 = alloca double, align 8
  %x2 = alloca double, align 8
  %z = alloca double, align 8
  %r = alloca double, align 8
  %0 = ptrtoint double** %x.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0)
  store double* %x, double** %x.addr, align 8
  call void @llvm.dbg.declare(metadata double** %x.addr, metadata !969, metadata !62), !dbg !970
  %1 = ptrtoint double* %a.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %1)
  store double %a, double* %a.addr, align 8
  call void @llvm.dbg.declare(metadata double* %a.addr, metadata !971, metadata !62), !dbg !972
  call void @llvm.dbg.declare(metadata double* %r23, metadata !973, metadata !62), !dbg !975
  %2 = ptrtoint double* %r23 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2)
  store double 0x3E80000000000000, double* %r23, align 8, !dbg !975
  call void @llvm.dbg.declare(metadata double* %r46, metadata !976, metadata !62), !dbg !977
  %3 = ptrtoint double* %r46 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3)
  store double 0x3D10000000000000, double* %r46, align 8, !dbg !977
  call void @llvm.dbg.declare(metadata double* %t23, metadata !978, metadata !62), !dbg !979
  %4 = ptrtoint double* %t23 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4)
  store double 8.388608e+06, double* %t23, align 8, !dbg !979
  call void @llvm.dbg.declare(metadata double* %t46, metadata !980, metadata !62), !dbg !981
  %5 = ptrtoint double* %t46 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5)
  store double 0x42D0000000000000, double* %t46, align 8, !dbg !981
  call void @llvm.dbg.declare(metadata double* %t1, metadata !982, metadata !62), !dbg !983
  call void @llvm.dbg.declare(metadata double* %t2, metadata !984, metadata !62), !dbg !985
  call void @llvm.dbg.declare(metadata double* %t3, metadata !986, metadata !62), !dbg !987
  call void @llvm.dbg.declare(metadata double* %t4, metadata !988, metadata !62), !dbg !989
  call void @llvm.dbg.declare(metadata double* %a1, metadata !990, metadata !62), !dbg !991
  call void @llvm.dbg.declare(metadata double* %a2, metadata !992, metadata !62), !dbg !993
  call void @llvm.dbg.declare(metadata double* %x1, metadata !994, metadata !62), !dbg !995
  call void @llvm.dbg.declare(metadata double* %x2, metadata !996, metadata !62), !dbg !997
  call void @llvm.dbg.declare(metadata double* %z, metadata !998, metadata !62), !dbg !999
  call void @llvm.dbg.declare(metadata double* %r, metadata !1000, metadata !62), !dbg !1001
  %6 = ptrtoint double* %a.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %6, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.229, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %7 = load double, double* %a.addr, align 8, !dbg !1002
  %mul = fmul double 0x3E80000000000000, %7, !dbg !1003
  %8 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %8)
  store double %mul, double* %t1, align 8, !dbg !1004
  %9 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %9, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.230, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %10 = load double, double* %t1, align 8, !dbg !1005
  %conv = fptosi double %10 to i32, !dbg !1006
  %conv1 = sitofp i32 %conv to double, !dbg !1006
  %11 = ptrtoint double* %a1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %11)
  store double %conv1, double* %a1, align 8, !dbg !1007
  %12 = ptrtoint double* %a.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %12, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.231, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %13 = load double, double* %a.addr, align 8, !dbg !1008
  %14 = ptrtoint double* %a1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %14, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.232, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %15 = load double, double* %a1, align 8, !dbg !1009
  %mul2 = fmul double 8.388608e+06, %15, !dbg !1010
  %sub = fsub double %13, %mul2, !dbg !1011
  %16 = ptrtoint double* %a2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %16)
  store double %sub, double* %a2, align 8, !dbg !1012
  %17 = ptrtoint double** %x.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %17, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.233, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %18 = load double*, double** %x.addr, align 8, !dbg !1013
  %19 = ptrtoint double* %18 to i64
  call void @__DiscoPoPOpenMPRead(i64 %19, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.234, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %20 = load double, double* %18, align 8, !dbg !1014
  %mul3 = fmul double 0x3E80000000000000, %20, !dbg !1015
  %21 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %21)
  store double %mul3, double* %t1, align 8, !dbg !1016
  %22 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %22, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.235, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %23 = load double, double* %t1, align 8, !dbg !1017
  %conv4 = fptosi double %23 to i32, !dbg !1018
  %conv5 = sitofp i32 %conv4 to double, !dbg !1018
  %24 = ptrtoint double* %x1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %24)
  store double %conv5, double* %x1, align 8, !dbg !1019
  %25 = ptrtoint double** %x.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %25, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.236, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %26 = load double*, double** %x.addr, align 8, !dbg !1020
  %27 = ptrtoint double* %26 to i64
  call void @__DiscoPoPOpenMPRead(i64 %27, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.237, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %28 = load double, double* %26, align 8, !dbg !1021
  %29 = ptrtoint double* %x1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %29, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.238, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %30 = load double, double* %x1, align 8, !dbg !1022
  %mul6 = fmul double 8.388608e+06, %30, !dbg !1023
  %sub7 = fsub double %28, %mul6, !dbg !1024
  %31 = ptrtoint double* %x2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %31)
  store double %sub7, double* %x2, align 8, !dbg !1025
  %32 = ptrtoint double* %a1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %32, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.239, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %33 = load double, double* %a1, align 8, !dbg !1026
  %34 = ptrtoint double* %x2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %34, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.240, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %35 = load double, double* %x2, align 8, !dbg !1027
  %mul8 = fmul double %33, %35, !dbg !1028
  %36 = ptrtoint double* %a2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %36, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.241, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %37 = load double, double* %a2, align 8, !dbg !1029
  %38 = ptrtoint double* %x1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %38, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.242, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %39 = load double, double* %x1, align 8, !dbg !1030
  %mul9 = fmul double %37, %39, !dbg !1031
  %add = fadd double %mul8, %mul9, !dbg !1032
  %40 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %40)
  store double %add, double* %t1, align 8, !dbg !1033
  %41 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %41, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.243, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %42 = load double, double* %t1, align 8, !dbg !1034
  %mul10 = fmul double 0x3E80000000000000, %42, !dbg !1035
  %conv11 = fptosi double %mul10 to i32, !dbg !1036
  %conv12 = sitofp i32 %conv11 to double, !dbg !1036
  %43 = ptrtoint double* %t2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %43)
  store double %conv12, double* %t2, align 8, !dbg !1037
  %44 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %44, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.244, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %45 = load double, double* %t1, align 8, !dbg !1038
  %46 = ptrtoint double* %t2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %46, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.245, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %47 = load double, double* %t2, align 8, !dbg !1039
  %mul13 = fmul double 8.388608e+06, %47, !dbg !1040
  %sub14 = fsub double %45, %mul13, !dbg !1041
  %48 = ptrtoint double* %z to i64
  call void @__DiscoPoPOpenMPWrite(i64 %48)
  store double %sub14, double* %z, align 8, !dbg !1042
  %49 = ptrtoint double* %z to i64
  call void @__DiscoPoPOpenMPRead(i64 %49, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.246, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %50 = load double, double* %z, align 8, !dbg !1043
  %mul15 = fmul double 8.388608e+06, %50, !dbg !1044
  %51 = ptrtoint double* %a2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %51, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.247, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %52 = load double, double* %a2, align 8, !dbg !1045
  %53 = ptrtoint double* %x2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %53, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.248, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %54 = load double, double* %x2, align 8, !dbg !1046
  %mul16 = fmul double %52, %54, !dbg !1047
  %add17 = fadd double %mul15, %mul16, !dbg !1048
  %55 = ptrtoint double* %t3 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %55)
  store double %add17, double* %t3, align 8, !dbg !1049
  %56 = ptrtoint double* %t3 to i64
  call void @__DiscoPoPOpenMPRead(i64 %56, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.249, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %57 = load double, double* %t3, align 8, !dbg !1050
  %mul18 = fmul double 0x3D10000000000000, %57, !dbg !1051
  %conv19 = fptosi double %mul18 to i32, !dbg !1052
  %conv20 = sitofp i32 %conv19 to double, !dbg !1052
  %58 = ptrtoint double* %t4 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %58)
  store double %conv20, double* %t4, align 8, !dbg !1053
  %59 = ptrtoint double* %t3 to i64
  call void @__DiscoPoPOpenMPRead(i64 %59, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.250, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %60 = load double, double* %t3, align 8, !dbg !1054
  %61 = ptrtoint double* %t4 to i64
  call void @__DiscoPoPOpenMPRead(i64 %61, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.251, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %62 = load double, double* %t4, align 8, !dbg !1055
  %mul21 = fmul double 0x42D0000000000000, %62, !dbg !1056
  %sub22 = fsub double %60, %mul21, !dbg !1057
  %63 = ptrtoint double** %x.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %63, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.252, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %64 = load double*, double** %x.addr, align 8, !dbg !1058
  %65 = ptrtoint double* %64 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %65)
  store double %sub22, double* %64, align 8, !dbg !1059
  %66 = ptrtoint double** %x.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %66, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.253, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %67 = load double*, double** %x.addr, align 8, !dbg !1060
  %68 = ptrtoint double* %67 to i64
  call void @__DiscoPoPOpenMPRead(i64 %68, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.254, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %69 = load double, double* %67, align 8, !dbg !1061
  %mul23 = fmul double 0x3D10000000000000, %69, !dbg !1062
  %70 = ptrtoint double* %r to i64
  call void @__DiscoPoPOpenMPWrite(i64 %70)
  store double %mul23, double* %r, align 8, !dbg !1063
  %71 = ptrtoint double* %r to i64
  call void @__DiscoPoPOpenMPRead(i64 %71, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.255, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %72 = load double, double* %r, align 8, !dbg !1064
  ret double %72, !dbg !1065
}

; Function Attrs: nounwind uwtable
define void @vranlc(i32 %n, double* %x, double %a, double* %y) #0 !dbg !1066 {
entry:
  %n.addr = alloca i32, align 4
  %x.addr = alloca double*, align 8
  %a.addr = alloca double, align 8
  %y.addr = alloca double*, align 8
  %r23 = alloca double, align 8
  %r46 = alloca double, align 8
  %t23 = alloca double, align 8
  %t46 = alloca double, align 8
  %t1 = alloca double, align 8
  %t2 = alloca double, align 8
  %t3 = alloca double, align 8
  %t4 = alloca double, align 8
  %a1 = alloca double, align 8
  %a2 = alloca double, align 8
  %x1 = alloca double, align 8
  %x2 = alloca double, align 8
  %z = alloca double, align 8
  %i = alloca i32, align 4
  %0 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0)
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !1069, metadata !62), !dbg !1070
  %1 = ptrtoint double** %x.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %1)
  store double* %x, double** %x.addr, align 8
  call void @llvm.dbg.declare(metadata double** %x.addr, metadata !1071, metadata !62), !dbg !1072
  %2 = ptrtoint double* %a.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %2)
  store double %a, double* %a.addr, align 8
  call void @llvm.dbg.declare(metadata double* %a.addr, metadata !1073, metadata !62), !dbg !1074
  %3 = ptrtoint double** %y.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %3)
  store double* %y, double** %y.addr, align 8
  call void @llvm.dbg.declare(metadata double** %y.addr, metadata !1075, metadata !62), !dbg !1076
  call void @llvm.dbg.declare(metadata double* %r23, metadata !1077, metadata !62), !dbg !1078
  %4 = ptrtoint double* %r23 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4)
  store double 0x3E80000000000000, double* %r23, align 8, !dbg !1078
  call void @llvm.dbg.declare(metadata double* %r46, metadata !1079, metadata !62), !dbg !1080
  %5 = ptrtoint double* %r46 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5)
  store double 0x3D10000000000000, double* %r46, align 8, !dbg !1080
  call void @llvm.dbg.declare(metadata double* %t23, metadata !1081, metadata !62), !dbg !1082
  %6 = ptrtoint double* %t23 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %6)
  store double 8.388608e+06, double* %t23, align 8, !dbg !1082
  call void @llvm.dbg.declare(metadata double* %t46, metadata !1083, metadata !62), !dbg !1084
  %7 = ptrtoint double* %t46 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %7)
  store double 0x42D0000000000000, double* %t46, align 8, !dbg !1084
  call void @llvm.dbg.declare(metadata double* %t1, metadata !1085, metadata !62), !dbg !1086
  call void @llvm.dbg.declare(metadata double* %t2, metadata !1087, metadata !62), !dbg !1088
  call void @llvm.dbg.declare(metadata double* %t3, metadata !1089, metadata !62), !dbg !1090
  call void @llvm.dbg.declare(metadata double* %t4, metadata !1091, metadata !62), !dbg !1092
  call void @llvm.dbg.declare(metadata double* %a1, metadata !1093, metadata !62), !dbg !1094
  call void @llvm.dbg.declare(metadata double* %a2, metadata !1095, metadata !62), !dbg !1096
  call void @llvm.dbg.declare(metadata double* %x1, metadata !1097, metadata !62), !dbg !1098
  call void @llvm.dbg.declare(metadata double* %x2, metadata !1099, metadata !62), !dbg !1100
  call void @llvm.dbg.declare(metadata double* %z, metadata !1101, metadata !62), !dbg !1102
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1103, metadata !62), !dbg !1104
  %8 = ptrtoint double* %a.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.256, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %9 = load double, double* %a.addr, align 8, !dbg !1105
  %mul = fmul double 0x3E80000000000000, %9, !dbg !1106
  %10 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %10)
  store double %mul, double* %t1, align 8, !dbg !1107
  %11 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %11, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.257, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %12 = load double, double* %t1, align 8, !dbg !1108
  %conv = fptosi double %12 to i32, !dbg !1109
  %conv1 = sitofp i32 %conv to double, !dbg !1109
  %13 = ptrtoint double* %a1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %13)
  store double %conv1, double* %a1, align 8, !dbg !1110
  %14 = ptrtoint double* %a.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %14, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.258, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %15 = load double, double* %a.addr, align 8, !dbg !1111
  %16 = ptrtoint double* %a1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %16, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.259, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %17 = load double, double* %a1, align 8, !dbg !1112
  %mul2 = fmul double 8.388608e+06, %17, !dbg !1113
  %sub = fsub double %15, %mul2, !dbg !1114
  %18 = ptrtoint double* %a2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %18)
  store double %sub, double* %a2, align 8, !dbg !1115
  %19 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %19)
  store i32 0, i32* %i, align 4, !dbg !1116
  br label %for.cond, !dbg !1118

for.cond:                                         ; preds = %for.inc, %entry
  %20 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %20, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.260, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %21 = load i32, i32* %i, align 4, !dbg !1119
  %22 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %22, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.261, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %23 = load i32, i32* %n.addr, align 4, !dbg !1122
  %cmp = icmp slt i32 %21, %23, !dbg !1123
  br i1 %cmp, label %for.body, label %for.end, !dbg !1124

for.body:                                         ; preds = %for.cond
  %24 = ptrtoint double** %x.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %24, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.262, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %25 = load double*, double** %x.addr, align 8, !dbg !1125
  %26 = ptrtoint double* %25 to i64
  call void @__DiscoPoPOpenMPRead(i64 %26, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.263, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %27 = load double, double* %25, align 8, !dbg !1127
  %mul4 = fmul double 0x3E80000000000000, %27, !dbg !1128
  %28 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %28)
  store double %mul4, double* %t1, align 8, !dbg !1129
  %29 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %29, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.264, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %30 = load double, double* %t1, align 8, !dbg !1130
  %conv5 = fptosi double %30 to i32, !dbg !1131
  %conv6 = sitofp i32 %conv5 to double, !dbg !1131
  %31 = ptrtoint double* %x1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %31)
  store double %conv6, double* %x1, align 8, !dbg !1132
  %32 = ptrtoint double** %x.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %32, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.265, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %33 = load double*, double** %x.addr, align 8, !dbg !1133
  %34 = ptrtoint double* %33 to i64
  call void @__DiscoPoPOpenMPRead(i64 %34, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.266, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %35 = load double, double* %33, align 8, !dbg !1134
  %36 = ptrtoint double* %x1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %36, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.267, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %37 = load double, double* %x1, align 8, !dbg !1135
  %mul7 = fmul double 8.388608e+06, %37, !dbg !1136
  %sub8 = fsub double %35, %mul7, !dbg !1137
  %38 = ptrtoint double* %x2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %38)
  store double %sub8, double* %x2, align 8, !dbg !1138
  %39 = ptrtoint double* %a1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %39, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.268, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %40 = load double, double* %a1, align 8, !dbg !1139
  %41 = ptrtoint double* %x2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %41, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.269, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %42 = load double, double* %x2, align 8, !dbg !1140
  %mul9 = fmul double %40, %42, !dbg !1141
  %43 = ptrtoint double* %a2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %43, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.270, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %44 = load double, double* %a2, align 8, !dbg !1142
  %45 = ptrtoint double* %x1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %45, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.271, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %46 = load double, double* %x1, align 8, !dbg !1143
  %mul10 = fmul double %44, %46, !dbg !1144
  %add = fadd double %mul9, %mul10, !dbg !1145
  %47 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %47)
  store double %add, double* %t1, align 8, !dbg !1146
  %48 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %48, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.272, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %49 = load double, double* %t1, align 8, !dbg !1147
  %mul11 = fmul double 0x3E80000000000000, %49, !dbg !1148
  %conv12 = fptosi double %mul11 to i32, !dbg !1149
  %conv13 = sitofp i32 %conv12 to double, !dbg !1149
  %50 = ptrtoint double* %t2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %50)
  store double %conv13, double* %t2, align 8, !dbg !1150
  %51 = ptrtoint double* %t1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %51, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.273, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %52 = load double, double* %t1, align 8, !dbg !1151
  %53 = ptrtoint double* %t2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %53, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.274, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %54 = load double, double* %t2, align 8, !dbg !1152
  %mul14 = fmul double 8.388608e+06, %54, !dbg !1153
  %sub15 = fsub double %52, %mul14, !dbg !1154
  %55 = ptrtoint double* %z to i64
  call void @__DiscoPoPOpenMPWrite(i64 %55)
  store double %sub15, double* %z, align 8, !dbg !1155
  %56 = ptrtoint double* %z to i64
  call void @__DiscoPoPOpenMPRead(i64 %56, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.275, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %57 = load double, double* %z, align 8, !dbg !1156
  %mul16 = fmul double 8.388608e+06, %57, !dbg !1157
  %58 = ptrtoint double* %a2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %58, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.276, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %59 = load double, double* %a2, align 8, !dbg !1158
  %60 = ptrtoint double* %x2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %60, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.277, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %61 = load double, double* %x2, align 8, !dbg !1159
  %mul17 = fmul double %59, %61, !dbg !1160
  %add18 = fadd double %mul16, %mul17, !dbg !1161
  %62 = ptrtoint double* %t3 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %62)
  store double %add18, double* %t3, align 8, !dbg !1162
  %63 = ptrtoint double* %t3 to i64
  call void @__DiscoPoPOpenMPRead(i64 %63, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.278, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %64 = load double, double* %t3, align 8, !dbg !1163
  %mul19 = fmul double 0x3D10000000000000, %64, !dbg !1164
  %conv20 = fptosi double %mul19 to i32, !dbg !1165
  %conv21 = sitofp i32 %conv20 to double, !dbg !1165
  %65 = ptrtoint double* %t4 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %65)
  store double %conv21, double* %t4, align 8, !dbg !1166
  %66 = ptrtoint double* %t3 to i64
  call void @__DiscoPoPOpenMPRead(i64 %66, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.279, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %67 = load double, double* %t3, align 8, !dbg !1167
  %68 = ptrtoint double* %t4 to i64
  call void @__DiscoPoPOpenMPRead(i64 %68, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.280, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %69 = load double, double* %t4, align 8, !dbg !1168
  %mul22 = fmul double 0x42D0000000000000, %69, !dbg !1169
  %sub23 = fsub double %67, %mul22, !dbg !1170
  %70 = ptrtoint double** %x.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %70, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.281, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %71 = load double*, double** %x.addr, align 8, !dbg !1171
  %72 = ptrtoint double* %71 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %72)
  store double %sub23, double* %71, align 8, !dbg !1172
  %73 = ptrtoint double** %x.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %73, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.282, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %74 = load double*, double** %x.addr, align 8, !dbg !1173
  %75 = ptrtoint double* %74 to i64
  call void @__DiscoPoPOpenMPRead(i64 %75, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.283, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %76 = load double, double* %74, align 8, !dbg !1174
  %mul24 = fmul double 0x3D10000000000000, %76, !dbg !1175
  %77 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %77, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.284, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %78 = load i32, i32* %i, align 4, !dbg !1176
  %idxprom = sext i32 %78 to i64, !dbg !1177
  %79 = ptrtoint double** %y.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %79, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.285, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %80 = load double*, double** %y.addr, align 8, !dbg !1177
  %arrayidx = getelementptr inbounds double, double* %80, i64 %idxprom, !dbg !1177
  %81 = ptrtoint double* %arrayidx to i64
  call void @__DiscoPoPOpenMPWrite(i64 %81)
  store double %mul24, double* %arrayidx, align 8, !dbg !1178
  br label %for.inc, !dbg !1179

for.inc:                                          ; preds = %for.body
  %82 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPRead(i64 %82, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.286, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %83 = load i32, i32* %i, align 4, !dbg !1180
  %inc = add nsw i32 %83, 1, !dbg !1180
  %84 = ptrtoint i32* %i to i64
  call void @__DiscoPoPOpenMPWrite(i64 %84)
  store i32 %inc, i32* %i, align 4, !dbg !1180
  br label %for.cond, !dbg !1182, !llvm.loop !1183

for.end:                                          ; preds = %for.cond
  ret void, !dbg !1185
}

; Function Attrs: nounwind uwtable
define void @timer_clear(i32 %n) #0 !dbg !1186 {
entry:
  %n.addr = alloca i32, align 4
  %0 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0)
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !1189, metadata !62), !dbg !1190
  %1 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.287, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %2 = load i32, i32* %n.addr, align 4, !dbg !1191
  %idxprom = sext i32 %2 to i64, !dbg !1192
  %3 = call [64 x double]* @_ZTWL7elapsed(), !dbg !1192
  %arrayidx = getelementptr inbounds [64 x double], [64 x double]* %3, i64 0, i64 %idxprom, !dbg !1192
  %4 = ptrtoint double* %arrayidx to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4)
  store double 0.000000e+00, double* %arrayidx, align 8, !dbg !1193
  %5 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %5, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.288, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %6 = load i32, i32* %n.addr, align 4, !dbg !1194
  %idxprom1 = sext i32 %6 to i64, !dbg !1195
  %7 = call [64 x i32]* @_ZTWL5count(), !dbg !1195
  %arrayidx2 = getelementptr inbounds [64 x i32], [64 x i32]* %7, i64 0, i64 %idxprom1, !dbg !1195
  %8 = ptrtoint i32* %arrayidx2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %8)
  store i32 0, i32* %arrayidx2, align 4, !dbg !1196
  ret void, !dbg !1197
}

; Function Attrs: nounwind uwtable
define internal [64 x double]* @_ZTWL7elapsed() #6 {
  ret [64 x double]* @elapsed
}

; Function Attrs: nounwind uwtable
define internal [64 x i32]* @_ZTWL5count() #6 {
  ret [64 x i32]* @count
}

; Function Attrs: nounwind uwtable
define void @timer_start(i32 %n) #0 !dbg !1198 {
entry:
  %n.addr = alloca i32, align 4
  %0 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0)
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !1199, metadata !62), !dbg !1200
  %call = call double @elapsed_time(), !dbg !1201
  %1 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.289, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %2 = load i32, i32* %n.addr, align 4, !dbg !1202
  %idxprom = sext i32 %2 to i64, !dbg !1203
  %3 = call [64 x double]* @_ZTWL5start(), !dbg !1204
  %arrayidx = getelementptr inbounds [64 x double], [64 x double]* %3, i64 0, i64 %idxprom, !dbg !1203
  %4 = ptrtoint double* %arrayidx to i64
  call void @__DiscoPoPOpenMPWrite(i64 %4)
  store double %call, double* %arrayidx, align 8, !dbg !1206
  ret void, !dbg !1207
}

; Function Attrs: nounwind uwtable
define internal double @elapsed_time() #0 !dbg !1208 {
entry:
  %t = alloca double, align 8
  call void @llvm.dbg.declare(metadata double* %t, metadata !1210, metadata !62), !dbg !1211
  %call = call double @omp_get_wtime(), !dbg !1212
  %0 = ptrtoint double* %t to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0)
  store double %call, double* %t, align 8, !dbg !1213
  %1 = ptrtoint double* %t to i64
  call void @__DiscoPoPOpenMPRead(i64 %1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.290, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %2 = load double, double* %t, align 8, !dbg !1214
  ret double %2, !dbg !1215
}

; Function Attrs: nounwind uwtable
define internal [64 x double]* @_ZTWL5start() #6 {
  ret [64 x double]* @start
}

declare double @omp_get_wtime() #3

; Function Attrs: nounwind uwtable
define void @timer_stop(i32 %n) #0 !dbg !1216 {
entry:
  %n.addr = alloca i32, align 4
  %t = alloca double, align 8
  %now = alloca double, align 8
  %0 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0)
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !1217, metadata !62), !dbg !1218
  call void @llvm.dbg.declare(metadata double* %t, metadata !1219, metadata !62), !dbg !1220
  call void @llvm.dbg.declare(metadata double* %now, metadata !1221, metadata !62), !dbg !1222
  %call = call double @elapsed_time(), !dbg !1223
  %1 = ptrtoint double* %now to i64
  call void @__DiscoPoPOpenMPWrite(i64 %1)
  store double %call, double* %now, align 8, !dbg !1224
  %2 = ptrtoint double* %now to i64
  call void @__DiscoPoPOpenMPRead(i64 %2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.291, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %3 = load double, double* %now, align 8, !dbg !1225
  %4 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.292, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %5 = load i32, i32* %n.addr, align 4, !dbg !1226
  %idxprom = sext i32 %5 to i64, !dbg !1227
  %6 = call [64 x double]* @_ZTWL5start(), !dbg !1227
  %arrayidx = getelementptr inbounds [64 x double], [64 x double]* %6, i64 0, i64 %idxprom, !dbg !1227
  %7 = ptrtoint double* %arrayidx to i64
  call void @__DiscoPoPOpenMPRead(i64 %7, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.293, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %8 = load double, double* %arrayidx, align 8, !dbg !1227
  %sub = fsub double %3, %8, !dbg !1228
  %9 = ptrtoint double* %t to i64
  call void @__DiscoPoPOpenMPWrite(i64 %9)
  store double %sub, double* %t, align 8, !dbg !1229
  %10 = ptrtoint double* %t to i64
  call void @__DiscoPoPOpenMPRead(i64 %10, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.294, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %11 = load double, double* %t, align 8, !dbg !1230
  %12 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %12, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.295, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %13 = load i32, i32* %n.addr, align 4, !dbg !1231
  %idxprom1 = sext i32 %13 to i64, !dbg !1232
  %14 = call [64 x double]* @_ZTWL7elapsed(), !dbg !1232
  %arrayidx2 = getelementptr inbounds [64 x double], [64 x double]* %14, i64 0, i64 %idxprom1, !dbg !1232
  %15 = ptrtoint double* %arrayidx2 to i64
  call void @__DiscoPoPOpenMPRead(i64 %15, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.296, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %16 = load double, double* %arrayidx2, align 8, !dbg !1233
  %add = fadd double %16, %11, !dbg !1233
  %17 = ptrtoint double* %arrayidx2 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %17)
  store double %add, double* %arrayidx2, align 8, !dbg !1233
  %18 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %18, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.297, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %19 = load i32, i32* %n.addr, align 4, !dbg !1234
  %idxprom3 = sext i32 %19 to i64, !dbg !1235
  %20 = call [64 x i32]* @_ZTWL5count(), !dbg !1235
  %arrayidx4 = getelementptr inbounds [64 x i32], [64 x i32]* %20, i64 0, i64 %idxprom3, !dbg !1235
  %21 = ptrtoint i32* %arrayidx4 to i64
  call void @__DiscoPoPOpenMPRead(i64 %21, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.298, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %22 = load i32, i32* %arrayidx4, align 4, !dbg !1236
  %inc = add i32 %22, 1, !dbg !1236
  %23 = ptrtoint i32* %arrayidx4 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %23)
  store i32 %inc, i32* %arrayidx4, align 4, !dbg !1236
  ret void, !dbg !1237
}

; Function Attrs: nounwind uwtable
define double @timer_read(i32 %n) #0 !dbg !1238 {
entry:
  %n.addr = alloca i32, align 4
  %0 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0)
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !1241, metadata !62), !dbg !1242
  %1 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.299, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %2 = load i32, i32* %n.addr, align 4, !dbg !1243
  %idxprom = sext i32 %2 to i64, !dbg !1244
  %3 = call [64 x double]* @_ZTWL7elapsed(), !dbg !1244
  %arrayidx = getelementptr inbounds [64 x double], [64 x double]* %3, i64 0, i64 %idxprom, !dbg !1244
  %4 = ptrtoint double* %arrayidx to i64
  call void @__DiscoPoPOpenMPRead(i64 %4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.300, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %5 = load double, double* %arrayidx, align 8, !dbg !1244
  ret double %5, !dbg !1245
}

; Function Attrs: nounwind uwtable
define i32 @timer_count(i32 %n) #0 !dbg !1246 {
entry:
  %n.addr = alloca i32, align 4
  %0 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0)
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !1249, metadata !62), !dbg !1250
  %1 = ptrtoint i32* %n.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.301, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %2 = load i32, i32* %n.addr, align 4, !dbg !1251
  %idxprom = sext i32 %2 to i64, !dbg !1252
  %3 = call [64 x i32]* @_ZTWL5count(), !dbg !1252
  %arrayidx = getelementptr inbounds [64 x i32], [64 x i32]* %3, i64 0, i64 %idxprom, !dbg !1252
  %4 = ptrtoint i32* %arrayidx to i64
  call void @__DiscoPoPOpenMPRead(i64 %4, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.302, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %5 = load i32, i32* %arrayidx, align 4, !dbg !1252
  ret i32 %5, !dbg !1253
}

; Function Attrs: nounwind uwtable
define void @wtime_(double* %t) #0 !dbg !48 {
entry:
  %t.addr = alloca double*, align 8
  %tv = alloca %struct.timeval, align 8
  %0 = ptrtoint double** %t.addr to i64
  call void @__DiscoPoPOpenMPWrite(i64 %0)
  store double* %t, double** %t.addr, align 8
  call void @llvm.dbg.declare(metadata double** %t.addr, metadata !1254, metadata !62), !dbg !1255
  call void @llvm.dbg.declare(metadata %struct.timeval* %tv, metadata !1256, metadata !62), !dbg !1265
  %call = call i32 @gettimeofday(%struct.timeval* %tv, %struct.timezone* null) #7, !dbg !1266
  %1 = ptrtoint i32* @wtime_.sec to i64
  call void @__DiscoPoPOpenMPRead(i64 %1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.303, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %2 = load i32, i32* @wtime_.sec, align 4, !dbg !1267
  %cmp = icmp slt i32 %2, 0, !dbg !1269
  br i1 %cmp, label %if.then, label %if.end, !dbg !1270

if.then:                                          ; preds = %entry
  %tv_sec = getelementptr inbounds %struct.timeval, %struct.timeval* %tv, i32 0, i32 0, !dbg !1271
  %3 = ptrtoint i64* %tv_sec to i64
  call void @__DiscoPoPOpenMPRead(i64 %3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.304, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %4 = load i64, i64* %tv_sec, align 8, !dbg !1271
  %conv = trunc i64 %4 to i32, !dbg !1273
  %5 = ptrtoint i32* @wtime_.sec to i64
  call void @__DiscoPoPOpenMPWrite(i64 %5)
  store i32 %conv, i32* @wtime_.sec, align 4, !dbg !1274
  br label %if.end, !dbg !1275

if.end:                                           ; preds = %if.then, %entry
  %tv_sec1 = getelementptr inbounds %struct.timeval, %struct.timeval* %tv, i32 0, i32 0, !dbg !1276
  %6 = ptrtoint i64* %tv_sec1 to i64
  call void @__DiscoPoPOpenMPRead(i64 %6, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.305, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %7 = load i64, i64* %tv_sec1, align 8, !dbg !1276
  %8 = ptrtoint i32* @wtime_.sec to i64
  call void @__DiscoPoPOpenMPRead(i64 %8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.306, i32 0, i32 0), i32 0, i32 -1, i32 4)
  %9 = load i32, i32* @wtime_.sec, align 4, !dbg !1277
  %conv2 = sext i32 %9 to i64, !dbg !1277
  %sub = sub nsw i64 %7, %conv2, !dbg !1278
  %conv3 = sitofp i64 %sub to double, !dbg !1279
  %tv_usec = getelementptr inbounds %struct.timeval, %struct.timeval* %tv, i32 0, i32 1, !dbg !1280
  %10 = ptrtoint i64* %tv_usec to i64
  call void @__DiscoPoPOpenMPRead(i64 %10, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.307, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %11 = load i64, i64* %tv_usec, align 8, !dbg !1280
  %conv4 = sitofp i64 %11 to double, !dbg !1281
  %mul = fmul double 1.000000e-06, %conv4, !dbg !1282
  %add = fadd double %conv3, %mul, !dbg !1283
  %12 = ptrtoint double** %t.addr to i64
  call void @__DiscoPoPOpenMPRead(i64 %12, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.308, i32 0, i32 0), i32 0, i32 -1, i32 8)
  %13 = load double*, double** %t.addr, align 8, !dbg !1284
  %14 = ptrtoint double* %13 to i64
  call void @__DiscoPoPOpenMPWrite(i64 %14)
  store double %add, double* %13, align 8, !dbg !1285
  ret void, !dbg !1286
}

; Function Attrs: nounwind
declare i32 @gettimeofday(%struct.timeval*, %struct.timezone*) #4

declare void @__DiscoPoPOpenMPInitialize()

declare void @__CollectThreadInfo()

declare void @__DiscoPoPOpenMPFinalize()

declare void @__DiscoPoPOpenMPRead(i64, i8*, i32, i32, i32)

declare void @__DiscoPoPOpenMPWrite(i64)

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.dbg.cu = !{!0, !21, !27, !32, !44}
!llvm.ident = !{!52, !52, !52, !52, !52}
!llvm.module.flags = !{!53, !54}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.9.1 (tags/RELEASE_391/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !8, globals: !10)
!1 = !DIFile(filename: "ep.c", directory: "/home/amiryousefi/llvmTemp/Codes/NAS/NPB3.3-OMP-C/EP")
!2 = !{!3}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !4, line: 4, size: 32, align: 32, elements: !5)
!4 = !DIFile(filename: "../common/type.h", directory: "/home/amiryousefi/llvmTemp/Codes/NAS/NPB3.3-OMP-C/EP")
!5 = !{!6, !7}
!6 = !DIEnumerator(name: "false", value: 0)
!7 = !DIEnumerator(name: "true", value: 1)
!8 = !{!9}
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64, align: 64)
!10 = !{!11, !16, !20}
!11 = distinct !DIGlobalVariable(name: "x", scope: !0, file: !1, line: 68, type: !12, isLocal: true, isDefinition: true, variable: [131072 x double]* @x)
!12 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 8388608, align: 64, elements: !14)
!13 = !DIBasicType(name: "double", size: 64, align: 64, encoding: DW_ATE_float)
!14 = !{!15}
!15 = !DISubrange(count: 131072)
!16 = distinct !DIGlobalVariable(name: "qq", scope: !0, file: !1, line: 69, type: !17, isLocal: true, isDefinition: true, variable: [10 x double]* @qq)
!17 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 640, align: 64, elements: !18)
!18 = !{!19}
!19 = !DISubrange(count: 10)
!20 = distinct !DIGlobalVariable(name: "q", scope: !0, file: !1, line: 71, type: !17, isLocal: true, isDefinition: true, variable: [10 x double]* @q)
!21 = distinct !DICompileUnit(language: DW_LANG_C99, file: !22, producer: "clang version 3.9.1 (tags/RELEASE_391/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !23, retainedTypes: !26)
!22 = !DIFile(filename: "../common/print_results.c", directory: "/home/amiryousefi/llvmTemp/Codes/NAS/NPB3.3-OMP-C/common")
!23 = !{!24}
!24 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !25, line: 4, size: 32, align: 32, elements: !5)
!25 = !DIFile(filename: "../common/type.h", directory: "/home/amiryousefi/llvmTemp/Codes/NAS/NPB3.3-OMP-C/common")
!26 = !{!13}
!27 = distinct !DICompileUnit(language: DW_LANG_C99, file: !28, producer: "clang version 3.9.1 (tags/RELEASE_391/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !29, retainedTypes: !30)
!28 = !DIFile(filename: "../common/randdp.c", directory: "/home/amiryousefi/llvmTemp/Codes/NAS/NPB3.3-OMP-C/common")
!29 = !{}
!30 = !{!31}
!31 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!32 = distinct !DICompileUnit(language: DW_LANG_C99, file: !33, producer: "clang version 3.9.1 (tags/RELEASE_391/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !29, globals: !34)
!33 = !DIFile(filename: "../common/c_timers.c", directory: "/home/amiryousefi/llvmTemp/Codes/NAS/NPB3.3-OMP-C/common")
!34 = !{!35, !40, !41}
!35 = distinct !DIGlobalVariable(name: "start", scope: !32, file: !36, line: 28, type: !37, isLocal: true, isDefinition: true, variable: [64 x double]* @start)
!36 = !DIFile(filename: "c_timers.c", directory: "/home/amiryousefi/llvmTemp/Codes/NAS/NPB3.3-OMP-C/common")
!37 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 4096, align: 64, elements: !38)
!38 = !{!39}
!39 = !DISubrange(count: 64)
!40 = distinct !DIGlobalVariable(name: "elapsed", scope: !32, file: !36, line: 28, type: !37, isLocal: true, isDefinition: true, variable: [64 x double]* @elapsed)
!41 = distinct !DIGlobalVariable(name: "count", scope: !32, file: !36, line: 29, type: !42, isLocal: true, isDefinition: true, variable: [64 x i32]* @count)
!42 = !DICompositeType(tag: DW_TAG_array_type, baseType: !43, size: 2048, align: 32, elements: !38)
!43 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!44 = distinct !DICompileUnit(language: DW_LANG_C99, file: !45, producer: "clang version 3.9.1 (tags/RELEASE_391/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !29, globals: !46)
!45 = !DIFile(filename: "../common/wtime.c", directory: "/home/amiryousefi/llvmTemp/Codes/NAS/NPB3.3-OMP-C/common")
!46 = !{!47}
!47 = distinct !DIGlobalVariable(name: "sec", scope: !48, file: !45, line: 10, type: !31, isLocal: true, isDefinition: true, variable: i32* @wtime_.sec)
!48 = distinct !DISubprogram(name: "wtime_", scope: !45, file: !45, line: 7, type: !49, isLocal: false, isDefinition: true, scopeLine: 8, flags: DIFlagPrototyped, isOptimized: false, unit: !44, variables: !29)
!49 = !DISubroutineType(types: !50)
!50 = !{null, !51}
!51 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !13, size: 64, align: 64)
!52 = !{!"clang version 3.9.1 (tags/RELEASE_391/final)"}
!53 = !{i32 2, !"Dwarf Version", i32 4}
!54 = !{i32 2, !"Debug Info Version", i32 3}
!55 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 74, type: !56, isLocal: false, isDefinition: true, scopeLine: 75, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !29)
!56 = !DISubroutineType(types: !57)
!57 = !{!31, !31, !58}
!58 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !59, size: 64, align: 64)
!59 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !60, size: 64, align: 64)
!60 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!61 = !DILocalVariable(name: "argc", arg: 1, scope: !55, file: !1, line: 74, type: !31)
!62 = !DIExpression()
!63 = !DILocation(line: 74, column: 14, scope: !55)
!64 = !DILocalVariable(name: "argv", arg: 2, scope: !55, file: !1, line: 74, type: !58)
!65 = !DILocation(line: 74, column: 26, scope: !55)
!66 = !DILocalVariable(name: "Mops", scope: !55, file: !1, line: 76, type: !13)
!67 = !DILocation(line: 76, column: 10, scope: !55)
!68 = !DILocalVariable(name: "t1", scope: !55, file: !1, line: 76, type: !13)
!69 = !DILocation(line: 76, column: 16, scope: !55)
!70 = !DILocalVariable(name: "t2", scope: !55, file: !1, line: 76, type: !13)
!71 = !DILocation(line: 76, column: 20, scope: !55)
!72 = !DILocalVariable(name: "t3", scope: !55, file: !1, line: 76, type: !13)
!73 = !DILocation(line: 76, column: 24, scope: !55)
!74 = !DILocalVariable(name: "t4", scope: !55, file: !1, line: 76, type: !13)
!75 = !DILocation(line: 76, column: 28, scope: !55)
!76 = !DILocalVariable(name: "x1", scope: !55, file: !1, line: 76, type: !13)
!77 = !DILocation(line: 76, column: 32, scope: !55)
!78 = !DILocalVariable(name: "x2", scope: !55, file: !1, line: 76, type: !13)
!79 = !DILocation(line: 76, column: 36, scope: !55)
!80 = !DILocalVariable(name: "sx", scope: !55, file: !1, line: 77, type: !13)
!81 = !DILocation(line: 77, column: 10, scope: !55)
!82 = !DILocalVariable(name: "sy", scope: !55, file: !1, line: 77, type: !13)
!83 = !DILocation(line: 77, column: 14, scope: !55)
!84 = !DILocalVariable(name: "tm", scope: !55, file: !1, line: 77, type: !13)
!85 = !DILocation(line: 77, column: 18, scope: !55)
!86 = !DILocalVariable(name: "an", scope: !55, file: !1, line: 77, type: !13)
!87 = !DILocation(line: 77, column: 22, scope: !55)
!88 = !DILocalVariable(name: "tt", scope: !55, file: !1, line: 77, type: !13)
!89 = !DILocation(line: 77, column: 26, scope: !55)
!90 = !DILocalVariable(name: "gc", scope: !55, file: !1, line: 77, type: !13)
!91 = !DILocation(line: 77, column: 30, scope: !55)
!92 = !DILocalVariable(name: "sx_verify_value", scope: !55, file: !1, line: 78, type: !13)
!93 = !DILocation(line: 78, column: 10, scope: !55)
!94 = !DILocalVariable(name: "sy_verify_value", scope: !55, file: !1, line: 78, type: !13)
!95 = !DILocation(line: 78, column: 27, scope: !55)
!96 = !DILocalVariable(name: "sx_err", scope: !55, file: !1, line: 78, type: !13)
!97 = !DILocation(line: 78, column: 44, scope: !55)
!98 = !DILocalVariable(name: "sy_err", scope: !55, file: !1, line: 78, type: !13)
!99 = !DILocation(line: 78, column: 52, scope: !55)
!100 = !DILocalVariable(name: "np", scope: !55, file: !1, line: 79, type: !31)
!101 = !DILocation(line: 79, column: 10, scope: !55)
!102 = !DILocalVariable(name: "i", scope: !55, file: !1, line: 80, type: !31)
!103 = !DILocation(line: 80, column: 10, scope: !55)
!104 = !DILocalVariable(name: "ik", scope: !55, file: !1, line: 80, type: !31)
!105 = !DILocation(line: 80, column: 13, scope: !55)
!106 = !DILocalVariable(name: "kk", scope: !55, file: !1, line: 80, type: !31)
!107 = !DILocation(line: 80, column: 17, scope: !55)
!108 = !DILocalVariable(name: "l", scope: !55, file: !1, line: 80, type: !31)
!109 = !DILocation(line: 80, column: 21, scope: !55)
!110 = !DILocalVariable(name: "k", scope: !55, file: !1, line: 80, type: !31)
!111 = !DILocation(line: 80, column: 24, scope: !55)
!112 = !DILocalVariable(name: "nit", scope: !55, file: !1, line: 80, type: !31)
!113 = !DILocation(line: 80, column: 27, scope: !55)
!114 = !DILocalVariable(name: "k_offset", scope: !55, file: !1, line: 81, type: !31)
!115 = !DILocation(line: 81, column: 10, scope: !55)
!116 = !DILocalVariable(name: "j", scope: !55, file: !1, line: 81, type: !31)
!117 = !DILocation(line: 81, column: 20, scope: !55)
!118 = !DILocalVariable(name: "verified", scope: !55, file: !1, line: 82, type: !119)
!119 = !DIDerivedType(tag: DW_TAG_typedef, name: "logical", file: !4, line: 4, baseType: !3)
!120 = !DILocation(line: 82, column: 11, scope: !55)
!121 = !DILocalVariable(name: "timers_enabled", scope: !55, file: !1, line: 82, type: !119)
!122 = !DILocation(line: 82, column: 21, scope: !55)
!123 = !DILocalVariable(name: "dum", scope: !55, file: !1, line: 84, type: !124)
!124 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 192, align: 64, elements: !125)
!125 = !{!126}
!126 = !DISubrange(count: 3)
!127 = !DILocation(line: 84, column: 10, scope: !55)
!128 = !DILocalVariable(name: "size", scope: !55, file: !1, line: 85, type: !129)
!129 = !DICompositeType(tag: DW_TAG_array_type, baseType: !60, size: 128, align: 8, elements: !130)
!130 = !{!131}
!131 = !DISubrange(count: 16)
!132 = !DILocation(line: 85, column: 10, scope: !55)
!133 = !DILocalVariable(name: "fp", scope: !55, file: !1, line: 87, type: !134)
!134 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !135, size: 64, align: 64)
!135 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !136, line: 48, baseType: !137)
!136 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/amiryousefi/llvmTemp/Codes/NAS/NPB3.3-OMP-C/EP")
!137 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !138, line: 245, size: 1728, align: 64, elements: !139)
!138 = !DIFile(filename: "/usr/include/libio.h", directory: "/home/amiryousefi/llvmTemp/Codes/NAS/NPB3.3-OMP-C/EP")
!139 = !{!140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !160, !161, !162, !163, !167, !169, !171, !175, !178, !180, !181, !182, !183, !184, !188, !189}
!140 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !137, file: !138, line: 246, baseType: !31, size: 32, align: 32)
!141 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !137, file: !138, line: 251, baseType: !59, size: 64, align: 64, offset: 64)
!142 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !137, file: !138, line: 252, baseType: !59, size: 64, align: 64, offset: 128)
!143 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !137, file: !138, line: 253, baseType: !59, size: 64, align: 64, offset: 192)
!144 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !137, file: !138, line: 254, baseType: !59, size: 64, align: 64, offset: 256)
!145 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !137, file: !138, line: 255, baseType: !59, size: 64, align: 64, offset: 320)
!146 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !137, file: !138, line: 256, baseType: !59, size: 64, align: 64, offset: 384)
!147 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !137, file: !138, line: 257, baseType: !59, size: 64, align: 64, offset: 448)
!148 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !137, file: !138, line: 258, baseType: !59, size: 64, align: 64, offset: 512)
!149 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !137, file: !138, line: 260, baseType: !59, size: 64, align: 64, offset: 576)
!150 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !137, file: !138, line: 261, baseType: !59, size: 64, align: 64, offset: 640)
!151 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !137, file: !138, line: 262, baseType: !59, size: 64, align: 64, offset: 704)
!152 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !137, file: !138, line: 264, baseType: !153, size: 64, align: 64, offset: 768)
!153 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !154, size: 64, align: 64)
!154 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !138, line: 160, size: 192, align: 64, elements: !155)
!155 = !{!156, !157, !159}
!156 = !DIDerivedType(tag: DW_TAG_member, name: "_next", scope: !154, file: !138, line: 161, baseType: !153, size: 64, align: 64)
!157 = !DIDerivedType(tag: DW_TAG_member, name: "_sbuf", scope: !154, file: !138, line: 162, baseType: !158, size: 64, align: 64, offset: 64)
!158 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !137, size: 64, align: 64)
!159 = !DIDerivedType(tag: DW_TAG_member, name: "_pos", scope: !154, file: !138, line: 166, baseType: !31, size: 32, align: 32, offset: 128)
!160 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !137, file: !138, line: 266, baseType: !158, size: 64, align: 64, offset: 832)
!161 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !137, file: !138, line: 268, baseType: !31, size: 32, align: 32, offset: 896)
!162 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !137, file: !138, line: 272, baseType: !31, size: 32, align: 32, offset: 928)
!163 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !137, file: !138, line: 274, baseType: !164, size: 64, align: 64, offset: 960)
!164 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !165, line: 131, baseType: !166)
!165 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "/home/amiryousefi/llvmTemp/Codes/NAS/NPB3.3-OMP-C/EP")
!166 = !DIBasicType(name: "long int", size: 64, align: 64, encoding: DW_ATE_signed)
!167 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !137, file: !138, line: 278, baseType: !168, size: 16, align: 16, offset: 1024)
!168 = !DIBasicType(name: "unsigned short", size: 16, align: 16, encoding: DW_ATE_unsigned)
!169 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !137, file: !138, line: 279, baseType: !170, size: 8, align: 8, offset: 1040)
!170 = !DIBasicType(name: "signed char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!171 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !137, file: !138, line: 280, baseType: !172, size: 8, align: 8, offset: 1048)
!172 = !DICompositeType(tag: DW_TAG_array_type, baseType: !60, size: 8, align: 8, elements: !173)
!173 = !{!174}
!174 = !DISubrange(count: 1)
!175 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !137, file: !138, line: 284, baseType: !176, size: 64, align: 64, offset: 1088)
!176 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !177, size: 64, align: 64)
!177 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !138, line: 154, baseType: null)
!178 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !137, file: !138, line: 293, baseType: !179, size: 64, align: 64, offset: 1152)
!179 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !165, line: 132, baseType: !166)
!180 = !DIDerivedType(tag: DW_TAG_member, name: "__pad1", scope: !137, file: !138, line: 302, baseType: !9, size: 64, align: 64, offset: 1216)
!181 = !DIDerivedType(tag: DW_TAG_member, name: "__pad2", scope: !137, file: !138, line: 303, baseType: !9, size: 64, align: 64, offset: 1280)
!182 = !DIDerivedType(tag: DW_TAG_member, name: "__pad3", scope: !137, file: !138, line: 304, baseType: !9, size: 64, align: 64, offset: 1344)
!183 = !DIDerivedType(tag: DW_TAG_member, name: "__pad4", scope: !137, file: !138, line: 305, baseType: !9, size: 64, align: 64, offset: 1408)
!184 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !137, file: !138, line: 306, baseType: !185, size: 64, align: 64, offset: 1472)
!185 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !186, line: 62, baseType: !187)
!186 = !DIFile(filename: "/home/amiryousefi/buildforinstm/bin/../lib/clang/3.9.1/include/stddef.h", directory: "/home/amiryousefi/llvmTemp/Codes/NAS/NPB3.3-OMP-C/EP")
!187 = !DIBasicType(name: "long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!188 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !137, file: !138, line: 308, baseType: !31, size: 32, align: 32, offset: 1536)
!189 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !137, file: !138, line: 310, baseType: !190, size: 160, align: 8, offset: 1568)
!190 = !DICompositeType(tag: DW_TAG_array_type, baseType: !60, size: 160, align: 8, elements: !191)
!191 = !{!192}
!192 = !DISubrange(count: 20)
!193 = !DILocation(line: 87, column: 9, scope: !55)
!194 = !DILocation(line: 89, column: 13, scope: !195)
!195 = distinct !DILexicalBlock(scope: !55, file: !1, line: 89, column: 7)
!196 = !DILocation(line: 89, column: 11, scope: !195)
!197 = !DILocation(line: 89, column: 39, scope: !195)
!198 = !DILocation(line: 89, column: 7, scope: !55)
!199 = !DILocation(line: 90, column: 20, scope: !200)
!200 = distinct !DILexicalBlock(scope: !195, file: !1, line: 89, column: 48)
!201 = !DILocation(line: 91, column: 3, scope: !200)
!202 = !DILocation(line: 92, column: 20, scope: !203)
!203 = distinct !DILexicalBlock(scope: !195, file: !1, line: 91, column: 10)
!204 = !DILocation(line: 93, column: 12, scope: !203)
!205 = !DILocation(line: 93, column: 5, scope: !203)
!206 = !DILocation(line: 103, column: 11, scope: !55)
!207 = !DILocation(line: 103, column: 28, scope: !55)
!208 = !DILocation(line: 103, column: 3, scope: !209)
!209 = !DILexicalBlockFile(scope: !55, file: !1, discriminator: 1)
!210 = !DILocation(line: 104, column: 5, scope: !55)
!211 = !DILocation(line: 105, column: 12, scope: !212)
!212 = distinct !DILexicalBlock(scope: !55, file: !1, line: 105, column: 7)
!213 = !DILocation(line: 105, column: 7, scope: !212)
!214 = !DILocation(line: 105, column: 15, scope: !212)
!215 = !DILocation(line: 105, column: 7, scope: !55)
!216 = !DILocation(line: 105, column: 24, scope: !217)
!217 = !DILexicalBlockFile(scope: !212, file: !1, discriminator: 1)
!218 = !DILocation(line: 105, column: 23, scope: !217)
!219 = !DILocation(line: 106, column: 8, scope: !55)
!220 = !DILocation(line: 106, column: 9, scope: !55)
!221 = !DILocation(line: 106, column: 3, scope: !55)
!222 = !DILocation(line: 106, column: 13, scope: !55)
!223 = !DILocation(line: 107, column: 3, scope: !55)
!224 = !DILocation(line: 108, column: 59, scope: !55)
!225 = !DILocation(line: 108, column: 3, scope: !55)
!226 = !DILocation(line: 109, column: 61, scope: !55)
!227 = !DILocation(line: 109, column: 3, scope: !209)
!228 = !DILocation(line: 111, column: 12, scope: !55)
!229 = !DILocation(line: 119, column: 6, scope: !55)
!230 = !DILocation(line: 128, column: 14, scope: !55)
!231 = !DILocation(line: 128, column: 22, scope: !55)
!232 = !DILocation(line: 128, column: 31, scope: !55)
!233 = !DILocation(line: 128, column: 3, scope: !55)
!234 = !DILocation(line: 129, column: 20, scope: !55)
!235 = !DILocation(line: 129, column: 28, scope: !55)
!236 = !DILocation(line: 129, column: 12, scope: !55)
!237 = !DILocation(line: 129, column: 3, scope: !55)
!238 = !DILocation(line: 129, column: 10, scope: !55)
!239 = !DILocation(line: 130, column: 11, scope: !55)
!240 = !DILocation(line: 136, column: 19, scope: !55)
!241 = !DILocation(line: 136, column: 14, scope: !209)
!242 = !DILocation(line: 136, column: 10, scope: !243)
!243 = !DILexicalBlockFile(scope: !55, file: !1, discriminator: 2)
!244 = !DILocation(line: 136, column: 8, scope: !55)
!245 = !DILocation(line: 138, column: 11, scope: !55)
!246 = !DILocation(line: 144, column: 3, scope: !55)
!247 = !DILocation(line: 146, column: 6, scope: !55)
!248 = !DILocation(line: 147, column: 21, scope: !55)
!249 = !DILocation(line: 147, column: 3, scope: !209)
!250 = !DILocation(line: 153, column: 6, scope: !55)
!251 = !DILocation(line: 155, column: 10, scope: !252)
!252 = distinct !DILexicalBlock(scope: !55, file: !1, line: 155, column: 3)
!253 = !DILocation(line: 155, column: 8, scope: !252)
!254 = !DILocation(line: 155, column: 15, scope: !255)
!255 = !DILexicalBlockFile(scope: !256, file: !1, discriminator: 1)
!256 = distinct !DILexicalBlock(scope: !252, file: !1, line: 155, column: 3)
!257 = !DILocation(line: 155, column: 17, scope: !255)
!258 = !DILocation(line: 155, column: 3, scope: !255)
!259 = !DILocation(line: 156, column: 22, scope: !260)
!260 = distinct !DILexicalBlock(scope: !256, file: !1, line: 155, column: 32)
!261 = !DILocation(line: 156, column: 10, scope: !260)
!262 = !DILocation(line: 156, column: 8, scope: !260)
!263 = !DILocation(line: 157, column: 3, scope: !260)
!264 = !DILocation(line: 155, column: 28, scope: !265)
!265 = !DILexicalBlockFile(scope: !256, file: !1, discriminator: 2)
!266 = !DILocation(line: 155, column: 3, scope: !265)
!267 = distinct !{!267, !268}
!268 = !DILocation(line: 155, column: 3, scope: !55)
!269 = !DILocation(line: 159, column: 8, scope: !55)
!270 = !DILocation(line: 159, column: 6, scope: !55)
!271 = !DILocation(line: 160, column: 6, scope: !55)
!272 = !DILocation(line: 161, column: 6, scope: !55)
!273 = !DILocation(line: 162, column: 6, scope: !55)
!274 = !DILocation(line: 163, column: 6, scope: !55)
!275 = !DILocation(line: 165, column: 10, scope: !276)
!276 = distinct !DILexicalBlock(scope: !55, file: !1, line: 165, column: 3)
!277 = !DILocation(line: 165, column: 8, scope: !276)
!278 = !DILocation(line: 165, column: 15, scope: !279)
!279 = !DILexicalBlockFile(scope: !280, file: !1, discriminator: 1)
!280 = distinct !DILexicalBlock(scope: !276, file: !1, line: 165, column: 3)
!281 = !DILocation(line: 165, column: 17, scope: !279)
!282 = !DILocation(line: 165, column: 3, scope: !279)
!283 = !DILocation(line: 166, column: 7, scope: !284)
!284 = distinct !DILexicalBlock(scope: !280, file: !1, line: 165, column: 28)
!285 = !DILocation(line: 166, column: 5, scope: !284)
!286 = !DILocation(line: 166, column: 10, scope: !284)
!287 = !DILocation(line: 167, column: 3, scope: !284)
!288 = !DILocation(line: 165, column: 24, scope: !289)
!289 = !DILexicalBlockFile(scope: !280, file: !1, discriminator: 2)
!290 = !DILocation(line: 165, column: 3, scope: !289)
!291 = distinct !{!291, !292}
!292 = !DILocation(line: 165, column: 3, scope: !55)
!293 = !DILocation(line: 175, column: 12, scope: !55)
!294 = !DILocation(line: 177, column: 11, scope: !55)
!295 = !DILocation(line: 237, column: 10, scope: !296)
!296 = distinct !DILexicalBlock(scope: !55, file: !1, line: 237, column: 3)
!297 = !DILocation(line: 237, column: 8, scope: !296)
!298 = !DILocation(line: 237, column: 15, scope: !299)
!299 = !DILexicalBlockFile(scope: !300, file: !1, discriminator: 1)
!300 = distinct !DILexicalBlock(scope: !296, file: !1, line: 237, column: 3)
!301 = !DILocation(line: 237, column: 17, scope: !299)
!302 = !DILocation(line: 237, column: 3, scope: !299)
!303 = !DILocation(line: 238, column: 10, scope: !304)
!304 = distinct !DILexicalBlock(scope: !300, file: !1, line: 237, column: 28)
!305 = !DILocation(line: 238, column: 17, scope: !304)
!306 = !DILocation(line: 238, column: 15, scope: !304)
!307 = !DILocation(line: 238, column: 13, scope: !304)
!308 = !DILocation(line: 238, column: 8, scope: !304)
!309 = !DILocation(line: 239, column: 3, scope: !304)
!310 = !DILocation(line: 237, column: 24, scope: !311)
!311 = !DILexicalBlockFile(scope: !300, file: !1, discriminator: 2)
!312 = !DILocation(line: 237, column: 3, scope: !311)
!313 = distinct !{!313, !314}
!314 = !DILocation(line: 237, column: 3, scope: !55)
!315 = !DILocation(line: 241, column: 3, scope: !55)
!316 = !DILocation(line: 242, column: 8, scope: !55)
!317 = !DILocation(line: 242, column: 6, scope: !55)
!318 = !DILocation(line: 244, column: 7, scope: !55)
!319 = !DILocation(line: 245, column: 12, scope: !55)
!320 = !DILocation(line: 247, column: 21, scope: !321)
!321 = distinct !DILexicalBlock(scope: !322, file: !1, line: 246, column: 16)
!322 = distinct !DILexicalBlock(scope: !55, file: !1, line: 246, column: 7)
!323 = !DILocation(line: 248, column: 21, scope: !321)
!324 = !DILocation(line: 271, column: 7, scope: !325)
!325 = distinct !DILexicalBlock(scope: !55, file: !1, line: 271, column: 7)
!326 = !DILocation(line: 271, column: 7, scope: !55)
!327 = !DILocation(line: 272, column: 20, scope: !328)
!328 = distinct !DILexicalBlock(scope: !325, file: !1, line: 271, column: 17)
!329 = !DILocation(line: 272, column: 25, scope: !328)
!330 = !DILocation(line: 272, column: 23, scope: !328)
!331 = !DILocation(line: 272, column: 44, scope: !328)
!332 = !DILocation(line: 272, column: 42, scope: !328)
!333 = !DILocation(line: 272, column: 14, scope: !328)
!334 = !DILocation(line: 272, column: 12, scope: !328)
!335 = !DILocation(line: 273, column: 20, scope: !328)
!336 = !DILocation(line: 273, column: 25, scope: !328)
!337 = !DILocation(line: 273, column: 23, scope: !328)
!338 = !DILocation(line: 273, column: 44, scope: !328)
!339 = !DILocation(line: 273, column: 42, scope: !328)
!340 = !DILocation(line: 273, column: 14, scope: !328)
!341 = !DILocation(line: 273, column: 12, scope: !328)
!342 = !DILocation(line: 274, column: 18, scope: !328)
!343 = !DILocation(line: 274, column: 25, scope: !328)
!344 = !DILocation(line: 274, column: 37, scope: !328)
!345 = !DILocation(line: 274, column: 41, scope: !346)
!346 = !DILexicalBlockFile(scope: !328, file: !1, discriminator: 1)
!347 = !DILocation(line: 274, column: 48, scope: !346)
!348 = !DILocation(line: 274, column: 37, scope: !349)
!349 = !DILexicalBlockFile(scope: !328, file: !1, discriminator: 2)
!350 = !DILocation(line: 274, column: 14, scope: !349)
!351 = !DILocation(line: 275, column: 3, scope: !328)
!352 = !DILocation(line: 277, column: 10, scope: !55)
!353 = !DILocation(line: 277, column: 26, scope: !55)
!354 = !DILocation(line: 277, column: 24, scope: !55)
!355 = !DILocation(line: 277, column: 29, scope: !55)
!356 = !DILocation(line: 277, column: 8, scope: !55)
!357 = !DILocation(line: 279, column: 3, scope: !55)
!358 = !DILocation(line: 280, column: 33, scope: !55)
!359 = !DILocation(line: 280, column: 3, scope: !55)
!360 = !DILocation(line: 281, column: 3, scope: !55)
!361 = !DILocation(line: 282, column: 44, scope: !55)
!362 = !DILocation(line: 282, column: 3, scope: !55)
!363 = !DILocation(line: 283, column: 40, scope: !55)
!364 = !DILocation(line: 283, column: 44, scope: !55)
!365 = !DILocation(line: 283, column: 3, scope: !55)
!366 = !DILocation(line: 284, column: 3, scope: !55)
!367 = !DILocation(line: 285, column: 10, scope: !368)
!368 = distinct !DILexicalBlock(scope: !55, file: !1, line: 285, column: 3)
!369 = !DILocation(line: 285, column: 8, scope: !368)
!370 = !DILocation(line: 285, column: 15, scope: !371)
!371 = !DILexicalBlockFile(scope: !372, file: !1, discriminator: 1)
!372 = distinct !DILexicalBlock(scope: !368, file: !1, line: 285, column: 3)
!373 = !DILocation(line: 285, column: 17, scope: !371)
!374 = !DILocation(line: 285, column: 3, scope: !371)
!375 = !DILocation(line: 286, column: 28, scope: !376)
!376 = distinct !DILexicalBlock(scope: !372, file: !1, line: 285, column: 28)
!377 = !DILocation(line: 286, column: 33, scope: !376)
!378 = !DILocation(line: 286, column: 31, scope: !376)
!379 = !DILocation(line: 286, column: 5, scope: !376)
!380 = !DILocation(line: 287, column: 3, scope: !376)
!381 = !DILocation(line: 285, column: 24, scope: !382)
!382 = !DILexicalBlockFile(scope: !372, file: !1, discriminator: 2)
!383 = !DILocation(line: 285, column: 3, scope: !382)
!384 = distinct !{!384, !385}
!385 = !DILocation(line: 285, column: 3, scope: !55)
!386 = !DILocation(line: 289, column: 41, scope: !55)
!387 = !DILocation(line: 290, column: 7, scope: !55)
!388 = !DILocation(line: 290, column: 11, scope: !55)
!389 = !DILocation(line: 292, column: 7, scope: !55)
!390 = !DILocation(line: 289, column: 3, scope: !55)
!391 = !DILocation(line: 295, column: 7, scope: !392)
!392 = distinct !DILexicalBlock(scope: !55, file: !1, line: 295, column: 7)
!393 = !DILocation(line: 295, column: 7, scope: !55)
!394 = !DILocation(line: 296, column: 9, scope: !395)
!395 = distinct !DILexicalBlock(scope: !396, file: !1, line: 296, column: 9)
!396 = distinct !DILexicalBlock(scope: !392, file: !1, line: 295, column: 23)
!397 = !DILocation(line: 296, column: 12, scope: !395)
!398 = !DILocation(line: 296, column: 9, scope: !396)
!399 = !DILocation(line: 296, column: 23, scope: !400)
!400 = !DILexicalBlockFile(scope: !395, file: !1, discriminator: 1)
!401 = !DILocation(line: 296, column: 20, scope: !400)
!402 = !DILocation(line: 297, column: 10, scope: !396)
!403 = !DILocation(line: 297, column: 8, scope: !396)
!404 = !DILocation(line: 298, column: 51, scope: !396)
!405 = !DILocation(line: 298, column: 55, scope: !396)
!406 = !DILocation(line: 298, column: 57, scope: !396)
!407 = !DILocation(line: 298, column: 64, scope: !396)
!408 = !DILocation(line: 298, column: 63, scope: !396)
!409 = !DILocation(line: 298, column: 5, scope: !396)
!410 = !DILocation(line: 299, column: 10, scope: !396)
!411 = !DILocation(line: 299, column: 8, scope: !396)
!412 = !DILocation(line: 300, column: 49, scope: !396)
!413 = !DILocation(line: 300, column: 53, scope: !396)
!414 = !DILocation(line: 300, column: 55, scope: !396)
!415 = !DILocation(line: 300, column: 62, scope: !396)
!416 = !DILocation(line: 300, column: 61, scope: !396)
!417 = !DILocation(line: 300, column: 5, scope: !396)
!418 = !DILocation(line: 301, column: 10, scope: !396)
!419 = !DILocation(line: 301, column: 8, scope: !396)
!420 = !DILocation(line: 302, column: 49, scope: !396)
!421 = !DILocation(line: 302, column: 53, scope: !396)
!422 = !DILocation(line: 302, column: 55, scope: !396)
!423 = !DILocation(line: 302, column: 62, scope: !396)
!424 = !DILocation(line: 302, column: 61, scope: !396)
!425 = !DILocation(line: 302, column: 5, scope: !396)
!426 = !DILocation(line: 303, column: 3, scope: !396)
!427 = !DILocation(line: 305, column: 3, scope: !55)
!428 = distinct !DISubprogram(name: ".omp_outlined.", scope: !1, file: !1, line: 130, type: !429, isLocal: true, isDefinition: true, scopeLine: 131, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !29)
!429 = !DISubroutineType(types: !430)
!430 = !{null, !431, !431}
!431 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !432)
!432 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !433)
!433 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !31, size: 64, align: 64)
!434 = !{!"100"}
!435 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !428, type: !431, flags: DIFlagArtificial | DIFlagObjectPointer)
!436 = !DILocation(line: 0, scope: !428)
!437 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !428, type: !431, flags: DIFlagArtificial)
!438 = !DILocalVariable(name: "i", scope: !428, type: !31, flags: DIFlagArtificial)
!439 = !DILocation(line: 132, column: 12, scope: !440)
!440 = distinct !DILexicalBlock(scope: !441, file: !1, line: 132, column: 5)
!441 = distinct !DILexicalBlock(scope: !428, file: !1, line: 131, column: 3)
!442 = !DILocation(line: 132, column: 10, scope: !440)
!443 = !DILocation(line: 132, column: 17, scope: !444)
!444 = !DILexicalBlockFile(scope: !445, file: !1, discriminator: 1)
!445 = distinct !DILexicalBlock(scope: !440, file: !1, line: 132, column: 5)
!446 = !DILocation(line: 132, column: 19, scope: !444)
!447 = !DILocation(line: 132, column: 5, scope: !444)
!448 = !DILocation(line: 133, column: 9, scope: !449)
!449 = distinct !DILexicalBlock(scope: !445, file: !1, line: 132, column: 34)
!450 = !DILocation(line: 133, column: 7, scope: !449)
!451 = !DILocation(line: 133, column: 12, scope: !449)
!452 = !DILocation(line: 134, column: 5, scope: !449)
!453 = !DILocation(line: 132, column: 30, scope: !454)
!454 = !DILexicalBlockFile(scope: !445, file: !1, discriminator: 2)
!455 = !DILocation(line: 132, column: 5, scope: !454)
!456 = distinct !{!456, !457}
!457 = !DILocation(line: 132, column: 5, scope: !441)
!458 = !DILocation(line: 135, column: 3, scope: !428)
!459 = distinct !DISubprogram(name: ".omp_outlined..7", scope: !1, file: !1, line: 138, type: !460, isLocal: true, isDefinition: true, scopeLine: 139, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !29)
!460 = !DISubroutineType(types: !461)
!461 = !{null, !431, !431, !462}
!462 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !119, size: 64, align: 64)
!463 = !{!"101"}
!464 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !459, type: !431, flags: DIFlagArtificial | DIFlagObjectPointer)
!465 = !DILocation(line: 0, scope: !459)
!466 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !459, type: !431, flags: DIFlagArtificial)
!467 = !DILocalVariable(name: "timers_enabled", arg: 3, scope: !459, type: !462, flags: DIFlagArtificial)
!468 = !DILocation(line: 139, column: 3, scope: !459)
!469 = !DILocation(line: 140, column: 5, scope: !470)
!470 = distinct !DILexicalBlock(scope: !459, file: !1, line: 139, column: 3)
!471 = !DILocation(line: 141, column: 9, scope: !472)
!472 = distinct !DILexicalBlock(scope: !470, file: !1, line: 141, column: 9)
!473 = !DILocation(line: 141, column: 9, scope: !470)
!474 = !DILocation(line: 141, column: 25, scope: !475)
!475 = !DILexicalBlockFile(scope: !472, file: !1, discriminator: 1)
!476 = !DILocation(line: 142, column: 9, scope: !477)
!477 = distinct !DILexicalBlock(scope: !470, file: !1, line: 142, column: 9)
!478 = !DILocation(line: 142, column: 9, scope: !470)
!479 = !DILocation(line: 142, column: 25, scope: !480)
!480 = !DILexicalBlockFile(scope: !477, file: !1, discriminator: 1)
!481 = !DILocation(line: 143, column: 3, scope: !459)
!482 = distinct !DISubprogram(name: ".omp_outlined..8", scope: !1, file: !1, line: 177, type: !483, isLocal: true, isDefinition: true, scopeLine: 178, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !29)
!483 = !DISubroutineType(types: !484)
!484 = !{null, !431, !431, !485, !485, !486, !486, !485, !462}
!485 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !13, size: 64, align: 64)
!486 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !31, size: 64, align: 64)
!487 = !{!"102"}
!488 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !482, type: !431, flags: DIFlagArtificial | DIFlagObjectPointer)
!489 = !DILocation(line: 0, scope: !482)
!490 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !482, type: !431, flags: DIFlagArtificial)
!491 = !DILocalVariable(name: "sx", arg: 3, scope: !482, type: !485, flags: DIFlagArtificial)
!492 = !DILocalVariable(name: "sy", arg: 4, scope: !482, type: !485, flags: DIFlagArtificial)
!493 = !DILocalVariable(name: "np", arg: 5, scope: !482, type: !486, flags: DIFlagArtificial)
!494 = !DILocalVariable(name: "k_offset", arg: 6, scope: !482, type: !486, flags: DIFlagArtificial)
!495 = !DILocalVariable(name: "an", arg: 7, scope: !482, type: !485, flags: DIFlagArtificial)
!496 = !DILocalVariable(name: "timers_enabled", arg: 8, scope: !482, type: !462, flags: DIFlagArtificial)
!497 = !DILocation(line: 178, column: 3, scope: !482)
!498 = !DILocalVariable(name: "k", scope: !482, type: !31, flags: DIFlagArtificial)
!499 = !DILocalVariable(name: "kk", scope: !482, type: !31, flags: DIFlagArtificial)
!500 = !DILocalVariable(name: "t1", scope: !482, type: !13, flags: DIFlagArtificial)
!501 = !DILocalVariable(name: "t2", scope: !482, type: !13, flags: DIFlagArtificial)
!502 = !DILocalVariable(name: "t3", scope: !482, type: !13, flags: DIFlagArtificial)
!503 = !DILocalVariable(name: "t4", scope: !482, type: !13, flags: DIFlagArtificial)
!504 = !DILocalVariable(name: "i", scope: !482, type: !31, flags: DIFlagArtificial)
!505 = !DILocalVariable(name: "ik", scope: !482, type: !31, flags: DIFlagArtificial)
!506 = !DILocalVariable(name: "x1", scope: !482, type: !13, flags: DIFlagArtificial)
!507 = !DILocalVariable(name: "x2", scope: !482, type: !13, flags: DIFlagArtificial)
!508 = !DILocalVariable(name: "l", scope: !482, type: !31, flags: DIFlagArtificial)
!509 = !DILocation(line: 179, column: 12, scope: !510)
!510 = distinct !DILexicalBlock(scope: !511, file: !1, line: 179, column: 5)
!511 = distinct !DILexicalBlock(scope: !482, file: !1, line: 178, column: 3)
!512 = !DILocation(line: 179, column: 10, scope: !510)
!513 = !DILocation(line: 179, column: 17, scope: !514)
!514 = !DILexicalBlockFile(scope: !515, file: !1, discriminator: 1)
!515 = distinct !DILexicalBlock(scope: !510, file: !1, line: 179, column: 5)
!516 = !DILocation(line: 179, column: 19, scope: !514)
!517 = !DILocation(line: 179, column: 5, scope: !514)
!518 = !DILocation(line: 180, column: 10, scope: !519)
!519 = distinct !DILexicalBlock(scope: !515, file: !1, line: 179, column: 30)
!520 = !DILocation(line: 180, column: 7, scope: !519)
!521 = !DILocation(line: 180, column: 13, scope: !519)
!522 = !DILocation(line: 181, column: 5, scope: !519)
!523 = !DILocation(line: 179, column: 26, scope: !524)
!524 = !DILexicalBlockFile(scope: !515, file: !1, discriminator: 2)
!525 = !DILocation(line: 179, column: 5, scope: !524)
!526 = distinct !{!526, !527}
!527 = !DILocation(line: 179, column: 5, scope: !511)
!528 = !DILocalVariable(name: ".omp.iv", scope: !529, type: !31, flags: DIFlagArtificial)
!529 = distinct !DILexicalBlock(scope: !511, file: !1, line: 183, column: 13)
!530 = !DILocation(line: 0, scope: !529)
!531 = !DILocalVariable(name: ".capture_expr.", scope: !529, type: !31, flags: DIFlagArtificial)
!532 = !DILocation(line: 184, column: 22, scope: !529)
!533 = !DILocation(line: 184, column: 5, scope: !529)
!534 = !DILocalVariable(name: "k", scope: !529, type: !31, flags: DIFlagArtificial)
!535 = !DILocation(line: 184, column: 26, scope: !529)
!536 = !DILocation(line: 183, column: 13, scope: !511)
!537 = !DILocalVariable(name: ".omp.lb", scope: !529, type: !31, flags: DIFlagArtificial)
!538 = !DILocation(line: 184, column: 10, scope: !539)
!539 = !DILexicalBlockFile(scope: !529, file: !1, discriminator: 1)
!540 = !DILocalVariable(name: ".omp.ub", scope: !529, type: !31, flags: DIFlagArtificial)
!541 = !DILocation(line: 0, scope: !539)
!542 = !DILocalVariable(name: ".omp.stride", scope: !529, type: !31, flags: DIFlagArtificial)
!543 = !DILocalVariable(name: ".omp.is_last", scope: !529, type: !31, flags: DIFlagArtificial)
!544 = !DILocalVariable(name: "sx", scope: !529, type: !13, flags: DIFlagArtificial)
!545 = !DILocation(line: 183, column: 33, scope: !539)
!546 = !DILocalVariable(name: "sy", scope: !529, type: !13, flags: DIFlagArtificial)
!547 = !DILocation(line: 183, column: 36, scope: !539)
!548 = !DILocation(line: 183, column: 13, scope: !539)
!549 = !DILocation(line: 183, column: 13, scope: !550)
!550 = !DILexicalBlockFile(scope: !511, file: !1, discriminator: 2)
!551 = !DILocation(line: 184, column: 10, scope: !552)
!552 = !DILexicalBlockFile(scope: !529, file: !1, discriminator: 2)
!553 = !DILocation(line: 183, column: 13, scope: !554)
!554 = !DILexicalBlockFile(scope: !511, file: !1, discriminator: 3)
!555 = !DILocation(line: 184, column: 10, scope: !556)
!556 = !DILexicalBlockFile(scope: !529, file: !1, discriminator: 3)
!557 = distinct !{!557, !536}
!558 = !DILocation(line: 0, scope: !552)
!559 = !DILocation(line: 183, column: 13, scope: !560)
!560 = !DILexicalBlockFile(scope: !511, file: !1, discriminator: 4)
!561 = !DILocation(line: 184, column: 10, scope: !562)
!562 = !DILexicalBlockFile(scope: !529, file: !1, discriminator: 4)
!563 = !DILocation(line: 184, column: 26, scope: !562)
!564 = !DILocation(line: 185, column: 12, scope: !565)
!565 = distinct !DILexicalBlock(scope: !529, file: !1, line: 184, column: 31)
!566 = !DILocation(line: 185, column: 23, scope: !565)
!567 = !DILocation(line: 185, column: 21, scope: !565)
!568 = !DILocation(line: 185, column: 10, scope: !565)
!569 = !DILocation(line: 186, column: 10, scope: !565)
!570 = !DILocation(line: 187, column: 12, scope: !565)
!571 = !DILocation(line: 187, column: 10, scope: !565)
!572 = !DILocation(line: 191, column: 14, scope: !573)
!573 = distinct !DILexicalBlock(scope: !565, file: !1, line: 191, column: 7)
!574 = !DILocation(line: 191, column: 12, scope: !573)
!575 = !DILocation(line: 191, column: 19, scope: !576)
!576 = !DILexicalBlockFile(scope: !577, file: !1, discriminator: 1)
!577 = distinct !DILexicalBlock(scope: !573, file: !1, line: 191, column: 7)
!578 = !DILocation(line: 191, column: 21, scope: !576)
!579 = !DILocation(line: 191, column: 7, scope: !576)
!580 = !DILocation(line: 192, column: 14, scope: !581)
!581 = distinct !DILexicalBlock(scope: !577, file: !1, line: 191, column: 34)
!582 = !DILocation(line: 192, column: 17, scope: !581)
!583 = !DILocation(line: 192, column: 12, scope: !581)
!584 = !DILocation(line: 193, column: 18, scope: !585)
!585 = distinct !DILexicalBlock(scope: !581, file: !1, line: 193, column: 13)
!586 = !DILocation(line: 193, column: 16, scope: !585)
!587 = !DILocation(line: 193, column: 25, scope: !585)
!588 = !DILocation(line: 193, column: 22, scope: !585)
!589 = !DILocation(line: 193, column: 13, scope: !581)
!590 = !DILocation(line: 193, column: 46, scope: !591)
!591 = !DILexicalBlockFile(scope: !585, file: !1, discriminator: 1)
!592 = !DILocation(line: 193, column: 34, scope: !591)
!593 = !DILocation(line: 193, column: 32, scope: !591)
!594 = !DILocation(line: 193, column: 29, scope: !591)
!595 = !DILocation(line: 194, column: 13, scope: !596)
!596 = distinct !DILexicalBlock(scope: !581, file: !1, line: 194, column: 13)
!597 = !DILocation(line: 194, column: 16, scope: !596)
!598 = !DILocation(line: 194, column: 13, scope: !581)
!599 = !DILocation(line: 194, column: 22, scope: !600)
!600 = !DILexicalBlockFile(scope: !596, file: !1, discriminator: 1)
!601 = !DILocation(line: 195, column: 26, scope: !581)
!602 = !DILocation(line: 195, column: 14, scope: !581)
!603 = !DILocation(line: 195, column: 12, scope: !581)
!604 = !DILocation(line: 196, column: 14, scope: !581)
!605 = !DILocation(line: 196, column: 12, scope: !581)
!606 = !DILocation(line: 197, column: 7, scope: !581)
!607 = !DILocation(line: 191, column: 30, scope: !608)
!608 = !DILexicalBlockFile(scope: !577, file: !1, discriminator: 2)
!609 = !DILocation(line: 191, column: 7, scope: !608)
!610 = distinct !{!610, !611}
!611 = !DILocation(line: 191, column: 7, scope: !565)
!612 = !DILocation(line: 202, column: 11, scope: !613)
!613 = distinct !DILexicalBlock(scope: !565, file: !1, line: 202, column: 11)
!614 = !DILocation(line: 202, column: 11, scope: !565)
!615 = !DILocation(line: 202, column: 27, scope: !616)
!616 = !DILexicalBlockFile(scope: !613, file: !1, discriminator: 1)
!617 = !DILocation(line: 203, column: 30, scope: !565)
!618 = !DILocation(line: 203, column: 7, scope: !619)
!619 = !DILexicalBlockFile(scope: !565, file: !1, discriminator: 1)
!620 = !DILocation(line: 204, column: 11, scope: !621)
!621 = distinct !DILexicalBlock(scope: !565, file: !1, line: 204, column: 11)
!622 = !DILocation(line: 204, column: 11, scope: !565)
!623 = !DILocation(line: 204, column: 27, scope: !624)
!624 = !DILexicalBlockFile(scope: !621, file: !1, discriminator: 1)
!625 = !DILocation(line: 211, column: 11, scope: !626)
!626 = distinct !DILexicalBlock(scope: !565, file: !1, line: 211, column: 11)
!627 = !DILocation(line: 211, column: 11, scope: !565)
!628 = !DILocation(line: 211, column: 27, scope: !629)
!629 = !DILexicalBlockFile(scope: !626, file: !1, discriminator: 1)
!630 = !DILocation(line: 213, column: 14, scope: !631)
!631 = distinct !DILexicalBlock(scope: !565, file: !1, line: 213, column: 7)
!632 = !DILocation(line: 213, column: 12, scope: !631)
!633 = !DILocation(line: 213, column: 19, scope: !634)
!634 = !DILexicalBlockFile(scope: !635, file: !1, discriminator: 1)
!635 = distinct !DILexicalBlock(scope: !631, file: !1, line: 213, column: 7)
!636 = !DILocation(line: 213, column: 21, scope: !634)
!637 = !DILocation(line: 213, column: 7, scope: !634)
!638 = !DILocation(line: 214, column: 24, scope: !639)
!639 = distinct !DILexicalBlock(scope: !635, file: !1, line: 213, column: 32)
!640 = !DILocation(line: 214, column: 23, scope: !639)
!641 = !DILocation(line: 214, column: 20, scope: !639)
!642 = !DILocation(line: 214, column: 18, scope: !639)
!643 = !DILocation(line: 214, column: 27, scope: !639)
!644 = !DILocation(line: 214, column: 12, scope: !639)
!645 = !DILocation(line: 215, column: 24, scope: !639)
!646 = !DILocation(line: 215, column: 23, scope: !639)
!647 = !DILocation(line: 215, column: 25, scope: !639)
!648 = !DILocation(line: 215, column: 20, scope: !639)
!649 = !DILocation(line: 215, column: 18, scope: !639)
!650 = !DILocation(line: 215, column: 29, scope: !639)
!651 = !DILocation(line: 215, column: 12, scope: !639)
!652 = !DILocation(line: 216, column: 14, scope: !639)
!653 = !DILocation(line: 216, column: 19, scope: !639)
!654 = !DILocation(line: 216, column: 17, scope: !639)
!655 = !DILocation(line: 216, column: 24, scope: !639)
!656 = !DILocation(line: 216, column: 29, scope: !639)
!657 = !DILocation(line: 216, column: 27, scope: !639)
!658 = !DILocation(line: 216, column: 22, scope: !639)
!659 = !DILocation(line: 216, column: 12, scope: !639)
!660 = !DILocation(line: 217, column: 13, scope: !661)
!661 = distinct !DILexicalBlock(scope: !639, file: !1, line: 217, column: 13)
!662 = !DILocation(line: 217, column: 16, scope: !661)
!663 = !DILocation(line: 217, column: 13, scope: !639)
!664 = !DILocation(line: 218, column: 35, scope: !665)
!665 = distinct !DILexicalBlock(scope: !661, file: !1, line: 217, column: 24)
!666 = !DILocation(line: 218, column: 31, scope: !665)
!667 = !DILocation(line: 218, column: 29, scope: !665)
!668 = !DILocation(line: 218, column: 41, scope: !665)
!669 = !DILocation(line: 218, column: 39, scope: !665)
!670 = !DILocation(line: 218, column: 19, scope: !671)
!671 = !DILexicalBlockFile(scope: !665, file: !1, discriminator: 1)
!672 = !DILocation(line: 218, column: 17, scope: !665)
!673 = !DILocation(line: 219, column: 20, scope: !665)
!674 = !DILocation(line: 219, column: 25, scope: !665)
!675 = !DILocation(line: 219, column: 23, scope: !665)
!676 = !DILocation(line: 219, column: 17, scope: !665)
!677 = !DILocation(line: 220, column: 20, scope: !665)
!678 = !DILocation(line: 220, column: 25, scope: !665)
!679 = !DILocation(line: 220, column: 23, scope: !665)
!680 = !DILocation(line: 220, column: 17, scope: !665)
!681 = !DILocation(line: 221, column: 19, scope: !665)
!682 = !DILocation(line: 221, column: 19, scope: !683)
!683 = !DILexicalBlockFile(scope: !665, file: !1, discriminator: 4)
!684 = !DILocation(line: 221, column: 19, scope: !671)
!685 = !DILocation(line: 221, column: 19, scope: !686)
!686 = !DILexicalBlockFile(scope: !665, file: !1, discriminator: 2)
!687 = !DILocation(line: 221, column: 19, scope: !688)
!688 = !DILexicalBlockFile(scope: !665, file: !1, discriminator: 3)
!689 = !DILocation(line: 221, column: 17, scope: !688)
!690 = !DILocation(line: 222, column: 22, scope: !665)
!691 = !DILocation(line: 222, column: 19, scope: !665)
!692 = !DILocation(line: 222, column: 25, scope: !665)
!693 = !DILocation(line: 222, column: 14, scope: !665)
!694 = !DILocation(line: 222, column: 11, scope: !665)
!695 = !DILocation(line: 222, column: 11, scope: !671)
!696 = !DILocation(line: 222, column: 17, scope: !665)
!697 = !DILocation(line: 223, column: 19, scope: !665)
!698 = !DILocation(line: 223, column: 24, scope: !665)
!699 = !DILocation(line: 223, column: 22, scope: !665)
!700 = !DILocation(line: 223, column: 17, scope: !665)
!701 = !DILocation(line: 224, column: 19, scope: !665)
!702 = !DILocation(line: 224, column: 24, scope: !665)
!703 = !DILocation(line: 224, column: 22, scope: !665)
!704 = !DILocation(line: 224, column: 17, scope: !665)
!705 = !DILocation(line: 225, column: 9, scope: !665)
!706 = !DILocation(line: 226, column: 7, scope: !639)
!707 = !DILocation(line: 213, column: 28, scope: !708)
!708 = !DILexicalBlockFile(scope: !635, file: !1, discriminator: 2)
!709 = !DILocation(line: 213, column: 7, scope: !708)
!710 = distinct !{!710, !711}
!711 = !DILocation(line: 213, column: 7, scope: !565)
!712 = !DILocation(line: 228, column: 11, scope: !713)
!713 = distinct !DILexicalBlock(scope: !565, file: !1, line: 228, column: 11)
!714 = !DILocation(line: 228, column: 11, scope: !565)
!715 = !DILocation(line: 228, column: 27, scope: !716)
!716 = !DILexicalBlockFile(scope: !713, file: !1, discriminator: 1)
!717 = !DILocation(line: 229, column: 5, scope: !565)
!718 = !DILocation(line: 183, column: 13, scope: !719)
!719 = !DILexicalBlockFile(scope: !529, file: !1, discriminator: 5)
!720 = !DILocation(line: 184, column: 10, scope: !719)
!721 = !DILocation(line: 0, scope: !556)
!722 = !DILocation(line: 183, column: 13, scope: !723)
!723 = !DILexicalBlockFile(scope: !529, file: !1, discriminator: 6)
!724 = !DILocation(line: 183, column: 13, scope: !725)
!725 = !DILexicalBlockFile(scope: !529, file: !1, discriminator: 7)
!726 = !DILocation(line: 183, column: 13, scope: !727)
!727 = !DILexicalBlockFile(scope: !529, file: !1, discriminator: 8)
!728 = distinct !{!728, !536}
!729 = !DILocation(line: 183, column: 13, scope: !730)
!730 = !DILexicalBlockFile(scope: !529, file: !1, discriminator: 9)
!731 = !DILocation(line: 183, column: 33, scope: !732)
!732 = !DILexicalBlockFile(scope: !529, file: !1, discriminator: 10)
!733 = !DILocation(line: 183, column: 31, scope: !732)
!734 = !DILocation(line: 183, column: 36, scope: !732)
!735 = !DILocation(line: 183, column: 13, scope: !732)
!736 = !DILocation(line: 183, column: 33, scope: !737)
!737 = !DILexicalBlockFile(scope: !529, file: !1, discriminator: 11)
!738 = !DILocation(line: 183, column: 13, scope: !737)
!739 = !DILocation(line: 183, column: 13, scope: !740)
!740 = !DILexicalBlockFile(scope: !529, file: !1, discriminator: 12)
!741 = !DILocation(line: 183, column: 33, scope: !740)
!742 = !DILocation(line: 183, column: 31, scope: !740)
!743 = !DILocation(line: 183, column: 36, scope: !744)
!744 = !DILexicalBlockFile(scope: !529, file: !1, discriminator: 13)
!745 = !DILocation(line: 183, column: 13, scope: !744)
!746 = !DILocation(line: 183, column: 13, scope: !747)
!747 = !DILexicalBlockFile(scope: !529, file: !1, discriminator: 14)
!748 = !DILocation(line: 183, column: 36, scope: !747)
!749 = !DILocation(line: 183, column: 31, scope: !747)
!750 = !DILocation(line: 183, column: 13, scope: !751)
!751 = !DILexicalBlockFile(scope: !529, file: !1, discriminator: 15)
!752 = !DILocation(line: 183, column: 13, scope: !753)
!753 = !DILexicalBlockFile(scope: !529, file: !1, discriminator: 16)
!754 = !DILocation(line: 231, column: 12, scope: !755)
!755 = distinct !DILexicalBlock(scope: !511, file: !1, line: 231, column: 5)
!756 = !DILocation(line: 231, column: 10, scope: !755)
!757 = !DILocation(line: 231, column: 17, scope: !758)
!758 = !DILexicalBlockFile(scope: !759, file: !1, discriminator: 1)
!759 = distinct !DILexicalBlock(scope: !755, file: !1, line: 231, column: 5)
!760 = !DILocation(line: 231, column: 19, scope: !758)
!761 = !DILocation(line: 231, column: 5, scope: !758)
!762 = !DILocation(line: 233, column: 9, scope: !763)
!763 = distinct !DILexicalBlock(scope: !764, file: !1, line: 232, column: 15)
!764 = distinct !DILexicalBlock(scope: !759, file: !1, line: 231, column: 30)
!765 = !DILocation(line: 233, column: 7, scope: !763)
!766 = !DILocation(line: 233, column: 18, scope: !763)
!767 = !DILocation(line: 233, column: 15, scope: !763)
!768 = !DILocation(line: 233, column: 7, scope: !769)
!769 = !DILexicalBlockFile(scope: !763, file: !1, discriminator: 1)
!770 = !DILocation(line: 233, column: 12, scope: !769)
!771 = !DILocation(line: 234, column: 5, scope: !764)
!772 = !DILocation(line: 231, column: 26, scope: !773)
!773 = !DILexicalBlockFile(scope: !759, file: !1, discriminator: 2)
!774 = !DILocation(line: 231, column: 5, scope: !773)
!775 = distinct !{!775, !776}
!776 = !DILocation(line: 231, column: 5, scope: !511)
!777 = !DILocation(line: 235, column: 3, scope: !482)
!778 = distinct !DISubprogram(linkageName: ".omp.reduction.reduction_func", scope: !1, file: !1, type: !779, isLocal: true, isDefinition: true, flags: DIFlagArtificial, isOptimized: false, unit: !0, variables: !29)
!779 = !DISubroutineType(types: !29)
!780 = !{!"103"}
!781 = !DILocalVariable(arg: 1, scope: !778, type: !9, flags: DIFlagArtificial | DIFlagObjectPointer)
!782 = !DILocation(line: 0, scope: !778)
!783 = !DILocalVariable(arg: 2, scope: !778, type: !9, flags: DIFlagArtificial)
!784 = !DILocation(line: 183, column: 33, scope: !778)
!785 = !DILocation(line: 183, column: 31, scope: !778)
!786 = !DILocation(line: 183, column: 36, scope: !778)
!787 = distinct !DISubprogram(name: "print_results", scope: !788, file: !788, line: 10, type: !789, isLocal: false, isDefinition: true, scopeLine: 14, flags: DIFlagPrototyped, isOptimized: false, unit: !21, variables: !29)
!788 = !DIFile(filename: "print_results.c", directory: "/home/amiryousefi/llvmTemp/Codes/NAS/NPB3.3-OMP-C/common")
!789 = !DISubroutineType(types: !790)
!790 = !{null, !59, !60, !31, !31, !31, !31, !13, !13, !59, !791, !59, !59, !59, !59, !59, !59, !59, !59, !59}
!791 = !DIDerivedType(tag: DW_TAG_typedef, name: "logical", file: !25, line: 4, baseType: !24)
!792 = !DILocalVariable(name: "name", arg: 1, scope: !787, file: !788, line: 10, type: !59)
!793 = !DILocation(line: 10, column: 26, scope: !787)
!794 = !DILocalVariable(name: "class", arg: 2, scope: !787, file: !788, line: 10, type: !60)
!795 = !DILocation(line: 10, column: 37, scope: !787)
!796 = !DILocalVariable(name: "n1", arg: 3, scope: !787, file: !788, line: 10, type: !31)
!797 = !DILocation(line: 10, column: 48, scope: !787)
!798 = !DILocalVariable(name: "n2", arg: 4, scope: !787, file: !788, line: 10, type: !31)
!799 = !DILocation(line: 10, column: 56, scope: !787)
!800 = !DILocalVariable(name: "n3", arg: 5, scope: !787, file: !788, line: 10, type: !31)
!801 = !DILocation(line: 10, column: 64, scope: !787)
!802 = !DILocalVariable(name: "niter", arg: 6, scope: !787, file: !788, line: 10, type: !31)
!803 = !DILocation(line: 10, column: 72, scope: !787)
!804 = !DILocalVariable(name: "t", arg: 7, scope: !787, file: !788, line: 11, type: !13)
!805 = !DILocation(line: 11, column: 12, scope: !787)
!806 = !DILocalVariable(name: "mops", arg: 8, scope: !787, file: !788, line: 11, type: !13)
!807 = !DILocation(line: 11, column: 22, scope: !787)
!808 = !DILocalVariable(name: "optype", arg: 9, scope: !787, file: !788, line: 11, type: !59)
!809 = !DILocation(line: 11, column: 34, scope: !787)
!810 = !DILocalVariable(name: "verified", arg: 10, scope: !787, file: !788, line: 11, type: !791)
!811 = !DILocation(line: 11, column: 50, scope: !787)
!812 = !DILocalVariable(name: "npbversion", arg: 11, scope: !787, file: !788, line: 11, type: !59)
!813 = !DILocation(line: 11, column: 66, scope: !787)
!814 = !DILocalVariable(name: "compiletime", arg: 12, scope: !787, file: !788, line: 12, type: !59)
!815 = !DILocation(line: 12, column: 11, scope: !787)
!816 = !DILocalVariable(name: "cs1", arg: 13, scope: !787, file: !788, line: 12, type: !59)
!817 = !DILocation(line: 12, column: 30, scope: !787)
!818 = !DILocalVariable(name: "cs2", arg: 14, scope: !787, file: !788, line: 12, type: !59)
!819 = !DILocation(line: 12, column: 41, scope: !787)
!820 = !DILocalVariable(name: "cs3", arg: 15, scope: !787, file: !788, line: 12, type: !59)
!821 = !DILocation(line: 12, column: 52, scope: !787)
!822 = !DILocalVariable(name: "cs4", arg: 16, scope: !787, file: !788, line: 12, type: !59)
!823 = !DILocation(line: 12, column: 63, scope: !787)
!824 = !DILocalVariable(name: "cs5", arg: 17, scope: !787, file: !788, line: 12, type: !59)
!825 = !DILocation(line: 12, column: 74, scope: !787)
!826 = !DILocalVariable(name: "cs6", arg: 18, scope: !787, file: !788, line: 13, type: !59)
!827 = !DILocation(line: 13, column: 11, scope: !787)
!828 = !DILocalVariable(name: "cs7", arg: 19, scope: !787, file: !788, line: 13, type: !59)
!829 = !DILocation(line: 13, column: 22, scope: !787)
!830 = !DILocalVariable(name: "size", scope: !787, file: !788, line: 15, type: !129)
!831 = !DILocation(line: 15, column: 8, scope: !787)
!832 = !DILocalVariable(name: "j", scope: !787, file: !788, line: 16, type: !31)
!833 = !DILocation(line: 16, column: 7, scope: !787)
!834 = !DILocalVariable(name: "num_threads", scope: !787, file: !788, line: 17, type: !31)
!835 = !DILocation(line: 17, column: 7, scope: !787)
!836 = !DILocalVariable(name: "max_threads", scope: !787, file: !788, line: 17, type: !31)
!837 = !DILocation(line: 17, column: 20, scope: !787)
!838 = !DILocation(line: 19, column: 15, scope: !787)
!839 = !DILocation(line: 20, column: 15, scope: !787)
!840 = !DILocation(line: 24, column: 17, scope: !787)
!841 = !DILocation(line: 24, column: 15, scope: !787)
!842 = !DILocation(line: 25, column: 9, scope: !787)
!843 = !DILocation(line: 33, column: 45, scope: !787)
!844 = !DILocation(line: 33, column: 3, scope: !787)
!845 = !DILocation(line: 34, column: 52, scope: !787)
!846 = !DILocation(line: 34, column: 3, scope: !787)
!847 = !DILocation(line: 41, column: 10, scope: !848)
!848 = distinct !DILexicalBlock(scope: !787, file: !788, line: 41, column: 8)
!849 = !DILocation(line: 41, column: 13, scope: !848)
!850 = !DILocation(line: 41, column: 20, scope: !848)
!851 = !DILocation(line: 41, column: 25, scope: !852)
!852 = !DILexicalBlockFile(scope: !848, file: !788, discriminator: 1)
!853 = !DILocation(line: 41, column: 28, scope: !852)
!854 = !DILocation(line: 41, column: 8, scope: !852)
!855 = !DILocation(line: 42, column: 12, scope: !856)
!856 = distinct !DILexicalBlock(scope: !857, file: !788, line: 42, column: 10)
!857 = distinct !DILexicalBlock(scope: !848, file: !788, line: 41, column: 37)
!858 = !DILocation(line: 42, column: 20, scope: !856)
!859 = !DILocation(line: 42, column: 29, scope: !856)
!860 = !DILocation(line: 42, column: 34, scope: !861)
!861 = !DILexicalBlockFile(scope: !856, file: !788, discriminator: 1)
!862 = !DILocation(line: 42, column: 42, scope: !861)
!863 = !DILocation(line: 42, column: 10, scope: !861)
!864 = !DILocation(line: 43, column: 16, scope: !865)
!865 = distinct !DILexicalBlock(scope: !856, file: !788, line: 42, column: 53)
!866 = !DILocation(line: 43, column: 42, scope: !865)
!867 = !DILocation(line: 43, column: 33, scope: !865)
!868 = !DILocation(line: 43, column: 7, scope: !869)
!869 = !DILexicalBlockFile(scope: !865, file: !788, discriminator: 1)
!870 = !DILocation(line: 44, column: 9, scope: !865)
!871 = !DILocation(line: 45, column: 17, scope: !872)
!872 = distinct !DILexicalBlock(scope: !865, file: !788, line: 45, column: 12)
!873 = !DILocation(line: 45, column: 12, scope: !872)
!874 = !DILocation(line: 45, column: 20, scope: !872)
!875 = !DILocation(line: 45, column: 12, scope: !865)
!876 = !DILocation(line: 46, column: 14, scope: !877)
!877 = distinct !DILexicalBlock(scope: !872, file: !788, line: 45, column: 29)
!878 = !DILocation(line: 46, column: 9, scope: !877)
!879 = !DILocation(line: 46, column: 17, scope: !877)
!880 = !DILocation(line: 47, column: 10, scope: !877)
!881 = !DILocation(line: 48, column: 7, scope: !877)
!882 = !DILocation(line: 49, column: 12, scope: !865)
!883 = !DILocation(line: 49, column: 13, scope: !865)
!884 = !DILocation(line: 49, column: 7, scope: !865)
!885 = !DILocation(line: 49, column: 17, scope: !865)
!886 = !DILocation(line: 50, column: 53, scope: !865)
!887 = !DILocation(line: 50, column: 7, scope: !865)
!888 = !DILocation(line: 51, column: 5, scope: !865)
!889 = !DILocation(line: 52, column: 56, scope: !890)
!890 = distinct !DILexicalBlock(scope: !856, file: !788, line: 51, column: 12)
!891 = !DILocation(line: 52, column: 7, scope: !890)
!892 = !DILocation(line: 54, column: 3, scope: !857)
!893 = !DILocation(line: 55, column: 59, scope: !894)
!894 = distinct !DILexicalBlock(scope: !848, file: !788, line: 54, column: 10)
!895 = !DILocation(line: 55, column: 63, scope: !894)
!896 = !DILocation(line: 55, column: 67, scope: !894)
!897 = !DILocation(line: 55, column: 5, scope: !894)
!898 = !DILocation(line: 58, column: 52, scope: !787)
!899 = !DILocation(line: 58, column: 3, scope: !787)
!900 = !DILocation(line: 59, column: 55, scope: !787)
!901 = !DILocation(line: 59, column: 3, scope: !787)
!902 = !DILocation(line: 61, column: 52, scope: !787)
!903 = !DILocation(line: 61, column: 3, scope: !787)
!904 = !DILocation(line: 62, column: 52, scope: !787)
!905 = !DILocation(line: 62, column: 3, scope: !787)
!906 = !DILocation(line: 63, column: 8, scope: !907)
!907 = distinct !DILexicalBlock(scope: !787, file: !788, line: 63, column: 8)
!908 = !DILocation(line: 63, column: 23, scope: !907)
!909 = !DILocation(line: 63, column: 20, scope: !907)
!910 = !DILocation(line: 63, column: 8, scope: !787)
!911 = !DILocation(line: 64, column: 5, scope: !907)
!912 = !DILocation(line: 66, column: 52, scope: !787)
!913 = !DILocation(line: 66, column: 3, scope: !787)
!914 = !DILocation(line: 67, column: 52, scope: !787)
!915 = !DILocation(line: 67, column: 65, scope: !787)
!916 = !DILocation(line: 67, column: 57, scope: !787)
!917 = !DILocation(line: 67, column: 56, scope: !787)
!918 = !DILocation(line: 67, column: 3, scope: !787)
!919 = !DILocation(line: 69, column: 40, scope: !787)
!920 = !DILocation(line: 69, column: 3, scope: !787)
!921 = !DILocation(line: 70, column: 8, scope: !922)
!922 = distinct !DILexicalBlock(scope: !787, file: !788, line: 70, column: 8)
!923 = !DILocation(line: 70, column: 8, scope: !787)
!924 = !DILocation(line: 71, column: 5, scope: !922)
!925 = !DILocation(line: 73, column: 5, scope: !922)
!926 = !DILocation(line: 74, column: 52, scope: !787)
!927 = !DILocation(line: 74, column: 3, scope: !787)
!928 = !DILocation(line: 75, column: 52, scope: !787)
!929 = !DILocation(line: 75, column: 3, scope: !787)
!930 = !DILocation(line: 78, column: 38, scope: !787)
!931 = !DILocation(line: 77, column: 3, scope: !787)
!932 = !DILocation(line: 79, column: 38, scope: !787)
!933 = !DILocation(line: 79, column: 3, scope: !787)
!934 = !DILocation(line: 80, column: 38, scope: !787)
!935 = !DILocation(line: 80, column: 3, scope: !787)
!936 = !DILocation(line: 81, column: 38, scope: !787)
!937 = !DILocation(line: 81, column: 3, scope: !787)
!938 = !DILocation(line: 82, column: 38, scope: !787)
!939 = !DILocation(line: 82, column: 3, scope: !787)
!940 = !DILocation(line: 83, column: 38, scope: !787)
!941 = !DILocation(line: 83, column: 3, scope: !787)
!942 = !DILocation(line: 84, column: 38, scope: !787)
!943 = !DILocation(line: 84, column: 3, scope: !787)
!944 = !DILocation(line: 86, column: 3, scope: !787)
!945 = !DILocation(line: 92, column: 1, scope: !787)
!946 = distinct !DISubprogram(name: ".omp_outlined.", scope: !22, file: !22, line: 25, type: !947, isLocal: true, isDefinition: true, scopeLine: 26, flags: DIFlagPrototyped, isOptimized: false, unit: !21, variables: !29)
!947 = !DISubroutineType(types: !948)
!948 = !{null, !431, !431, !486}
!949 = !{!"104"}
!950 = !DILocalVariable(name: ".global_tid.", arg: 1, scope: !946, type: !431, flags: DIFlagArtificial | DIFlagObjectPointer)
!951 = !DILocation(line: 0, scope: !946)
!952 = !DILocalVariable(name: ".bound_tid.", arg: 2, scope: !946, type: !431, flags: DIFlagArtificial)
!953 = !DILocalVariable(name: "num_threads", arg: 3, scope: !946, type: !486, flags: DIFlagArtificial)
!954 = !DILocation(line: 26, column: 3, scope: !955)
!955 = !DILexicalBlockFile(scope: !946, file: !788, discriminator: 0)
!956 = !DILocation(line: 27, column: 13, scope: !957)
!957 = distinct !DILexicalBlock(scope: !955, file: !788, line: 26, column: 3)
!958 = !DILocation(line: 28, column: 19, scope: !959)
!959 = distinct !DILexicalBlock(scope: !957, file: !788, line: 27, column: 13)
!960 = !DILocation(line: 28, column: 17, scope: !959)
!961 = !DILocation(line: 28, column: 5, scope: !962)
!962 = !DILexicalBlockFile(scope: !959, file: !788, discriminator: 1)
!963 = !DILocation(line: 28, column: 5, scope: !959)
!964 = !DILocation(line: 29, column: 3, scope: !955)
!965 = distinct !DISubprogram(name: "randlc", scope: !966, file: !966, line: 4, type: !967, isLocal: false, isDefinition: true, scopeLine: 5, flags: DIFlagPrototyped, isOptimized: false, unit: !27, variables: !29)
!966 = !DIFile(filename: "randdp.c", directory: "/home/amiryousefi/llvmTemp/Codes/NAS/NPB3.3-OMP-C/common")
!967 = !DISubroutineType(types: !968)
!968 = !{!13, !51, !13}
!969 = !DILocalVariable(name: "x", arg: 1, scope: !965, file: !966, line: 4, type: !51)
!970 = !DILocation(line: 4, column: 24, scope: !965)
!971 = !DILocalVariable(name: "a", arg: 2, scope: !965, file: !966, line: 4, type: !13)
!972 = !DILocation(line: 4, column: 34, scope: !965)
!973 = !DILocalVariable(name: "r23", scope: !965, file: !966, line: 36, type: !974)
!974 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !13)
!975 = !DILocation(line: 36, column: 16, scope: !965)
!976 = !DILocalVariable(name: "r46", scope: !965, file: !966, line: 37, type: !974)
!977 = !DILocation(line: 37, column: 16, scope: !965)
!978 = !DILocalVariable(name: "t23", scope: !965, file: !966, line: 38, type: !974)
!979 = !DILocation(line: 38, column: 16, scope: !965)
!980 = !DILocalVariable(name: "t46", scope: !965, file: !966, line: 39, type: !974)
!981 = !DILocation(line: 39, column: 16, scope: !965)
!982 = !DILocalVariable(name: "t1", scope: !965, file: !966, line: 41, type: !13)
!983 = !DILocation(line: 41, column: 10, scope: !965)
!984 = !DILocalVariable(name: "t2", scope: !965, file: !966, line: 41, type: !13)
!985 = !DILocation(line: 41, column: 14, scope: !965)
!986 = !DILocalVariable(name: "t3", scope: !965, file: !966, line: 41, type: !13)
!987 = !DILocation(line: 41, column: 18, scope: !965)
!988 = !DILocalVariable(name: "t4", scope: !965, file: !966, line: 41, type: !13)
!989 = !DILocation(line: 41, column: 22, scope: !965)
!990 = !DILocalVariable(name: "a1", scope: !965, file: !966, line: 41, type: !13)
!991 = !DILocation(line: 41, column: 26, scope: !965)
!992 = !DILocalVariable(name: "a2", scope: !965, file: !966, line: 41, type: !13)
!993 = !DILocation(line: 41, column: 30, scope: !965)
!994 = !DILocalVariable(name: "x1", scope: !965, file: !966, line: 41, type: !13)
!995 = !DILocation(line: 41, column: 34, scope: !965)
!996 = !DILocalVariable(name: "x2", scope: !965, file: !966, line: 41, type: !13)
!997 = !DILocation(line: 41, column: 38, scope: !965)
!998 = !DILocalVariable(name: "z", scope: !965, file: !966, line: 41, type: !13)
!999 = !DILocation(line: 41, column: 42, scope: !965)
!1000 = !DILocalVariable(name: "r", scope: !965, file: !966, line: 42, type: !13)
!1001 = !DILocation(line: 42, column: 10, scope: !965)
!1002 = !DILocation(line: 47, column: 14, scope: !965)
!1003 = !DILocation(line: 47, column: 12, scope: !965)
!1004 = !DILocation(line: 47, column: 6, scope: !965)
!1005 = !DILocation(line: 48, column: 14, scope: !965)
!1006 = !DILocation(line: 48, column: 8, scope: !965)
!1007 = !DILocation(line: 48, column: 6, scope: !965)
!1008 = !DILocation(line: 49, column: 8, scope: !965)
!1009 = !DILocation(line: 49, column: 18, scope: !965)
!1010 = !DILocation(line: 49, column: 16, scope: !965)
!1011 = !DILocation(line: 49, column: 10, scope: !965)
!1012 = !DILocation(line: 49, column: 6, scope: !965)
!1013 = !DILocation(line: 56, column: 16, scope: !965)
!1014 = !DILocation(line: 56, column: 15, scope: !965)
!1015 = !DILocation(line: 56, column: 12, scope: !965)
!1016 = !DILocation(line: 56, column: 6, scope: !965)
!1017 = !DILocation(line: 57, column: 14, scope: !965)
!1018 = !DILocation(line: 57, column: 8, scope: !965)
!1019 = !DILocation(line: 57, column: 6, scope: !965)
!1020 = !DILocation(line: 58, column: 9, scope: !965)
!1021 = !DILocation(line: 58, column: 8, scope: !965)
!1022 = !DILocation(line: 58, column: 19, scope: !965)
!1023 = !DILocation(line: 58, column: 17, scope: !965)
!1024 = !DILocation(line: 58, column: 11, scope: !965)
!1025 = !DILocation(line: 58, column: 6, scope: !965)
!1026 = !DILocation(line: 59, column: 8, scope: !965)
!1027 = !DILocation(line: 59, column: 13, scope: !965)
!1028 = !DILocation(line: 59, column: 11, scope: !965)
!1029 = !DILocation(line: 59, column: 18, scope: !965)
!1030 = !DILocation(line: 59, column: 23, scope: !965)
!1031 = !DILocation(line: 59, column: 21, scope: !965)
!1032 = !DILocation(line: 59, column: 16, scope: !965)
!1033 = !DILocation(line: 59, column: 6, scope: !965)
!1034 = !DILocation(line: 60, column: 21, scope: !965)
!1035 = !DILocation(line: 60, column: 19, scope: !965)
!1036 = !DILocation(line: 60, column: 8, scope: !965)
!1037 = !DILocation(line: 60, column: 6, scope: !965)
!1038 = !DILocation(line: 61, column: 7, scope: !965)
!1039 = !DILocation(line: 61, column: 18, scope: !965)
!1040 = !DILocation(line: 61, column: 16, scope: !965)
!1041 = !DILocation(line: 61, column: 10, scope: !965)
!1042 = !DILocation(line: 61, column: 5, scope: !965)
!1043 = !DILocation(line: 62, column: 14, scope: !965)
!1044 = !DILocation(line: 62, column: 12, scope: !965)
!1045 = !DILocation(line: 62, column: 18, scope: !965)
!1046 = !DILocation(line: 62, column: 23, scope: !965)
!1047 = !DILocation(line: 62, column: 21, scope: !965)
!1048 = !DILocation(line: 62, column: 16, scope: !965)
!1049 = !DILocation(line: 62, column: 6, scope: !965)
!1050 = !DILocation(line: 63, column: 21, scope: !965)
!1051 = !DILocation(line: 63, column: 19, scope: !965)
!1052 = !DILocation(line: 63, column: 8, scope: !965)
!1053 = !DILocation(line: 63, column: 6, scope: !965)
!1054 = !DILocation(line: 64, column: 8, scope: !965)
!1055 = !DILocation(line: 64, column: 19, scope: !965)
!1056 = !DILocation(line: 64, column: 17, scope: !965)
!1057 = !DILocation(line: 64, column: 11, scope: !965)
!1058 = !DILocation(line: 64, column: 4, scope: !965)
!1059 = !DILocation(line: 64, column: 6, scope: !965)
!1060 = !DILocation(line: 65, column: 15, scope: !965)
!1061 = !DILocation(line: 65, column: 14, scope: !965)
!1062 = !DILocation(line: 65, column: 11, scope: !965)
!1063 = !DILocation(line: 65, column: 5, scope: !965)
!1064 = !DILocation(line: 67, column: 10, scope: !965)
!1065 = !DILocation(line: 67, column: 3, scope: !965)
!1066 = distinct !DISubprogram(name: "vranlc", scope: !966, file: !966, line: 71, type: !1067, isLocal: false, isDefinition: true, scopeLine: 72, flags: DIFlagPrototyped, isOptimized: false, unit: !27, variables: !29)
!1067 = !DISubroutineType(types: !1068)
!1068 = !{null, !31, !51, !13, !51}
!1069 = !DILocalVariable(name: "n", arg: 1, scope: !1066, file: !966, line: 71, type: !31)
!1070 = !DILocation(line: 71, column: 18, scope: !1066)
!1071 = !DILocalVariable(name: "x", arg: 2, scope: !1066, file: !966, line: 71, type: !51)
!1072 = !DILocation(line: 71, column: 29, scope: !1066)
!1073 = !DILocalVariable(name: "a", arg: 3, scope: !1066, file: !966, line: 71, type: !13)
!1074 = !DILocation(line: 71, column: 39, scope: !1066)
!1075 = !DILocalVariable(name: "y", arg: 4, scope: !1066, file: !966, line: 71, type: !51)
!1076 = !DILocation(line: 71, column: 49, scope: !1066)
!1077 = !DILocalVariable(name: "r23", scope: !1066, file: !966, line: 103, type: !974)
!1078 = !DILocation(line: 103, column: 16, scope: !1066)
!1079 = !DILocalVariable(name: "r46", scope: !1066, file: !966, line: 104, type: !974)
!1080 = !DILocation(line: 104, column: 16, scope: !1066)
!1081 = !DILocalVariable(name: "t23", scope: !1066, file: !966, line: 105, type: !974)
!1082 = !DILocation(line: 105, column: 16, scope: !1066)
!1083 = !DILocalVariable(name: "t46", scope: !1066, file: !966, line: 106, type: !974)
!1084 = !DILocation(line: 106, column: 16, scope: !1066)
!1085 = !DILocalVariable(name: "t1", scope: !1066, file: !966, line: 108, type: !13)
!1086 = !DILocation(line: 108, column: 10, scope: !1066)
!1087 = !DILocalVariable(name: "t2", scope: !1066, file: !966, line: 108, type: !13)
!1088 = !DILocation(line: 108, column: 14, scope: !1066)
!1089 = !DILocalVariable(name: "t3", scope: !1066, file: !966, line: 108, type: !13)
!1090 = !DILocation(line: 108, column: 18, scope: !1066)
!1091 = !DILocalVariable(name: "t4", scope: !1066, file: !966, line: 108, type: !13)
!1092 = !DILocation(line: 108, column: 22, scope: !1066)
!1093 = !DILocalVariable(name: "a1", scope: !1066, file: !966, line: 108, type: !13)
!1094 = !DILocation(line: 108, column: 26, scope: !1066)
!1095 = !DILocalVariable(name: "a2", scope: !1066, file: !966, line: 108, type: !13)
!1096 = !DILocation(line: 108, column: 30, scope: !1066)
!1097 = !DILocalVariable(name: "x1", scope: !1066, file: !966, line: 108, type: !13)
!1098 = !DILocation(line: 108, column: 34, scope: !1066)
!1099 = !DILocalVariable(name: "x2", scope: !1066, file: !966, line: 108, type: !13)
!1100 = !DILocation(line: 108, column: 38, scope: !1066)
!1101 = !DILocalVariable(name: "z", scope: !1066, file: !966, line: 108, type: !13)
!1102 = !DILocation(line: 108, column: 42, scope: !1066)
!1103 = !DILocalVariable(name: "i", scope: !1066, file: !966, line: 110, type: !31)
!1104 = !DILocation(line: 110, column: 7, scope: !1066)
!1105 = !DILocation(line: 115, column: 14, scope: !1066)
!1106 = !DILocation(line: 115, column: 12, scope: !1066)
!1107 = !DILocation(line: 115, column: 6, scope: !1066)
!1108 = !DILocation(line: 116, column: 14, scope: !1066)
!1109 = !DILocation(line: 116, column: 8, scope: !1066)
!1110 = !DILocation(line: 116, column: 6, scope: !1066)
!1111 = !DILocation(line: 117, column: 8, scope: !1066)
!1112 = !DILocation(line: 117, column: 18, scope: !1066)
!1113 = !DILocation(line: 117, column: 16, scope: !1066)
!1114 = !DILocation(line: 117, column: 10, scope: !1066)
!1115 = !DILocation(line: 117, column: 6, scope: !1066)
!1116 = !DILocation(line: 122, column: 11, scope: !1117)
!1117 = distinct !DILexicalBlock(scope: !1066, file: !966, line: 122, column: 3)
!1118 = !DILocation(line: 122, column: 9, scope: !1117)
!1119 = !DILocation(line: 122, column: 16, scope: !1120)
!1120 = !DILexicalBlockFile(scope: !1121, file: !966, discriminator: 1)
!1121 = distinct !DILexicalBlock(scope: !1117, file: !966, line: 122, column: 3)
!1122 = !DILocation(line: 122, column: 20, scope: !1120)
!1123 = !DILocation(line: 122, column: 18, scope: !1120)
!1124 = !DILocation(line: 122, column: 3, scope: !1120)
!1125 = !DILocation(line: 128, column: 18, scope: !1126)
!1126 = distinct !DILexicalBlock(scope: !1121, file: !966, line: 122, column: 29)
!1127 = !DILocation(line: 128, column: 17, scope: !1126)
!1128 = !DILocation(line: 128, column: 14, scope: !1126)
!1129 = !DILocation(line: 128, column: 8, scope: !1126)
!1130 = !DILocation(line: 129, column: 16, scope: !1126)
!1131 = !DILocation(line: 129, column: 10, scope: !1126)
!1132 = !DILocation(line: 129, column: 8, scope: !1126)
!1133 = !DILocation(line: 130, column: 11, scope: !1126)
!1134 = !DILocation(line: 130, column: 10, scope: !1126)
!1135 = !DILocation(line: 130, column: 21, scope: !1126)
!1136 = !DILocation(line: 130, column: 19, scope: !1126)
!1137 = !DILocation(line: 130, column: 13, scope: !1126)
!1138 = !DILocation(line: 130, column: 8, scope: !1126)
!1139 = !DILocation(line: 131, column: 10, scope: !1126)
!1140 = !DILocation(line: 131, column: 15, scope: !1126)
!1141 = !DILocation(line: 131, column: 13, scope: !1126)
!1142 = !DILocation(line: 131, column: 20, scope: !1126)
!1143 = !DILocation(line: 131, column: 25, scope: !1126)
!1144 = !DILocation(line: 131, column: 23, scope: !1126)
!1145 = !DILocation(line: 131, column: 18, scope: !1126)
!1146 = !DILocation(line: 131, column: 8, scope: !1126)
!1147 = !DILocation(line: 132, column: 23, scope: !1126)
!1148 = !DILocation(line: 132, column: 21, scope: !1126)
!1149 = !DILocation(line: 132, column: 10, scope: !1126)
!1150 = !DILocation(line: 132, column: 8, scope: !1126)
!1151 = !DILocation(line: 133, column: 9, scope: !1126)
!1152 = !DILocation(line: 133, column: 20, scope: !1126)
!1153 = !DILocation(line: 133, column: 18, scope: !1126)
!1154 = !DILocation(line: 133, column: 12, scope: !1126)
!1155 = !DILocation(line: 133, column: 7, scope: !1126)
!1156 = !DILocation(line: 134, column: 16, scope: !1126)
!1157 = !DILocation(line: 134, column: 14, scope: !1126)
!1158 = !DILocation(line: 134, column: 20, scope: !1126)
!1159 = !DILocation(line: 134, column: 25, scope: !1126)
!1160 = !DILocation(line: 134, column: 23, scope: !1126)
!1161 = !DILocation(line: 134, column: 18, scope: !1126)
!1162 = !DILocation(line: 134, column: 8, scope: !1126)
!1163 = !DILocation(line: 135, column: 23, scope: !1126)
!1164 = !DILocation(line: 135, column: 21, scope: !1126)
!1165 = !DILocation(line: 135, column: 10, scope: !1126)
!1166 = !DILocation(line: 135, column: 8, scope: !1126)
!1167 = !DILocation(line: 136, column: 10, scope: !1126)
!1168 = !DILocation(line: 136, column: 21, scope: !1126)
!1169 = !DILocation(line: 136, column: 19, scope: !1126)
!1170 = !DILocation(line: 136, column: 13, scope: !1126)
!1171 = !DILocation(line: 136, column: 6, scope: !1126)
!1172 = !DILocation(line: 136, column: 8, scope: !1126)
!1173 = !DILocation(line: 137, column: 20, scope: !1126)
!1174 = !DILocation(line: 137, column: 19, scope: !1126)
!1175 = !DILocation(line: 137, column: 16, scope: !1126)
!1176 = !DILocation(line: 137, column: 7, scope: !1126)
!1177 = !DILocation(line: 137, column: 5, scope: !1126)
!1178 = !DILocation(line: 137, column: 10, scope: !1126)
!1179 = !DILocation(line: 138, column: 3, scope: !1126)
!1180 = !DILocation(line: 122, column: 24, scope: !1181)
!1181 = !DILexicalBlockFile(scope: !1121, file: !966, discriminator: 2)
!1182 = !DILocation(line: 122, column: 3, scope: !1181)
!1183 = distinct !{!1183, !1184}
!1184 = !DILocation(line: 122, column: 3, scope: !1066)
!1185 = !DILocation(line: 140, column: 3, scope: !1066)
!1186 = distinct !DISubprogram(name: "timer_clear", scope: !36, file: !36, line: 37, type: !1187, isLocal: false, isDefinition: true, scopeLine: 38, flags: DIFlagPrototyped, isOptimized: false, unit: !32, variables: !29)
!1187 = !DISubroutineType(types: !1188)
!1188 = !{null, !31}
!1189 = !DILocalVariable(name: "n", arg: 1, scope: !1186, file: !36, line: 37, type: !31)
!1190 = !DILocation(line: 37, column: 23, scope: !1186)
!1191 = !DILocation(line: 39, column: 13, scope: !1186)
!1192 = !DILocation(line: 39, column: 5, scope: !1186)
!1193 = !DILocation(line: 39, column: 16, scope: !1186)
!1194 = !DILocation(line: 40, column: 11, scope: !1186)
!1195 = !DILocation(line: 40, column: 5, scope: !1186)
!1196 = !DILocation(line: 40, column: 14, scope: !1186)
!1197 = !DILocation(line: 41, column: 1, scope: !1186)
!1198 = distinct !DISubprogram(name: "timer_start", scope: !36, file: !36, line: 47, type: !1187, isLocal: false, isDefinition: true, scopeLine: 48, flags: DIFlagPrototyped, isOptimized: false, unit: !32, variables: !29)
!1199 = !DILocalVariable(name: "n", arg: 1, scope: !1198, file: !36, line: 47, type: !31)
!1200 = !DILocation(line: 47, column: 23, scope: !1198)
!1201 = !DILocation(line: 49, column: 16, scope: !1198)
!1202 = !DILocation(line: 49, column: 11, scope: !1198)
!1203 = !DILocation(line: 49, column: 5, scope: !1198)
!1204 = !DILocation(line: 49, column: 5, scope: !1205)
!1205 = !DILexicalBlockFile(scope: !1198, file: !36, discriminator: 1)
!1206 = !DILocation(line: 49, column: 14, scope: !1198)
!1207 = !DILocation(line: 50, column: 1, scope: !1198)
!1208 = distinct !DISubprogram(name: "elapsed_time", scope: !36, file: !36, line: 14, type: !1209, isLocal: true, isDefinition: true, scopeLine: 15, flags: DIFlagPrototyped, isOptimized: false, unit: !32, variables: !29)
!1209 = !DISubroutineType(types: !26)
!1210 = !DILocalVariable(name: "t", scope: !1208, file: !36, line: 16, type: !13)
!1211 = !DILocation(line: 16, column: 12, scope: !1208)
!1212 = !DILocation(line: 20, column: 9, scope: !1208)
!1213 = !DILocation(line: 20, column: 7, scope: !1208)
!1214 = !DILocation(line: 24, column: 13, scope: !1208)
!1215 = !DILocation(line: 24, column: 5, scope: !1208)
!1216 = distinct !DISubprogram(name: "timer_stop", scope: !36, file: !36, line: 56, type: !1187, isLocal: false, isDefinition: true, scopeLine: 57, flags: DIFlagPrototyped, isOptimized: false, unit: !32, variables: !29)
!1217 = !DILocalVariable(name: "n", arg: 1, scope: !1216, file: !36, line: 56, type: !31)
!1218 = !DILocation(line: 56, column: 22, scope: !1216)
!1219 = !DILocalVariable(name: "t", scope: !1216, file: !36, line: 58, type: !13)
!1220 = !DILocation(line: 58, column: 12, scope: !1216)
!1221 = !DILocalVariable(name: "now", scope: !1216, file: !36, line: 58, type: !13)
!1222 = !DILocation(line: 58, column: 15, scope: !1216)
!1223 = !DILocation(line: 60, column: 11, scope: !1216)
!1224 = !DILocation(line: 60, column: 9, scope: !1216)
!1225 = !DILocation(line: 61, column: 9, scope: !1216)
!1226 = !DILocation(line: 61, column: 21, scope: !1216)
!1227 = !DILocation(line: 61, column: 15, scope: !1216)
!1228 = !DILocation(line: 61, column: 13, scope: !1216)
!1229 = !DILocation(line: 61, column: 7, scope: !1216)
!1230 = !DILocation(line: 62, column: 19, scope: !1216)
!1231 = !DILocation(line: 62, column: 13, scope: !1216)
!1232 = !DILocation(line: 62, column: 5, scope: !1216)
!1233 = !DILocation(line: 62, column: 16, scope: !1216)
!1234 = !DILocation(line: 63, column: 11, scope: !1216)
!1235 = !DILocation(line: 63, column: 5, scope: !1216)
!1236 = !DILocation(line: 63, column: 13, scope: !1216)
!1237 = !DILocation(line: 65, column: 1, scope: !1216)
!1238 = distinct !DISubprogram(name: "timer_read", scope: !36, file: !36, line: 71, type: !1239, isLocal: false, isDefinition: true, scopeLine: 72, flags: DIFlagPrototyped, isOptimized: false, unit: !32, variables: !29)
!1239 = !DISubroutineType(types: !1240)
!1240 = !{!13, !31}
!1241 = !DILocalVariable(name: "n", arg: 1, scope: !1238, file: !36, line: 71, type: !31)
!1242 = !DILocation(line: 71, column: 24, scope: !1238)
!1243 = !DILocation(line: 73, column: 21, scope: !1238)
!1244 = !DILocation(line: 73, column: 13, scope: !1238)
!1245 = !DILocation(line: 73, column: 5, scope: !1238)
!1246 = distinct !DISubprogram(name: "timer_count", scope: !36, file: !36, line: 76, type: !1247, isLocal: false, isDefinition: true, scopeLine: 77, flags: DIFlagPrototyped, isOptimized: false, unit: !32, variables: !29)
!1247 = !DISubroutineType(types: !1248)
!1248 = !{!43, !31}
!1249 = !DILocalVariable(name: "n", arg: 1, scope: !1246, file: !36, line: 76, type: !31)
!1250 = !DILocation(line: 76, column: 27, scope: !1246)
!1251 = !DILocation(line: 78, column: 18, scope: !1246)
!1252 = !DILocation(line: 78, column: 12, scope: !1246)
!1253 = !DILocation(line: 78, column: 5, scope: !1246)
!1254 = !DILocalVariable(name: "t", arg: 1, scope: !48, file: !45, line: 7, type: !51)
!1255 = !DILocation(line: 7, column: 20, scope: !48)
!1256 = !DILocalVariable(name: "tv", scope: !48, file: !45, line: 11, type: !1257)
!1257 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timeval", file: !1258, line: 30, size: 128, align: 64, elements: !1259)
!1258 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/time.h", directory: "/home/amiryousefi/llvmTemp/Codes/NAS/NPB3.3-OMP-C/common")
!1259 = !{!1260, !1263}
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !1257, file: !1258, line: 32, baseType: !1261, size: 64, align: 64)
!1261 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !1262, line: 139, baseType: !166)
!1262 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "/home/amiryousefi/llvmTemp/Codes/NAS/NPB3.3-OMP-C/common")
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !1257, file: !1258, line: 33, baseType: !1264, size: 64, align: 64, offset: 64)
!1264 = !DIDerivedType(tag: DW_TAG_typedef, name: "__suseconds_t", file: !1262, line: 141, baseType: !166)
!1265 = !DILocation(line: 11, column: 19, scope: !48)
!1266 = !DILocation(line: 12, column: 4, scope: !48)
!1267 = !DILocation(line: 13, column: 8, scope: !1268)
!1268 = distinct !DILexicalBlock(scope: !48, file: !45, line: 13, column: 8)
!1269 = !DILocation(line: 13, column: 12, scope: !1268)
!1270 = !DILocation(line: 13, column: 8, scope: !48)
!1271 = !DILocation(line: 13, column: 26, scope: !1272)
!1272 = !DILexicalBlockFile(scope: !1268, file: !45, discriminator: 1)
!1273 = !DILocation(line: 13, column: 23, scope: !1272)
!1274 = !DILocation(line: 13, column: 21, scope: !1272)
!1275 = !DILocation(line: 13, column: 17, scope: !1272)
!1276 = !DILocation(line: 14, column: 13, scope: !48)
!1277 = !DILocation(line: 14, column: 22, scope: !48)
!1278 = !DILocation(line: 14, column: 20, scope: !48)
!1279 = !DILocation(line: 14, column: 9, scope: !48)
!1280 = !DILocation(line: 14, column: 39, scope: !48)
!1281 = !DILocation(line: 14, column: 36, scope: !48)
!1282 = !DILocation(line: 14, column: 35, scope: !48)
!1283 = !DILocation(line: 14, column: 27, scope: !48)
!1284 = !DILocation(line: 14, column: 5, scope: !48)
!1285 = !DILocation(line: 14, column: 7, scope: !48)
!1286 = !DILocation(line: 15, column: 1, scope: !48)
